/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "/assets";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ function(module, exports, __webpack_require__) {

	window.App || (window.App = {});

	App.VisualizationEdit = __webpack_require__(1);

	$(document).on("page:change", function() {
	  var appVisualizationEdit;
	  if ($("body.nodes").length > 0) {
	    appVisualizationEdit = new App.VisualizationEdit;
	    appVisualizationEdit.render();
	    return $(window).resize(appVisualizationEdit.resize);
	  }
	});


/***/ },
/* 1 */
/***/ function(module, exports, __webpack_require__) {

	var NodesCollection, VisualizationEdit, VisualizationGraphView, VisualizationTableView,
	  bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

	NodesCollection = __webpack_require__(2);

	VisualizationGraphView = __webpack_require__(4);

	VisualizationTableView = __webpack_require__(163);

	VisualizationEdit = (function() {
	  VisualizationEdit.prototype.nodes = null;

	  VisualizationEdit.prototype.visualizationGraphView = null;

	  VisualizationEdit.prototype.visualizationTableView = null;

	  function VisualizationEdit() {
	    this.resize = bind(this.resize, this);
	    this.nodes = new NodesCollection();
	    this.visualizationGraphView = new VisualizationGraphView({
	      collection: this.nodes
	    });
	    this.visualizationGraphView.setElement('.visualization-graph-component');
	    this.visualizationTableView = new VisualizationTableView({
	      collection: this.nodes
	    });
	    this.visualizationTableView.setElement('.visualization-table-nodes');
	  }

	  VisualizationEdit.prototype.resize = function() {
	    var graphHeight, windowHeight;
	    windowHeight = $(window).height();
	    graphHeight = windowHeight - 50 - 64 - 64;
	    this.visualizationGraphView.$el.height(graphHeight);
	    $('.visualization-table').css('top', graphHeight + 64);
	    return $('.footer').css('top', graphHeight + 64);
	  };

	  VisualizationEdit.prototype.render = function() {
	    this.nodes.fetch();
	    return this.resize();
	  };

	  return VisualizationEdit;

	})();

	module.exports = VisualizationEdit;


/***/ },
/* 2 */
/***/ function(module, exports, __webpack_require__) {

	var Node, NodesCollection,
	  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
	  hasProp = {}.hasOwnProperty;

	Node = __webpack_require__(3);

	NodesCollection = (function(superClass) {
	  extend(NodesCollection, superClass);

	  function NodesCollection() {
	    return NodesCollection.__super__.constructor.apply(this, arguments);
	  }

	  NodesCollection.prototype.model = Node;

	  NodesCollection.prototype.url = '/api/nodes';

	  return NodesCollection;

	})(Backbone.Collection);

	module.exports = NodesCollection;


/***/ },
/* 3 */
/***/ function(module, exports) {

	var Node,
	  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
	  hasProp = {}.hasOwnProperty;

	Node = (function(superClass) {
	  extend(Node, superClass);

	  function Node() {
	    return Node.__super__.constructor.apply(this, arguments);
	  }

	  Node.prototype.paramRoot = 'node';

	  Node.prototype.defaults = {
	    name: null,
	    description: null,
	    visible: false,
	    node_type: null
	  };

	  return Node;

	})(Backbone.Model);

	module.exports = Node;


/***/ },
/* 4 */
/***/ function(module, exports, __webpack_require__) {

	var React, ReactDOM, VisualizationGraphComponent, VisualizationGraphView,
	  bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
	  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
	  hasProp = {}.hasOwnProperty;

	React = __webpack_require__(5);

	ReactDOM = __webpack_require__(161);

	VisualizationGraphComponent = __webpack_require__(162);

	VisualizationGraphView = (function(superClass) {
	  extend(VisualizationGraphView, superClass);

	  function VisualizationGraphView() {
	    this.onCollectionChange = bind(this.onCollectionChange, this);
	    this.onCollectionSync = bind(this.onCollectionSync, this);
	    return VisualizationGraphView.__super__.constructor.apply(this, arguments);
	  }

	  VisualizationGraphView.prototype.initialize = function() {
	    console.log('initialize GraphView');
	    return this.collection.once('sync', this.onCollectionSync, this);
	  };

	  VisualizationGraphView.prototype.onCollectionSync = function() {
	    this.collection.bind('change', this.onCollectionChange, this);
	    return this.render();
	  };

	  VisualizationGraphView.prototype.onCollectionChange = function(e) {};

	  VisualizationGraphView.prototype.render = function() {
	    console.log('render GraphView');
	    ReactDOM.render(React.createElement(VisualizationGraphComponent, {
	      data: this.collection.models
	    }), this.$el.get(0));
	    return this;
	  };

	  return VisualizationGraphView;

	})(Backbone.View);

	module.exports = VisualizationGraphView;


/***/ },
/* 5 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	module.exports = __webpack_require__(6);


/***/ },
/* 6 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule React
	 */

	'use strict';

	var ReactDOM = __webpack_require__(7);
	var ReactDOMServer = __webpack_require__(151);
	var ReactIsomorphic = __webpack_require__(155);

	var assign = __webpack_require__(43);
	var deprecated = __webpack_require__(160);

	// `version` will be added here by ReactIsomorphic.
	var React = {};

	assign(React, ReactIsomorphic);

	assign(React, {
	  // ReactDOM
	  findDOMNode: deprecated('findDOMNode', 'ReactDOM', 'react-dom', ReactDOM, ReactDOM.findDOMNode),
	  render: deprecated('render', 'ReactDOM', 'react-dom', ReactDOM, ReactDOM.render),
	  unmountComponentAtNode: deprecated('unmountComponentAtNode', 'ReactDOM', 'react-dom', ReactDOM, ReactDOM.unmountComponentAtNode),

	  // ReactDOMServer
	  renderToString: deprecated('renderToString', 'ReactDOMServer', 'react-dom/server', ReactDOMServer, ReactDOMServer.renderToString),
	  renderToStaticMarkup: deprecated('renderToStaticMarkup', 'ReactDOMServer', 'react-dom/server', ReactDOMServer, ReactDOMServer.renderToStaticMarkup)
	});

	React.__SECRET_DOM_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = ReactDOM;

	module.exports = React;

/***/ },
/* 7 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDOM
	 */

	/* globals __REACT_DEVTOOLS_GLOBAL_HOOK__*/

	'use strict';

	var ReactCurrentOwner = __webpack_require__(9);
	var ReactDOMTextComponent = __webpack_require__(10);
	var ReactDefaultInjection = __webpack_require__(74);
	var ReactInstanceHandles = __webpack_require__(48);
	var ReactMount = __webpack_require__(32);
	var ReactPerf = __webpack_require__(22);
	var ReactReconciler = __webpack_require__(53);
	var ReactUpdates = __webpack_require__(57);
	var ReactVersion = __webpack_require__(149);

	var findDOMNode = __webpack_require__(94);
	var renderSubtreeIntoContainer = __webpack_require__(150);
	var warning = __webpack_require__(29);

	ReactDefaultInjection.inject();

	var render = ReactPerf.measure('React', 'render', ReactMount.render);

	var React = {
	  findDOMNode: findDOMNode,
	  render: render,
	  unmountComponentAtNode: ReactMount.unmountComponentAtNode,
	  version: ReactVersion,

	  /* eslint-disable camelcase */
	  unstable_batchedUpdates: ReactUpdates.batchedUpdates,
	  unstable_renderSubtreeIntoContainer: renderSubtreeIntoContainer
	};

	// Inject the runtime into a devtools global hook regardless of browser.
	// Allows for debugging when the hook is injected on the page.
	/* eslint-enable camelcase */
	if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== 'undefined' && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.inject === 'function') {
	  __REACT_DEVTOOLS_GLOBAL_HOOK__.inject({
	    CurrentOwner: ReactCurrentOwner,
	    InstanceHandles: ReactInstanceHandles,
	    Mount: ReactMount,
	    Reconciler: ReactReconciler,
	    TextComponent: ReactDOMTextComponent
	  });
	}

	if (process.env.NODE_ENV !== 'production') {
	  var ExecutionEnvironment = __webpack_require__(13);
	  if (ExecutionEnvironment.canUseDOM && window.top === window.self) {

	    // First check if devtools is not installed
	    if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ === 'undefined') {
	      // If we're in Chrome or Firefox, provide a download link if not installed.
	      if (navigator.userAgent.indexOf('Chrome') > -1 && navigator.userAgent.indexOf('Edge') === -1 || navigator.userAgent.indexOf('Firefox') > -1) {
	        console.debug('Download the React DevTools for a better development experience: ' + 'https://fb.me/react-devtools');
	      }
	    }

	    // If we're in IE8, check to see if we are in compatibility mode and provide
	    // information on preventing compatibility mode
	    var ieCompatibilityMode = document.documentMode && document.documentMode < 8;

	    process.env.NODE_ENV !== 'production' ? warning(!ieCompatibilityMode, 'Internet Explorer is running in compatibility mode; please add the ' + 'following tag to your HTML to prevent this from happening: ' + '<meta http-equiv="X-UA-Compatible" content="IE=edge" />') : undefined;

	    var expectedFeatures = [
	    // shims
	    Array.isArray, Array.prototype.every, Array.prototype.forEach, Array.prototype.indexOf, Array.prototype.map, Date.now, Function.prototype.bind, Object.keys, String.prototype.split, String.prototype.trim,

	    // shams
	    Object.create, Object.freeze];

	    for (var i = 0; i < expectedFeatures.length; i++) {
	      if (!expectedFeatures[i]) {
	        console.error('One or more ES5 shim/shams expected by React are not available: ' + 'https://fb.me/react-warning-polyfills');
	        break;
	      }
	    }
	  }
	}

	module.exports = React;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(8)))

/***/ },
/* 8 */
/***/ function(module, exports) {

	// shim for using process in browser

	var process = module.exports = {};
	var queue = [];
	var draining = false;
	var currentQueue;
	var queueIndex = -1;

	function cleanUpNextTick() {
	    draining = false;
	    if (currentQueue.length) {
	        queue = currentQueue.concat(queue);
	    } else {
	        queueIndex = -1;
	    }
	    if (queue.length) {
	        drainQueue();
	    }
	}

	function drainQueue() {
	    if (draining) {
	        return;
	    }
	    var timeout = setTimeout(cleanUpNextTick);
	    draining = true;

	    var len = queue.length;
	    while(len) {
	        currentQueue = queue;
	        queue = [];
	        while (++queueIndex < len) {
	            if (currentQueue) {
	                currentQueue[queueIndex].run();
	            }
	        }
	        queueIndex = -1;
	        len = queue.length;
	    }
	    currentQueue = null;
	    draining = false;
	    clearTimeout(timeout);
	}

	process.nextTick = function (fun) {
	    var args = new Array(arguments.length - 1);
	    if (arguments.length > 1) {
	        for (var i = 1; i < arguments.length; i++) {
	            args[i - 1] = arguments[i];
	        }
	    }
	    queue.push(new Item(fun, args));
	    if (queue.length === 1 && !draining) {
	        setTimeout(drainQueue, 0);
	    }
	};

	// v8 likes predictible objects
	function Item(fun, array) {
	    this.fun = fun;
	    this.array = array;
	}
	Item.prototype.run = function () {
	    this.fun.apply(null, this.array);
	};
	process.title = 'browser';
	process.browser = true;
	process.env = {};
	process.argv = [];
	process.version = ''; // empty string to avoid regexp issues
	process.versions = {};

	function noop() {}

	process.on = noop;
	process.addListener = noop;
	process.once = noop;
	process.off = noop;
	process.removeListener = noop;
	process.removeAllListeners = noop;
	process.emit = noop;

	process.binding = function (name) {
	    throw new Error('process.binding is not supported');
	};

	process.cwd = function () { return '/' };
	process.chdir = function (dir) {
	    throw new Error('process.chdir is not supported');
	};
	process.umask = function() { return 0; };


/***/ },
/* 9 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactCurrentOwner
	 */

	'use strict';

	/**
	 * Keeps track of the current owner.
	 *
	 * The current owner is the component who should own any components that are
	 * currently being constructed.
	 */
	var ReactCurrentOwner = {

	  /**
	   * @internal
	   * @type {ReactComponent}
	   */
	  current: null

	};

	module.exports = ReactCurrentOwner;

/***/ },
/* 10 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDOMTextComponent
	 * @typechecks static-only
	 */

	'use strict';

	var DOMChildrenOperations = __webpack_require__(11);
	var DOMPropertyOperations = __webpack_require__(26);
	var ReactComponentBrowserEnvironment = __webpack_require__(30);
	var ReactMount = __webpack_require__(32);

	var assign = __webpack_require__(43);
	var escapeTextContentForBrowser = __webpack_require__(25);
	var setTextContent = __webpack_require__(24);
	var validateDOMNesting = __webpack_require__(73);

	/**
	 * Text nodes violate a couple assumptions that React makes about components:
	 *
	 *  - When mounting text into the DOM, adjacent text nodes are merged.
	 *  - Text nodes cannot be assigned a React root ID.
	 *
	 * This component is used to wrap strings in elements so that they can undergo
	 * the same reconciliation that is applied to elements.
	 *
	 * TODO: Investigate representing React components in the DOM with text nodes.
	 *
	 * @class ReactDOMTextComponent
	 * @extends ReactComponent
	 * @internal
	 */
	var ReactDOMTextComponent = function (props) {
	  // This constructor and its argument is currently used by mocks.
	};

	assign(ReactDOMTextComponent.prototype, {

	  /**
	   * @param {ReactText} text
	   * @internal
	   */
	  construct: function (text) {
	    // TODO: This is really a ReactText (ReactNode), not a ReactElement
	    this._currentElement = text;
	    this._stringText = '' + text;

	    // Properties
	    this._rootNodeID = null;
	    this._mountIndex = 0;
	  },

	  /**
	   * Creates the markup for this text node. This node is not intended to have
	   * any features besides containing text content.
	   *
	   * @param {string} rootID DOM ID of the root node.
	   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
	   * @return {string} Markup for this text node.
	   * @internal
	   */
	  mountComponent: function (rootID, transaction, context) {
	    if (process.env.NODE_ENV !== 'production') {
	      if (context[validateDOMNesting.ancestorInfoContextKey]) {
	        validateDOMNesting('span', null, context[validateDOMNesting.ancestorInfoContextKey]);
	      }
	    }

	    this._rootNodeID = rootID;
	    if (transaction.useCreateElement) {
	      var ownerDocument = context[ReactMount.ownerDocumentContextKey];
	      var el = ownerDocument.createElement('span');
	      DOMPropertyOperations.setAttributeForID(el, rootID);
	      // Populate node cache
	      ReactMount.getID(el);
	      setTextContent(el, this._stringText);
	      return el;
	    } else {
	      var escapedText = escapeTextContentForBrowser(this._stringText);

	      if (transaction.renderToStaticMarkup) {
	        // Normally we'd wrap this in a `span` for the reasons stated above, but
	        // since this is a situation where React won't take over (static pages),
	        // we can simply return the text as it is.
	        return escapedText;
	      }

	      return '<span ' + DOMPropertyOperations.createMarkupForID(rootID) + '>' + escapedText + '</span>';
	    }
	  },

	  /**
	   * Updates this component by updating the text content.
	   *
	   * @param {ReactText} nextText The next text content
	   * @param {ReactReconcileTransaction} transaction
	   * @internal
	   */
	  receiveComponent: function (nextText, transaction) {
	    if (nextText !== this._currentElement) {
	      this._currentElement = nextText;
	      var nextStringText = '' + nextText;
	      if (nextStringText !== this._stringText) {
	        // TODO: Save this as pending props and use performUpdateIfNecessary
	        // and/or updateComponent to do the actual update for consistency with
	        // other component types?
	        this._stringText = nextStringText;
	        var node = ReactMount.getNode(this._rootNodeID);
	        DOMChildrenOperations.updateTextContent(node, nextStringText);
	      }
	    }
	  },

	  unmountComponent: function () {
	    ReactComponentBrowserEnvironment.unmountIDFromEnvironment(this._rootNodeID);
	  }

	});

	module.exports = ReactDOMTextComponent;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(8)))

/***/ },
/* 11 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule DOMChildrenOperations
	 * @typechecks static-only
	 */

	'use strict';

	var Danger = __webpack_require__(12);
	var ReactMultiChildUpdateTypes = __webpack_require__(20);
	var ReactPerf = __webpack_require__(22);

	var setInnerHTML = __webpack_require__(23);
	var setTextContent = __webpack_require__(24);
	var invariant = __webpack_require__(17);

	/**
	 * Inserts `childNode` as a child of `parentNode` at the `index`.
	 *
	 * @param {DOMElement} parentNode Parent node in which to insert.
	 * @param {DOMElement} childNode Child node to insert.
	 * @param {number} index Index at which to insert the child.
	 * @internal
	 */
	function insertChildAt(parentNode, childNode, index) {
	  // By exploiting arrays returning `undefined` for an undefined index, we can
	  // rely exclusively on `insertBefore(node, null)` instead of also using
	  // `appendChild(node)`. However, using `undefined` is not allowed by all
	  // browsers so we must replace it with `null`.

	  // fix render order error in safari
	  // IE8 will throw error when index out of list size.
	  var beforeChild = index >= parentNode.childNodes.length ? null : parentNode.childNodes.item(index);

	  parentNode.insertBefore(childNode, beforeChild);
	}

	/**
	 * Operations for updating with DOM children.
	 */
	var DOMChildrenOperations = {

	  dangerouslyReplaceNodeWithMarkup: Danger.dangerouslyReplaceNodeWithMarkup,

	  updateTextContent: setTextContent,

	  /**
	   * Updates a component's children by processing a series of updates. The
	   * update configurations are each expected to have a `parentNode` property.
	   *
	   * @param {array<object>} updates List of update configurations.
	   * @param {array<string>} markupList List of markup strings.
	   * @internal
	   */
	  processUpdates: function (updates, markupList) {
	    var update;
	    // Mapping from parent IDs to initial child orderings.
	    var initialChildren = null;
	    // List of children that will be moved or removed.
	    var updatedChildren = null;

	    for (var i = 0; i < updates.length; i++) {
	      update = updates[i];
	      if (update.type === ReactMultiChildUpdateTypes.MOVE_EXISTING || update.type === ReactMultiChildUpdateTypes.REMOVE_NODE) {
	        var updatedIndex = update.fromIndex;
	        var updatedChild = update.parentNode.childNodes[updatedIndex];
	        var parentID = update.parentID;

	        !updatedChild ? process.env.NODE_ENV !== 'production' ? invariant(false, 'processUpdates(): Unable to find child %s of element. This ' + 'probably means the DOM was unexpectedly mutated (e.g., by the ' + 'browser), usually due to forgetting a <tbody> when using tables, ' + 'nesting tags like <form>, <p>, or <a>, or using non-SVG elements ' + 'in an <svg> parent. Try inspecting the child nodes of the element ' + 'with React ID `%s`.', updatedIndex, parentID) : invariant(false) : undefined;

	        initialChildren = initialChildren || {};
	        initialChildren[parentID] = initialChildren[parentID] || [];
	        initialChildren[parentID][updatedIndex] = updatedChild;

	        updatedChildren = updatedChildren || [];
	        updatedChildren.push(updatedChild);
	      }
	    }

	    var renderedMarkup;
	    // markupList is either a list of markup or just a list of elements
	    if (markupList.length && typeof markupList[0] === 'string') {
	      renderedMarkup = Danger.dangerouslyRenderMarkup(markupList);
	    } else {
	      renderedMarkup = markupList;
	    }

	    // Remove updated children first so that `toIndex` is consistent.
	    if (updatedChildren) {
	      for (var j = 0; j < updatedChildren.length; j++) {
	        updatedChildren[j].parentNode.removeChild(updatedChildren[j]);
	      }
	    }

	    for (var k = 0; k < updates.length; k++) {
	      update = updates[k];
	      switch (update.type) {
	        case ReactMultiChildUpdateTypes.INSERT_MARKUP:
	          insertChildAt(update.parentNode, renderedMarkup[update.markupIndex], update.toIndex);
	          break;
	        case ReactMultiChildUpdateTypes.MOVE_EXISTING:
	          insertChildAt(update.parentNode, initialChildren[update.parentID][update.fromIndex], update.toIndex);
	          break;
	        case ReactMultiChildUpdateTypes.SET_MARKUP:
	          setInnerHTML(update.parentNode, update.content);
	          break;
	        case ReactMultiChildUpdateTypes.TEXT_CONTENT:
	          setTextContent(update.parentNode, update.content);
	          break;
	        case ReactMultiChildUpdateTypes.REMOVE_NODE:
	          // Already removed by the for-loop above.
	          break;
	      }
	    }
	  }

	};

	ReactPerf.measureMethods(DOMChildrenOperations, 'DOMChildrenOperations', {
	  updateTextContent: 'updateTextContent'
	});

	module.exports = DOMChildrenOperations;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(8)))

/***/ },
/* 12 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule Danger
	 * @typechecks static-only
	 */

	'use strict';

	var ExecutionEnvironment = __webpack_require__(13);

	var createNodesFromMarkup = __webpack_require__(14);
	var emptyFunction = __webpack_require__(19);
	var getMarkupWrap = __webpack_require__(18);
	var invariant = __webpack_require__(17);

	var OPEN_TAG_NAME_EXP = /^(<[^ \/>]+)/;
	var RESULT_INDEX_ATTR = 'data-danger-index';

	/**
	 * Extracts the `nodeName` from a string of markup.
	 *
	 * NOTE: Extracting the `nodeName` does not require a regular expression match
	 * because we make assumptions about React-generated markup (i.e. there are no
	 * spaces surrounding the opening tag and there is at least one attribute).
	 *
	 * @param {string} markup String of markup.
	 * @return {string} Node name of the supplied markup.
	 * @see http://jsperf.com/extract-nodename
	 */
	function getNodeName(markup) {
	  return markup.substring(1, markup.indexOf(' '));
	}

	var Danger = {

	  /**
	   * Renders markup into an array of nodes. The markup is expected to render
	   * into a list of root nodes. Also, the length of `resultList` and
	   * `markupList` should be the same.
	   *
	   * @param {array<string>} markupList List of markup strings to render.
	   * @return {array<DOMElement>} List of rendered nodes.
	   * @internal
	   */
	  dangerouslyRenderMarkup: function (markupList) {
	    !ExecutionEnvironment.canUseDOM ? process.env.NODE_ENV !== 'production' ? invariant(false, 'dangerouslyRenderMarkup(...): Cannot render markup in a worker ' + 'thread. Make sure `window` and `document` are available globally ' + 'before requiring React when unit testing or use ' + 'ReactDOMServer.renderToString for server rendering.') : invariant(false) : undefined;
	    var nodeName;
	    var markupByNodeName = {};
	    // Group markup by `nodeName` if a wrap is necessary, else by '*'.
	    for (var i = 0; i < markupList.length; i++) {
	      !markupList[i] ? process.env.NODE_ENV !== 'production' ? invariant(false, 'dangerouslyRenderMarkup(...): Missing markup.') : invariant(false) : undefined;
	      nodeName = getNodeName(markupList[i]);
	      nodeName = getMarkupWrap(nodeName) ? nodeName : '*';
	      markupByNodeName[nodeName] = markupByNodeName[nodeName] || [];
	      markupByNodeName[nodeName][i] = markupList[i];
	    }
	    var resultList = [];
	    var resultListAssignmentCount = 0;
	    for (nodeName in markupByNodeName) {
	      if (!markupByNodeName.hasOwnProperty(nodeName)) {
	        continue;
	      }
	      var markupListByNodeName = markupByNodeName[nodeName];

	      // This for-in loop skips the holes of the sparse array. The order of
	      // iteration should follow the order of assignment, which happens to match
	      // numerical index order, but we don't rely on that.
	      var resultIndex;
	      for (resultIndex in markupListByNodeName) {
	        if (markupListByNodeName.hasOwnProperty(resultIndex)) {
	          var markup = markupListByNodeName[resultIndex];

	          // Push the requested markup with an additional RESULT_INDEX_ATTR
	          // attribute.  If the markup does not start with a < character, it
	          // will be discarded below (with an appropriate console.error).
	          markupListByNodeName[resultIndex] = markup.replace(OPEN_TAG_NAME_EXP,
	          // This index will be parsed back out below.
	          '$1 ' + RESULT_INDEX_ATTR + '="' + resultIndex + '" ');
	        }
	      }

	      // Render each group of markup with similar wrapping `nodeName`.
	      var renderNodes = createNodesFromMarkup(markupListByNodeName.join(''), emptyFunction // Do nothing special with <script> tags.
	      );

	      for (var j = 0; j < renderNodes.length; ++j) {
	        var renderNode = renderNodes[j];
	        if (renderNode.hasAttribute && renderNode.hasAttribute(RESULT_INDEX_ATTR)) {

	          resultIndex = +renderNode.getAttribute(RESULT_INDEX_ATTR);
	          renderNode.removeAttribute(RESULT_INDEX_ATTR);

	          !!resultList.hasOwnProperty(resultIndex) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Danger: Assigning to an already-occupied result index.') : invariant(false) : undefined;

	          resultList[resultIndex] = renderNode;

	          // This should match resultList.length and markupList.length when
	          // we're done.
	          resultListAssignmentCount += 1;
	        } else if (process.env.NODE_ENV !== 'production') {
	          console.error('Danger: Discarding unexpected node:', renderNode);
	        }
	      }
	    }

	    // Although resultList was populated out of order, it should now be a dense
	    // array.
	    !(resultListAssignmentCount === resultList.length) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Danger: Did not assign to every index of resultList.') : invariant(false) : undefined;

	    !(resultList.length === markupList.length) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Danger: Expected markup to render %s nodes, but rendered %s.', markupList.length, resultList.length) : invariant(false) : undefined;

	    return resultList;
	  },

	  /**
	   * Replaces a node with a string of markup at its current position within its
	   * parent. The markup must render into a single root node.
	   *
	   * @param {DOMElement} oldChild Child node to replace.
	   * @param {string} markup Markup to render in place of the child node.
	   * @internal
	   */
	  dangerouslyReplaceNodeWithMarkup: function (oldChild, markup) {
	    !ExecutionEnvironment.canUseDOM ? process.env.NODE_ENV !== 'production' ? invariant(false, 'dangerouslyReplaceNodeWithMarkup(...): Cannot render markup in a ' + 'worker thread. Make sure `window` and `document` are available ' + 'globally before requiring React when unit testing or use ' + 'ReactDOMServer.renderToString() for server rendering.') : invariant(false) : undefined;
	    !markup ? process.env.NODE_ENV !== 'production' ? invariant(false, 'dangerouslyReplaceNodeWithMarkup(...): Missing markup.') : invariant(false) : undefined;
	    !(oldChild.tagName.toLowerCase() !== 'html') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'dangerouslyReplaceNodeWithMarkup(...): Cannot replace markup of the ' + '<html> node. This is because browser quirks make this unreliable ' + 'and/or slow. If you want to render to the root you must use ' + 'server rendering. See ReactDOMServer.renderToString().') : invariant(false) : undefined;

	    var newChild;
	    if (typeof markup === 'string') {
	      newChild = createNodesFromMarkup(markup, emptyFunction)[0];
	    } else {
	      newChild = markup;
	    }
	    oldChild.parentNode.replaceChild(newChild, oldChild);
	  }

	};

	module.exports = Danger;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(8)))

/***/ },
/* 13 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ExecutionEnvironment
	 */

	'use strict';

	var canUseDOM = !!(typeof window !== 'undefined' && window.document && window.document.createElement);

	/**
	 * Simple, lightweight module assisting with the detection and context of
	 * Worker. Helps avoid circular dependencies and allows code to reason about
	 * whether or not they are in a Worker, even if they never include the main
	 * `ReactWorker` dependency.
	 */
	var ExecutionEnvironment = {

	  canUseDOM: canUseDOM,

	  canUseWorkers: typeof Worker !== 'undefined',

	  canUseEventListeners: canUseDOM && !!(window.addEventListener || window.attachEvent),

	  canUseViewport: canUseDOM && !!window.screen,

	  isInWorker: !canUseDOM // For now, this is true - might change in the future.

	};

	module.exports = ExecutionEnvironment;

/***/ },
/* 14 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule createNodesFromMarkup
	 * @typechecks
	 */

	/*eslint-disable fb-www/unsafe-html*/

	'use strict';

	var ExecutionEnvironment = __webpack_require__(13);

	var createArrayFromMixed = __webpack_require__(15);
	var getMarkupWrap = __webpack_require__(18);
	var invariant = __webpack_require__(17);

	/**
	 * Dummy container used to render all markup.
	 */
	var dummyNode = ExecutionEnvironment.canUseDOM ? document.createElement('div') : null;

	/**
	 * Pattern used by `getNodeName`.
	 */
	var nodeNamePattern = /^\s*<(\w+)/;

	/**
	 * Extracts the `nodeName` of the first element in a string of markup.
	 *
	 * @param {string} markup String of markup.
	 * @return {?string} Node name of the supplied markup.
	 */
	function getNodeName(markup) {
	  var nodeNameMatch = markup.match(nodeNamePattern);
	  return nodeNameMatch && nodeNameMatch[1].toLowerCase();
	}

	/**
	 * Creates an array containing the nodes rendered from the supplied markup. The
	 * optionally supplied `handleScript` function will be invoked once for each
	 * <script> element that is rendered. If no `handleScript` function is supplied,
	 * an exception is thrown if any <script> elements are rendered.
	 *
	 * @param {string} markup A string of valid HTML markup.
	 * @param {?function} handleScript Invoked once for each rendered <script>.
	 * @return {array<DOMElement|DOMTextNode>} An array of rendered nodes.
	 */
	function createNodesFromMarkup(markup, handleScript) {
	  var node = dummyNode;
	  !!!dummyNode ? process.env.NODE_ENV !== 'production' ? invariant(false, 'createNodesFromMarkup dummy not initialized') : invariant(false) : undefined;
	  var nodeName = getNodeName(markup);

	  var wrap = nodeName && getMarkupWrap(nodeName);
	  if (wrap) {
	    node.innerHTML = wrap[1] + markup + wrap[2];

	    var wrapDepth = wrap[0];
	    while (wrapDepth--) {
	      node = node.lastChild;
	    }
	  } else {
	    node.innerHTML = markup;
	  }

	  var scripts = node.getElementsByTagName('script');
	  if (scripts.length) {
	    !handleScript ? process.env.NODE_ENV !== 'production' ? invariant(false, 'createNodesFromMarkup(...): Unexpected <script> element rendered.') : invariant(false) : undefined;
	    createArrayFromMixed(scripts).forEach(handleScript);
	  }

	  var nodes = createArrayFromMixed(node.childNodes);
	  while (node.lastChild) {
	    node.removeChild(node.lastChild);
	  }
	  return nodes;
	}

	module.exports = createNodesFromMarkup;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(8)))

/***/ },
/* 15 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule createArrayFromMixed
	 * @typechecks
	 */

	'use strict';

	var toArray = __webpack_require__(16);

	/**
	 * Perform a heuristic test to determine if an object is "array-like".
	 *
	 *   A monk asked Joshu, a Zen master, "Has a dog Buddha nature?"
	 *   Joshu replied: "Mu."
	 *
	 * This function determines if its argument has "array nature": it returns
	 * true if the argument is an actual array, an `arguments' object, or an
	 * HTMLCollection (e.g. node.childNodes or node.getElementsByTagName()).
	 *
	 * It will return false for other array-like objects like Filelist.
	 *
	 * @param {*} obj
	 * @return {boolean}
	 */
	function hasArrayNature(obj) {
	  return(
	    // not null/false
	    !!obj && (
	    // arrays are objects, NodeLists are functions in Safari
	    typeof obj == 'object' || typeof obj == 'function') &&
	    // quacks like an array
	    'length' in obj &&
	    // not window
	    !('setInterval' in obj) &&
	    // no DOM node should be considered an array-like
	    // a 'select' element has 'length' and 'item' properties on IE8
	    typeof obj.nodeType != 'number' && (
	    // a real array
	    Array.isArray(obj) ||
	    // arguments
	    'callee' in obj ||
	    // HTMLCollection/NodeList
	    'item' in obj)
	  );
	}

	/**
	 * Ensure that the argument is an array by wrapping it in an array if it is not.
	 * Creates a copy of the argument if it is already an array.
	 *
	 * This is mostly useful idiomatically:
	 *
	 *   var createArrayFromMixed = require('createArrayFromMixed');
	 *
	 *   function takesOneOrMoreThings(things) {
	 *     things = createArrayFromMixed(things);
	 *     ...
	 *   }
	 *
	 * This allows you to treat `things' as an array, but accept scalars in the API.
	 *
	 * If you need to convert an array-like object, like `arguments`, into an array
	 * use toArray instead.
	 *
	 * @param {*} obj
	 * @return {array}
	 */
	function createArrayFromMixed(obj) {
	  if (!hasArrayNature(obj)) {
	    return [obj];
	  } else if (Array.isArray(obj)) {
	    return obj.slice();
	  } else {
	    return toArray(obj);
	  }
	}

	module.exports = createArrayFromMixed;

/***/ },
/* 16 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule toArray
	 * @typechecks
	 */

	'use strict';

	var invariant = __webpack_require__(17);

	/**
	 * Convert array-like objects to arrays.
	 *
	 * This API assumes the caller knows the contents of the data type. For less
	 * well defined inputs use createArrayFromMixed.
	 *
	 * @param {object|function|filelist} obj
	 * @return {array}
	 */
	function toArray(obj) {
	  var length = obj.length;

	  // Some browse builtin objects can report typeof 'function' (e.g. NodeList in
	  // old versions of Safari).
	  !(!Array.isArray(obj) && (typeof obj === 'object' || typeof obj === 'function')) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'toArray: Array-like object expected') : invariant(false) : undefined;

	  !(typeof length === 'number') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'toArray: Object needs a length property') : invariant(false) : undefined;

	  !(length === 0 || length - 1 in obj) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'toArray: Object should have keys for indices') : invariant(false) : undefined;

	  // Old IE doesn't give collections access to hasOwnProperty. Assume inputs
	  // without method will throw during the slice call and skip straight to the
	  // fallback.
	  if (obj.hasOwnProperty) {
	    try {
	      return Array.prototype.slice.call(obj);
	    } catch (e) {
	      // IE < 9 does not support Array#slice on collections objects
	    }
	  }

	  // Fall back to copying key by key. This assumes all keys have a value,
	  // so will not preserve sparsely populated inputs.
	  var ret = Array(length);
	  for (var ii = 0; ii < length; ii++) {
	    ret[ii] = obj[ii];
	  }
	  return ret;
	}

	module.exports = toArray;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(8)))

/***/ },
/* 17 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule invariant
	 */

	'use strict';

	/**
	 * Use invariant() to assert state which your program assumes to be true.
	 *
	 * Provide sprintf-style format (only %s is supported) and arguments
	 * to provide information about what broke and what you were
	 * expecting.
	 *
	 * The invariant message will be stripped in production, but the invariant
	 * will remain to ensure logic does not differ in production.
	 */

	var invariant = function (condition, format, a, b, c, d, e, f) {
	  if (process.env.NODE_ENV !== 'production') {
	    if (format === undefined) {
	      throw new Error('invariant requires an error message argument');
	    }
	  }

	  if (!condition) {
	    var error;
	    if (format === undefined) {
	      error = new Error('Minified exception occurred; use the non-minified dev environment ' + 'for the full error message and additional helpful warnings.');
	    } else {
	      var args = [a, b, c, d, e, f];
	      var argIndex = 0;
	      error = new Error('Invariant Violation: ' + format.replace(/%s/g, function () {
	        return args[argIndex++];
	      }));
	    }

	    error.framesToPop = 1; // we don't care about invariant's own frame
	    throw error;
	  }
	};

	module.exports = invariant;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(8)))

/***/ },
/* 18 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule getMarkupWrap
	 */

	/*eslint-disable fb-www/unsafe-html */

	'use strict';

	var ExecutionEnvironment = __webpack_require__(13);

	var invariant = __webpack_require__(17);

	/**
	 * Dummy container used to detect which wraps are necessary.
	 */
	var dummyNode = ExecutionEnvironment.canUseDOM ? document.createElement('div') : null;

	/**
	 * Some browsers cannot use `innerHTML` to render certain elements standalone,
	 * so we wrap them, render the wrapped nodes, then extract the desired node.
	 *
	 * In IE8, certain elements cannot render alone, so wrap all elements ('*').
	 */

	var shouldWrap = {};

	var selectWrap = [1, '<select multiple="true">', '</select>'];
	var tableWrap = [1, '<table>', '</table>'];
	var trWrap = [3, '<table><tbody><tr>', '</tr></tbody></table>'];

	var svgWrap = [1, '<svg xmlns="http://www.w3.org/2000/svg">', '</svg>'];

	var markupWrap = {
	  '*': [1, '?<div>', '</div>'],

	  'area': [1, '<map>', '</map>'],
	  'col': [2, '<table><tbody></tbody><colgroup>', '</colgroup></table>'],
	  'legend': [1, '<fieldset>', '</fieldset>'],
	  'param': [1, '<object>', '</object>'],
	  'tr': [2, '<table><tbody>', '</tbody></table>'],

	  'optgroup': selectWrap,
	  'option': selectWrap,

	  'caption': tableWrap,
	  'colgroup': tableWrap,
	  'tbody': tableWrap,
	  'tfoot': tableWrap,
	  'thead': tableWrap,

	  'td': trWrap,
	  'th': trWrap
	};

	// Initialize the SVG elements since we know they'll always need to be wrapped
	// consistently. If they are created inside a <div> they will be initialized in
	// the wrong namespace (and will not display).
	var svgElements = ['circle', 'clipPath', 'defs', 'ellipse', 'g', 'image', 'line', 'linearGradient', 'mask', 'path', 'pattern', 'polygon', 'polyline', 'radialGradient', 'rect', 'stop', 'text', 'tspan'];
	svgElements.forEach(function (nodeName) {
	  markupWrap[nodeName] = svgWrap;
	  shouldWrap[nodeName] = true;
	});

	/**
	 * Gets the markup wrap configuration for the supplied `nodeName`.
	 *
	 * NOTE: This lazily detects which wraps are necessary for the current browser.
	 *
	 * @param {string} nodeName Lowercase `nodeName`.
	 * @return {?array} Markup wrap configuration, if applicable.
	 */
	function getMarkupWrap(nodeName) {
	  !!!dummyNode ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Markup wrapping node not initialized') : invariant(false) : undefined;
	  if (!markupWrap.hasOwnProperty(nodeName)) {
	    nodeName = '*';
	  }
	  if (!shouldWrap.hasOwnProperty(nodeName)) {
	    if (nodeName === '*') {
	      dummyNode.innerHTML = '<link />';
	    } else {
	      dummyNode.innerHTML = '<' + nodeName + '></' + nodeName + '>';
	    }
	    shouldWrap[nodeName] = !dummyNode.firstChild;
	  }
	  return shouldWrap[nodeName] ? markupWrap[nodeName] : null;
	}

	module.exports = getMarkupWrap;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(8)))

/***/ },
/* 19 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule emptyFunction
	 */

	"use strict";

	function makeEmptyFunction(arg) {
	  return function () {
	    return arg;
	  };
	}

	/**
	 * This function accepts and discards inputs; it has no side effects. This is
	 * primarily useful idiomatically for overridable function endpoints which
	 * always need to be callable, since JS lacks a null-call idiom ala Cocoa.
	 */
	function emptyFunction() {}

	emptyFunction.thatReturns = makeEmptyFunction;
	emptyFunction.thatReturnsFalse = makeEmptyFunction(false);
	emptyFunction.thatReturnsTrue = makeEmptyFunction(true);
	emptyFunction.thatReturnsNull = makeEmptyFunction(null);
	emptyFunction.thatReturnsThis = function () {
	  return this;
	};
	emptyFunction.thatReturnsArgument = function (arg) {
	  return arg;
	};

	module.exports = emptyFunction;

/***/ },
/* 20 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactMultiChildUpdateTypes
	 */

	'use strict';

	var keyMirror = __webpack_require__(21);

	/**
	 * When a component's children are updated, a series of update configuration
	 * objects are created in order to batch and serialize the required changes.
	 *
	 * Enumerates all the possible types of update configurations.
	 *
	 * @internal
	 */
	var ReactMultiChildUpdateTypes = keyMirror({
	  INSERT_MARKUP: null,
	  MOVE_EXISTING: null,
	  REMOVE_NODE: null,
	  SET_MARKUP: null,
	  TEXT_CONTENT: null
	});

	module.exports = ReactMultiChildUpdateTypes;

/***/ },
/* 21 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule keyMirror
	 * @typechecks static-only
	 */

	'use strict';

	var invariant = __webpack_require__(17);

	/**
	 * Constructs an enumeration with keys equal to their value.
	 *
	 * For example:
	 *
	 *   var COLORS = keyMirror({blue: null, red: null});
	 *   var myColor = COLORS.blue;
	 *   var isColorValid = !!COLORS[myColor];
	 *
	 * The last line could not be performed if the values of the generated enum were
	 * not equal to their keys.
	 *
	 *   Input:  {key1: val1, key2: val2}
	 *   Output: {key1: key1, key2: key2}
	 *
	 * @param {object} obj
	 * @return {object}
	 */
	var keyMirror = function (obj) {
	  var ret = {};
	  var key;
	  !(obj instanceof Object && !Array.isArray(obj)) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'keyMirror(...): Argument must be an object.') : invariant(false) : undefined;
	  for (key in obj) {
	    if (!obj.hasOwnProperty(key)) {
	      continue;
	    }
	    ret[key] = key;
	  }
	  return ret;
	};

	module.exports = keyMirror;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(8)))

/***/ },
/* 22 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactPerf
	 * @typechecks static-only
	 */

	'use strict';

	/**
	 * ReactPerf is a general AOP system designed to measure performance. This
	 * module only has the hooks: see ReactDefaultPerf for the analysis tool.
	 */
	var ReactPerf = {
	  /**
	   * Boolean to enable/disable measurement. Set to false by default to prevent
	   * accidental logging and perf loss.
	   */
	  enableMeasure: false,

	  /**
	   * Holds onto the measure function in use. By default, don't measure
	   * anything, but we'll override this if we inject a measure function.
	   */
	  storedMeasure: _noMeasure,

	  /**
	   * @param {object} object
	   * @param {string} objectName
	   * @param {object<string>} methodNames
	   */
	  measureMethods: function (object, objectName, methodNames) {
	    if (process.env.NODE_ENV !== 'production') {
	      for (var key in methodNames) {
	        if (!methodNames.hasOwnProperty(key)) {
	          continue;
	        }
	        object[key] = ReactPerf.measure(objectName, methodNames[key], object[key]);
	      }
	    }
	  },

	  /**
	   * Use this to wrap methods you want to measure. Zero overhead in production.
	   *
	   * @param {string} objName
	   * @param {string} fnName
	   * @param {function} func
	   * @return {function}
	   */
	  measure: function (objName, fnName, func) {
	    if (process.env.NODE_ENV !== 'production') {
	      var measuredFunc = null;
	      var wrapper = function () {
	        if (ReactPerf.enableMeasure) {
	          if (!measuredFunc) {
	            measuredFunc = ReactPerf.storedMeasure(objName, fnName, func);
	          }
	          return measuredFunc.apply(this, arguments);
	        }
	        return func.apply(this, arguments);
	      };
	      wrapper.displayName = objName + '_' + fnName;
	      return wrapper;
	    }
	    return func;
	  },

	  injection: {
	    /**
	     * @param {function} measure
	     */
	    injectMeasure: function (measure) {
	      ReactPerf.storedMeasure = measure;
	    }
	  }
	};

	/**
	 * Simply passes through the measured function, without measuring it.
	 *
	 * @param {string} objName
	 * @param {string} fnName
	 * @param {function} func
	 * @return {function}
	 */
	function _noMeasure(objName, fnName, func) {
	  return func;
	}

	module.exports = ReactPerf;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(8)))

/***/ },
/* 23 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule setInnerHTML
	 */

	/* globals MSApp */

	'use strict';

	var ExecutionEnvironment = __webpack_require__(13);

	var WHITESPACE_TEST = /^[ \r\n\t\f]/;
	var NONVISIBLE_TEST = /<(!--|link|noscript|meta|script|style)[ \r\n\t\f\/>]/;

	/**
	 * Set the innerHTML property of a node, ensuring that whitespace is preserved
	 * even in IE8.
	 *
	 * @param {DOMElement} node
	 * @param {string} html
	 * @internal
	 */
	var setInnerHTML = function (node, html) {
	  node.innerHTML = html;
	};

	// Win8 apps: Allow all html to be inserted
	if (typeof MSApp !== 'undefined' && MSApp.execUnsafeLocalFunction) {
	  setInnerHTML = function (node, html) {
	    MSApp.execUnsafeLocalFunction(function () {
	      node.innerHTML = html;
	    });
	  };
	}

	if (ExecutionEnvironment.canUseDOM) {
	  // IE8: When updating a just created node with innerHTML only leading
	  // whitespace is removed. When updating an existing node with innerHTML
	  // whitespace in root TextNodes is also collapsed.
	  // @see quirksmode.org/bugreports/archives/2004/11/innerhtml_and_t.html

	  // Feature detection; only IE8 is known to behave improperly like this.
	  var testElement = document.createElement('div');
	  testElement.innerHTML = ' ';
	  if (testElement.innerHTML === '') {
	    setInnerHTML = function (node, html) {
	      // Magic theory: IE8 supposedly differentiates between added and updated
	      // nodes when processing innerHTML, innerHTML on updated nodes suffers
	      // from worse whitespace behavior. Re-adding a node like this triggers
	      // the initial and more favorable whitespace behavior.
	      // TODO: What to do on a detached node?
	      if (node.parentNode) {
	        node.parentNode.replaceChild(node, node);
	      }

	      // We also implement a workaround for non-visible tags disappearing into
	      // thin air on IE8, this only happens if there is no visible text
	      // in-front of the non-visible tags. Piggyback on the whitespace fix
	      // and simply check if any non-visible tags appear in the source.
	      if (WHITESPACE_TEST.test(html) || html[0] === '<' && NONVISIBLE_TEST.test(html)) {
	        // Recover leading whitespace by temporarily prepending any character.
	        // \uFEFF has the potential advantage of being zero-width/invisible.
	        // UglifyJS drops U+FEFF chars when parsing, so use String.fromCharCode
	        // in hopes that this is preserved even if "\uFEFF" is transformed to
	        // the actual Unicode character (by Babel, for example).
	        // https://github.com/mishoo/UglifyJS2/blob/v2.4.20/lib/parse.js#L216
	        node.innerHTML = String.fromCharCode(0xFEFF) + html;

	        // deleteData leaves an empty `TextNode` which offsets the index of all
	        // children. Definitely want to avoid this.
	        var textNode = node.firstChild;
	        if (textNode.data.length === 1) {
	          node.removeChild(textNode);
	        } else {
	          textNode.deleteData(0, 1);
	        }
	      } else {
	        node.innerHTML = html;
	      }
	    };
	  }
	}

	module.exports = setInnerHTML;

/***/ },
/* 24 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule setTextContent
	 */

	'use strict';

	var ExecutionEnvironment = __webpack_require__(13);
	var escapeTextContentForBrowser = __webpack_require__(25);
	var setInnerHTML = __webpack_require__(23);

	/**
	 * Set the textContent property of a node, ensuring that whitespace is preserved
	 * even in IE8. innerText is a poor substitute for textContent and, among many
	 * issues, inserts <br> instead of the literal newline chars. innerHTML behaves
	 * as it should.
	 *
	 * @param {DOMElement} node
	 * @param {string} text
	 * @internal
	 */
	var setTextContent = function (node, text) {
	  node.textContent = text;
	};

	if (ExecutionEnvironment.canUseDOM) {
	  if (!('textContent' in document.documentElement)) {
	    setTextContent = function (node, text) {
	      setInnerHTML(node, escapeTextContentForBrowser(text));
	    };
	  }
	}

	module.exports = setTextContent;

/***/ },
/* 25 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule escapeTextContentForBrowser
	 */

	'use strict';

	var ESCAPE_LOOKUP = {
	  '&': '&amp;',
	  '>': '&gt;',
	  '<': '&lt;',
	  '"': '&quot;',
	  '\'': '&#x27;'
	};

	var ESCAPE_REGEX = /[&><"']/g;

	function escaper(match) {
	  return ESCAPE_LOOKUP[match];
	}

	/**
	 * Escapes text to prevent scripting attacks.
	 *
	 * @param {*} text Text value to escape.
	 * @return {string} An escaped string.
	 */
	function escapeTextContentForBrowser(text) {
	  return ('' + text).replace(ESCAPE_REGEX, escaper);
	}

	module.exports = escapeTextContentForBrowser;

/***/ },
/* 26 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule DOMPropertyOperations
	 * @typechecks static-only
	 */

	'use strict';

	var DOMProperty = __webpack_require__(27);
	var ReactPerf = __webpack_require__(22);

	var quoteAttributeValueForBrowser = __webpack_require__(28);
	var warning = __webpack_require__(29);

	// Simplified subset
	var VALID_ATTRIBUTE_NAME_REGEX = /^[a-zA-Z_][\w\.\-]*$/;
	var illegalAttributeNameCache = {};
	var validatedAttributeNameCache = {};

	function isAttributeNameSafe(attributeName) {
	  if (validatedAttributeNameCache.hasOwnProperty(attributeName)) {
	    return true;
	  }
	  if (illegalAttributeNameCache.hasOwnProperty(attributeName)) {
	    return false;
	  }
	  if (VALID_ATTRIBUTE_NAME_REGEX.test(attributeName)) {
	    validatedAttributeNameCache[attributeName] = true;
	    return true;
	  }
	  illegalAttributeNameCache[attributeName] = true;
	  process.env.NODE_ENV !== 'production' ? warning(false, 'Invalid attribute name: `%s`', attributeName) : undefined;
	  return false;
	}

	function shouldIgnoreValue(propertyInfo, value) {
	  return value == null || propertyInfo.hasBooleanValue && !value || propertyInfo.hasNumericValue && isNaN(value) || propertyInfo.hasPositiveNumericValue && value < 1 || propertyInfo.hasOverloadedBooleanValue && value === false;
	}

	if (process.env.NODE_ENV !== 'production') {
	  var reactProps = {
	    children: true,
	    dangerouslySetInnerHTML: true,
	    key: true,
	    ref: true
	  };
	  var warnedProperties = {};

	  var warnUnknownProperty = function (name) {
	    if (reactProps.hasOwnProperty(name) && reactProps[name] || warnedProperties.hasOwnProperty(name) && warnedProperties[name]) {
	      return;
	    }

	    warnedProperties[name] = true;
	    var lowerCasedName = name.toLowerCase();

	    // data-* attributes should be lowercase; suggest the lowercase version
	    var standardName = DOMProperty.isCustomAttribute(lowerCasedName) ? lowerCasedName : DOMProperty.getPossibleStandardName.hasOwnProperty(lowerCasedName) ? DOMProperty.getPossibleStandardName[lowerCasedName] : null;

	    // For now, only warn when we have a suggested correction. This prevents
	    // logging too much when using transferPropsTo.
	    process.env.NODE_ENV !== 'production' ? warning(standardName == null, 'Unknown DOM property %s. Did you mean %s?', name, standardName) : undefined;
	  };
	}

	/**
	 * Operations for dealing with DOM properties.
	 */
	var DOMPropertyOperations = {

	  /**
	   * Creates markup for the ID property.
	   *
	   * @param {string} id Unescaped ID.
	   * @return {string} Markup string.
	   */
	  createMarkupForID: function (id) {
	    return DOMProperty.ID_ATTRIBUTE_NAME + '=' + quoteAttributeValueForBrowser(id);
	  },

	  setAttributeForID: function (node, id) {
	    node.setAttribute(DOMProperty.ID_ATTRIBUTE_NAME, id);
	  },

	  /**
	   * Creates markup for a property.
	   *
	   * @param {string} name
	   * @param {*} value
	   * @return {?string} Markup string, or null if the property was invalid.
	   */
	  createMarkupForProperty: function (name, value) {
	    var propertyInfo = DOMProperty.properties.hasOwnProperty(name) ? DOMProperty.properties[name] : null;
	    if (propertyInfo) {
	      if (shouldIgnoreValue(propertyInfo, value)) {
	        return '';
	      }
	      var attributeName = propertyInfo.attributeName;
	      if (propertyInfo.hasBooleanValue || propertyInfo.hasOverloadedBooleanValue && value === true) {
	        return attributeName + '=""';
	      }
	      return attributeName + '=' + quoteAttributeValueForBrowser(value);
	    } else if (DOMProperty.isCustomAttribute(name)) {
	      if (value == null) {
	        return '';
	      }
	      return name + '=' + quoteAttributeValueForBrowser(value);
	    } else if (process.env.NODE_ENV !== 'production') {
	      warnUnknownProperty(name);
	    }
	    return null;
	  },

	  /**
	   * Creates markup for a custom property.
	   *
	   * @param {string} name
	   * @param {*} value
	   * @return {string} Markup string, or empty string if the property was invalid.
	   */
	  createMarkupForCustomAttribute: function (name, value) {
	    if (!isAttributeNameSafe(name) || value == null) {
	      return '';
	    }
	    return name + '=' + quoteAttributeValueForBrowser(value);
	  },

	  /**
	   * Sets the value for a property on a node.
	   *
	   * @param {DOMElement} node
	   * @param {string} name
	   * @param {*} value
	   */
	  setValueForProperty: function (node, name, value) {
	    var propertyInfo = DOMProperty.properties.hasOwnProperty(name) ? DOMProperty.properties[name] : null;
	    if (propertyInfo) {
	      var mutationMethod = propertyInfo.mutationMethod;
	      if (mutationMethod) {
	        mutationMethod(node, value);
	      } else if (shouldIgnoreValue(propertyInfo, value)) {
	        this.deleteValueForProperty(node, name);
	      } else if (propertyInfo.mustUseAttribute) {
	        var attributeName = propertyInfo.attributeName;
	        var namespace = propertyInfo.attributeNamespace;
	        // `setAttribute` with objects becomes only `[object]` in IE8/9,
	        // ('' + value) makes it output the correct toString()-value.
	        if (namespace) {
	          node.setAttributeNS(namespace, attributeName, '' + value);
	        } else if (propertyInfo.hasBooleanValue || propertyInfo.hasOverloadedBooleanValue && value === true) {
	          node.setAttribute(attributeName, '');
	        } else {
	          node.setAttribute(attributeName, '' + value);
	        }
	      } else {
	        var propName = propertyInfo.propertyName;
	        // Must explicitly cast values for HAS_SIDE_EFFECTS-properties to the
	        // property type before comparing; only `value` does and is string.
	        if (!propertyInfo.hasSideEffects || '' + node[propName] !== '' + value) {
	          // Contrary to `setAttribute`, object properties are properly
	          // `toString`ed by IE8/9.
	          node[propName] = value;
	        }
	      }
	    } else if (DOMProperty.isCustomAttribute(name)) {
	      DOMPropertyOperations.setValueForAttribute(node, name, value);
	    } else if (process.env.NODE_ENV !== 'production') {
	      warnUnknownProperty(name);
	    }
	  },

	  setValueForAttribute: function (node, name, value) {
	    if (!isAttributeNameSafe(name)) {
	      return;
	    }
	    if (value == null) {
	      node.removeAttribute(name);
	    } else {
	      node.setAttribute(name, '' + value);
	    }
	  },

	  /**
	   * Deletes the value for a property on a node.
	   *
	   * @param {DOMElement} node
	   * @param {string} name
	   */
	  deleteValueForProperty: function (node, name) {
	    var propertyInfo = DOMProperty.properties.hasOwnProperty(name) ? DOMProperty.properties[name] : null;
	    if (propertyInfo) {
	      var mutationMethod = propertyInfo.mutationMethod;
	      if (mutationMethod) {
	        mutationMethod(node, undefined);
	      } else if (propertyInfo.mustUseAttribute) {
	        node.removeAttribute(propertyInfo.attributeName);
	      } else {
	        var propName = propertyInfo.propertyName;
	        var defaultValue = DOMProperty.getDefaultValueForProperty(node.nodeName, propName);
	        if (!propertyInfo.hasSideEffects || '' + node[propName] !== defaultValue) {
	          node[propName] = defaultValue;
	        }
	      }
	    } else if (DOMProperty.isCustomAttribute(name)) {
	      node.removeAttribute(name);
	    } else if (process.env.NODE_ENV !== 'production') {
	      warnUnknownProperty(name);
	    }
	  }

	};

	ReactPerf.measureMethods(DOMPropertyOperations, 'DOMPropertyOperations', {
	  setValueForProperty: 'setValueForProperty',
	  setValueForAttribute: 'setValueForAttribute',
	  deleteValueForProperty: 'deleteValueForProperty'
	});

	module.exports = DOMPropertyOperations;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(8)))

/***/ },
/* 27 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule DOMProperty
	 * @typechecks static-only
	 */

	'use strict';

	var invariant = __webpack_require__(17);

	function checkMask(value, bitmask) {
	  return (value & bitmask) === bitmask;
	}

	var DOMPropertyInjection = {
	  /**
	   * Mapping from normalized, camelcased property names to a configuration that
	   * specifies how the associated DOM property should be accessed or rendered.
	   */
	  MUST_USE_ATTRIBUTE: 0x1,
	  MUST_USE_PROPERTY: 0x2,
	  HAS_SIDE_EFFECTS: 0x4,
	  HAS_BOOLEAN_VALUE: 0x8,
	  HAS_NUMERIC_VALUE: 0x10,
	  HAS_POSITIVE_NUMERIC_VALUE: 0x20 | 0x10,
	  HAS_OVERLOADED_BOOLEAN_VALUE: 0x40,

	  /**
	   * Inject some specialized knowledge about the DOM. This takes a config object
	   * with the following properties:
	   *
	   * isCustomAttribute: function that given an attribute name will return true
	   * if it can be inserted into the DOM verbatim. Useful for data-* or aria-*
	   * attributes where it's impossible to enumerate all of the possible
	   * attribute names,
	   *
	   * Properties: object mapping DOM property name to one of the
	   * DOMPropertyInjection constants or null. If your attribute isn't in here,
	   * it won't get written to the DOM.
	   *
	   * DOMAttributeNames: object mapping React attribute name to the DOM
	   * attribute name. Attribute names not specified use the **lowercase**
	   * normalized name.
	   *
	   * DOMAttributeNamespaces: object mapping React attribute name to the DOM
	   * attribute namespace URL. (Attribute names not specified use no namespace.)
	   *
	   * DOMPropertyNames: similar to DOMAttributeNames but for DOM properties.
	   * Property names not specified use the normalized name.
	   *
	   * DOMMutationMethods: Properties that require special mutation methods. If
	   * `value` is undefined, the mutation method should unset the property.
	   *
	   * @param {object} domPropertyConfig the config as described above.
	   */
	  injectDOMPropertyConfig: function (domPropertyConfig) {
	    var Injection = DOMPropertyInjection;
	    var Properties = domPropertyConfig.Properties || {};
	    var DOMAttributeNamespaces = domPropertyConfig.DOMAttributeNamespaces || {};
	    var DOMAttributeNames = domPropertyConfig.DOMAttributeNames || {};
	    var DOMPropertyNames = domPropertyConfig.DOMPropertyNames || {};
	    var DOMMutationMethods = domPropertyConfig.DOMMutationMethods || {};

	    if (domPropertyConfig.isCustomAttribute) {
	      DOMProperty._isCustomAttributeFunctions.push(domPropertyConfig.isCustomAttribute);
	    }

	    for (var propName in Properties) {
	      !!DOMProperty.properties.hasOwnProperty(propName) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'injectDOMPropertyConfig(...): You\'re trying to inject DOM property ' + '\'%s\' which has already been injected. You may be accidentally ' + 'injecting the same DOM property config twice, or you may be ' + 'injecting two configs that have conflicting property names.', propName) : invariant(false) : undefined;

	      var lowerCased = propName.toLowerCase();
	      var propConfig = Properties[propName];

	      var propertyInfo = {
	        attributeName: lowerCased,
	        attributeNamespace: null,
	        propertyName: propName,
	        mutationMethod: null,

	        mustUseAttribute: checkMask(propConfig, Injection.MUST_USE_ATTRIBUTE),
	        mustUseProperty: checkMask(propConfig, Injection.MUST_USE_PROPERTY),
	        hasSideEffects: checkMask(propConfig, Injection.HAS_SIDE_EFFECTS),
	        hasBooleanValue: checkMask(propConfig, Injection.HAS_BOOLEAN_VALUE),
	        hasNumericValue: checkMask(propConfig, Injection.HAS_NUMERIC_VALUE),
	        hasPositiveNumericValue: checkMask(propConfig, Injection.HAS_POSITIVE_NUMERIC_VALUE),
	        hasOverloadedBooleanValue: checkMask(propConfig, Injection.HAS_OVERLOADED_BOOLEAN_VALUE)
	      };

	      !(!propertyInfo.mustUseAttribute || !propertyInfo.mustUseProperty) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'DOMProperty: Cannot require using both attribute and property: %s', propName) : invariant(false) : undefined;
	      !(propertyInfo.mustUseProperty || !propertyInfo.hasSideEffects) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'DOMProperty: Properties that have side effects must use property: %s', propName) : invariant(false) : undefined;
	      !(propertyInfo.hasBooleanValue + propertyInfo.hasNumericValue + propertyInfo.hasOverloadedBooleanValue <= 1) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'DOMProperty: Value can be one of boolean, overloaded boolean, or ' + 'numeric value, but not a combination: %s', propName) : invariant(false) : undefined;

	      if (process.env.NODE_ENV !== 'production') {
	        DOMProperty.getPossibleStandardName[lowerCased] = propName;
	      }

	      if (DOMAttributeNames.hasOwnProperty(propName)) {
	        var attributeName = DOMAttributeNames[propName];
	        propertyInfo.attributeName = attributeName;
	        if (process.env.NODE_ENV !== 'production') {
	          DOMProperty.getPossibleStandardName[attributeName] = propName;
	        }
	      }

	      if (DOMAttributeNamespaces.hasOwnProperty(propName)) {
	        propertyInfo.attributeNamespace = DOMAttributeNamespaces[propName];
	      }

	      if (DOMPropertyNames.hasOwnProperty(propName)) {
	        propertyInfo.propertyName = DOMPropertyNames[propName];
	      }

	      if (DOMMutationMethods.hasOwnProperty(propName)) {
	        propertyInfo.mutationMethod = DOMMutationMethods[propName];
	      }

	      DOMProperty.properties[propName] = propertyInfo;
	    }
	  }
	};
	var defaultValueCache = {};

	/**
	 * DOMProperty exports lookup objects that can be used like functions:
	 *
	 *   > DOMProperty.isValid['id']
	 *   true
	 *   > DOMProperty.isValid['foobar']
	 *   undefined
	 *
	 * Although this may be confusing, it performs better in general.
	 *
	 * @see http://jsperf.com/key-exists
	 * @see http://jsperf.com/key-missing
	 */
	var DOMProperty = {

	  ID_ATTRIBUTE_NAME: 'data-reactid',

	  /**
	   * Map from property "standard name" to an object with info about how to set
	   * the property in the DOM. Each object contains:
	   *
	   * attributeName:
	   *   Used when rendering markup or with `*Attribute()`.
	   * attributeNamespace
	   * propertyName:
	   *   Used on DOM node instances. (This includes properties that mutate due to
	   *   external factors.)
	   * mutationMethod:
	   *   If non-null, used instead of the property or `setAttribute()` after
	   *   initial render.
	   * mustUseAttribute:
	   *   Whether the property must be accessed and mutated using `*Attribute()`.
	   *   (This includes anything that fails `<propName> in <element>`.)
	   * mustUseProperty:
	   *   Whether the property must be accessed and mutated as an object property.
	   * hasSideEffects:
	   *   Whether or not setting a value causes side effects such as triggering
	   *   resources to be loaded or text selection changes. If true, we read from
	   *   the DOM before updating to ensure that the value is only set if it has
	   *   changed.
	   * hasBooleanValue:
	   *   Whether the property should be removed when set to a falsey value.
	   * hasNumericValue:
	   *   Whether the property must be numeric or parse as a numeric and should be
	   *   removed when set to a falsey value.
	   * hasPositiveNumericValue:
	   *   Whether the property must be positive numeric or parse as a positive
	   *   numeric and should be removed when set to a falsey value.
	   * hasOverloadedBooleanValue:
	   *   Whether the property can be used as a flag as well as with a value.
	   *   Removed when strictly equal to false; present without a value when
	   *   strictly equal to true; present with a value otherwise.
	   */
	  properties: {},

	  /**
	   * Mapping from lowercase property names to the properly cased version, used
	   * to warn in the case of missing properties. Available only in __DEV__.
	   * @type {Object}
	   */
	  getPossibleStandardName: process.env.NODE_ENV !== 'production' ? {} : null,

	  /**
	   * All of the isCustomAttribute() functions that have been injected.
	   */
	  _isCustomAttributeFunctions: [],

	  /**
	   * Checks whether a property name is a custom attribute.
	   * @method
	   */
	  isCustomAttribute: function (attributeName) {
	    for (var i = 0; i < DOMProperty._isCustomAttributeFunctions.length; i++) {
	      var isCustomAttributeFn = DOMProperty._isCustomAttributeFunctions[i];
	      if (isCustomAttributeFn(attributeName)) {
	        return true;
	      }
	    }
	    return false;
	  },

	  /**
	   * Returns the default property value for a DOM property (i.e., not an
	   * attribute). Most default values are '' or false, but not all. Worse yet,
	   * some (in particular, `type`) vary depending on the type of element.
	   *
	   * TODO: Is it better to grab all the possible properties when creating an
	   * element to avoid having to create the same element twice?
	   */
	  getDefaultValueForProperty: function (nodeName, prop) {
	    var nodeDefaults = defaultValueCache[nodeName];
	    var testElement;
	    if (!nodeDefaults) {
	      defaultValueCache[nodeName] = nodeDefaults = {};
	    }
	    if (!(prop in nodeDefaults)) {
	      testElement = document.createElement(nodeName);
	      nodeDefaults[prop] = testElement[prop];
	    }
	    return nodeDefaults[prop];
	  },

	  injection: DOMPropertyInjection
	};

	module.exports = DOMProperty;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(8)))

/***/ },
/* 28 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule quoteAttributeValueForBrowser
	 */

	'use strict';

	var escapeTextContentForBrowser = __webpack_require__(25);

	/**
	 * Escapes attribute value to prevent scripting attacks.
	 *
	 * @param {*} value Value to escape.
	 * @return {string} An escaped string.
	 */
	function quoteAttributeValueForBrowser(value) {
	  return '"' + escapeTextContentForBrowser(value) + '"';
	}

	module.exports = quoteAttributeValueForBrowser;

/***/ },
/* 29 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2014-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule warning
	 */

	'use strict';

	var emptyFunction = __webpack_require__(19);

	/**
	 * Similar to invariant but only logs a warning if the condition is not met.
	 * This can be used to log issues in development environments in critical
	 * paths. Removing the logging code for production environments will keep the
	 * same logic and follow the same code paths.
	 */

	var warning = emptyFunction;

	if (process.env.NODE_ENV !== 'production') {
	  warning = function (condition, format) {
	    for (var _len = arguments.length, args = Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
	      args[_key - 2] = arguments[_key];
	    }

	    if (format === undefined) {
	      throw new Error('`warning(condition, format, ...args)` requires a warning ' + 'message argument');
	    }

	    if (format.indexOf('Failed Composite propType: ') === 0) {
	      return; // Ignore CompositeComponent proptype check.
	    }

	    if (!condition) {
	      var argIndex = 0;
	      var message = 'Warning: ' + format.replace(/%s/g, function () {
	        return args[argIndex++];
	      });
	      if (typeof console !== 'undefined') {
	        console.error(message);
	      }
	      try {
	        // --- Welcome to debugging React ---
	        // This error was thrown as a convenience so that you can use this stack
	        // to find the callsite that caused this warning to fire.
	        throw new Error(message);
	      } catch (x) {}
	    }
	  };
	}

	module.exports = warning;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(8)))

/***/ },
/* 30 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactComponentBrowserEnvironment
	 */

	'use strict';

	var ReactDOMIDOperations = __webpack_require__(31);
	var ReactMount = __webpack_require__(32);

	/**
	 * Abstracts away all functionality of the reconciler that requires knowledge of
	 * the browser context. TODO: These callers should be refactored to avoid the
	 * need for this injection.
	 */
	var ReactComponentBrowserEnvironment = {

	  processChildrenUpdates: ReactDOMIDOperations.dangerouslyProcessChildrenUpdates,

	  replaceNodeWithMarkupByID: ReactDOMIDOperations.dangerouslyReplaceNodeWithMarkupByID,

	  /**
	   * If a particular environment requires that some resources be cleaned up,
	   * specify this in the injected Mixin. In the DOM, we would likely want to
	   * purge any cached node ID lookups.
	   *
	   * @private
	   */
	  unmountIDFromEnvironment: function (rootNodeID) {
	    ReactMount.purgeID(rootNodeID);
	  }

	};

	module.exports = ReactComponentBrowserEnvironment;

/***/ },
/* 31 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDOMIDOperations
	 * @typechecks static-only
	 */

	'use strict';

	var DOMChildrenOperations = __webpack_require__(11);
	var DOMPropertyOperations = __webpack_require__(26);
	var ReactMount = __webpack_require__(32);
	var ReactPerf = __webpack_require__(22);

	var invariant = __webpack_require__(17);

	/**
	 * Errors for properties that should not be updated with `updatePropertyByID()`.
	 *
	 * @type {object}
	 * @private
	 */
	var INVALID_PROPERTY_ERRORS = {
	  dangerouslySetInnerHTML: '`dangerouslySetInnerHTML` must be set using `updateInnerHTMLByID()`.',
	  style: '`style` must be set using `updateStylesByID()`.'
	};

	/**
	 * Operations used to process updates to DOM nodes.
	 */
	var ReactDOMIDOperations = {

	  /**
	   * Updates a DOM node with new property values. This should only be used to
	   * update DOM properties in `DOMProperty`.
	   *
	   * @param {string} id ID of the node to update.
	   * @param {string} name A valid property name, see `DOMProperty`.
	   * @param {*} value New value of the property.
	   * @internal
	   */
	  updatePropertyByID: function (id, name, value) {
	    var node = ReactMount.getNode(id);
	    !!INVALID_PROPERTY_ERRORS.hasOwnProperty(name) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'updatePropertyByID(...): %s', INVALID_PROPERTY_ERRORS[name]) : invariant(false) : undefined;

	    // If we're updating to null or undefined, we should remove the property
	    // from the DOM node instead of inadvertantly setting to a string. This
	    // brings us in line with the same behavior we have on initial render.
	    if (value != null) {
	      DOMPropertyOperations.setValueForProperty(node, name, value);
	    } else {
	      DOMPropertyOperations.deleteValueForProperty(node, name);
	    }
	  },

	  /**
	   * Replaces a DOM node that exists in the document with markup.
	   *
	   * @param {string} id ID of child to be replaced.
	   * @param {string} markup Dangerous markup to inject in place of child.
	   * @internal
	   * @see {Danger.dangerouslyReplaceNodeWithMarkup}
	   */
	  dangerouslyReplaceNodeWithMarkupByID: function (id, markup) {
	    var node = ReactMount.getNode(id);
	    DOMChildrenOperations.dangerouslyReplaceNodeWithMarkup(node, markup);
	  },

	  /**
	   * Updates a component's children by processing a series of updates.
	   *
	   * @param {array<object>} updates List of update configurations.
	   * @param {array<string>} markup List of markup strings.
	   * @internal
	   */
	  dangerouslyProcessChildrenUpdates: function (updates, markup) {
	    for (var i = 0; i < updates.length; i++) {
	      updates[i].parentNode = ReactMount.getNode(updates[i].parentID);
	    }
	    DOMChildrenOperations.processUpdates(updates, markup);
	  }
	};

	ReactPerf.measureMethods(ReactDOMIDOperations, 'ReactDOMIDOperations', {
	  dangerouslyReplaceNodeWithMarkupByID: 'dangerouslyReplaceNodeWithMarkupByID',
	  dangerouslyProcessChildrenUpdates: 'dangerouslyProcessChildrenUpdates'
	});

	module.exports = ReactDOMIDOperations;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(8)))

/***/ },
/* 32 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactMount
	 */

	'use strict';

	var DOMProperty = __webpack_require__(27);
	var ReactBrowserEventEmitter = __webpack_require__(33);
	var ReactCurrentOwner = __webpack_require__(9);
	var ReactDOMFeatureFlags = __webpack_require__(45);
	var ReactElement = __webpack_require__(46);
	var ReactEmptyComponentRegistry = __webpack_require__(47);
	var ReactInstanceHandles = __webpack_require__(48);
	var ReactInstanceMap = __webpack_require__(50);
	var ReactMarkupChecksum = __webpack_require__(51);
	var ReactPerf = __webpack_require__(22);
	var ReactReconciler = __webpack_require__(53);
	var ReactUpdateQueue = __webpack_require__(56);
	var ReactUpdates = __webpack_require__(57);

	var assign = __webpack_require__(43);
	var emptyObject = __webpack_require__(61);
	var containsNode = __webpack_require__(62);
	var instantiateReactComponent = __webpack_require__(65);
	var invariant = __webpack_require__(17);
	var setInnerHTML = __webpack_require__(23);
	var shouldUpdateReactComponent = __webpack_require__(70);
	var validateDOMNesting = __webpack_require__(73);
	var warning = __webpack_require__(29);

	var ATTR_NAME = DOMProperty.ID_ATTRIBUTE_NAME;
	var nodeCache = {};

	var ELEMENT_NODE_TYPE = 1;
	var DOC_NODE_TYPE = 9;
	var DOCUMENT_FRAGMENT_NODE_TYPE = 11;

	var ownerDocumentContextKey = '__ReactMount_ownerDocument$' + Math.random().toString(36).slice(2);

	/** Mapping from reactRootID to React component instance. */
	var instancesByReactRootID = {};

	/** Mapping from reactRootID to `container` nodes. */
	var containersByReactRootID = {};

	if (process.env.NODE_ENV !== 'production') {
	  /** __DEV__-only mapping from reactRootID to root elements. */
	  var rootElementsByReactRootID = {};
	}

	// Used to store breadth-first search state in findComponentRoot.
	var findComponentRootReusableArray = [];

	/**
	 * Finds the index of the first character
	 * that's not common between the two given strings.
	 *
	 * @return {number} the index of the character where the strings diverge
	 */
	function firstDifferenceIndex(string1, string2) {
	  var minLen = Math.min(string1.length, string2.length);
	  for (var i = 0; i < minLen; i++) {
	    if (string1.charAt(i) !== string2.charAt(i)) {
	      return i;
	    }
	  }
	  return string1.length === string2.length ? -1 : minLen;
	}

	/**
	 * @param {DOMElement|DOMDocument} container DOM element that may contain
	 * a React component
	 * @return {?*} DOM element that may have the reactRoot ID, or null.
	 */
	function getReactRootElementInContainer(container) {
	  if (!container) {
	    return null;
	  }

	  if (container.nodeType === DOC_NODE_TYPE) {
	    return container.documentElement;
	  } else {
	    return container.firstChild;
	  }
	}

	/**
	 * @param {DOMElement} container DOM element that may contain a React component.
	 * @return {?string} A "reactRoot" ID, if a React component is rendered.
	 */
	function getReactRootID(container) {
	  var rootElement = getReactRootElementInContainer(container);
	  return rootElement && ReactMount.getID(rootElement);
	}

	/**
	 * Accessing node[ATTR_NAME] or calling getAttribute(ATTR_NAME) on a form
	 * element can return its control whose name or ID equals ATTR_NAME. All
	 * DOM nodes support `getAttributeNode` but this can also get called on
	 * other objects so just return '' if we're given something other than a
	 * DOM node (such as window).
	 *
	 * @param {?DOMElement|DOMWindow|DOMDocument|DOMTextNode} node DOM node.
	 * @return {string} ID of the supplied `domNode`.
	 */
	function getID(node) {
	  var id = internalGetID(node);
	  if (id) {
	    if (nodeCache.hasOwnProperty(id)) {
	      var cached = nodeCache[id];
	      if (cached !== node) {
	        !!isValid(cached, id) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactMount: Two valid but unequal nodes with the same `%s`: %s', ATTR_NAME, id) : invariant(false) : undefined;

	        nodeCache[id] = node;
	      }
	    } else {
	      nodeCache[id] = node;
	    }
	  }

	  return id;
	}

	function internalGetID(node) {
	  // If node is something like a window, document, or text node, none of
	  // which support attributes or a .getAttribute method, gracefully return
	  // the empty string, as if the attribute were missing.
	  return node && node.getAttribute && node.getAttribute(ATTR_NAME) || '';
	}

	/**
	 * Sets the React-specific ID of the given node.
	 *
	 * @param {DOMElement} node The DOM node whose ID will be set.
	 * @param {string} id The value of the ID attribute.
	 */
	function setID(node, id) {
	  var oldID = internalGetID(node);
	  if (oldID !== id) {
	    delete nodeCache[oldID];
	  }
	  node.setAttribute(ATTR_NAME, id);
	  nodeCache[id] = node;
	}

	/**
	 * Finds the node with the supplied React-generated DOM ID.
	 *
	 * @param {string} id A React-generated DOM ID.
	 * @return {DOMElement} DOM node with the suppled `id`.
	 * @internal
	 */
	function getNode(id) {
	  if (!nodeCache.hasOwnProperty(id) || !isValid(nodeCache[id], id)) {
	    nodeCache[id] = ReactMount.findReactNodeByID(id);
	  }
	  return nodeCache[id];
	}

	/**
	 * Finds the node with the supplied public React instance.
	 *
	 * @param {*} instance A public React instance.
	 * @return {?DOMElement} DOM node with the suppled `id`.
	 * @internal
	 */
	function getNodeFromInstance(instance) {
	  var id = ReactInstanceMap.get(instance)._rootNodeID;
	  if (ReactEmptyComponentRegistry.isNullComponentID(id)) {
	    return null;
	  }
	  if (!nodeCache.hasOwnProperty(id) || !isValid(nodeCache[id], id)) {
	    nodeCache[id] = ReactMount.findReactNodeByID(id);
	  }
	  return nodeCache[id];
	}

	/**
	 * A node is "valid" if it is contained by a currently mounted container.
	 *
	 * This means that the node does not have to be contained by a document in
	 * order to be considered valid.
	 *
	 * @param {?DOMElement} node The candidate DOM node.
	 * @param {string} id The expected ID of the node.
	 * @return {boolean} Whether the node is contained by a mounted container.
	 */
	function isValid(node, id) {
	  if (node) {
	    !(internalGetID(node) === id) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactMount: Unexpected modification of `%s`', ATTR_NAME) : invariant(false) : undefined;

	    var container = ReactMount.findReactContainerForID(id);
	    if (container && containsNode(container, node)) {
	      return true;
	    }
	  }

	  return false;
	}

	/**
	 * Causes the cache to forget about one React-specific ID.
	 *
	 * @param {string} id The ID to forget.
	 */
	function purgeID(id) {
	  delete nodeCache[id];
	}

	var deepestNodeSoFar = null;
	function findDeepestCachedAncestorImpl(ancestorID) {
	  var ancestor = nodeCache[ancestorID];
	  if (ancestor && isValid(ancestor, ancestorID)) {
	    deepestNodeSoFar = ancestor;
	  } else {
	    // This node isn't populated in the cache, so presumably none of its
	    // descendants are. Break out of the loop.
	    return false;
	  }
	}

	/**
	 * Return the deepest cached node whose ID is a prefix of `targetID`.
	 */
	function findDeepestCachedAncestor(targetID) {
	  deepestNodeSoFar = null;
	  ReactInstanceHandles.traverseAncestors(targetID, findDeepestCachedAncestorImpl);

	  var foundNode = deepestNodeSoFar;
	  deepestNodeSoFar = null;
	  return foundNode;
	}

	/**
	 * Mounts this component and inserts it into the DOM.
	 *
	 * @param {ReactComponent} componentInstance The instance to mount.
	 * @param {string} rootID DOM ID of the root node.
	 * @param {DOMElement} container DOM element to mount into.
	 * @param {ReactReconcileTransaction} transaction
	 * @param {boolean} shouldReuseMarkup If true, do not insert markup
	 */
	function mountComponentIntoNode(componentInstance, rootID, container, transaction, shouldReuseMarkup, context) {
	  if (ReactDOMFeatureFlags.useCreateElement) {
	    context = assign({}, context);
	    if (container.nodeType === DOC_NODE_TYPE) {
	      context[ownerDocumentContextKey] = container;
	    } else {
	      context[ownerDocumentContextKey] = container.ownerDocument;
	    }
	  }
	  if (process.env.NODE_ENV !== 'production') {
	    if (context === emptyObject) {
	      context = {};
	    }
	    var tag = container.nodeName.toLowerCase();
	    context[validateDOMNesting.ancestorInfoContextKey] = validateDOMNesting.updatedAncestorInfo(null, tag, null);
	  }
	  var markup = ReactReconciler.mountComponent(componentInstance, rootID, transaction, context);
	  componentInstance._renderedComponent._topLevelWrapper = componentInstance;
	  ReactMount._mountImageIntoNode(markup, container, shouldReuseMarkup, transaction);
	}

	/**
	 * Batched mount.
	 *
	 * @param {ReactComponent} componentInstance The instance to mount.
	 * @param {string} rootID DOM ID of the root node.
	 * @param {DOMElement} container DOM element to mount into.
	 * @param {boolean} shouldReuseMarkup If true, do not insert markup
	 */
	function batchedMountComponentIntoNode(componentInstance, rootID, container, shouldReuseMarkup, context) {
	  var transaction = ReactUpdates.ReactReconcileTransaction.getPooled(
	  /* forceHTML */shouldReuseMarkup);
	  transaction.perform(mountComponentIntoNode, null, componentInstance, rootID, container, transaction, shouldReuseMarkup, context);
	  ReactUpdates.ReactReconcileTransaction.release(transaction);
	}

	/**
	 * Unmounts a component and removes it from the DOM.
	 *
	 * @param {ReactComponent} instance React component instance.
	 * @param {DOMElement} container DOM element to unmount from.
	 * @final
	 * @internal
	 * @see {ReactMount.unmountComponentAtNode}
	 */
	function unmountComponentFromNode(instance, container) {
	  ReactReconciler.unmountComponent(instance);

	  if (container.nodeType === DOC_NODE_TYPE) {
	    container = container.documentElement;
	  }

	  // http://jsperf.com/emptying-a-node
	  while (container.lastChild) {
	    container.removeChild(container.lastChild);
	  }
	}

	/**
	 * True if the supplied DOM node has a direct React-rendered child that is
	 * not a React root element. Useful for warning in `render`,
	 * `unmountComponentAtNode`, etc.
	 *
	 * @param {?DOMElement} node The candidate DOM node.
	 * @return {boolean} True if the DOM element contains a direct child that was
	 * rendered by React but is not a root element.
	 * @internal
	 */
	function hasNonRootReactChild(node) {
	  var reactRootID = getReactRootID(node);
	  return reactRootID ? reactRootID !== ReactInstanceHandles.getReactRootIDFromNodeID(reactRootID) : false;
	}

	/**
	 * Returns the first (deepest) ancestor of a node which is rendered by this copy
	 * of React.
	 */
	function findFirstReactDOMImpl(node) {
	  // This node might be from another React instance, so we make sure not to
	  // examine the node cache here
	  for (; node && node.parentNode !== node; node = node.parentNode) {
	    if (node.nodeType !== 1) {
	      // Not a DOMElement, therefore not a React component
	      continue;
	    }
	    var nodeID = internalGetID(node);
	    if (!nodeID) {
	      continue;
	    }
	    var reactRootID = ReactInstanceHandles.getReactRootIDFromNodeID(nodeID);

	    // If containersByReactRootID contains the container we find by crawling up
	    // the tree, we know that this instance of React rendered the node.
	    // nb. isValid's strategy (with containsNode) does not work because render
	    // trees may be nested and we don't want a false positive in that case.
	    var current = node;
	    var lastID;
	    do {
	      lastID = internalGetID(current);
	      current = current.parentNode;
	      if (current == null) {
	        // The passed-in node has been detached from the container it was
	        // originally rendered into.
	        return null;
	      }
	    } while (lastID !== reactRootID);

	    if (current === containersByReactRootID[reactRootID]) {
	      return node;
	    }
	  }
	  return null;
	}

	/**
	 * Temporary (?) hack so that we can store all top-level pending updates on
	 * composites instead of having to worry about different types of components
	 * here.
	 */
	var TopLevelWrapper = function () {};
	TopLevelWrapper.prototype.isReactComponent = {};
	if (process.env.NODE_ENV !== 'production') {
	  TopLevelWrapper.displayName = 'TopLevelWrapper';
	}
	TopLevelWrapper.prototype.render = function () {
	  // this.props is actually a ReactElement
	  return this.props;
	};

	/**
	 * Mounting is the process of initializing a React component by creating its
	 * representative DOM elements and inserting them into a supplied `container`.
	 * Any prior content inside `container` is destroyed in the process.
	 *
	 *   ReactMount.render(
	 *     component,
	 *     document.getElementById('container')
	 *   );
	 *
	 *   <div id="container">                   <-- Supplied `container`.
	 *     <div data-reactid=".3">              <-- Rendered reactRoot of React
	 *       // ...                                 component.
	 *     </div>
	 *   </div>
	 *
	 * Inside of `container`, the first element rendered is the "reactRoot".
	 */
	var ReactMount = {

	  TopLevelWrapper: TopLevelWrapper,

	  /** Exposed for debugging purposes **/
	  _instancesByReactRootID: instancesByReactRootID,

	  /**
	   * This is a hook provided to support rendering React components while
	   * ensuring that the apparent scroll position of its `container` does not
	   * change.
	   *
	   * @param {DOMElement} container The `container` being rendered into.
	   * @param {function} renderCallback This must be called once to do the render.
	   */
	  scrollMonitor: function (container, renderCallback) {
	    renderCallback();
	  },

	  /**
	   * Take a component that's already mounted into the DOM and replace its props
	   * @param {ReactComponent} prevComponent component instance already in the DOM
	   * @param {ReactElement} nextElement component instance to render
	   * @param {DOMElement} container container to render into
	   * @param {?function} callback function triggered on completion
	   */
	  _updateRootComponent: function (prevComponent, nextElement, container, callback) {
	    ReactMount.scrollMonitor(container, function () {
	      ReactUpdateQueue.enqueueElementInternal(prevComponent, nextElement);
	      if (callback) {
	        ReactUpdateQueue.enqueueCallbackInternal(prevComponent, callback);
	      }
	    });

	    if (process.env.NODE_ENV !== 'production') {
	      // Record the root element in case it later gets transplanted.
	      rootElementsByReactRootID[getReactRootID(container)] = getReactRootElementInContainer(container);
	    }

	    return prevComponent;
	  },

	  /**
	   * Register a component into the instance map and starts scroll value
	   * monitoring
	   * @param {ReactComponent} nextComponent component instance to render
	   * @param {DOMElement} container container to render into
	   * @return {string} reactRoot ID prefix
	   */
	  _registerComponent: function (nextComponent, container) {
	    !(container && (container.nodeType === ELEMENT_NODE_TYPE || container.nodeType === DOC_NODE_TYPE || container.nodeType === DOCUMENT_FRAGMENT_NODE_TYPE)) ? process.env.NODE_ENV !== 'production' ? invariant(false, '_registerComponent(...): Target container is not a DOM element.') : invariant(false) : undefined;

	    ReactBrowserEventEmitter.ensureScrollValueMonitoring();

	    var reactRootID = ReactMount.registerContainer(container);
	    instancesByReactRootID[reactRootID] = nextComponent;
	    return reactRootID;
	  },

	  /**
	   * Render a new component into the DOM.
	   * @param {ReactElement} nextElement element to render
	   * @param {DOMElement} container container to render into
	   * @param {boolean} shouldReuseMarkup if we should skip the markup insertion
	   * @return {ReactComponent} nextComponent
	   */
	  _renderNewRootComponent: function (nextElement, container, shouldReuseMarkup, context) {
	    // Various parts of our code (such as ReactCompositeComponent's
	    // _renderValidatedComponent) assume that calls to render aren't nested;
	    // verify that that's the case.
	    process.env.NODE_ENV !== 'production' ? warning(ReactCurrentOwner.current == null, '_renderNewRootComponent(): Render methods should be a pure function ' + 'of props and state; triggering nested component updates from ' + 'render is not allowed. If necessary, trigger nested updates in ' + 'componentDidUpdate. Check the render method of %s.', ReactCurrentOwner.current && ReactCurrentOwner.current.getName() || 'ReactCompositeComponent') : undefined;

	    var componentInstance = instantiateReactComponent(nextElement, null);
	    var reactRootID = ReactMount._registerComponent(componentInstance, container);

	    // The initial render is synchronous but any updates that happen during
	    // rendering, in componentWillMount or componentDidMount, will be batched
	    // according to the current batching strategy.

	    ReactUpdates.batchedUpdates(batchedMountComponentIntoNode, componentInstance, reactRootID, container, shouldReuseMarkup, context);

	    if (process.env.NODE_ENV !== 'production') {
	      // Record the root element in case it later gets transplanted.
	      rootElementsByReactRootID[reactRootID] = getReactRootElementInContainer(container);
	    }

	    return componentInstance;
	  },

	  /**
	   * Renders a React component into the DOM in the supplied `container`.
	   *
	   * If the React component was previously rendered into `container`, this will
	   * perform an update on it and only mutate the DOM as necessary to reflect the
	   * latest React component.
	   *
	   * @param {ReactComponent} parentComponent The conceptual parent of this render tree.
	   * @param {ReactElement} nextElement Component element to render.
	   * @param {DOMElement} container DOM element to render into.
	   * @param {?function} callback function triggered on completion
	   * @return {ReactComponent} Component instance rendered in `container`.
	   */
	  renderSubtreeIntoContainer: function (parentComponent, nextElement, container, callback) {
	    !(parentComponent != null && parentComponent._reactInternalInstance != null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'parentComponent must be a valid React Component') : invariant(false) : undefined;
	    return ReactMount._renderSubtreeIntoContainer(parentComponent, nextElement, container, callback);
	  },

	  _renderSubtreeIntoContainer: function (parentComponent, nextElement, container, callback) {
	    !ReactElement.isValidElement(nextElement) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactDOM.render(): Invalid component element.%s', typeof nextElement === 'string' ? ' Instead of passing an element string, make sure to instantiate ' + 'it by passing it to React.createElement.' : typeof nextElement === 'function' ? ' Instead of passing a component class, make sure to instantiate ' + 'it by passing it to React.createElement.' :
	    // Check if it quacks like an element
	    nextElement != null && nextElement.props !== undefined ? ' This may be caused by unintentionally loading two independent ' + 'copies of React.' : '') : invariant(false) : undefined;

	    process.env.NODE_ENV !== 'production' ? warning(!container || !container.tagName || container.tagName.toUpperCase() !== 'BODY', 'render(): Rendering components directly into document.body is ' + 'discouraged, since its children are often manipulated by third-party ' + 'scripts and browser extensions. This may lead to subtle ' + 'reconciliation issues. Try rendering into a container element created ' + 'for your app.') : undefined;

	    var nextWrappedElement = new ReactElement(TopLevelWrapper, null, null, null, null, null, nextElement);

	    var prevComponent = instancesByReactRootID[getReactRootID(container)];

	    if (prevComponent) {
	      var prevWrappedElement = prevComponent._currentElement;
	      var prevElement = prevWrappedElement.props;
	      if (shouldUpdateReactComponent(prevElement, nextElement)) {
	        return ReactMount._updateRootComponent(prevComponent, nextWrappedElement, container, callback)._renderedComponent.getPublicInstance();
	      } else {
	        ReactMount.unmountComponentAtNode(container);
	      }
	    }

	    var reactRootElement = getReactRootElementInContainer(container);
	    var containerHasReactMarkup = reactRootElement && !!internalGetID(reactRootElement);
	    var containerHasNonRootReactChild = hasNonRootReactChild(container);

	    if (process.env.NODE_ENV !== 'production') {
	      process.env.NODE_ENV !== 'production' ? warning(!containerHasNonRootReactChild, 'render(...): Replacing React-rendered children with a new root ' + 'component. If you intended to update the children of this node, ' + 'you should instead have the existing children update their state ' + 'and render the new components instead of calling ReactDOM.render.') : undefined;

	      if (!containerHasReactMarkup || reactRootElement.nextSibling) {
	        var rootElementSibling = reactRootElement;
	        while (rootElementSibling) {
	          if (internalGetID(rootElementSibling)) {
	            process.env.NODE_ENV !== 'production' ? warning(false, 'render(): Target node has markup rendered by React, but there ' + 'are unrelated nodes as well. This is most commonly caused by ' + 'white-space inserted around server-rendered markup.') : undefined;
	            break;
	          }
	          rootElementSibling = rootElementSibling.nextSibling;
	        }
	      }
	    }

	    var shouldReuseMarkup = containerHasReactMarkup && !prevComponent && !containerHasNonRootReactChild;
	    var component = ReactMount._renderNewRootComponent(nextWrappedElement, container, shouldReuseMarkup, parentComponent != null ? parentComponent._reactInternalInstance._processChildContext(parentComponent._reactInternalInstance._context) : emptyObject)._renderedComponent.getPublicInstance();
	    if (callback) {
	      callback.call(component);
	    }
	    return component;
	  },

	  /**
	   * Renders a React component into the DOM in the supplied `container`.
	   *
	   * If the React component was previously rendered into `container`, this will
	   * perform an update on it and only mutate the DOM as necessary to reflect the
	   * latest React component.
	   *
	   * @param {ReactElement} nextElement Component element to render.
	   * @param {DOMElement} container DOM element to render into.
	   * @param {?function} callback function triggered on completion
	   * @return {ReactComponent} Component instance rendered in `container`.
	   */
	  render: function (nextElement, container, callback) {
	    return ReactMount._renderSubtreeIntoContainer(null, nextElement, container, callback);
	  },

	  /**
	   * Registers a container node into which React components will be rendered.
	   * This also creates the "reactRoot" ID that will be assigned to the element
	   * rendered within.
	   *
	   * @param {DOMElement} container DOM element to register as a container.
	   * @return {string} The "reactRoot" ID of elements rendered within.
	   */
	  registerContainer: function (container) {
	    var reactRootID = getReactRootID(container);
	    if (reactRootID) {
	      // If one exists, make sure it is a valid "reactRoot" ID.
	      reactRootID = ReactInstanceHandles.getReactRootIDFromNodeID(reactRootID);
	    }
	    if (!reactRootID) {
	      // No valid "reactRoot" ID found, create one.
	      reactRootID = ReactInstanceHandles.createReactRootID();
	    }
	    containersByReactRootID[reactRootID] = container;
	    return reactRootID;
	  },

	  /**
	   * Unmounts and destroys the React component rendered in the `container`.
	   *
	   * @param {DOMElement} container DOM element containing a React component.
	   * @return {boolean} True if a component was found in and unmounted from
	   *                   `container`
	   */
	  unmountComponentAtNode: function (container) {
	    // Various parts of our code (such as ReactCompositeComponent's
	    // _renderValidatedComponent) assume that calls to render aren't nested;
	    // verify that that's the case. (Strictly speaking, unmounting won't cause a
	    // render but we still don't expect to be in a render call here.)
	    process.env.NODE_ENV !== 'production' ? warning(ReactCurrentOwner.current == null, 'unmountComponentAtNode(): Render methods should be a pure function ' + 'of props and state; triggering nested component updates from render ' + 'is not allowed. If necessary, trigger nested updates in ' + 'componentDidUpdate. Check the render method of %s.', ReactCurrentOwner.current && ReactCurrentOwner.current.getName() || 'ReactCompositeComponent') : undefined;

	    !(container && (container.nodeType === ELEMENT_NODE_TYPE || container.nodeType === DOC_NODE_TYPE || container.nodeType === DOCUMENT_FRAGMENT_NODE_TYPE)) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'unmountComponentAtNode(...): Target container is not a DOM element.') : invariant(false) : undefined;

	    var reactRootID = getReactRootID(container);
	    var component = instancesByReactRootID[reactRootID];
	    if (!component) {
	      // Check if the node being unmounted was rendered by React, but isn't a
	      // root node.
	      var containerHasNonRootReactChild = hasNonRootReactChild(container);

	      // Check if the container itself is a React root node.
	      var containerID = internalGetID(container);
	      var isContainerReactRoot = containerID && containerID === ReactInstanceHandles.getReactRootIDFromNodeID(containerID);

	      if (process.env.NODE_ENV !== 'production') {
	        process.env.NODE_ENV !== 'production' ? warning(!containerHasNonRootReactChild, 'unmountComponentAtNode(): The node you\'re attempting to unmount ' + 'was rendered by React and is not a top-level container. %s', isContainerReactRoot ? 'You may have accidentally passed in a React root node instead ' + 'of its container.' : 'Instead, have the parent component update its state and ' + 'rerender in order to remove this component.') : undefined;
	      }

	      return false;
	    }
	    ReactUpdates.batchedUpdates(unmountComponentFromNode, component, container);
	    delete instancesByReactRootID[reactRootID];
	    delete containersByReactRootID[reactRootID];
	    if (process.env.NODE_ENV !== 'production') {
	      delete rootElementsByReactRootID[reactRootID];
	    }
	    return true;
	  },

	  /**
	   * Finds the container DOM element that contains React component to which the
	   * supplied DOM `id` belongs.
	   *
	   * @param {string} id The ID of an element rendered by a React component.
	   * @return {?DOMElement} DOM element that contains the `id`.
	   */
	  findReactContainerForID: function (id) {
	    var reactRootID = ReactInstanceHandles.getReactRootIDFromNodeID(id);
	    var container = containersByReactRootID[reactRootID];

	    if (process.env.NODE_ENV !== 'production') {
	      var rootElement = rootElementsByReactRootID[reactRootID];
	      if (rootElement && rootElement.parentNode !== container) {
	        process.env.NODE_ENV !== 'production' ? warning(
	        // Call internalGetID here because getID calls isValid which calls
	        // findReactContainerForID (this function).
	        internalGetID(rootElement) === reactRootID, 'ReactMount: Root element ID differed from reactRootID.') : undefined;
	        var containerChild = container.firstChild;
	        if (containerChild && reactRootID === internalGetID(containerChild)) {
	          // If the container has a new child with the same ID as the old
	          // root element, then rootElementsByReactRootID[reactRootID] is
	          // just stale and needs to be updated. The case that deserves a
	          // warning is when the container is empty.
	          rootElementsByReactRootID[reactRootID] = containerChild;
	        } else {
	          process.env.NODE_ENV !== 'production' ? warning(false, 'ReactMount: Root element has been removed from its original ' + 'container. New container: %s', rootElement.parentNode) : undefined;
	        }
	      }
	    }

	    return container;
	  },

	  /**
	   * Finds an element rendered by React with the supplied ID.
	   *
	   * @param {string} id ID of a DOM node in the React component.
	   * @return {DOMElement} Root DOM node of the React component.
	   */
	  findReactNodeByID: function (id) {
	    var reactRoot = ReactMount.findReactContainerForID(id);
	    return ReactMount.findComponentRoot(reactRoot, id);
	  },

	  /**
	   * Traverses up the ancestors of the supplied node to find a node that is a
	   * DOM representation of a React component rendered by this copy of React.
	   *
	   * @param {*} node
	   * @return {?DOMEventTarget}
	   * @internal
	   */
	  getFirstReactDOM: function (node) {
	    return findFirstReactDOMImpl(node);
	  },

	  /**
	   * Finds a node with the supplied `targetID` inside of the supplied
	   * `ancestorNode`.  Exploits the ID naming scheme to perform the search
	   * quickly.
	   *
	   * @param {DOMEventTarget} ancestorNode Search from this root.
	   * @pararm {string} targetID ID of the DOM representation of the component.
	   * @return {DOMEventTarget} DOM node with the supplied `targetID`.
	   * @internal
	   */
	  findComponentRoot: function (ancestorNode, targetID) {
	    var firstChildren = findComponentRootReusableArray;
	    var childIndex = 0;

	    var deepestAncestor = findDeepestCachedAncestor(targetID) || ancestorNode;

	    if (process.env.NODE_ENV !== 'production') {
	      // This will throw on the next line; give an early warning
	      process.env.NODE_ENV !== 'production' ? warning(deepestAncestor != null, 'React can\'t find the root component node for data-reactid value ' + '`%s`. If you\'re seeing this message, it probably means that ' + 'you\'ve loaded two copies of React on the page. At this time, only ' + 'a single copy of React can be loaded at a time.', targetID) : undefined;
	    }

	    firstChildren[0] = deepestAncestor.firstChild;
	    firstChildren.length = 1;

	    while (childIndex < firstChildren.length) {
	      var child = firstChildren[childIndex++];
	      var targetChild;

	      while (child) {
	        var childID = ReactMount.getID(child);
	        if (childID) {
	          // Even if we find the node we're looking for, we finish looping
	          // through its siblings to ensure they're cached so that we don't have
	          // to revisit this node again. Otherwise, we make n^2 calls to getID
	          // when visiting the many children of a single node in order.

	          if (targetID === childID) {
	            targetChild = child;
	          } else if (ReactInstanceHandles.isAncestorIDOf(childID, targetID)) {
	            // If we find a child whose ID is an ancestor of the given ID,
	            // then we can be sure that we only want to search the subtree
	            // rooted at this child, so we can throw out the rest of the
	            // search state.
	            firstChildren.length = childIndex = 0;
	            firstChildren.push(child.firstChild);
	          }
	        } else {
	          // If this child had no ID, then there's a chance that it was
	          // injected automatically by the browser, as when a `<table>`
	          // element sprouts an extra `<tbody>` child as a side effect of
	          // `.innerHTML` parsing. Optimistically continue down this
	          // branch, but not before examining the other siblings.
	          firstChildren.push(child.firstChild);
	        }

	        child = child.nextSibling;
	      }

	      if (targetChild) {
	        // Emptying firstChildren/findComponentRootReusableArray is
	        // not necessary for correctness, but it helps the GC reclaim
	        // any nodes that were left at the end of the search.
	        firstChildren.length = 0;

	        return targetChild;
	      }
	    }

	    firstChildren.length = 0;

	     true ? process.env.NODE_ENV !== 'production' ? invariant(false, 'findComponentRoot(..., %s): Unable to find element. This probably ' + 'means the DOM was unexpectedly mutated (e.g., by the browser), ' + 'usually due to forgetting a <tbody> when using tables, nesting tags ' + 'like <form>, <p>, or <a>, or using non-SVG elements in an <svg> ' + 'parent. ' + 'Try inspecting the child nodes of the element with React ID `%s`.', targetID, ReactMount.getID(ancestorNode)) : invariant(false) : undefined;
	  },

	  _mountImageIntoNode: function (markup, container, shouldReuseMarkup, transaction) {
	    !(container && (container.nodeType === ELEMENT_NODE_TYPE || container.nodeType === DOC_NODE_TYPE || container.nodeType === DOCUMENT_FRAGMENT_NODE_TYPE)) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'mountComponentIntoNode(...): Target container is not valid.') : invariant(false) : undefined;

	    if (shouldReuseMarkup) {
	      var rootElement = getReactRootElementInContainer(container);
	      if (ReactMarkupChecksum.canReuseMarkup(markup, rootElement)) {
	        return;
	      } else {
	        var checksum = rootElement.getAttribute(ReactMarkupChecksum.CHECKSUM_ATTR_NAME);
	        rootElement.removeAttribute(ReactMarkupChecksum.CHECKSUM_ATTR_NAME);

	        var rootMarkup = rootElement.outerHTML;
	        rootElement.setAttribute(ReactMarkupChecksum.CHECKSUM_ATTR_NAME, checksum);

	        var normalizedMarkup = markup;
	        if (process.env.NODE_ENV !== 'production') {
	          // because rootMarkup is retrieved from the DOM, various normalizations
	          // will have occurred which will not be present in `markup`. Here,
	          // insert markup into a <div> or <iframe> depending on the container
	          // type to perform the same normalizations before comparing.
	          var normalizer;
	          if (container.nodeType === ELEMENT_NODE_TYPE) {
	            normalizer = document.createElement('div');
	            normalizer.innerHTML = markup;
	            normalizedMarkup = normalizer.innerHTML;
	          } else {
	            normalizer = document.createElement('iframe');
	            document.body.appendChild(normalizer);
	            normalizer.contentDocument.write(markup);
	            normalizedMarkup = normalizer.contentDocument.documentElement.outerHTML;
	            document.body.removeChild(normalizer);
	          }
	        }

	        var diffIndex = firstDifferenceIndex(normalizedMarkup, rootMarkup);
	        var difference = ' (client) ' + normalizedMarkup.substring(diffIndex - 20, diffIndex + 20) + '\n (server) ' + rootMarkup.substring(diffIndex - 20, diffIndex + 20);

	        !(container.nodeType !== DOC_NODE_TYPE) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'You\'re trying to render a component to the document using ' + 'server rendering but the checksum was invalid. This usually ' + 'means you rendered a different component type or props on ' + 'the client from the one on the server, or your render() ' + 'methods are impure. React cannot handle this case due to ' + 'cross-browser quirks by rendering at the document root. You ' + 'should look for environment dependent code in your components ' + 'and ensure the props are the same client and server side:\n%s', difference) : invariant(false) : undefined;

	        if (process.env.NODE_ENV !== 'production') {
	          process.env.NODE_ENV !== 'production' ? warning(false, 'React attempted to reuse markup in a container but the ' + 'checksum was invalid. This generally means that you are ' + 'using server rendering and the markup generated on the ' + 'server was not what the client was expecting. React injected ' + 'new markup to compensate which works but you have lost many ' + 'of the benefits of server rendering. Instead, figure out ' + 'why the markup being generated is different on the client ' + 'or server:\n%s', difference) : undefined;
	        }
	      }
	    }

	    !(container.nodeType !== DOC_NODE_TYPE) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'You\'re trying to render a component to the document but ' + 'you didn\'t use server rendering. We can\'t do this ' + 'without using server rendering due to cross-browser quirks. ' + 'See ReactDOMServer.renderToString() for server rendering.') : invariant(false) : undefined;

	    if (transaction.useCreateElement) {
	      while (container.lastChild) {
	        container.removeChild(container.lastChild);
	      }
	      container.appendChild(markup);
	    } else {
	      setInnerHTML(container, markup);
	    }
	  },

	  ownerDocumentContextKey: ownerDocumentContextKey,

	  /**
	   * React ID utilities.
	   */

	  getReactRootID: getReactRootID,

	  getID: getID,

	  setID: setID,

	  getNode: getNode,

	  getNodeFromInstance: getNodeFromInstance,

	  isValid: isValid,

	  purgeID: purgeID
	};

	ReactPerf.measureMethods(ReactMount, 'ReactMount', {
	  _renderNewRootComponent: '_renderNewRootComponent',
	  _mountImageIntoNode: '_mountImageIntoNode'
	});

	module.exports = ReactMount;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(8)))

/***/ },
/* 33 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactBrowserEventEmitter
	 * @typechecks static-only
	 */

	'use strict';

	var EventConstants = __webpack_require__(34);
	var EventPluginHub = __webpack_require__(35);
	var EventPluginRegistry = __webpack_require__(36);
	var ReactEventEmitterMixin = __webpack_require__(41);
	var ReactPerf = __webpack_require__(22);
	var ViewportMetrics = __webpack_require__(42);

	var assign = __webpack_require__(43);
	var isEventSupported = __webpack_require__(44);

	/**
	 * Summary of `ReactBrowserEventEmitter` event handling:
	 *
	 *  - Top-level delegation is used to trap most native browser events. This
	 *    may only occur in the main thread and is the responsibility of
	 *    ReactEventListener, which is injected and can therefore support pluggable
	 *    event sources. This is the only work that occurs in the main thread.
	 *
	 *  - We normalize and de-duplicate events to account for browser quirks. This
	 *    may be done in the worker thread.
	 *
	 *  - Forward these native events (with the associated top-level type used to
	 *    trap it) to `EventPluginHub`, which in turn will ask plugins if they want
	 *    to extract any synthetic events.
	 *
	 *  - The `EventPluginHub` will then process each event by annotating them with
	 *    "dispatches", a sequence of listeners and IDs that care about that event.
	 *
	 *  - The `EventPluginHub` then dispatches the events.
	 *
	 * Overview of React and the event system:
	 *
	 * +------------+    .
	 * |    DOM     |    .
	 * +------------+    .
	 *       |           .
	 *       v           .
	 * +------------+    .
	 * | ReactEvent |    .
	 * |  Listener  |    .
	 * +------------+    .                         +-----------+
	 *       |           .               +--------+|SimpleEvent|
	 *       |           .               |         |Plugin     |
	 * +-----|------+    .               v         +-----------+
	 * |     |      |    .    +--------------+                    +------------+
	 * |     +-----------.--->|EventPluginHub|                    |    Event   |
	 * |            |    .    |              |     +-----------+  | Propagators|
	 * | ReactEvent |    .    |              |     |TapEvent   |  |------------|
	 * |  Emitter   |    .    |              |<---+|Plugin     |  |other plugin|
	 * |            |    .    |              |     +-----------+  |  utilities |
	 * |     +-----------.--->|              |                    +------------+
	 * |     |      |    .    +--------------+
	 * +-----|------+    .                ^        +-----------+
	 *       |           .                |        |Enter/Leave|
	 *       +           .                +-------+|Plugin     |
	 * +-------------+   .                         +-----------+
	 * | application |   .
	 * |-------------|   .
	 * |             |   .
	 * |             |   .
	 * +-------------+   .
	 *                   .
	 *    React Core     .  General Purpose Event Plugin System
	 */

	var alreadyListeningTo = {};
	var isMonitoringScrollValue = false;
	var reactTopListenersCounter = 0;

	// For events like 'submit' which don't consistently bubble (which we trap at a
	// lower node than `document`), binding at `document` would cause duplicate
	// events so we don't include them here
	var topEventMapping = {
	  topAbort: 'abort',
	  topBlur: 'blur',
	  topCanPlay: 'canplay',
	  topCanPlayThrough: 'canplaythrough',
	  topChange: 'change',
	  topClick: 'click',
	  topCompositionEnd: 'compositionend',
	  topCompositionStart: 'compositionstart',
	  topCompositionUpdate: 'compositionupdate',
	  topContextMenu: 'contextmenu',
	  topCopy: 'copy',
	  topCut: 'cut',
	  topDoubleClick: 'dblclick',
	  topDrag: 'drag',
	  topDragEnd: 'dragend',
	  topDragEnter: 'dragenter',
	  topDragExit: 'dragexit',
	  topDragLeave: 'dragleave',
	  topDragOver: 'dragover',
	  topDragStart: 'dragstart',
	  topDrop: 'drop',
	  topDurationChange: 'durationchange',
	  topEmptied: 'emptied',
	  topEncrypted: 'encrypted',
	  topEnded: 'ended',
	  topError: 'error',
	  topFocus: 'focus',
	  topInput: 'input',
	  topKeyDown: 'keydown',
	  topKeyPress: 'keypress',
	  topKeyUp: 'keyup',
	  topLoadedData: 'loadeddata',
	  topLoadedMetadata: 'loadedmetadata',
	  topLoadStart: 'loadstart',
	  topMouseDown: 'mousedown',
	  topMouseMove: 'mousemove',
	  topMouseOut: 'mouseout',
	  topMouseOver: 'mouseover',
	  topMouseUp: 'mouseup',
	  topPaste: 'paste',
	  topPause: 'pause',
	  topPlay: 'play',
	  topPlaying: 'playing',
	  topProgress: 'progress',
	  topRateChange: 'ratechange',
	  topScroll: 'scroll',
	  topSeeked: 'seeked',
	  topSeeking: 'seeking',
	  topSelectionChange: 'selectionchange',
	  topStalled: 'stalled',
	  topSuspend: 'suspend',
	  topTextInput: 'textInput',
	  topTimeUpdate: 'timeupdate',
	  topTouchCancel: 'touchcancel',
	  topTouchEnd: 'touchend',
	  topTouchMove: 'touchmove',
	  topTouchStart: 'touchstart',
	  topVolumeChange: 'volumechange',
	  topWaiting: 'waiting',
	  topWheel: 'wheel'
	};

	/**
	 * To ensure no conflicts with other potential React instances on the page
	 */
	var topListenersIDKey = '_reactListenersID' + String(Math.random()).slice(2);

	function getListeningForDocument(mountAt) {
	  // In IE8, `mountAt` is a host object and doesn't have `hasOwnProperty`
	  // directly.
	  if (!Object.prototype.hasOwnProperty.call(mountAt, topListenersIDKey)) {
	    mountAt[topListenersIDKey] = reactTopListenersCounter++;
	    alreadyListeningTo[mountAt[topListenersIDKey]] = {};
	  }
	  return alreadyListeningTo[mountAt[topListenersIDKey]];
	}

	/**
	 * `ReactBrowserEventEmitter` is used to attach top-level event listeners. For
	 * example:
	 *
	 *   ReactBrowserEventEmitter.putListener('myID', 'onClick', myFunction);
	 *
	 * This would allocate a "registration" of `('onClick', myFunction)` on 'myID'.
	 *
	 * @internal
	 */
	var ReactBrowserEventEmitter = assign({}, ReactEventEmitterMixin, {

	  /**
	   * Injectable event backend
	   */
	  ReactEventListener: null,

	  injection: {
	    /**
	     * @param {object} ReactEventListener
	     */
	    injectReactEventListener: function (ReactEventListener) {
	      ReactEventListener.setHandleTopLevel(ReactBrowserEventEmitter.handleTopLevel);
	      ReactBrowserEventEmitter.ReactEventListener = ReactEventListener;
	    }
	  },

	  /**
	   * Sets whether or not any created callbacks should be enabled.
	   *
	   * @param {boolean} enabled True if callbacks should be enabled.
	   */
	  setEnabled: function (enabled) {
	    if (ReactBrowserEventEmitter.ReactEventListener) {
	      ReactBrowserEventEmitter.ReactEventListener.setEnabled(enabled);
	    }
	  },

	  /**
	   * @return {boolean} True if callbacks are enabled.
	   */
	  isEnabled: function () {
	    return !!(ReactBrowserEventEmitter.ReactEventListener && ReactBrowserEventEmitter.ReactEventListener.isEnabled());
	  },

	  /**
	   * We listen for bubbled touch events on the document object.
	   *
	   * Firefox v8.01 (and possibly others) exhibited strange behavior when
	   * mounting `onmousemove` events at some node that was not the document
	   * element. The symptoms were that if your mouse is not moving over something
	   * contained within that mount point (for example on the background) the
	   * top-level listeners for `onmousemove` won't be called. However, if you
	   * register the `mousemove` on the document object, then it will of course
	   * catch all `mousemove`s. This along with iOS quirks, justifies restricting
	   * top-level listeners to the document object only, at least for these
	   * movement types of events and possibly all events.
	   *
	   * @see http://www.quirksmode.org/blog/archives/2010/09/click_event_del.html
	   *
	   * Also, `keyup`/`keypress`/`keydown` do not bubble to the window on IE, but
	   * they bubble to document.
	   *
	   * @param {string} registrationName Name of listener (e.g. `onClick`).
	   * @param {object} contentDocumentHandle Document which owns the container
	   */
	  listenTo: function (registrationName, contentDocumentHandle) {
	    var mountAt = contentDocumentHandle;
	    var isListening = getListeningForDocument(mountAt);
	    var dependencies = EventPluginRegistry.registrationNameDependencies[registrationName];

	    var topLevelTypes = EventConstants.topLevelTypes;
	    for (var i = 0; i < dependencies.length; i++) {
	      var dependency = dependencies[i];
	      if (!(isListening.hasOwnProperty(dependency) && isListening[dependency])) {
	        if (dependency === topLevelTypes.topWheel) {
	          if (isEventSupported('wheel')) {
	            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(topLevelTypes.topWheel, 'wheel', mountAt);
	          } else if (isEventSupported('mousewheel')) {
	            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(topLevelTypes.topWheel, 'mousewheel', mountAt);
	          } else {
	            // Firefox needs to capture a different mouse scroll event.
	            // @see http://www.quirksmode.org/dom/events/tests/scroll.html
	            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(topLevelTypes.topWheel, 'DOMMouseScroll', mountAt);
	          }
	        } else if (dependency === topLevelTypes.topScroll) {

	          if (isEventSupported('scroll', true)) {
	            ReactBrowserEventEmitter.ReactEventListener.trapCapturedEvent(topLevelTypes.topScroll, 'scroll', mountAt);
	          } else {
	            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(topLevelTypes.topScroll, 'scroll', ReactBrowserEventEmitter.ReactEventListener.WINDOW_HANDLE);
	          }
	        } else if (dependency === topLevelTypes.topFocus || dependency === topLevelTypes.topBlur) {

	          if (isEventSupported('focus', true)) {
	            ReactBrowserEventEmitter.ReactEventListener.trapCapturedEvent(topLevelTypes.topFocus, 'focus', mountAt);
	            ReactBrowserEventEmitter.ReactEventListener.trapCapturedEvent(topLevelTypes.topBlur, 'blur', mountAt);
	          } else if (isEventSupported('focusin')) {
	            // IE has `focusin` and `focusout` events which bubble.
	            // @see http://www.quirksmode.org/blog/archives/2008/04/delegating_the.html
	            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(topLevelTypes.topFocus, 'focusin', mountAt);
	            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(topLevelTypes.topBlur, 'focusout', mountAt);
	          }

	          // to make sure blur and focus event listeners are only attached once
	          isListening[topLevelTypes.topBlur] = true;
	          isListening[topLevelTypes.topFocus] = true;
	        } else if (topEventMapping.hasOwnProperty(dependency)) {
	          ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(dependency, topEventMapping[dependency], mountAt);
	        }

	        isListening[dependency] = true;
	      }
	    }
	  },

	  trapBubbledEvent: function (topLevelType, handlerBaseName, handle) {
	    return ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(topLevelType, handlerBaseName, handle);
	  },

	  trapCapturedEvent: function (topLevelType, handlerBaseName, handle) {
	    return ReactBrowserEventEmitter.ReactEventListener.trapCapturedEvent(topLevelType, handlerBaseName, handle);
	  },

	  /**
	   * Listens to window scroll and resize events. We cache scroll values so that
	   * application code can access them without triggering reflows.
	   *
	   * NOTE: Scroll events do not bubble.
	   *
	   * @see http://www.quirksmode.org/dom/events/scroll.html
	   */
	  ensureScrollValueMonitoring: function () {
	    if (!isMonitoringScrollValue) {
	      var refresh = ViewportMetrics.refreshScrollValues;
	      ReactBrowserEventEmitter.ReactEventListener.monitorScrollValue(refresh);
	      isMonitoringScrollValue = true;
	    }
	  },

	  eventNameDispatchConfigs: EventPluginHub.eventNameDispatchConfigs,

	  registrationNameModules: EventPluginHub.registrationNameModules,

	  putListener: EventPluginHub.putListener,

	  getListener: EventPluginHub.getListener,

	  deleteListener: EventPluginHub.deleteListener,

	  deleteAllListeners: EventPluginHub.deleteAllListeners

	});

	ReactPerf.measureMethods(ReactBrowserEventEmitter, 'ReactBrowserEventEmitter', {
	  putListener: 'putListener',
	  deleteListener: 'deleteListener'
	});

	module.exports = ReactBrowserEventEmitter;

/***/ },
/* 34 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule EventConstants
	 */

	'use strict';

	var keyMirror = __webpack_require__(21);

	var PropagationPhases = keyMirror({ bubbled: null, captured: null });

	/**
	 * Types of raw signals from the browser caught at the top level.
	 */
	var topLevelTypes = keyMirror({
	  topAbort: null,
	  topBlur: null,
	  topCanPlay: null,
	  topCanPlayThrough: null,
	  topChange: null,
	  topClick: null,
	  topCompositionEnd: null,
	  topCompositionStart: null,
	  topCompositionUpdate: null,
	  topContextMenu: null,
	  topCopy: null,
	  topCut: null,
	  topDoubleClick: null,
	  topDrag: null,
	  topDragEnd: null,
	  topDragEnter: null,
	  topDragExit: null,
	  topDragLeave: null,
	  topDragOver: null,
	  topDragStart: null,
	  topDrop: null,
	  topDurationChange: null,
	  topEmptied: null,
	  topEncrypted: null,
	  topEnded: null,
	  topError: null,
	  topFocus: null,
	  topInput: null,
	  topKeyDown: null,
	  topKeyPress: null,
	  topKeyUp: null,
	  topLoad: null,
	  topLoadedData: null,
	  topLoadedMetadata: null,
	  topLoadStart: null,
	  topMouseDown: null,
	  topMouseMove: null,
	  topMouseOut: null,
	  topMouseOver: null,
	  topMouseUp: null,
	  topPaste: null,
	  topPause: null,
	  topPlay: null,
	  topPlaying: null,
	  topProgress: null,
	  topRateChange: null,
	  topReset: null,
	  topScroll: null,
	  topSeeked: null,
	  topSeeking: null,
	  topSelectionChange: null,
	  topStalled: null,
	  topSubmit: null,
	  topSuspend: null,
	  topTextInput: null,
	  topTimeUpdate: null,
	  topTouchCancel: null,
	  topTouchEnd: null,
	  topTouchMove: null,
	  topTouchStart: null,
	  topVolumeChange: null,
	  topWaiting: null,
	  topWheel: null
	});

	var EventConstants = {
	  topLevelTypes: topLevelTypes,
	  PropagationPhases: PropagationPhases
	};

	module.exports = EventConstants;

/***/ },
/* 35 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule EventPluginHub
	 */

	'use strict';

	var EventPluginRegistry = __webpack_require__(36);
	var EventPluginUtils = __webpack_require__(37);
	var ReactErrorUtils = __webpack_require__(38);

	var accumulateInto = __webpack_require__(39);
	var forEachAccumulated = __webpack_require__(40);
	var invariant = __webpack_require__(17);
	var warning = __webpack_require__(29);

	/**
	 * Internal store for event listeners
	 */
	var listenerBank = {};

	/**
	 * Internal queue of events that have accumulated their dispatches and are
	 * waiting to have their dispatches executed.
	 */
	var eventQueue = null;

	/**
	 * Dispatches an event and releases it back into the pool, unless persistent.
	 *
	 * @param {?object} event Synthetic event to be dispatched.
	 * @param {boolean} simulated If the event is simulated (changes exn behavior)
	 * @private
	 */
	var executeDispatchesAndRelease = function (event, simulated) {
	  if (event) {
	    EventPluginUtils.executeDispatchesInOrder(event, simulated);

	    if (!event.isPersistent()) {
	      event.constructor.release(event);
	    }
	  }
	};
	var executeDispatchesAndReleaseSimulated = function (e) {
	  return executeDispatchesAndRelease(e, true);
	};
	var executeDispatchesAndReleaseTopLevel = function (e) {
	  return executeDispatchesAndRelease(e, false);
	};

	/**
	 * - `InstanceHandle`: [required] Module that performs logical traversals of DOM
	 *   hierarchy given ids of the logical DOM elements involved.
	 */
	var InstanceHandle = null;

	function validateInstanceHandle() {
	  var valid = InstanceHandle && InstanceHandle.traverseTwoPhase && InstanceHandle.traverseEnterLeave;
	  process.env.NODE_ENV !== 'production' ? warning(valid, 'InstanceHandle not injected before use!') : undefined;
	}

	/**
	 * This is a unified interface for event plugins to be installed and configured.
	 *
	 * Event plugins can implement the following properties:
	 *
	 *   `extractEvents` {function(string, DOMEventTarget, string, object): *}
	 *     Required. When a top-level event is fired, this method is expected to
	 *     extract synthetic events that will in turn be queued and dispatched.
	 *
	 *   `eventTypes` {object}
	 *     Optional, plugins that fire events must publish a mapping of registration
	 *     names that are used to register listeners. Values of this mapping must
	 *     be objects that contain `registrationName` or `phasedRegistrationNames`.
	 *
	 *   `executeDispatch` {function(object, function, string)}
	 *     Optional, allows plugins to override how an event gets dispatched. By
	 *     default, the listener is simply invoked.
	 *
	 * Each plugin that is injected into `EventsPluginHub` is immediately operable.
	 *
	 * @public
	 */
	var EventPluginHub = {

	  /**
	   * Methods for injecting dependencies.
	   */
	  injection: {

	    /**
	     * @param {object} InjectedMount
	     * @public
	     */
	    injectMount: EventPluginUtils.injection.injectMount,

	    /**
	     * @param {object} InjectedInstanceHandle
	     * @public
	     */
	    injectInstanceHandle: function (InjectedInstanceHandle) {
	      InstanceHandle = InjectedInstanceHandle;
	      if (process.env.NODE_ENV !== 'production') {
	        validateInstanceHandle();
	      }
	    },

	    getInstanceHandle: function () {
	      if (process.env.NODE_ENV !== 'production') {
	        validateInstanceHandle();
	      }
	      return InstanceHandle;
	    },

	    /**
	     * @param {array} InjectedEventPluginOrder
	     * @public
	     */
	    injectEventPluginOrder: EventPluginRegistry.injectEventPluginOrder,

	    /**
	     * @param {object} injectedNamesToPlugins Map from names to plugin modules.
	     */
	    injectEventPluginsByName: EventPluginRegistry.injectEventPluginsByName

	  },

	  eventNameDispatchConfigs: EventPluginRegistry.eventNameDispatchConfigs,

	  registrationNameModules: EventPluginRegistry.registrationNameModules,

	  /**
	   * Stores `listener` at `listenerBank[registrationName][id]`. Is idempotent.
	   *
	   * @param {string} id ID of the DOM element.
	   * @param {string} registrationName Name of listener (e.g. `onClick`).
	   * @param {?function} listener The callback to store.
	   */
	  putListener: function (id, registrationName, listener) {
	    !(typeof listener === 'function') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Expected %s listener to be a function, instead got type %s', registrationName, typeof listener) : invariant(false) : undefined;

	    var bankForRegistrationName = listenerBank[registrationName] || (listenerBank[registrationName] = {});
	    bankForRegistrationName[id] = listener;

	    var PluginModule = EventPluginRegistry.registrationNameModules[registrationName];
	    if (PluginModule && PluginModule.didPutListener) {
	      PluginModule.didPutListener(id, registrationName, listener);
	    }
	  },

	  /**
	   * @param {string} id ID of the DOM element.
	   * @param {string} registrationName Name of listener (e.g. `onClick`).
	   * @return {?function} The stored callback.
	   */
	  getListener: function (id, registrationName) {
	    var bankForRegistrationName = listenerBank[registrationName];
	    return bankForRegistrationName && bankForRegistrationName[id];
	  },

	  /**
	   * Deletes a listener from the registration bank.
	   *
	   * @param {string} id ID of the DOM element.
	   * @param {string} registrationName Name of listener (e.g. `onClick`).
	   */
	  deleteListener: function (id, registrationName) {
	    var PluginModule = EventPluginRegistry.registrationNameModules[registrationName];
	    if (PluginModule && PluginModule.willDeleteListener) {
	      PluginModule.willDeleteListener(id, registrationName);
	    }

	    var bankForRegistrationName = listenerBank[registrationName];
	    // TODO: This should never be null -- when is it?
	    if (bankForRegistrationName) {
	      delete bankForRegistrationName[id];
	    }
	  },

	  /**
	   * Deletes all listeners for the DOM element with the supplied ID.
	   *
	   * @param {string} id ID of the DOM element.
	   */
	  deleteAllListeners: function (id) {
	    for (var registrationName in listenerBank) {
	      if (!listenerBank[registrationName][id]) {
	        continue;
	      }

	      var PluginModule = EventPluginRegistry.registrationNameModules[registrationName];
	      if (PluginModule && PluginModule.willDeleteListener) {
	        PluginModule.willDeleteListener(id, registrationName);
	      }

	      delete listenerBank[registrationName][id];
	    }
	  },

	  /**
	   * Allows registered plugins an opportunity to extract events from top-level
	   * native browser events.
	   *
	   * @param {string} topLevelType Record from `EventConstants`.
	   * @param {DOMEventTarget} topLevelTarget The listening component root node.
	   * @param {string} topLevelTargetID ID of `topLevelTarget`.
	   * @param {object} nativeEvent Native browser event.
	   * @return {*} An accumulation of synthetic events.
	   * @internal
	   */
	  extractEvents: function (topLevelType, topLevelTarget, topLevelTargetID, nativeEvent, nativeEventTarget) {
	    var events;
	    var plugins = EventPluginRegistry.plugins;
	    for (var i = 0; i < plugins.length; i++) {
	      // Not every plugin in the ordering may be loaded at runtime.
	      var possiblePlugin = plugins[i];
	      if (possiblePlugin) {
	        var extractedEvents = possiblePlugin.extractEvents(topLevelType, topLevelTarget, topLevelTargetID, nativeEvent, nativeEventTarget);
	        if (extractedEvents) {
	          events = accumulateInto(events, extractedEvents);
	        }
	      }
	    }
	    return events;
	  },

	  /**
	   * Enqueues a synthetic event that should be dispatched when
	   * `processEventQueue` is invoked.
	   *
	   * @param {*} events An accumulation of synthetic events.
	   * @internal
	   */
	  enqueueEvents: function (events) {
	    if (events) {
	      eventQueue = accumulateInto(eventQueue, events);
	    }
	  },

	  /**
	   * Dispatches all synthetic events on the event queue.
	   *
	   * @internal
	   */
	  processEventQueue: function (simulated) {
	    // Set `eventQueue` to null before processing it so that we can tell if more
	    // events get enqueued while processing.
	    var processingEventQueue = eventQueue;
	    eventQueue = null;
	    if (simulated) {
	      forEachAccumulated(processingEventQueue, executeDispatchesAndReleaseSimulated);
	    } else {
	      forEachAccumulated(processingEventQueue, executeDispatchesAndReleaseTopLevel);
	    }
	    !!eventQueue ? process.env.NODE_ENV !== 'production' ? invariant(false, 'processEventQueue(): Additional events were enqueued while processing ' + 'an event queue. Support for this has not yet been implemented.') : invariant(false) : undefined;
	    // This would be a good time to rethrow if any of the event handlers threw.
	    ReactErrorUtils.rethrowCaughtError();
	  },

	  /**
	   * These are needed for tests only. Do not use!
	   */
	  __purge: function () {
	    listenerBank = {};
	  },

	  __getListenerBank: function () {
	    return listenerBank;
	  }

	};

	module.exports = EventPluginHub;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(8)))

/***/ },
/* 36 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule EventPluginRegistry
	 * @typechecks static-only
	 */

	'use strict';

	var invariant = __webpack_require__(17);

	/**
	 * Injectable ordering of event plugins.
	 */
	var EventPluginOrder = null;

	/**
	 * Injectable mapping from names to event plugin modules.
	 */
	var namesToPlugins = {};

	/**
	 * Recomputes the plugin list using the injected plugins and plugin ordering.
	 *
	 * @private
	 */
	function recomputePluginOrdering() {
	  if (!EventPluginOrder) {
	    // Wait until an `EventPluginOrder` is injected.
	    return;
	  }
	  for (var pluginName in namesToPlugins) {
	    var PluginModule = namesToPlugins[pluginName];
	    var pluginIndex = EventPluginOrder.indexOf(pluginName);
	    !(pluginIndex > -1) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'EventPluginRegistry: Cannot inject event plugins that do not exist in ' + 'the plugin ordering, `%s`.', pluginName) : invariant(false) : undefined;
	    if (EventPluginRegistry.plugins[pluginIndex]) {
	      continue;
	    }
	    !PluginModule.extractEvents ? process.env.NODE_ENV !== 'production' ? invariant(false, 'EventPluginRegistry: Event plugins must implement an `extractEvents` ' + 'method, but `%s` does not.', pluginName) : invariant(false) : undefined;
	    EventPluginRegistry.plugins[pluginIndex] = PluginModule;
	    var publishedEvents = PluginModule.eventTypes;
	    for (var eventName in publishedEvents) {
	      !publishEventForPlugin(publishedEvents[eventName], PluginModule, eventName) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'EventPluginRegistry: Failed to publish event `%s` for plugin `%s`.', eventName, pluginName) : invariant(false) : undefined;
	    }
	  }
	}

	/**
	 * Publishes an event so that it can be dispatched by the supplied plugin.
	 *
	 * @param {object} dispatchConfig Dispatch configuration for the event.
	 * @param {object} PluginModule Plugin publishing the event.
	 * @return {boolean} True if the event was successfully published.
	 * @private
	 */
	function publishEventForPlugin(dispatchConfig, PluginModule, eventName) {
	  !!EventPluginRegistry.eventNameDispatchConfigs.hasOwnProperty(eventName) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'EventPluginHub: More than one plugin attempted to publish the same ' + 'event name, `%s`.', eventName) : invariant(false) : undefined;
	  EventPluginRegistry.eventNameDispatchConfigs[eventName] = dispatchConfig;

	  var phasedRegistrationNames = dispatchConfig.phasedRegistrationNames;
	  if (phasedRegistrationNames) {
	    for (var phaseName in phasedRegistrationNames) {
	      if (phasedRegistrationNames.hasOwnProperty(phaseName)) {
	        var phasedRegistrationName = phasedRegistrationNames[phaseName];
	        publishRegistrationName(phasedRegistrationName, PluginModule, eventName);
	      }
	    }
	    return true;
	  } else if (dispatchConfig.registrationName) {
	    publishRegistrationName(dispatchConfig.registrationName, PluginModule, eventName);
	    return true;
	  }
	  return false;
	}

	/**
	 * Publishes a registration name that is used to identify dispatched events and
	 * can be used with `EventPluginHub.putListener` to register listeners.
	 *
	 * @param {string} registrationName Registration name to add.
	 * @param {object} PluginModule Plugin publishing the event.
	 * @private
	 */
	function publishRegistrationName(registrationName, PluginModule, eventName) {
	  !!EventPluginRegistry.registrationNameModules[registrationName] ? process.env.NODE_ENV !== 'production' ? invariant(false, 'EventPluginHub: More than one plugin attempted to publish the same ' + 'registration name, `%s`.', registrationName) : invariant(false) : undefined;
	  EventPluginRegistry.registrationNameModules[registrationName] = PluginModule;
	  EventPluginRegistry.registrationNameDependencies[registrationName] = PluginModule.eventTypes[eventName].dependencies;
	}

	/**
	 * Registers plugins so that they can extract and dispatch events.
	 *
	 * @see {EventPluginHub}
	 */
	var EventPluginRegistry = {

	  /**
	   * Ordered list of injected plugins.
	   */
	  plugins: [],

	  /**
	   * Mapping from event name to dispatch config
	   */
	  eventNameDispatchConfigs: {},

	  /**
	   * Mapping from registration name to plugin module
	   */
	  registrationNameModules: {},

	  /**
	   * Mapping from registration name to event name
	   */
	  registrationNameDependencies: {},

	  /**
	   * Injects an ordering of plugins (by plugin name). This allows the ordering
	   * to be decoupled from injection of the actual plugins so that ordering is
	   * always deterministic regardless of packaging, on-the-fly injection, etc.
	   *
	   * @param {array} InjectedEventPluginOrder
	   * @internal
	   * @see {EventPluginHub.injection.injectEventPluginOrder}
	   */
	  injectEventPluginOrder: function (InjectedEventPluginOrder) {
	    !!EventPluginOrder ? process.env.NODE_ENV !== 'production' ? invariant(false, 'EventPluginRegistry: Cannot inject event plugin ordering more than ' + 'once. You are likely trying to load more than one copy of React.') : invariant(false) : undefined;
	    // Clone the ordering so it cannot be dynamically mutated.
	    EventPluginOrder = Array.prototype.slice.call(InjectedEventPluginOrder);
	    recomputePluginOrdering();
	  },

	  /**
	   * Injects plugins to be used by `EventPluginHub`. The plugin names must be
	   * in the ordering injected by `injectEventPluginOrder`.
	   *
	   * Plugins can be injected as part of page initialization or on-the-fly.
	   *
	   * @param {object} injectedNamesToPlugins Map from names to plugin modules.
	   * @internal
	   * @see {EventPluginHub.injection.injectEventPluginsByName}
	   */
	  injectEventPluginsByName: function (injectedNamesToPlugins) {
	    var isOrderingDirty = false;
	    for (var pluginName in injectedNamesToPlugins) {
	      if (!injectedNamesToPlugins.hasOwnProperty(pluginName)) {
	        continue;
	      }
	      var PluginModule = injectedNamesToPlugins[pluginName];
	      if (!namesToPlugins.hasOwnProperty(pluginName) || namesToPlugins[pluginName] !== PluginModule) {
	        !!namesToPlugins[pluginName] ? process.env.NODE_ENV !== 'production' ? invariant(false, 'EventPluginRegistry: Cannot inject two different event plugins ' + 'using the same name, `%s`.', pluginName) : invariant(false) : undefined;
	        namesToPlugins[pluginName] = PluginModule;
	        isOrderingDirty = true;
	      }
	    }
	    if (isOrderingDirty) {
	      recomputePluginOrdering();
	    }
	  },

	  /**
	   * Looks up the plugin for the supplied event.
	   *
	   * @param {object} event A synthetic event.
	   * @return {?object} The plugin that created the supplied event.
	   * @internal
	   */
	  getPluginModuleForEvent: function (event) {
	    var dispatchConfig = event.dispatchConfig;
	    if (dispatchConfig.registrationName) {
	      return EventPluginRegistry.registrationNameModules[dispatchConfig.registrationName] || null;
	    }
	    for (var phase in dispatchConfig.phasedRegistrationNames) {
	      if (!dispatchConfig.phasedRegistrationNames.hasOwnProperty(phase)) {
	        continue;
	      }
	      var PluginModule = EventPluginRegistry.registrationNameModules[dispatchConfig.phasedRegistrationNames[phase]];
	      if (PluginModule) {
	        return PluginModule;
	      }
	    }
	    return null;
	  },

	  /**
	   * Exposed for unit testing.
	   * @private
	   */
	  _resetEventPlugins: function () {
	    EventPluginOrder = null;
	    for (var pluginName in namesToPlugins) {
	      if (namesToPlugins.hasOwnProperty(pluginName)) {
	        delete namesToPlugins[pluginName];
	      }
	    }
	    EventPluginRegistry.plugins.length = 0;

	    var eventNameDispatchConfigs = EventPluginRegistry.eventNameDispatchConfigs;
	    for (var eventName in eventNameDispatchConfigs) {
	      if (eventNameDispatchConfigs.hasOwnProperty(eventName)) {
	        delete eventNameDispatchConfigs[eventName];
	      }
	    }

	    var registrationNameModules = EventPluginRegistry.registrationNameModules;
	    for (var registrationName in registrationNameModules) {
	      if (registrationNameModules.hasOwnProperty(registrationName)) {
	        delete registrationNameModules[registrationName];
	      }
	    }
	  }

	};

	module.exports = EventPluginRegistry;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(8)))

/***/ },
/* 37 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule EventPluginUtils
	 */

	'use strict';

	var EventConstants = __webpack_require__(34);
	var ReactErrorUtils = __webpack_require__(38);

	var invariant = __webpack_require__(17);
	var warning = __webpack_require__(29);

	/**
	 * Injected dependencies:
	 */

	/**
	 * - `Mount`: [required] Module that can convert between React dom IDs and
	 *   actual node references.
	 */
	var injection = {
	  Mount: null,
	  injectMount: function (InjectedMount) {
	    injection.Mount = InjectedMount;
	    if (process.env.NODE_ENV !== 'production') {
	      process.env.NODE_ENV !== 'production' ? warning(InjectedMount && InjectedMount.getNode && InjectedMount.getID, 'EventPluginUtils.injection.injectMount(...): Injected Mount ' + 'module is missing getNode or getID.') : undefined;
	    }
	  }
	};

	var topLevelTypes = EventConstants.topLevelTypes;

	function isEndish(topLevelType) {
	  return topLevelType === topLevelTypes.topMouseUp || topLevelType === topLevelTypes.topTouchEnd || topLevelType === topLevelTypes.topTouchCancel;
	}

	function isMoveish(topLevelType) {
	  return topLevelType === topLevelTypes.topMouseMove || topLevelType === topLevelTypes.topTouchMove;
	}
	function isStartish(topLevelType) {
	  return topLevelType === topLevelTypes.topMouseDown || topLevelType === topLevelTypes.topTouchStart;
	}

	var validateEventDispatches;
	if (process.env.NODE_ENV !== 'production') {
	  validateEventDispatches = function (event) {
	    var dispatchListeners = event._dispatchListeners;
	    var dispatchIDs = event._dispatchIDs;

	    var listenersIsArr = Array.isArray(dispatchListeners);
	    var idsIsArr = Array.isArray(dispatchIDs);
	    var IDsLen = idsIsArr ? dispatchIDs.length : dispatchIDs ? 1 : 0;
	    var listenersLen = listenersIsArr ? dispatchListeners.length : dispatchListeners ? 1 : 0;

	    process.env.NODE_ENV !== 'production' ? warning(idsIsArr === listenersIsArr && IDsLen === listenersLen, 'EventPluginUtils: Invalid `event`.') : undefined;
	  };
	}

	/**
	 * Dispatch the event to the listener.
	 * @param {SyntheticEvent} event SyntheticEvent to handle
	 * @param {boolean} simulated If the event is simulated (changes exn behavior)
	 * @param {function} listener Application-level callback
	 * @param {string} domID DOM id to pass to the callback.
	 */
	function executeDispatch(event, simulated, listener, domID) {
	  var type = event.type || 'unknown-event';
	  event.currentTarget = injection.Mount.getNode(domID);
	  if (simulated) {
	    ReactErrorUtils.invokeGuardedCallbackWithCatch(type, listener, event, domID);
	  } else {
	    ReactErrorUtils.invokeGuardedCallback(type, listener, event, domID);
	  }
	  event.currentTarget = null;
	}

	/**
	 * Standard/simple iteration through an event's collected dispatches.
	 */
	function executeDispatchesInOrder(event, simulated) {
	  var dispatchListeners = event._dispatchListeners;
	  var dispatchIDs = event._dispatchIDs;
	  if (process.env.NODE_ENV !== 'production') {
	    validateEventDispatches(event);
	  }
	  if (Array.isArray(dispatchListeners)) {
	    for (var i = 0; i < dispatchListeners.length; i++) {
	      if (event.isPropagationStopped()) {
	        break;
	      }
	      // Listeners and IDs are two parallel arrays that are always in sync.
	      executeDispatch(event, simulated, dispatchListeners[i], dispatchIDs[i]);
	    }
	  } else if (dispatchListeners) {
	    executeDispatch(event, simulated, dispatchListeners, dispatchIDs);
	  }
	  event._dispatchListeners = null;
	  event._dispatchIDs = null;
	}

	/**
	 * Standard/simple iteration through an event's collected dispatches, but stops
	 * at the first dispatch execution returning true, and returns that id.
	 *
	 * @return {?string} id of the first dispatch execution who's listener returns
	 * true, or null if no listener returned true.
	 */
	function executeDispatchesInOrderStopAtTrueImpl(event) {
	  var dispatchListeners = event._dispatchListeners;
	  var dispatchIDs = event._dispatchIDs;
	  if (process.env.NODE_ENV !== 'production') {
	    validateEventDispatches(event);
	  }
	  if (Array.isArray(dispatchListeners)) {
	    for (var i = 0; i < dispatchListeners.length; i++) {
	      if (event.isPropagationStopped()) {
	        break;
	      }
	      // Listeners and IDs are two parallel arrays that are always in sync.
	      if (dispatchListeners[i](event, dispatchIDs[i])) {
	        return dispatchIDs[i];
	      }
	    }
	  } else if (dispatchListeners) {
	    if (dispatchListeners(event, dispatchIDs)) {
	      return dispatchIDs;
	    }
	  }
	  return null;
	}

	/**
	 * @see executeDispatchesInOrderStopAtTrueImpl
	 */
	function executeDispatchesInOrderStopAtTrue(event) {
	  var ret = executeDispatchesInOrderStopAtTrueImpl(event);
	  event._dispatchIDs = null;
	  event._dispatchListeners = null;
	  return ret;
	}

	/**
	 * Execution of a "direct" dispatch - there must be at most one dispatch
	 * accumulated on the event or it is considered an error. It doesn't really make
	 * sense for an event with multiple dispatches (bubbled) to keep track of the
	 * return values at each dispatch execution, but it does tend to make sense when
	 * dealing with "direct" dispatches.
	 *
	 * @return {*} The return value of executing the single dispatch.
	 */
	function executeDirectDispatch(event) {
	  if (process.env.NODE_ENV !== 'production') {
	    validateEventDispatches(event);
	  }
	  var dispatchListener = event._dispatchListeners;
	  var dispatchID = event._dispatchIDs;
	  !!Array.isArray(dispatchListener) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'executeDirectDispatch(...): Invalid `event`.') : invariant(false) : undefined;
	  var res = dispatchListener ? dispatchListener(event, dispatchID) : null;
	  event._dispatchListeners = null;
	  event._dispatchIDs = null;
	  return res;
	}

	/**
	 * @param {SyntheticEvent} event
	 * @return {boolean} True iff number of dispatches accumulated is greater than 0.
	 */
	function hasDispatches(event) {
	  return !!event._dispatchListeners;
	}

	/**
	 * General utilities that are useful in creating custom Event Plugins.
	 */
	var EventPluginUtils = {
	  isEndish: isEndish,
	  isMoveish: isMoveish,
	  isStartish: isStartish,

	  executeDirectDispatch: executeDirectDispatch,
	  executeDispatchesInOrder: executeDispatchesInOrder,
	  executeDispatchesInOrderStopAtTrue: executeDispatchesInOrderStopAtTrue,
	  hasDispatches: hasDispatches,

	  getNode: function (id) {
	    return injection.Mount.getNode(id);
	  },
	  getID: function (node) {
	    return injection.Mount.getID(node);
	  },

	  injection: injection
	};

	module.exports = EventPluginUtils;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(8)))

/***/ },
/* 38 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactErrorUtils
	 * @typechecks
	 */

	'use strict';

	var caughtError = null;

	/**
	 * Call a function while guarding against errors that happens within it.
	 *
	 * @param {?String} name of the guard to use for logging or debugging
	 * @param {Function} func The function to invoke
	 * @param {*} a First argument
	 * @param {*} b Second argument
	 */
	function invokeGuardedCallback(name, func, a, b) {
	  try {
	    return func(a, b);
	  } catch (x) {
	    if (caughtError === null) {
	      caughtError = x;
	    }
	    return undefined;
	  }
	}

	var ReactErrorUtils = {
	  invokeGuardedCallback: invokeGuardedCallback,

	  /**
	   * Invoked by ReactTestUtils.Simulate so that any errors thrown by the event
	   * handler are sure to be rethrown by rethrowCaughtError.
	   */
	  invokeGuardedCallbackWithCatch: invokeGuardedCallback,

	  /**
	   * During execution of guarded functions we will capture the first error which
	   * we will rethrow to be handled by the top level error handler.
	   */
	  rethrowCaughtError: function () {
	    if (caughtError) {
	      var error = caughtError;
	      caughtError = null;
	      throw error;
	    }
	  }
	};

	if (process.env.NODE_ENV !== 'production') {
	  /**
	   * To help development we can get better devtools integration by simulating a
	   * real browser event.
	   */
	  if (typeof window !== 'undefined' && typeof window.dispatchEvent === 'function' && typeof Event === 'function') {
	    var fakeNode = document.createElement('react');
	    ReactErrorUtils.invokeGuardedCallback = function (name, func, a, b) {
	      var boundFunc = func.bind(null, a, b);
	      fakeNode.addEventListener(name, boundFunc, false);
	      fakeNode.dispatchEvent(new Event(name));
	      fakeNode.removeEventListener(name, boundFunc, false);
	    };
	  }
	}

	module.exports = ReactErrorUtils;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(8)))

/***/ },
/* 39 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2014-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule accumulateInto
	 */

	'use strict';

	var invariant = __webpack_require__(17);

	/**
	 *
	 * Accumulates items that must not be null or undefined into the first one. This
	 * is used to conserve memory by avoiding array allocations, and thus sacrifices
	 * API cleanness. Since `current` can be null before being passed in and not
	 * null after this function, make sure to assign it back to `current`:
	 *
	 * `a = accumulateInto(a, b);`
	 *
	 * This API should be sparingly used. Try `accumulate` for something cleaner.
	 *
	 * @return {*|array<*>} An accumulation of items.
	 */

	function accumulateInto(current, next) {
	  !(next != null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'accumulateInto(...): Accumulated items must not be null or undefined.') : invariant(false) : undefined;
	  if (current == null) {
	    return next;
	  }

	  // Both are not empty. Warning: Never call x.concat(y) when you are not
	  // certain that x is an Array (x could be a string with concat method).
	  var currentIsArray = Array.isArray(current);
	  var nextIsArray = Array.isArray(next);

	  if (currentIsArray && nextIsArray) {
	    current.push.apply(current, next);
	    return current;
	  }

	  if (currentIsArray) {
	    current.push(next);
	    return current;
	  }

	  if (nextIsArray) {
	    // A bit too dangerous to mutate `next`.
	    return [current].concat(next);
	  }

	  return [current, next];
	}

	module.exports = accumulateInto;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(8)))

/***/ },
/* 40 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule forEachAccumulated
	 */

	'use strict';

	/**
	 * @param {array} arr an "accumulation" of items which is either an Array or
	 * a single item. Useful when paired with the `accumulate` module. This is a
	 * simple utility that allows us to reason about a collection of items, but
	 * handling the case when there is exactly one item (and we do not need to
	 * allocate an array).
	 */
	var forEachAccumulated = function (arr, cb, scope) {
	  if (Array.isArray(arr)) {
	    arr.forEach(cb, scope);
	  } else if (arr) {
	    cb.call(scope, arr);
	  }
	};

	module.exports = forEachAccumulated;

/***/ },
/* 41 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactEventEmitterMixin
	 */

	'use strict';

	var EventPluginHub = __webpack_require__(35);

	function runEventQueueInBatch(events) {
	  EventPluginHub.enqueueEvents(events);
	  EventPluginHub.processEventQueue(false);
	}

	var ReactEventEmitterMixin = {

	  /**
	   * Streams a fired top-level event to `EventPluginHub` where plugins have the
	   * opportunity to create `ReactEvent`s to be dispatched.
	   *
	   * @param {string} topLevelType Record from `EventConstants`.
	   * @param {object} topLevelTarget The listening component root node.
	   * @param {string} topLevelTargetID ID of `topLevelTarget`.
	   * @param {object} nativeEvent Native environment event.
	   */
	  handleTopLevel: function (topLevelType, topLevelTarget, topLevelTargetID, nativeEvent, nativeEventTarget) {
	    var events = EventPluginHub.extractEvents(topLevelType, topLevelTarget, topLevelTargetID, nativeEvent, nativeEventTarget);
	    runEventQueueInBatch(events);
	  }
	};

	module.exports = ReactEventEmitterMixin;

/***/ },
/* 42 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ViewportMetrics
	 */

	'use strict';

	var ViewportMetrics = {

	  currentScrollLeft: 0,

	  currentScrollTop: 0,

	  refreshScrollValues: function (scrollPosition) {
	    ViewportMetrics.currentScrollLeft = scrollPosition.x;
	    ViewportMetrics.currentScrollTop = scrollPosition.y;
	  }

	};

	module.exports = ViewportMetrics;

/***/ },
/* 43 */
/***/ function(module, exports) {

	/**
	 * Copyright 2014-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule Object.assign
	 */

	// https://people.mozilla.org/~jorendorff/es6-draft.html#sec-object.assign

	'use strict';

	function assign(target, sources) {
	  if (target == null) {
	    throw new TypeError('Object.assign target cannot be null or undefined');
	  }

	  var to = Object(target);
	  var hasOwnProperty = Object.prototype.hasOwnProperty;

	  for (var nextIndex = 1; nextIndex < arguments.length; nextIndex++) {
	    var nextSource = arguments[nextIndex];
	    if (nextSource == null) {
	      continue;
	    }

	    var from = Object(nextSource);

	    // We don't currently support accessors nor proxies. Therefore this
	    // copy cannot throw. If we ever supported this then we must handle
	    // exceptions and side-effects. We don't support symbols so they won't
	    // be transferred.

	    for (var key in from) {
	      if (hasOwnProperty.call(from, key)) {
	        to[key] = from[key];
	      }
	    }
	  }

	  return to;
	}

	module.exports = assign;

/***/ },
/* 44 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule isEventSupported
	 */

	'use strict';

	var ExecutionEnvironment = __webpack_require__(13);

	var useHasFeature;
	if (ExecutionEnvironment.canUseDOM) {
	  useHasFeature = document.implementation && document.implementation.hasFeature &&
	  // always returns true in newer browsers as per the standard.
	  // @see http://dom.spec.whatwg.org/#dom-domimplementation-hasfeature
	  document.implementation.hasFeature('', '') !== true;
	}

	/**
	 * Checks if an event is supported in the current execution environment.
	 *
	 * NOTE: This will not work correctly for non-generic events such as `change`,
	 * `reset`, `load`, `error`, and `select`.
	 *
	 * Borrows from Modernizr.
	 *
	 * @param {string} eventNameSuffix Event name, e.g. "click".
	 * @param {?boolean} capture Check if the capture phase is supported.
	 * @return {boolean} True if the event is supported.
	 * @internal
	 * @license Modernizr 3.0.0pre (Custom Build) | MIT
	 */
	function isEventSupported(eventNameSuffix, capture) {
	  if (!ExecutionEnvironment.canUseDOM || capture && !('addEventListener' in document)) {
	    return false;
	  }

	  var eventName = 'on' + eventNameSuffix;
	  var isSupported = (eventName in document);

	  if (!isSupported) {
	    var element = document.createElement('div');
	    element.setAttribute(eventName, 'return;');
	    isSupported = typeof element[eventName] === 'function';
	  }

	  if (!isSupported && useHasFeature && eventNameSuffix === 'wheel') {
	    // This is the only way to test support for the `wheel` event in IE9+.
	    isSupported = document.implementation.hasFeature('Events.wheel', '3.0');
	  }

	  return isSupported;
	}

	module.exports = isEventSupported;

/***/ },
/* 45 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDOMFeatureFlags
	 */

	'use strict';

	var ReactDOMFeatureFlags = {
	  useCreateElement: false
	};

	module.exports = ReactDOMFeatureFlags;

/***/ },
/* 46 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2014-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactElement
	 */

	'use strict';

	var ReactCurrentOwner = __webpack_require__(9);

	var assign = __webpack_require__(43);

	// The Symbol used to tag the ReactElement type. If there is no native Symbol
	// nor polyfill, then a plain number is used for performance.
	var REACT_ELEMENT_TYPE = typeof Symbol === 'function' && Symbol['for'] && Symbol['for']('react.element') || 0xeac7;

	var RESERVED_PROPS = {
	  key: true,
	  ref: true,
	  __self: true,
	  __source: true
	};

	var canDefineProperty = false;
	if (process.env.NODE_ENV !== 'production') {
	  try {
	    Object.defineProperty({}, 'x', {});
	    canDefineProperty = true;
	  } catch (x) {
	    // IE will fail on defineProperty
	  }
	}

	/**
	 * Base constructor for all React elements. This is only used to make this
	 * work with a dynamic instanceof check. Nothing should live on this prototype.
	 *
	 * @param {*} type
	 * @param {*} key
	 * @param {string|object} ref
	 * @param {*} self A *temporary* helper to detect places where `this` is
	 * different from the `owner` when React.createElement is called, so that we
	 * can warn. We want to get rid of owner and replace string `ref`s with arrow
	 * functions, and as long as `this` and owner are the same, there will be no
	 * change in behavior.
	 * @param {*} source An annotation object (added by a transpiler or otherwise)
	 * indicating filename, line number, and/or other information.
	 * @param {*} owner
	 * @param {*} props
	 * @internal
	 */
	var ReactElement = function (type, key, ref, self, source, owner, props) {
	  var element = {
	    // This tag allow us to uniquely identify this as a React Element
	    $$typeof: REACT_ELEMENT_TYPE,

	    // Built-in properties that belong on the element
	    type: type,
	    key: key,
	    ref: ref,
	    props: props,

	    // Record the component responsible for creating this element.
	    _owner: owner
	  };

	  if (process.env.NODE_ENV !== 'production') {
	    // The validation flag is currently mutative. We put it on
	    // an external backing store so that we can freeze the whole object.
	    // This can be replaced with a WeakMap once they are implemented in
	    // commonly used development environments.
	    element._store = {};

	    // To make comparing ReactElements easier for testing purposes, we make
	    // the validation flag non-enumerable (where possible, which should
	    // include every environment we run tests in), so the test framework
	    // ignores it.
	    if (canDefineProperty) {
	      Object.defineProperty(element._store, 'validated', {
	        configurable: false,
	        enumerable: false,
	        writable: true,
	        value: false
	      });
	      // self and source are DEV only properties.
	      Object.defineProperty(element, '_self', {
	        configurable: false,
	        enumerable: false,
	        writable: false,
	        value: self
	      });
	      // Two elements created in two different places should be considered
	      // equal for testing purposes and therefore we hide it from enumeration.
	      Object.defineProperty(element, '_source', {
	        configurable: false,
	        enumerable: false,
	        writable: false,
	        value: source
	      });
	    } else {
	      element._store.validated = false;
	      element._self = self;
	      element._source = source;
	    }
	    Object.freeze(element.props);
	    Object.freeze(element);
	  }

	  return element;
	};

	ReactElement.createElement = function (type, config, children) {
	  var propName;

	  // Reserved names are extracted
	  var props = {};

	  var key = null;
	  var ref = null;
	  var self = null;
	  var source = null;

	  if (config != null) {
	    ref = config.ref === undefined ? null : config.ref;
	    key = config.key === undefined ? null : '' + config.key;
	    self = config.__self === undefined ? null : config.__self;
	    source = config.__source === undefined ? null : config.__source;
	    // Remaining properties are added to a new props object
	    for (propName in config) {
	      if (config.hasOwnProperty(propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
	        props[propName] = config[propName];
	      }
	    }
	  }

	  // Children can be more than one argument, and those are transferred onto
	  // the newly allocated props object.
	  var childrenLength = arguments.length - 2;
	  if (childrenLength === 1) {
	    props.children = children;
	  } else if (childrenLength > 1) {
	    var childArray = Array(childrenLength);
	    for (var i = 0; i < childrenLength; i++) {
	      childArray[i] = arguments[i + 2];
	    }
	    props.children = childArray;
	  }

	  // Resolve default props
	  if (type && type.defaultProps) {
	    var defaultProps = type.defaultProps;
	    for (propName in defaultProps) {
	      if (typeof props[propName] === 'undefined') {
	        props[propName] = defaultProps[propName];
	      }
	    }
	  }

	  return ReactElement(type, key, ref, self, source, ReactCurrentOwner.current, props);
	};

	ReactElement.createFactory = function (type) {
	  var factory = ReactElement.createElement.bind(null, type);
	  // Expose the type on the factory and the prototype so that it can be
	  // easily accessed on elements. E.g. `<Foo />.type === Foo`.
	  // This should not be named `constructor` since this may not be the function
	  // that created the element, and it may not even be a constructor.
	  // Legacy hook TODO: Warn if this is accessed
	  factory.type = type;
	  return factory;
	};

	ReactElement.cloneAndReplaceKey = function (oldElement, newKey) {
	  var newElement = ReactElement(oldElement.type, newKey, oldElement.ref, oldElement._self, oldElement._source, oldElement._owner, oldElement.props);

	  return newElement;
	};

	ReactElement.cloneAndReplaceProps = function (oldElement, newProps) {
	  var newElement = ReactElement(oldElement.type, oldElement.key, oldElement.ref, oldElement._self, oldElement._source, oldElement._owner, newProps);

	  if (process.env.NODE_ENV !== 'production') {
	    // If the key on the original is valid, then the clone is valid
	    newElement._store.validated = oldElement._store.validated;
	  }

	  return newElement;
	};

	ReactElement.cloneElement = function (element, config, children) {
	  var propName;

	  // Original props are copied
	  var props = assign({}, element.props);

	  // Reserved names are extracted
	  var key = element.key;
	  var ref = element.ref;
	  // Self is preserved since the owner is preserved.
	  var self = element._self;
	  // Source is preserved since cloneElement is unlikely to be targeted by a
	  // transpiler, and the original source is probably a better indicator of the
	  // true owner.
	  var source = element._source;

	  // Owner will be preserved, unless ref is overridden
	  var owner = element._owner;

	  if (config != null) {
	    if (config.ref !== undefined) {
	      // Silently steal the ref from the parent.
	      ref = config.ref;
	      owner = ReactCurrentOwner.current;
	    }
	    if (config.key !== undefined) {
	      key = '' + config.key;
	    }
	    // Remaining properties override existing props
	    for (propName in config) {
	      if (config.hasOwnProperty(propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
	        props[propName] = config[propName];
	      }
	    }
	  }

	  // Children can be more than one argument, and those are transferred onto
	  // the newly allocated props object.
	  var childrenLength = arguments.length - 2;
	  if (childrenLength === 1) {
	    props.children = children;
	  } else if (childrenLength > 1) {
	    var childArray = Array(childrenLength);
	    for (var i = 0; i < childrenLength; i++) {
	      childArray[i] = arguments[i + 2];
	    }
	    props.children = childArray;
	  }

	  return ReactElement(element.type, key, ref, self, source, owner, props);
	};

	/**
	 * @param {?object} object
	 * @return {boolean} True if `object` is a valid component.
	 * @final
	 */
	ReactElement.isValidElement = function (object) {
	  return typeof object === 'object' && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
	};

	module.exports = ReactElement;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(8)))

/***/ },
/* 47 */
/***/ function(module, exports) {

	/**
	 * Copyright 2014-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactEmptyComponentRegistry
	 */

	'use strict';

	// This registry keeps track of the React IDs of the components that rendered to
	// `null` (in reality a placeholder such as `noscript`)
	var nullComponentIDsRegistry = {};

	/**
	 * @param {string} id Component's `_rootNodeID`.
	 * @return {boolean} True if the component is rendered to null.
	 */
	function isNullComponentID(id) {
	  return !!nullComponentIDsRegistry[id];
	}

	/**
	 * Mark the component as having rendered to null.
	 * @param {string} id Component's `_rootNodeID`.
	 */
	function registerNullComponentID(id) {
	  nullComponentIDsRegistry[id] = true;
	}

	/**
	 * Unmark the component as having rendered to null: it renders to something now.
	 * @param {string} id Component's `_rootNodeID`.
	 */
	function deregisterNullComponentID(id) {
	  delete nullComponentIDsRegistry[id];
	}

	var ReactEmptyComponentRegistry = {
	  isNullComponentID: isNullComponentID,
	  registerNullComponentID: registerNullComponentID,
	  deregisterNullComponentID: deregisterNullComponentID
	};

	module.exports = ReactEmptyComponentRegistry;

/***/ },
/* 48 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactInstanceHandles
	 * @typechecks static-only
	 */

	'use strict';

	var ReactRootIndex = __webpack_require__(49);

	var invariant = __webpack_require__(17);

	var SEPARATOR = '.';
	var SEPARATOR_LENGTH = SEPARATOR.length;

	/**
	 * Maximum depth of traversals before we consider the possibility of a bad ID.
	 */
	var MAX_TREE_DEPTH = 10000;

	/**
	 * Creates a DOM ID prefix to use when mounting React components.
	 *
	 * @param {number} index A unique integer
	 * @return {string} React root ID.
	 * @internal
	 */
	function getReactRootIDString(index) {
	  return SEPARATOR + index.toString(36);
	}

	/**
	 * Checks if a character in the supplied ID is a separator or the end.
	 *
	 * @param {string} id A React DOM ID.
	 * @param {number} index Index of the character to check.
	 * @return {boolean} True if the character is a separator or end of the ID.
	 * @private
	 */
	function isBoundary(id, index) {
	  return id.charAt(index) === SEPARATOR || index === id.length;
	}

	/**
	 * Checks if the supplied string is a valid React DOM ID.
	 *
	 * @param {string} id A React DOM ID, maybe.
	 * @return {boolean} True if the string is a valid React DOM ID.
	 * @private
	 */
	function isValidID(id) {
	  return id === '' || id.charAt(0) === SEPARATOR && id.charAt(id.length - 1) !== SEPARATOR;
	}

	/**
	 * Checks if the first ID is an ancestor of or equal to the second ID.
	 *
	 * @param {string} ancestorID
	 * @param {string} descendantID
	 * @return {boolean} True if `ancestorID` is an ancestor of `descendantID`.
	 * @internal
	 */
	function isAncestorIDOf(ancestorID, descendantID) {
	  return descendantID.indexOf(ancestorID) === 0 && isBoundary(descendantID, ancestorID.length);
	}

	/**
	 * Gets the parent ID of the supplied React DOM ID, `id`.
	 *
	 * @param {string} id ID of a component.
	 * @return {string} ID of the parent, or an empty string.
	 * @private
	 */
	function getParentID(id) {
	  return id ? id.substr(0, id.lastIndexOf(SEPARATOR)) : '';
	}

	/**
	 * Gets the next DOM ID on the tree path from the supplied `ancestorID` to the
	 * supplied `destinationID`. If they are equal, the ID is returned.
	 *
	 * @param {string} ancestorID ID of an ancestor node of `destinationID`.
	 * @param {string} destinationID ID of the destination node.
	 * @return {string} Next ID on the path from `ancestorID` to `destinationID`.
	 * @private
	 */
	function getNextDescendantID(ancestorID, destinationID) {
	  !(isValidID(ancestorID) && isValidID(destinationID)) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'getNextDescendantID(%s, %s): Received an invalid React DOM ID.', ancestorID, destinationID) : invariant(false) : undefined;
	  !isAncestorIDOf(ancestorID, destinationID) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'getNextDescendantID(...): React has made an invalid assumption about ' + 'the DOM hierarchy. Expected `%s` to be an ancestor of `%s`.', ancestorID, destinationID) : invariant(false) : undefined;
	  if (ancestorID === destinationID) {
	    return ancestorID;
	  }
	  // Skip over the ancestor and the immediate separator. Traverse until we hit
	  // another separator or we reach the end of `destinationID`.
	  var start = ancestorID.length + SEPARATOR_LENGTH;
	  var i;
	  for (i = start; i < destinationID.length; i++) {
	    if (isBoundary(destinationID, i)) {
	      break;
	    }
	  }
	  return destinationID.substr(0, i);
	}

	/**
	 * Gets the nearest common ancestor ID of two IDs.
	 *
	 * Using this ID scheme, the nearest common ancestor ID is the longest common
	 * prefix of the two IDs that immediately preceded a "marker" in both strings.
	 *
	 * @param {string} oneID
	 * @param {string} twoID
	 * @return {string} Nearest common ancestor ID, or the empty string if none.
	 * @private
	 */
	function getFirstCommonAncestorID(oneID, twoID) {
	  var minLength = Math.min(oneID.length, twoID.length);
	  if (minLength === 0) {
	    return '';
	  }
	  var lastCommonMarkerIndex = 0;
	  // Use `<=` to traverse until the "EOL" of the shorter string.
	  for (var i = 0; i <= minLength; i++) {
	    if (isBoundary(oneID, i) && isBoundary(twoID, i)) {
	      lastCommonMarkerIndex = i;
	    } else if (oneID.charAt(i) !== twoID.charAt(i)) {
	      break;
	    }
	  }
	  var longestCommonID = oneID.substr(0, lastCommonMarkerIndex);
	  !isValidID(longestCommonID) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'getFirstCommonAncestorID(%s, %s): Expected a valid React DOM ID: %s', oneID, twoID, longestCommonID) : invariant(false) : undefined;
	  return longestCommonID;
	}

	/**
	 * Traverses the parent path between two IDs (either up or down). The IDs must
	 * not be the same, and there must exist a parent path between them. If the
	 * callback returns `false`, traversal is stopped.
	 *
	 * @param {?string} start ID at which to start traversal.
	 * @param {?string} stop ID at which to end traversal.
	 * @param {function} cb Callback to invoke each ID with.
	 * @param {*} arg Argument to invoke the callback with.
	 * @param {?boolean} skipFirst Whether or not to skip the first node.
	 * @param {?boolean} skipLast Whether or not to skip the last node.
	 * @private
	 */
	function traverseParentPath(start, stop, cb, arg, skipFirst, skipLast) {
	  start = start || '';
	  stop = stop || '';
	  !(start !== stop) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'traverseParentPath(...): Cannot traverse from and to the same ID, `%s`.', start) : invariant(false) : undefined;
	  var traverseUp = isAncestorIDOf(stop, start);
	  !(traverseUp || isAncestorIDOf(start, stop)) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'traverseParentPath(%s, %s, ...): Cannot traverse from two IDs that do ' + 'not have a parent path.', start, stop) : invariant(false) : undefined;
	  // Traverse from `start` to `stop` one depth at a time.
	  var depth = 0;
	  var traverse = traverseUp ? getParentID : getNextDescendantID;
	  for (var id = start;; /* until break */id = traverse(id, stop)) {
	    var ret;
	    if ((!skipFirst || id !== start) && (!skipLast || id !== stop)) {
	      ret = cb(id, traverseUp, arg);
	    }
	    if (ret === false || id === stop) {
	      // Only break //after// visiting `stop`.
	      break;
	    }
	    !(depth++ < MAX_TREE_DEPTH) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'traverseParentPath(%s, %s, ...): Detected an infinite loop while ' + 'traversing the React DOM ID tree. This may be due to malformed IDs: %s', start, stop, id) : invariant(false) : undefined;
	  }
	}

	/**
	 * Manages the IDs assigned to DOM representations of React components. This
	 * uses a specific scheme in order to traverse the DOM efficiently (e.g. in
	 * order to simulate events).
	 *
	 * @internal
	 */
	var ReactInstanceHandles = {

	  /**
	   * Constructs a React root ID
	   * @return {string} A React root ID.
	   */
	  createReactRootID: function () {
	    return getReactRootIDString(ReactRootIndex.createReactRootIndex());
	  },

	  /**
	   * Constructs a React ID by joining a root ID with a name.
	   *
	   * @param {string} rootID Root ID of a parent component.
	   * @param {string} name A component's name (as flattened children).
	   * @return {string} A React ID.
	   * @internal
	   */
	  createReactID: function (rootID, name) {
	    return rootID + name;
	  },

	  /**
	   * Gets the DOM ID of the React component that is the root of the tree that
	   * contains the React component with the supplied DOM ID.
	   *
	   * @param {string} id DOM ID of a React component.
	   * @return {?string} DOM ID of the React component that is the root.
	   * @internal
	   */
	  getReactRootIDFromNodeID: function (id) {
	    if (id && id.charAt(0) === SEPARATOR && id.length > 1) {
	      var index = id.indexOf(SEPARATOR, 1);
	      return index > -1 ? id.substr(0, index) : id;
	    }
	    return null;
	  },

	  /**
	   * Traverses the ID hierarchy and invokes the supplied `cb` on any IDs that
	   * should would receive a `mouseEnter` or `mouseLeave` event.
	   *
	   * NOTE: Does not invoke the callback on the nearest common ancestor because
	   * nothing "entered" or "left" that element.
	   *
	   * @param {string} leaveID ID being left.
	   * @param {string} enterID ID being entered.
	   * @param {function} cb Callback to invoke on each entered/left ID.
	   * @param {*} upArg Argument to invoke the callback with on left IDs.
	   * @param {*} downArg Argument to invoke the callback with on entered IDs.
	   * @internal
	   */
	  traverseEnterLeave: function (leaveID, enterID, cb, upArg, downArg) {
	    var ancestorID = getFirstCommonAncestorID(leaveID, enterID);
	    if (ancestorID !== leaveID) {
	      traverseParentPath(leaveID, ancestorID, cb, upArg, false, true);
	    }
	    if (ancestorID !== enterID) {
	      traverseParentPath(ancestorID, enterID, cb, downArg, true, false);
	    }
	  },

	  /**
	   * Simulates the traversal of a two-phase, capture/bubble event dispatch.
	   *
	   * NOTE: This traversal happens on IDs without touching the DOM.
	   *
	   * @param {string} targetID ID of the target node.
	   * @param {function} cb Callback to invoke.
	   * @param {*} arg Argument to invoke the callback with.
	   * @internal
	   */
	  traverseTwoPhase: function (targetID, cb, arg) {
	    if (targetID) {
	      traverseParentPath('', targetID, cb, arg, true, false);
	      traverseParentPath(targetID, '', cb, arg, false, true);
	    }
	  },

	  /**
	   * Same as `traverseTwoPhase` but skips the `targetID`.
	   */
	  traverseTwoPhaseSkipTarget: function (targetID, cb, arg) {
	    if (targetID) {
	      traverseParentPath('', targetID, cb, arg, true, true);
	      traverseParentPath(targetID, '', cb, arg, true, true);
	    }
	  },

	  /**
	   * Traverse a node ID, calling the supplied `cb` for each ancestor ID. For
	   * example, passing `.0.$row-0.1` would result in `cb` getting called
	   * with `.0`, `.0.$row-0`, and `.0.$row-0.1`.
	   *
	   * NOTE: This traversal happens on IDs without touching the DOM.
	   *
	   * @param {string} targetID ID of the target node.
	   * @param {function} cb Callback to invoke.
	   * @param {*} arg Argument to invoke the callback with.
	   * @internal
	   */
	  traverseAncestors: function (targetID, cb, arg) {
	    traverseParentPath('', targetID, cb, arg, true, false);
	  },

	  getFirstCommonAncestorID: getFirstCommonAncestorID,

	  /**
	   * Exposed for unit testing.
	   * @private
	   */
	  _getNextDescendantID: getNextDescendantID,

	  isAncestorIDOf: isAncestorIDOf,

	  SEPARATOR: SEPARATOR

	};

	module.exports = ReactInstanceHandles;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(8)))

/***/ },
/* 49 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactRootIndex
	 * @typechecks
	 */

	'use strict';

	var ReactRootIndexInjection = {
	  /**
	   * @param {function} _createReactRootIndex
	   */
	  injectCreateReactRootIndex: function (_createReactRootIndex) {
	    ReactRootIndex.createReactRootIndex = _createReactRootIndex;
	  }
	};

	var ReactRootIndex = {
	  createReactRootIndex: null,
	  injection: ReactRootIndexInjection
	};

	module.exports = ReactRootIndex;

/***/ },
/* 50 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactInstanceMap
	 */

	'use strict';

	/**
	 * `ReactInstanceMap` maintains a mapping from a public facing stateful
	 * instance (key) and the internal representation (value). This allows public
	 * methods to accept the user facing instance as an argument and map them back
	 * to internal methods.
	 */

	// TODO: Replace this with ES6: var ReactInstanceMap = new Map();
	var ReactInstanceMap = {

	  /**
	   * This API should be called `delete` but we'd have to make sure to always
	   * transform these to strings for IE support. When this transform is fully
	   * supported we can rename it.
	   */
	  remove: function (key) {
	    key._reactInternalInstance = undefined;
	  },

	  get: function (key) {
	    return key._reactInternalInstance;
	  },

	  has: function (key) {
	    return key._reactInternalInstance !== undefined;
	  },

	  set: function (key, value) {
	    key._reactInternalInstance = value;
	  }

	};

	module.exports = ReactInstanceMap;

/***/ },
/* 51 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactMarkupChecksum
	 */

	'use strict';

	var adler32 = __webpack_require__(52);

	var TAG_END = /\/?>/;

	var ReactMarkupChecksum = {
	  CHECKSUM_ATTR_NAME: 'data-react-checksum',

	  /**
	   * @param {string} markup Markup string
	   * @return {string} Markup string with checksum attribute attached
	   */
	  addChecksumToMarkup: function (markup) {
	    var checksum = adler32(markup);

	    // Add checksum (handle both parent tags and self-closing tags)
	    return markup.replace(TAG_END, ' ' + ReactMarkupChecksum.CHECKSUM_ATTR_NAME + '="' + checksum + '"$&');
	  },

	  /**
	   * @param {string} markup to use
	   * @param {DOMElement} element root React element
	   * @returns {boolean} whether or not the markup is the same
	   */
	  canReuseMarkup: function (markup, element) {
	    var existingChecksum = element.getAttribute(ReactMarkupChecksum.CHECKSUM_ATTR_NAME);
	    existingChecksum = existingChecksum && parseInt(existingChecksum, 10);
	    var markupChecksum = adler32(markup);
	    return markupChecksum === existingChecksum;
	  }
	};

	module.exports = ReactMarkupChecksum;

/***/ },
/* 52 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule adler32
	 */

	'use strict';

	var MOD = 65521;

	// adler32 is not cryptographically strong, and is only used to sanity check that
	// markup generated on the server matches the markup generated on the client.
	// This implementation (a modified version of the SheetJS version) has been optimized
	// for our use case, at the expense of conforming to the adler32 specification
	// for non-ascii inputs.
	function adler32(data) {
	  var a = 1;
	  var b = 0;
	  var i = 0;
	  var l = data.length;
	  var m = l & ~0x3;
	  while (i < m) {
	    for (; i < Math.min(i + 4096, m); i += 4) {
	      b += (a += data.charCodeAt(i)) + (a += data.charCodeAt(i + 1)) + (a += data.charCodeAt(i + 2)) + (a += data.charCodeAt(i + 3));
	    }
	    a %= MOD;
	    b %= MOD;
	  }
	  for (; i < l; i++) {
	    b += a += data.charCodeAt(i);
	  }
	  a %= MOD;
	  b %= MOD;
	  return a | b << 16;
	}

	module.exports = adler32;

/***/ },
/* 53 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactReconciler
	 */

	'use strict';

	var ReactRef = __webpack_require__(54);

	/**
	 * Helper to call ReactRef.attachRefs with this composite component, split out
	 * to avoid allocations in the transaction mount-ready queue.
	 */
	function attachRefs() {
	  ReactRef.attachRefs(this, this._currentElement);
	}

	var ReactReconciler = {

	  /**
	   * Initializes the component, renders markup, and registers event listeners.
	   *
	   * @param {ReactComponent} internalInstance
	   * @param {string} rootID DOM ID of the root node.
	   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
	   * @return {?string} Rendered markup to be inserted into the DOM.
	   * @final
	   * @internal
	   */
	  mountComponent: function (internalInstance, rootID, transaction, context) {
	    var markup = internalInstance.mountComponent(rootID, transaction, context);
	    if (internalInstance._currentElement && internalInstance._currentElement.ref != null) {
	      transaction.getReactMountReady().enqueue(attachRefs, internalInstance);
	    }
	    return markup;
	  },

	  /**
	   * Releases any resources allocated by `mountComponent`.
	   *
	   * @final
	   * @internal
	   */
	  unmountComponent: function (internalInstance) {
	    ReactRef.detachRefs(internalInstance, internalInstance._currentElement);
	    internalInstance.unmountComponent();
	  },

	  /**
	   * Update a component using a new element.
	   *
	   * @param {ReactComponent} internalInstance
	   * @param {ReactElement} nextElement
	   * @param {ReactReconcileTransaction} transaction
	   * @param {object} context
	   * @internal
	   */
	  receiveComponent: function (internalInstance, nextElement, transaction, context) {
	    var prevElement = internalInstance._currentElement;

	    if (nextElement === prevElement && context === internalInstance._context) {
	      // Since elements are immutable after the owner is rendered,
	      // we can do a cheap identity compare here to determine if this is a
	      // superfluous reconcile. It's possible for state to be mutable but such
	      // change should trigger an update of the owner which would recreate
	      // the element. We explicitly check for the existence of an owner since
	      // it's possible for an element created outside a composite to be
	      // deeply mutated and reused.

	      // TODO: Bailing out early is just a perf optimization right?
	      // TODO: Removing the return statement should affect correctness?
	      return;
	    }

	    var refsChanged = ReactRef.shouldUpdateRefs(prevElement, nextElement);

	    if (refsChanged) {
	      ReactRef.detachRefs(internalInstance, prevElement);
	    }

	    internalInstance.receiveComponent(nextElement, transaction, context);

	    if (refsChanged && internalInstance._currentElement && internalInstance._currentElement.ref != null) {
	      transaction.getReactMountReady().enqueue(attachRefs, internalInstance);
	    }
	  },

	  /**
	   * Flush any dirty changes in a component.
	   *
	   * @param {ReactComponent} internalInstance
	   * @param {ReactReconcileTransaction} transaction
	   * @internal
	   */
	  performUpdateIfNecessary: function (internalInstance, transaction) {
	    internalInstance.performUpdateIfNecessary(transaction);
	  }

	};

	module.exports = ReactReconciler;

/***/ },
/* 54 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactRef
	 */

	'use strict';

	var ReactOwner = __webpack_require__(55);

	var ReactRef = {};

	function attachRef(ref, component, owner) {
	  if (typeof ref === 'function') {
	    ref(component.getPublicInstance());
	  } else {
	    // Legacy ref
	    ReactOwner.addComponentAsRefTo(component, ref, owner);
	  }
	}

	function detachRef(ref, component, owner) {
	  if (typeof ref === 'function') {
	    ref(null);
	  } else {
	    // Legacy ref
	    ReactOwner.removeComponentAsRefFrom(component, ref, owner);
	  }
	}

	ReactRef.attachRefs = function (instance, element) {
	  if (element === null || element === false) {
	    return;
	  }
	  var ref = element.ref;
	  if (ref != null) {
	    attachRef(ref, instance, element._owner);
	  }
	};

	ReactRef.shouldUpdateRefs = function (prevElement, nextElement) {
	  // If either the owner or a `ref` has changed, make sure the newest owner
	  // has stored a reference to `this`, and the previous owner (if different)
	  // has forgotten the reference to `this`. We use the element instead
	  // of the public this.props because the post processing cannot determine
	  // a ref. The ref conceptually lives on the element.

	  // TODO: Should this even be possible? The owner cannot change because
	  // it's forbidden by shouldUpdateReactComponent. The ref can change
	  // if you swap the keys of but not the refs. Reconsider where this check
	  // is made. It probably belongs where the key checking and
	  // instantiateReactComponent is done.

	  var prevEmpty = prevElement === null || prevElement === false;
	  var nextEmpty = nextElement === null || nextElement === false;

	  return(
	    // This has a few false positives w/r/t empty components.
	    prevEmpty || nextEmpty || nextElement._owner !== prevElement._owner || nextElement.ref !== prevElement.ref
	  );
	};

	ReactRef.detachRefs = function (instance, element) {
	  if (element === null || element === false) {
	    return;
	  }
	  var ref = element.ref;
	  if (ref != null) {
	    detachRef(ref, instance, element._owner);
	  }
	};

	module.exports = ReactRef;

/***/ },
/* 55 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactOwner
	 */

	'use strict';

	var invariant = __webpack_require__(17);

	/**
	 * ReactOwners are capable of storing references to owned components.
	 *
	 * All components are capable of //being// referenced by owner components, but
	 * only ReactOwner components are capable of //referencing// owned components.
	 * The named reference is known as a "ref".
	 *
	 * Refs are available when mounted and updated during reconciliation.
	 *
	 *   var MyComponent = React.createClass({
	 *     render: function() {
	 *       return (
	 *         <div onClick={this.handleClick}>
	 *           <CustomComponent ref="custom" />
	 *         </div>
	 *       );
	 *     },
	 *     handleClick: function() {
	 *       this.refs.custom.handleClick();
	 *     },
	 *     componentDidMount: function() {
	 *       this.refs.custom.initialize();
	 *     }
	 *   });
	 *
	 * Refs should rarely be used. When refs are used, they should only be done to
	 * control data that is not handled by React's data flow.
	 *
	 * @class ReactOwner
	 */
	var ReactOwner = {

	  /**
	   * @param {?object} object
	   * @return {boolean} True if `object` is a valid owner.
	   * @final
	   */
	  isValidOwner: function (object) {
	    return !!(object && typeof object.attachRef === 'function' && typeof object.detachRef === 'function');
	  },

	  /**
	   * Adds a component by ref to an owner component.
	   *
	   * @param {ReactComponent} component Component to reference.
	   * @param {string} ref Name by which to refer to the component.
	   * @param {ReactOwner} owner Component on which to record the ref.
	   * @final
	   * @internal
	   */
	  addComponentAsRefTo: function (component, ref, owner) {
	    !ReactOwner.isValidOwner(owner) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'addComponentAsRefTo(...): Only a ReactOwner can have refs. You might ' + 'be adding a ref to a component that was not created inside a component\'s ' + '`render` method, or you have multiple copies of React loaded ' + '(details: https://fb.me/react-refs-must-have-owner).') : invariant(false) : undefined;
	    owner.attachRef(ref, component);
	  },

	  /**
	   * Removes a component by ref from an owner component.
	   *
	   * @param {ReactComponent} component Component to dereference.
	   * @param {string} ref Name of the ref to remove.
	   * @param {ReactOwner} owner Component on which the ref is recorded.
	   * @final
	   * @internal
	   */
	  removeComponentAsRefFrom: function (component, ref, owner) {
	    !ReactOwner.isValidOwner(owner) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'removeComponentAsRefFrom(...): Only a ReactOwner can have refs. You might ' + 'be removing a ref to a component that was not created inside a component\'s ' + '`render` method, or you have multiple copies of React loaded ' + '(details: https://fb.me/react-refs-must-have-owner).') : invariant(false) : undefined;
	    // Check that `component` is still the current ref because we do not want to
	    // detach the ref if another component stole it.
	    if (owner.getPublicInstance().refs[ref] === component.getPublicInstance()) {
	      owner.detachRef(ref);
	    }
	  }

	};

	module.exports = ReactOwner;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(8)))

/***/ },
/* 56 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactUpdateQueue
	 */

	'use strict';

	var ReactCurrentOwner = __webpack_require__(9);
	var ReactElement = __webpack_require__(46);
	var ReactInstanceMap = __webpack_require__(50);
	var ReactUpdates = __webpack_require__(57);

	var assign = __webpack_require__(43);
	var invariant = __webpack_require__(17);
	var warning = __webpack_require__(29);

	function enqueueUpdate(internalInstance) {
	  ReactUpdates.enqueueUpdate(internalInstance);
	}

	function getInternalInstanceReadyForUpdate(publicInstance, callerName) {
	  var internalInstance = ReactInstanceMap.get(publicInstance);
	  if (!internalInstance) {
	    if (process.env.NODE_ENV !== 'production') {
	      // Only warn when we have a callerName. Otherwise we should be silent.
	      // We're probably calling from enqueueCallback. We don't want to warn
	      // there because we already warned for the corresponding lifecycle method.
	      process.env.NODE_ENV !== 'production' ? warning(!callerName, '%s(...): Can only update a mounted or mounting component. ' + 'This usually means you called %s() on an unmounted component. ' + 'This is a no-op. Please check the code for the %s component.', callerName, callerName, publicInstance.constructor.displayName) : undefined;
	    }
	    return null;
	  }

	  if (process.env.NODE_ENV !== 'production') {
	    process.env.NODE_ENV !== 'production' ? warning(ReactCurrentOwner.current == null, '%s(...): Cannot update during an existing state transition ' + '(such as within `render`). Render methods should be a pure function ' + 'of props and state.', callerName) : undefined;
	  }

	  return internalInstance;
	}

	/**
	 * ReactUpdateQueue allows for state updates to be scheduled into a later
	 * reconciliation step.
	 */
	var ReactUpdateQueue = {

	  /**
	   * Checks whether or not this composite component is mounted.
	   * @param {ReactClass} publicInstance The instance we want to test.
	   * @return {boolean} True if mounted, false otherwise.
	   * @protected
	   * @final
	   */
	  isMounted: function (publicInstance) {
	    if (process.env.NODE_ENV !== 'production') {
	      var owner = ReactCurrentOwner.current;
	      if (owner !== null) {
	        process.env.NODE_ENV !== 'production' ? warning(owner._warnedAboutRefsInRender, '%s is accessing isMounted inside its render() function. ' + 'render() should be a pure function of props and state. It should ' + 'never access something that requires stale data from the previous ' + 'render, such as refs. Move this logic to componentDidMount and ' + 'componentDidUpdate instead.', owner.getName() || 'A component') : undefined;
	        owner._warnedAboutRefsInRender = true;
	      }
	    }
	    var internalInstance = ReactInstanceMap.get(publicInstance);
	    if (internalInstance) {
	      // During componentWillMount and render this will still be null but after
	      // that will always render to something. At least for now. So we can use
	      // this hack.
	      return !!internalInstance._renderedComponent;
	    } else {
	      return false;
	    }
	  },

	  /**
	   * Enqueue a callback that will be executed after all the pending updates
	   * have processed.
	   *
	   * @param {ReactClass} publicInstance The instance to use as `this` context.
	   * @param {?function} callback Called after state is updated.
	   * @internal
	   */
	  enqueueCallback: function (publicInstance, callback) {
	    !(typeof callback === 'function') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'enqueueCallback(...): You called `setProps`, `replaceProps`, ' + '`setState`, `replaceState`, or `forceUpdate` with a callback that ' + 'isn\'t callable.') : invariant(false) : undefined;
	    var internalInstance = getInternalInstanceReadyForUpdate(publicInstance);

	    // Previously we would throw an error if we didn't have an internal
	    // instance. Since we want to make it a no-op instead, we mirror the same
	    // behavior we have in other enqueue* methods.
	    // We also need to ignore callbacks in componentWillMount. See
	    // enqueueUpdates.
	    if (!internalInstance) {
	      return null;
	    }

	    if (internalInstance._pendingCallbacks) {
	      internalInstance._pendingCallbacks.push(callback);
	    } else {
	      internalInstance._pendingCallbacks = [callback];
	    }
	    // TODO: The callback here is ignored when setState is called from
	    // componentWillMount. Either fix it or disallow doing so completely in
	    // favor of getInitialState. Alternatively, we can disallow
	    // componentWillMount during server-side rendering.
	    enqueueUpdate(internalInstance);
	  },

	  enqueueCallbackInternal: function (internalInstance, callback) {
	    !(typeof callback === 'function') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'enqueueCallback(...): You called `setProps`, `replaceProps`, ' + '`setState`, `replaceState`, or `forceUpdate` with a callback that ' + 'isn\'t callable.') : invariant(false) : undefined;
	    if (internalInstance._pendingCallbacks) {
	      internalInstance._pendingCallbacks.push(callback);
	    } else {
	      internalInstance._pendingCallbacks = [callback];
	    }
	    enqueueUpdate(internalInstance);
	  },

	  /**
	   * Forces an update. This should only be invoked when it is known with
	   * certainty that we are **not** in a DOM transaction.
	   *
	   * You may want to call this when you know that some deeper aspect of the
	   * component's state has changed but `setState` was not called.
	   *
	   * This will not invoke `shouldComponentUpdate`, but it will invoke
	   * `componentWillUpdate` and `componentDidUpdate`.
	   *
	   * @param {ReactClass} publicInstance The instance that should rerender.
	   * @internal
	   */
	  enqueueForceUpdate: function (publicInstance) {
	    var internalInstance = getInternalInstanceReadyForUpdate(publicInstance, 'forceUpdate');

	    if (!internalInstance) {
	      return;
	    }

	    internalInstance._pendingForceUpdate = true;

	    enqueueUpdate(internalInstance);
	  },

	  /**
	   * Replaces all of the state. Always use this or `setState` to mutate state.
	   * You should treat `this.state` as immutable.
	   *
	   * There is no guarantee that `this.state` will be immediately updated, so
	   * accessing `this.state` after calling this method may return the old value.
	   *
	   * @param {ReactClass} publicInstance The instance that should rerender.
	   * @param {object} completeState Next state.
	   * @internal
	   */
	  enqueueReplaceState: function (publicInstance, completeState) {
	    var internalInstance = getInternalInstanceReadyForUpdate(publicInstance, 'replaceState');

	    if (!internalInstance) {
	      return;
	    }

	    internalInstance._pendingStateQueue = [completeState];
	    internalInstance._pendingReplaceState = true;

	    enqueueUpdate(internalInstance);
	  },

	  /**
	   * Sets a subset of the state. This only exists because _pendingState is
	   * internal. This provides a merging strategy that is not available to deep
	   * properties which is confusing. TODO: Expose pendingState or don't use it
	   * during the merge.
	   *
	   * @param {ReactClass} publicInstance The instance that should rerender.
	   * @param {object} partialState Next partial state to be merged with state.
	   * @internal
	   */
	  enqueueSetState: function (publicInstance, partialState) {
	    var internalInstance = getInternalInstanceReadyForUpdate(publicInstance, 'setState');

	    if (!internalInstance) {
	      return;
	    }

	    var queue = internalInstance._pendingStateQueue || (internalInstance._pendingStateQueue = []);
	    queue.push(partialState);

	    enqueueUpdate(internalInstance);
	  },

	  /**
	   * Sets a subset of the props.
	   *
	   * @param {ReactClass} publicInstance The instance that should rerender.
	   * @param {object} partialProps Subset of the next props.
	   * @internal
	   */
	  enqueueSetProps: function (publicInstance, partialProps) {
	    var internalInstance = getInternalInstanceReadyForUpdate(publicInstance, 'setProps');
	    if (!internalInstance) {
	      return;
	    }
	    ReactUpdateQueue.enqueueSetPropsInternal(internalInstance, partialProps);
	  },

	  enqueueSetPropsInternal: function (internalInstance, partialProps) {
	    var topLevelWrapper = internalInstance._topLevelWrapper;
	    !topLevelWrapper ? process.env.NODE_ENV !== 'production' ? invariant(false, 'setProps(...): You called `setProps` on a ' + 'component with a parent. This is an anti-pattern since props will ' + 'get reactively updated when rendered. Instead, change the owner\'s ' + '`render` method to pass the correct value as props to the component ' + 'where it is created.') : invariant(false) : undefined;

	    // Merge with the pending element if it exists, otherwise with existing
	    // element props.
	    var wrapElement = topLevelWrapper._pendingElement || topLevelWrapper._currentElement;
	    var element = wrapElement.props;
	    var props = assign({}, element.props, partialProps);
	    topLevelWrapper._pendingElement = ReactElement.cloneAndReplaceProps(wrapElement, ReactElement.cloneAndReplaceProps(element, props));

	    enqueueUpdate(topLevelWrapper);
	  },

	  /**
	   * Replaces all of the props.
	   *
	   * @param {ReactClass} publicInstance The instance that should rerender.
	   * @param {object} props New props.
	   * @internal
	   */
	  enqueueReplaceProps: function (publicInstance, props) {
	    var internalInstance = getInternalInstanceReadyForUpdate(publicInstance, 'replaceProps');
	    if (!internalInstance) {
	      return;
	    }
	    ReactUpdateQueue.enqueueReplacePropsInternal(internalInstance, props);
	  },

	  enqueueReplacePropsInternal: function (internalInstance, props) {
	    var topLevelWrapper = internalInstance._topLevelWrapper;
	    !topLevelWrapper ? process.env.NODE_ENV !== 'production' ? invariant(false, 'replaceProps(...): You called `replaceProps` on a ' + 'component with a parent. This is an anti-pattern since props will ' + 'get reactively updated when rendered. Instead, change the owner\'s ' + '`render` method to pass the correct value as props to the component ' + 'where it is created.') : invariant(false) : undefined;

	    // Merge with the pending element if it exists, otherwise with existing
	    // element props.
	    var wrapElement = topLevelWrapper._pendingElement || topLevelWrapper._currentElement;
	    var element = wrapElement.props;
	    topLevelWrapper._pendingElement = ReactElement.cloneAndReplaceProps(wrapElement, ReactElement.cloneAndReplaceProps(element, props));

	    enqueueUpdate(topLevelWrapper);
	  },

	  enqueueElementInternal: function (internalInstance, newElement) {
	    internalInstance._pendingElement = newElement;
	    enqueueUpdate(internalInstance);
	  }

	};

	module.exports = ReactUpdateQueue;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(8)))

/***/ },
/* 57 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactUpdates
	 */

	'use strict';

	var CallbackQueue = __webpack_require__(58);
	var PooledClass = __webpack_require__(59);
	var ReactPerf = __webpack_require__(22);
	var ReactReconciler = __webpack_require__(53);
	var Transaction = __webpack_require__(60);

	var assign = __webpack_require__(43);
	var invariant = __webpack_require__(17);

	var dirtyComponents = [];
	var asapCallbackQueue = CallbackQueue.getPooled();
	var asapEnqueued = false;

	var batchingStrategy = null;

	function ensureInjected() {
	  !(ReactUpdates.ReactReconcileTransaction && batchingStrategy) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactUpdates: must inject a reconcile transaction class and batching ' + 'strategy') : invariant(false) : undefined;
	}

	var NESTED_UPDATES = {
	  initialize: function () {
	    this.dirtyComponentsLength = dirtyComponents.length;
	  },
	  close: function () {
	    if (this.dirtyComponentsLength !== dirtyComponents.length) {
	      // Additional updates were enqueued by componentDidUpdate handlers or
	      // similar; before our own UPDATE_QUEUEING wrapper closes, we want to run
	      // these new updates so that if A's componentDidUpdate calls setState on
	      // B, B will update before the callback A's updater provided when calling
	      // setState.
	      dirtyComponents.splice(0, this.dirtyComponentsLength);
	      flushBatchedUpdates();
	    } else {
	      dirtyComponents.length = 0;
	    }
	  }
	};

	var UPDATE_QUEUEING = {
	  initialize: function () {
	    this.callbackQueue.reset();
	  },
	  close: function () {
	    this.callbackQueue.notifyAll();
	  }
	};

	var TRANSACTION_WRAPPERS = [NESTED_UPDATES, UPDATE_QUEUEING];

	function ReactUpdatesFlushTransaction() {
	  this.reinitializeTransaction();
	  this.dirtyComponentsLength = null;
	  this.callbackQueue = CallbackQueue.getPooled();
	  this.reconcileTransaction = ReactUpdates.ReactReconcileTransaction.getPooled( /* forceHTML */false);
	}

	assign(ReactUpdatesFlushTransaction.prototype, Transaction.Mixin, {
	  getTransactionWrappers: function () {
	    return TRANSACTION_WRAPPERS;
	  },

	  destructor: function () {
	    this.dirtyComponentsLength = null;
	    CallbackQueue.release(this.callbackQueue);
	    this.callbackQueue = null;
	    ReactUpdates.ReactReconcileTransaction.release(this.reconcileTransaction);
	    this.reconcileTransaction = null;
	  },

	  perform: function (method, scope, a) {
	    // Essentially calls `this.reconcileTransaction.perform(method, scope, a)`
	    // with this transaction's wrappers around it.
	    return Transaction.Mixin.perform.call(this, this.reconcileTransaction.perform, this.reconcileTransaction, method, scope, a);
	  }
	});

	PooledClass.addPoolingTo(ReactUpdatesFlushTransaction);

	function batchedUpdates(callback, a, b, c, d, e) {
	  ensureInjected();
	  batchingStrategy.batchedUpdates(callback, a, b, c, d, e);
	}

	/**
	 * Array comparator for ReactComponents by mount ordering.
	 *
	 * @param {ReactComponent} c1 first component you're comparing
	 * @param {ReactComponent} c2 second component you're comparing
	 * @return {number} Return value usable by Array.prototype.sort().
	 */
	function mountOrderComparator(c1, c2) {
	  return c1._mountOrder - c2._mountOrder;
	}

	function runBatchedUpdates(transaction) {
	  var len = transaction.dirtyComponentsLength;
	  !(len === dirtyComponents.length) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Expected flush transaction\'s stored dirty-components length (%s) to ' + 'match dirty-components array length (%s).', len, dirtyComponents.length) : invariant(false) : undefined;

	  // Since reconciling a component higher in the owner hierarchy usually (not
	  // always -- see shouldComponentUpdate()) will reconcile children, reconcile
	  // them before their children by sorting the array.
	  dirtyComponents.sort(mountOrderComparator);

	  for (var i = 0; i < len; i++) {
	    // If a component is unmounted before pending changes apply, it will still
	    // be here, but we assume that it has cleared its _pendingCallbacks and
	    // that performUpdateIfNecessary is a noop.
	    var component = dirtyComponents[i];

	    // If performUpdateIfNecessary happens to enqueue any new updates, we
	    // shouldn't execute the callbacks until the next render happens, so
	    // stash the callbacks first
	    var callbacks = component._pendingCallbacks;
	    component._pendingCallbacks = null;

	    ReactReconciler.performUpdateIfNecessary(component, transaction.reconcileTransaction);

	    if (callbacks) {
	      for (var j = 0; j < callbacks.length; j++) {
	        transaction.callbackQueue.enqueue(callbacks[j], component.getPublicInstance());
	      }
	    }
	  }
	}

	var flushBatchedUpdates = function () {
	  // ReactUpdatesFlushTransaction's wrappers will clear the dirtyComponents
	  // array and perform any updates enqueued by mount-ready handlers (i.e.,
	  // componentDidUpdate) but we need to check here too in order to catch
	  // updates enqueued by setState callbacks and asap calls.
	  while (dirtyComponents.length || asapEnqueued) {
	    if (dirtyComponents.length) {
	      var transaction = ReactUpdatesFlushTransaction.getPooled();
	      transaction.perform(runBatchedUpdates, null, transaction);
	      ReactUpdatesFlushTransaction.release(transaction);
	    }

	    if (asapEnqueued) {
	      asapEnqueued = false;
	      var queue = asapCallbackQueue;
	      asapCallbackQueue = CallbackQueue.getPooled();
	      queue.notifyAll();
	      CallbackQueue.release(queue);
	    }
	  }
	};
	flushBatchedUpdates = ReactPerf.measure('ReactUpdates', 'flushBatchedUpdates', flushBatchedUpdates);

	/**
	 * Mark a component as needing a rerender, adding an optional callback to a
	 * list of functions which will be executed once the rerender occurs.
	 */
	function enqueueUpdate(component) {
	  ensureInjected();

	  // Various parts of our code (such as ReactCompositeComponent's
	  // _renderValidatedComponent) assume that calls to render aren't nested;
	  // verify that that's the case. (This is called by each top-level update
	  // function, like setProps, setState, forceUpdate, etc.; creation and
	  // destruction of top-level components is guarded in ReactMount.)

	  if (!batchingStrategy.isBatchingUpdates) {
	    batchingStrategy.batchedUpdates(enqueueUpdate, component);
	    return;
	  }

	  dirtyComponents.push(component);
	}

	/**
	 * Enqueue a callback to be run at the end of the current batching cycle. Throws
	 * if no updates are currently being performed.
	 */
	function asap(callback, context) {
	  !batchingStrategy.isBatchingUpdates ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactUpdates.asap: Can\'t enqueue an asap callback in a context where' + 'updates are not being batched.') : invariant(false) : undefined;
	  asapCallbackQueue.enqueue(callback, context);
	  asapEnqueued = true;
	}

	var ReactUpdatesInjection = {
	  injectReconcileTransaction: function (ReconcileTransaction) {
	    !ReconcileTransaction ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactUpdates: must provide a reconcile transaction class') : invariant(false) : undefined;
	    ReactUpdates.ReactReconcileTransaction = ReconcileTransaction;
	  },

	  injectBatchingStrategy: function (_batchingStrategy) {
	    !_batchingStrategy ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactUpdates: must provide a batching strategy') : invariant(false) : undefined;
	    !(typeof _batchingStrategy.batchedUpdates === 'function') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactUpdates: must provide a batchedUpdates() function') : invariant(false) : undefined;
	    !(typeof _batchingStrategy.isBatchingUpdates === 'boolean') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactUpdates: must provide an isBatchingUpdates boolean attribute') : invariant(false) : undefined;
	    batchingStrategy = _batchingStrategy;
	  }
	};

	var ReactUpdates = {
	  /**
	   * React references `ReactReconcileTransaction` using this property in order
	   * to allow dependency injection.
	   *
	   * @internal
	   */
	  ReactReconcileTransaction: null,

	  batchedUpdates: batchedUpdates,
	  enqueueUpdate: enqueueUpdate,
	  flushBatchedUpdates: flushBatchedUpdates,
	  injection: ReactUpdatesInjection,
	  asap: asap
	};

	module.exports = ReactUpdates;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(8)))

/***/ },
/* 58 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule CallbackQueue
	 */

	'use strict';

	var PooledClass = __webpack_require__(59);

	var assign = __webpack_require__(43);
	var invariant = __webpack_require__(17);

	/**
	 * A specialized pseudo-event module to help keep track of components waiting to
	 * be notified when their DOM representations are available for use.
	 *
	 * This implements `PooledClass`, so you should never need to instantiate this.
	 * Instead, use `CallbackQueue.getPooled()`.
	 *
	 * @class ReactMountReady
	 * @implements PooledClass
	 * @internal
	 */
	function CallbackQueue() {
	  this._callbacks = null;
	  this._contexts = null;
	}

	assign(CallbackQueue.prototype, {

	  /**
	   * Enqueues a callback to be invoked when `notifyAll` is invoked.
	   *
	   * @param {function} callback Invoked when `notifyAll` is invoked.
	   * @param {?object} context Context to call `callback` with.
	   * @internal
	   */
	  enqueue: function (callback, context) {
	    this._callbacks = this._callbacks || [];
	    this._contexts = this._contexts || [];
	    this._callbacks.push(callback);
	    this._contexts.push(context);
	  },

	  /**
	   * Invokes all enqueued callbacks and clears the queue. This is invoked after
	   * the DOM representation of a component has been created or updated.
	   *
	   * @internal
	   */
	  notifyAll: function () {
	    var callbacks = this._callbacks;
	    var contexts = this._contexts;
	    if (callbacks) {
	      !(callbacks.length === contexts.length) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Mismatched list of contexts in callback queue') : invariant(false) : undefined;
	      this._callbacks = null;
	      this._contexts = null;
	      for (var i = 0; i < callbacks.length; i++) {
	        callbacks[i].call(contexts[i]);
	      }
	      callbacks.length = 0;
	      contexts.length = 0;
	    }
	  },

	  /**
	   * Resets the internal queue.
	   *
	   * @internal
	   */
	  reset: function () {
	    this._callbacks = null;
	    this._contexts = null;
	  },

	  /**
	   * `PooledClass` looks for this.
	   */
	  destructor: function () {
	    this.reset();
	  }

	});

	PooledClass.addPoolingTo(CallbackQueue);

	module.exports = CallbackQueue;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(8)))

/***/ },
/* 59 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule PooledClass
	 */

	'use strict';

	var invariant = __webpack_require__(17);

	/**
	 * Static poolers. Several custom versions for each potential number of
	 * arguments. A completely generic pooler is easy to implement, but would
	 * require accessing the `arguments` object. In each of these, `this` refers to
	 * the Class itself, not an instance. If any others are needed, simply add them
	 * here, or in their own files.
	 */
	var oneArgumentPooler = function (copyFieldsFrom) {
	  var Klass = this;
	  if (Klass.instancePool.length) {
	    var instance = Klass.instancePool.pop();
	    Klass.call(instance, copyFieldsFrom);
	    return instance;
	  } else {
	    return new Klass(copyFieldsFrom);
	  }
	};

	var twoArgumentPooler = function (a1, a2) {
	  var Klass = this;
	  if (Klass.instancePool.length) {
	    var instance = Klass.instancePool.pop();
	    Klass.call(instance, a1, a2);
	    return instance;
	  } else {
	    return new Klass(a1, a2);
	  }
	};

	var threeArgumentPooler = function (a1, a2, a3) {
	  var Klass = this;
	  if (Klass.instancePool.length) {
	    var instance = Klass.instancePool.pop();
	    Klass.call(instance, a1, a2, a3);
	    return instance;
	  } else {
	    return new Klass(a1, a2, a3);
	  }
	};

	var fourArgumentPooler = function (a1, a2, a3, a4) {
	  var Klass = this;
	  if (Klass.instancePool.length) {
	    var instance = Klass.instancePool.pop();
	    Klass.call(instance, a1, a2, a3, a4);
	    return instance;
	  } else {
	    return new Klass(a1, a2, a3, a4);
	  }
	};

	var fiveArgumentPooler = function (a1, a2, a3, a4, a5) {
	  var Klass = this;
	  if (Klass.instancePool.length) {
	    var instance = Klass.instancePool.pop();
	    Klass.call(instance, a1, a2, a3, a4, a5);
	    return instance;
	  } else {
	    return new Klass(a1, a2, a3, a4, a5);
	  }
	};

	var standardReleaser = function (instance) {
	  var Klass = this;
	  !(instance instanceof Klass) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Trying to release an instance into a pool of a different type.') : invariant(false) : undefined;
	  instance.destructor();
	  if (Klass.instancePool.length < Klass.poolSize) {
	    Klass.instancePool.push(instance);
	  }
	};

	var DEFAULT_POOL_SIZE = 10;
	var DEFAULT_POOLER = oneArgumentPooler;

	/**
	 * Augments `CopyConstructor` to be a poolable class, augmenting only the class
	 * itself (statically) not adding any prototypical fields. Any CopyConstructor
	 * you give this may have a `poolSize` property, and will look for a
	 * prototypical `destructor` on instances (optional).
	 *
	 * @param {Function} CopyConstructor Constructor that can be used to reset.
	 * @param {Function} pooler Customizable pooler.
	 */
	var addPoolingTo = function (CopyConstructor, pooler) {
	  var NewKlass = CopyConstructor;
	  NewKlass.instancePool = [];
	  NewKlass.getPooled = pooler || DEFAULT_POOLER;
	  if (!NewKlass.poolSize) {
	    NewKlass.poolSize = DEFAULT_POOL_SIZE;
	  }
	  NewKlass.release = standardReleaser;
	  return NewKlass;
	};

	var PooledClass = {
	  addPoolingTo: addPoolingTo,
	  oneArgumentPooler: oneArgumentPooler,
	  twoArgumentPooler: twoArgumentPooler,
	  threeArgumentPooler: threeArgumentPooler,
	  fourArgumentPooler: fourArgumentPooler,
	  fiveArgumentPooler: fiveArgumentPooler
	};

	module.exports = PooledClass;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(8)))

/***/ },
/* 60 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule Transaction
	 */

	'use strict';

	var invariant = __webpack_require__(17);

	/**
	 * `Transaction` creates a black box that is able to wrap any method such that
	 * certain invariants are maintained before and after the method is invoked
	 * (Even if an exception is thrown while invoking the wrapped method). Whoever
	 * instantiates a transaction can provide enforcers of the invariants at
	 * creation time. The `Transaction` class itself will supply one additional
	 * automatic invariant for you - the invariant that any transaction instance
	 * should not be run while it is already being run. You would typically create a
	 * single instance of a `Transaction` for reuse multiple times, that potentially
	 * is used to wrap several different methods. Wrappers are extremely simple -
	 * they only require implementing two methods.
	 *
	 * <pre>
	 *                       wrappers (injected at creation time)
	 *                                      +        +
	 *                                      |        |
	 *                    +-----------------|--------|--------------+
	 *                    |                 v        |              |
	 *                    |      +---------------+   |              |
	 *                    |   +--|    wrapper1   |---|----+         |
	 *                    |   |  +---------------+   v    |         |
	 *                    |   |          +-------------+  |         |
	 *                    |   |     +----|   wrapper2  |--------+   |
	 *                    |   |     |    +-------------+  |     |   |
	 *                    |   |     |                     |     |   |
	 *                    |   v     v                     v     v   | wrapper
	 *                    | +---+ +---+   +---------+   +---+ +---+ | invariants
	 * perform(anyMethod) | |   | |   |   |         |   |   | |   | | maintained
	 * +----------------->|-|---|-|---|-->|anyMethod|---|---|-|---|-|-------->
	 *                    | |   | |   |   |         |   |   | |   | |
	 *                    | |   | |   |   |         |   |   | |   | |
	 *                    | |   | |   |   |         |   |   | |   | |
	 *                    | +---+ +---+   +---------+   +---+ +---+ |
	 *                    |  initialize                    close    |
	 *                    +-----------------------------------------+
	 * </pre>
	 *
	 * Use cases:
	 * - Preserving the input selection ranges before/after reconciliation.
	 *   Restoring selection even in the event of an unexpected error.
	 * - Deactivating events while rearranging the DOM, preventing blurs/focuses,
	 *   while guaranteeing that afterwards, the event system is reactivated.
	 * - Flushing a queue of collected DOM mutations to the main UI thread after a
	 *   reconciliation takes place in a worker thread.
	 * - Invoking any collected `componentDidUpdate` callbacks after rendering new
	 *   content.
	 * - (Future use case): Wrapping particular flushes of the `ReactWorker` queue
	 *   to preserve the `scrollTop` (an automatic scroll aware DOM).
	 * - (Future use case): Layout calculations before and after DOM updates.
	 *
	 * Transactional plugin API:
	 * - A module that has an `initialize` method that returns any precomputation.
	 * - and a `close` method that accepts the precomputation. `close` is invoked
	 *   when the wrapped process is completed, or has failed.
	 *
	 * @param {Array<TransactionalWrapper>} transactionWrapper Wrapper modules
	 * that implement `initialize` and `close`.
	 * @return {Transaction} Single transaction for reuse in thread.
	 *
	 * @class Transaction
	 */
	var Mixin = {
	  /**
	   * Sets up this instance so that it is prepared for collecting metrics. Does
	   * so such that this setup method may be used on an instance that is already
	   * initialized, in a way that does not consume additional memory upon reuse.
	   * That can be useful if you decide to make your subclass of this mixin a
	   * "PooledClass".
	   */
	  reinitializeTransaction: function () {
	    this.transactionWrappers = this.getTransactionWrappers();
	    if (this.wrapperInitData) {
	      this.wrapperInitData.length = 0;
	    } else {
	      this.wrapperInitData = [];
	    }
	    this._isInTransaction = false;
	  },

	  _isInTransaction: false,

	  /**
	   * @abstract
	   * @return {Array<TransactionWrapper>} Array of transaction wrappers.
	   */
	  getTransactionWrappers: null,

	  isInTransaction: function () {
	    return !!this._isInTransaction;
	  },

	  /**
	   * Executes the function within a safety window. Use this for the top level
	   * methods that result in large amounts of computation/mutations that would
	   * need to be safety checked. The optional arguments helps prevent the need
	   * to bind in many cases.
	   *
	   * @param {function} method Member of scope to call.
	   * @param {Object} scope Scope to invoke from.
	   * @param {Object?=} a Argument to pass to the method.
	   * @param {Object?=} b Argument to pass to the method.
	   * @param {Object?=} c Argument to pass to the method.
	   * @param {Object?=} d Argument to pass to the method.
	   * @param {Object?=} e Argument to pass to the method.
	   * @param {Object?=} f Argument to pass to the method.
	   *
	   * @return {*} Return value from `method`.
	   */
	  perform: function (method, scope, a, b, c, d, e, f) {
	    !!this.isInTransaction() ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Transaction.perform(...): Cannot initialize a transaction when there ' + 'is already an outstanding transaction.') : invariant(false) : undefined;
	    var errorThrown;
	    var ret;
	    try {
	      this._isInTransaction = true;
	      // Catching errors makes debugging more difficult, so we start with
	      // errorThrown set to true before setting it to false after calling
	      // close -- if it's still set to true in the finally block, it means
	      // one of these calls threw.
	      errorThrown = true;
	      this.initializeAll(0);
	      ret = method.call(scope, a, b, c, d, e, f);
	      errorThrown = false;
	    } finally {
	      try {
	        if (errorThrown) {
	          // If `method` throws, prefer to show that stack trace over any thrown
	          // by invoking `closeAll`.
	          try {
	            this.closeAll(0);
	          } catch (err) {}
	        } else {
	          // Since `method` didn't throw, we don't want to silence the exception
	          // here.
	          this.closeAll(0);
	        }
	      } finally {
	        this._isInTransaction = false;
	      }
	    }
	    return ret;
	  },

	  initializeAll: function (startIndex) {
	    var transactionWrappers = this.transactionWrappers;
	    for (var i = startIndex; i < transactionWrappers.length; i++) {
	      var wrapper = transactionWrappers[i];
	      try {
	        // Catching errors makes debugging more difficult, so we start with the
	        // OBSERVED_ERROR state before overwriting it with the real return value
	        // of initialize -- if it's still set to OBSERVED_ERROR in the finally
	        // block, it means wrapper.initialize threw.
	        this.wrapperInitData[i] = Transaction.OBSERVED_ERROR;
	        this.wrapperInitData[i] = wrapper.initialize ? wrapper.initialize.call(this) : null;
	      } finally {
	        if (this.wrapperInitData[i] === Transaction.OBSERVED_ERROR) {
	          // The initializer for wrapper i threw an error; initialize the
	          // remaining wrappers but silence any exceptions from them to ensure
	          // that the first error is the one to bubble up.
	          try {
	            this.initializeAll(i + 1);
	          } catch (err) {}
	        }
	      }
	    }
	  },

	  /**
	   * Invokes each of `this.transactionWrappers.close[i]` functions, passing into
	   * them the respective return values of `this.transactionWrappers.init[i]`
	   * (`close`rs that correspond to initializers that failed will not be
	   * invoked).
	   */
	  closeAll: function (startIndex) {
	    !this.isInTransaction() ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Transaction.closeAll(): Cannot close transaction when none are open.') : invariant(false) : undefined;
	    var transactionWrappers = this.transactionWrappers;
	    for (var i = startIndex; i < transactionWrappers.length; i++) {
	      var wrapper = transactionWrappers[i];
	      var initData = this.wrapperInitData[i];
	      var errorThrown;
	      try {
	        // Catching errors makes debugging more difficult, so we start with
	        // errorThrown set to true before setting it to false after calling
	        // close -- if it's still set to true in the finally block, it means
	        // wrapper.close threw.
	        errorThrown = true;
	        if (initData !== Transaction.OBSERVED_ERROR && wrapper.close) {
	          wrapper.close.call(this, initData);
	        }
	        errorThrown = false;
	      } finally {
	        if (errorThrown) {
	          // The closer for wrapper i threw an error; close the remaining
	          // wrappers but silence any exceptions from them to ensure that the
	          // first error is the one to bubble up.
	          try {
	            this.closeAll(i + 1);
	          } catch (e) {}
	        }
	      }
	    }
	    this.wrapperInitData.length = 0;
	  }
	};

	var Transaction = {

	  Mixin: Mixin,

	  /**
	   * Token to look for to determine if an error occurred.
	   */
	  OBSERVED_ERROR: {}

	};

	module.exports = Transaction;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(8)))

/***/ },
/* 61 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule emptyObject
	 */

	'use strict';

	var emptyObject = {};

	if (process.env.NODE_ENV !== 'production') {
	  Object.freeze(emptyObject);
	}

	module.exports = emptyObject;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(8)))

/***/ },
/* 62 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule containsNode
	 * @typechecks
	 */

	'use strict';

	var isTextNode = __webpack_require__(63);

	/*eslint-disable no-bitwise */

	/**
	 * Checks if a given DOM node contains or is another DOM node.
	 *
	 * @param {?DOMNode} outerNode Outer DOM node.
	 * @param {?DOMNode} innerNode Inner DOM node.
	 * @return {boolean} True if `outerNode` contains or is `innerNode`.
	 */
	function containsNode(_x, _x2) {
	  var _again = true;

	  _function: while (_again) {
	    var outerNode = _x,
	        innerNode = _x2;
	    _again = false;

	    if (!outerNode || !innerNode) {
	      return false;
	    } else if (outerNode === innerNode) {
	      return true;
	    } else if (isTextNode(outerNode)) {
	      return false;
	    } else if (isTextNode(innerNode)) {
	      _x = outerNode;
	      _x2 = innerNode.parentNode;
	      _again = true;
	      continue _function;
	    } else if (outerNode.contains) {
	      return outerNode.contains(innerNode);
	    } else if (outerNode.compareDocumentPosition) {
	      return !!(outerNode.compareDocumentPosition(innerNode) & 16);
	    } else {
	      return false;
	    }
	  }
	}

	module.exports = containsNode;

/***/ },
/* 63 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule isTextNode
	 * @typechecks
	 */

	'use strict';

	var isNode = __webpack_require__(64);

	/**
	 * @param {*} object The object to check.
	 * @return {boolean} Whether or not the object is a DOM text node.
	 */
	function isTextNode(object) {
	  return isNode(object) && object.nodeType == 3;
	}

	module.exports = isTextNode;

/***/ },
/* 64 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule isNode
	 * @typechecks
	 */

	/**
	 * @param {*} object The object to check.
	 * @return {boolean} Whether or not the object is a DOM node.
	 */
	'use strict';

	function isNode(object) {
	  return !!(object && (typeof Node === 'function' ? object instanceof Node : typeof object === 'object' && typeof object.nodeType === 'number' && typeof object.nodeName === 'string'));
	}

	module.exports = isNode;

/***/ },
/* 65 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule instantiateReactComponent
	 * @typechecks static-only
	 */

	'use strict';

	var ReactCompositeComponent = __webpack_require__(66);
	var ReactEmptyComponent = __webpack_require__(71);
	var ReactNativeComponent = __webpack_require__(72);

	var assign = __webpack_require__(43);
	var invariant = __webpack_require__(17);
	var warning = __webpack_require__(29);

	// To avoid a cyclic dependency, we create the final class in this module
	var ReactCompositeComponentWrapper = function () {};
	assign(ReactCompositeComponentWrapper.prototype, ReactCompositeComponent.Mixin, {
	  _instantiateReactComponent: instantiateReactComponent
	});

	function getDeclarationErrorAddendum(owner) {
	  if (owner) {
	    var name = owner.getName();
	    if (name) {
	      return ' Check the render method of `' + name + '`.';
	    }
	  }
	  return '';
	}

	/**
	 * Check if the type reference is a known internal type. I.e. not a user
	 * provided composite type.
	 *
	 * @param {function} type
	 * @return {boolean} Returns true if this is a valid internal type.
	 */
	function isInternalComponentType(type) {
	  return typeof type === 'function' && typeof type.prototype !== 'undefined' && typeof type.prototype.mountComponent === 'function' && typeof type.prototype.receiveComponent === 'function';
	}

	/**
	 * Given a ReactNode, create an instance that will actually be mounted.
	 *
	 * @param {ReactNode} node
	 * @return {object} A new instance of the element's constructor.
	 * @protected
	 */
	function instantiateReactComponent(node) {
	  var instance;

	  if (node === null || node === false) {
	    instance = new ReactEmptyComponent(instantiateReactComponent);
	  } else if (typeof node === 'object') {
	    var element = node;
	    !(element && (typeof element.type === 'function' || typeof element.type === 'string')) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Element type is invalid: expected a string (for built-in components) ' + 'or a class/function (for composite components) but got: %s.%s', element.type == null ? element.type : typeof element.type, getDeclarationErrorAddendum(element._owner)) : invariant(false) : undefined;

	    // Special case string values
	    if (typeof element.type === 'string') {
	      instance = ReactNativeComponent.createInternalComponent(element);
	    } else if (isInternalComponentType(element.type)) {
	      // This is temporarily available for custom components that are not string
	      // representations. I.e. ART. Once those are updated to use the string
	      // representation, we can drop this code path.
	      instance = new element.type(element);
	    } else {
	      instance = new ReactCompositeComponentWrapper();
	    }
	  } else if (typeof node === 'string' || typeof node === 'number') {
	    instance = ReactNativeComponent.createInstanceForText(node);
	  } else {
	     true ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Encountered invalid React node of type %s', typeof node) : invariant(false) : undefined;
	  }

	  if (process.env.NODE_ENV !== 'production') {
	    process.env.NODE_ENV !== 'production' ? warning(typeof instance.construct === 'function' && typeof instance.mountComponent === 'function' && typeof instance.receiveComponent === 'function' && typeof instance.unmountComponent === 'function', 'Only React Components can be mounted.') : undefined;
	  }

	  // Sets up the instance. This can probably just move into the constructor now.
	  instance.construct(node);

	  // These two fields are used by the DOM and ART diffing algorithms
	  // respectively. Instead of using expandos on components, we should be
	  // storing the state needed by the diffing algorithms elsewhere.
	  instance._mountIndex = 0;
	  instance._mountImage = null;

	  if (process.env.NODE_ENV !== 'production') {
	    instance._isOwnerNecessary = false;
	    instance._warnedAboutRefsInRender = false;
	  }

	  // Internal instances should fully constructed at this point, so they should
	  // not get any new fields added to them at this point.
	  if (process.env.NODE_ENV !== 'production') {
	    if (Object.preventExtensions) {
	      Object.preventExtensions(instance);
	    }
	  }

	  return instance;
	}

	module.exports = instantiateReactComponent;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(8)))

/***/ },
/* 66 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactCompositeComponent
	 */

	'use strict';

	var ReactComponentEnvironment = __webpack_require__(67);
	var ReactCurrentOwner = __webpack_require__(9);
	var ReactElement = __webpack_require__(46);
	var ReactInstanceMap = __webpack_require__(50);
	var ReactPerf = __webpack_require__(22);
	var ReactPropTypeLocations = __webpack_require__(68);
	var ReactPropTypeLocationNames = __webpack_require__(69);
	var ReactReconciler = __webpack_require__(53);
	var ReactUpdateQueue = __webpack_require__(56);

	var assign = __webpack_require__(43);
	var emptyObject = __webpack_require__(61);
	var invariant = __webpack_require__(17);
	var shouldUpdateReactComponent = __webpack_require__(70);
	var warning = __webpack_require__(29);

	function getDeclarationErrorAddendum(component) {
	  var owner = component._currentElement._owner || null;
	  if (owner) {
	    var name = owner.getName();
	    if (name) {
	      return ' Check the render method of `' + name + '`.';
	    }
	  }
	  return '';
	}

	function StatelessComponent(Component) {}
	StatelessComponent.prototype.render = function () {
	  var Component = ReactInstanceMap.get(this)._currentElement.type;
	  return Component(this.props, this.context, this.updater);
	};

	/**
	 * ------------------ The Life-Cycle of a Composite Component ------------------
	 *
	 * - constructor: Initialization of state. The instance is now retained.
	 *   - componentWillMount
	 *   - render
	 *   - [children's constructors]
	 *     - [children's componentWillMount and render]
	 *     - [children's componentDidMount]
	 *     - componentDidMount
	 *
	 *       Update Phases:
	 *       - componentWillReceiveProps (only called if parent updated)
	 *       - shouldComponentUpdate
	 *         - componentWillUpdate
	 *           - render
	 *           - [children's constructors or receive props phases]
	 *         - componentDidUpdate
	 *
	 *     - componentWillUnmount
	 *     - [children's componentWillUnmount]
	 *   - [children destroyed]
	 * - (destroyed): The instance is now blank, released by React and ready for GC.
	 *
	 * -----------------------------------------------------------------------------
	 */

	/**
	 * An incrementing ID assigned to each component when it is mounted. This is
	 * used to enforce the order in which `ReactUpdates` updates dirty components.
	 *
	 * @private
	 */
	var nextMountID = 1;

	/**
	 * @lends {ReactCompositeComponent.prototype}
	 */
	var ReactCompositeComponentMixin = {

	  /**
	   * Base constructor for all composite component.
	   *
	   * @param {ReactElement} element
	   * @final
	   * @internal
	   */
	  construct: function (element) {
	    this._currentElement = element;
	    this._rootNodeID = null;
	    this._instance = null;

	    // See ReactUpdateQueue
	    this._pendingElement = null;
	    this._pendingStateQueue = null;
	    this._pendingReplaceState = false;
	    this._pendingForceUpdate = false;

	    this._renderedComponent = null;

	    this._context = null;
	    this._mountOrder = 0;
	    this._topLevelWrapper = null;

	    // See ReactUpdates and ReactUpdateQueue.
	    this._pendingCallbacks = null;
	  },

	  /**
	   * Initializes the component, renders markup, and registers event listeners.
	   *
	   * @param {string} rootID DOM ID of the root node.
	   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
	   * @return {?string} Rendered markup to be inserted into the DOM.
	   * @final
	   * @internal
	   */
	  mountComponent: function (rootID, transaction, context) {
	    this._context = context;
	    this._mountOrder = nextMountID++;
	    this._rootNodeID = rootID;

	    var publicProps = this._processProps(this._currentElement.props);
	    var publicContext = this._processContext(context);

	    var Component = this._currentElement.type;

	    // Initialize the public class
	    var inst;
	    var renderedElement;

	    // This is a way to detect if Component is a stateless arrow function
	    // component, which is not newable. It might not be 100% reliable but is
	    // something we can do until we start detecting that Component extends
	    // React.Component. We already assume that typeof Component === 'function'.
	    var canInstantiate = ('prototype' in Component);

	    if (canInstantiate) {
	      if (process.env.NODE_ENV !== 'production') {
	        ReactCurrentOwner.current = this;
	        try {
	          inst = new Component(publicProps, publicContext, ReactUpdateQueue);
	        } finally {
	          ReactCurrentOwner.current = null;
	        }
	      } else {
	        inst = new Component(publicProps, publicContext, ReactUpdateQueue);
	      }
	    }

	    if (!canInstantiate || inst === null || inst === false || ReactElement.isValidElement(inst)) {
	      renderedElement = inst;
	      inst = new StatelessComponent(Component);
	    }

	    if (process.env.NODE_ENV !== 'production') {
	      // This will throw later in _renderValidatedComponent, but add an early
	      // warning now to help debugging
	      if (inst.render == null) {
	        process.env.NODE_ENV !== 'production' ? warning(false, '%s(...): No `render` method found on the returned component ' + 'instance: you may have forgotten to define `render`, returned ' + 'null/false from a stateless component, or tried to render an ' + 'element whose type is a function that isn\'t a React component.', Component.displayName || Component.name || 'Component') : undefined;
	      } else {
	        // We support ES6 inheriting from React.Component, the module pattern,
	        // and stateless components, but not ES6 classes that don't extend
	        process.env.NODE_ENV !== 'production' ? warning(Component.prototype && Component.prototype.isReactComponent || !canInstantiate || !(inst instanceof Component), '%s(...): React component classes must extend React.Component.', Component.displayName || Component.name || 'Component') : undefined;
	      }
	    }

	    // These should be set up in the constructor, but as a convenience for
	    // simpler class abstractions, we set them up after the fact.
	    inst.props = publicProps;
	    inst.context = publicContext;
	    inst.refs = emptyObject;
	    inst.updater = ReactUpdateQueue;

	    this._instance = inst;

	    // Store a reference from the instance back to the internal representation
	    ReactInstanceMap.set(inst, this);

	    if (process.env.NODE_ENV !== 'production') {
	      // Since plain JS classes are defined without any special initialization
	      // logic, we can not catch common errors early. Therefore, we have to
	      // catch them here, at initialization time, instead.
	      process.env.NODE_ENV !== 'production' ? warning(!inst.getInitialState || inst.getInitialState.isReactClassApproved, 'getInitialState was defined on %s, a plain JavaScript class. ' + 'This is only supported for classes created using React.createClass. ' + 'Did you mean to define a state property instead?', this.getName() || 'a component') : undefined;
	      process.env.NODE_ENV !== 'production' ? warning(!inst.getDefaultProps || inst.getDefaultProps.isReactClassApproved, 'getDefaultProps was defined on %s, a plain JavaScript class. ' + 'This is only supported for classes created using React.createClass. ' + 'Use a static property to define defaultProps instead.', this.getName() || 'a component') : undefined;
	      process.env.NODE_ENV !== 'production' ? warning(!inst.propTypes, 'propTypes was defined as an instance property on %s. Use a static ' + 'property to define propTypes instead.', this.getName() || 'a component') : undefined;
	      process.env.NODE_ENV !== 'production' ? warning(!inst.contextTypes, 'contextTypes was defined as an instance property on %s. Use a ' + 'static property to define contextTypes instead.', this.getName() || 'a component') : undefined;
	      process.env.NODE_ENV !== 'production' ? warning(typeof inst.componentShouldUpdate !== 'function', '%s has a method called ' + 'componentShouldUpdate(). Did you mean shouldComponentUpdate()? ' + 'The name is phrased as a question because the function is ' + 'expected to return a value.', this.getName() || 'A component') : undefined;
	      process.env.NODE_ENV !== 'production' ? warning(typeof inst.componentDidUnmount !== 'function', '%s has a method called ' + 'componentDidUnmount(). But there is no such lifecycle method. ' + 'Did you mean componentWillUnmount()?', this.getName() || 'A component') : undefined;
	      process.env.NODE_ENV !== 'production' ? warning(typeof inst.componentWillRecieveProps !== 'function', '%s has a method called ' + 'componentWillRecieveProps(). Did you mean componentWillReceiveProps()?', this.getName() || 'A component') : undefined;
	    }

	    var initialState = inst.state;
	    if (initialState === undefined) {
	      inst.state = initialState = null;
	    }
	    !(typeof initialState === 'object' && !Array.isArray(initialState)) ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s.state: must be set to an object or null', this.getName() || 'ReactCompositeComponent') : invariant(false) : undefined;

	    this._pendingStateQueue = null;
	    this._pendingReplaceState = false;
	    this._pendingForceUpdate = false;

	    if (inst.componentWillMount) {
	      inst.componentWillMount();
	      // When mounting, calls to `setState` by `componentWillMount` will set
	      // `this._pendingStateQueue` without triggering a re-render.
	      if (this._pendingStateQueue) {
	        inst.state = this._processPendingState(inst.props, inst.context);
	      }
	    }

	    // If not a stateless component, we now render
	    if (renderedElement === undefined) {
	      renderedElement = this._renderValidatedComponent();
	    }

	    this._renderedComponent = this._instantiateReactComponent(renderedElement);

	    var markup = ReactReconciler.mountComponent(this._renderedComponent, rootID, transaction, this._processChildContext(context));
	    if (inst.componentDidMount) {
	      transaction.getReactMountReady().enqueue(inst.componentDidMount, inst);
	    }

	    return markup;
	  },

	  /**
	   * Releases any resources allocated by `mountComponent`.
	   *
	   * @final
	   * @internal
	   */
	  unmountComponent: function () {
	    var inst = this._instance;

	    if (inst.componentWillUnmount) {
	      inst.componentWillUnmount();
	    }

	    ReactReconciler.unmountComponent(this._renderedComponent);
	    this._renderedComponent = null;
	    this._instance = null;

	    // Reset pending fields
	    // Even if this component is scheduled for another update in ReactUpdates,
	    // it would still be ignored because these fields are reset.
	    this._pendingStateQueue = null;
	    this._pendingReplaceState = false;
	    this._pendingForceUpdate = false;
	    this._pendingCallbacks = null;
	    this._pendingElement = null;

	    // These fields do not really need to be reset since this object is no
	    // longer accessible.
	    this._context = null;
	    this._rootNodeID = null;
	    this._topLevelWrapper = null;

	    // Delete the reference from the instance to this internal representation
	    // which allow the internals to be properly cleaned up even if the user
	    // leaks a reference to the public instance.
	    ReactInstanceMap.remove(inst);

	    // Some existing components rely on inst.props even after they've been
	    // destroyed (in event handlers).
	    // TODO: inst.props = null;
	    // TODO: inst.state = null;
	    // TODO: inst.context = null;
	  },

	  /**
	   * Filters the context object to only contain keys specified in
	   * `contextTypes`
	   *
	   * @param {object} context
	   * @return {?object}
	   * @private
	   */
	  _maskContext: function (context) {
	    var maskedContext = null;
	    var Component = this._currentElement.type;
	    var contextTypes = Component.contextTypes;
	    if (!contextTypes) {
	      return emptyObject;
	    }
	    maskedContext = {};
	    for (var contextName in contextTypes) {
	      maskedContext[contextName] = context[contextName];
	    }
	    return maskedContext;
	  },

	  /**
	   * Filters the context object to only contain keys specified in
	   * `contextTypes`, and asserts that they are valid.
	   *
	   * @param {object} context
	   * @return {?object}
	   * @private
	   */
	  _processContext: function (context) {
	    var maskedContext = this._maskContext(context);
	    if (process.env.NODE_ENV !== 'production') {
	      var Component = this._currentElement.type;
	      if (Component.contextTypes) {
	        this._checkPropTypes(Component.contextTypes, maskedContext, ReactPropTypeLocations.context);
	      }
	    }
	    return maskedContext;
	  },

	  /**
	   * @param {object} currentContext
	   * @return {object}
	   * @private
	   */
	  _processChildContext: function (currentContext) {
	    var Component = this._currentElement.type;
	    var inst = this._instance;
	    var childContext = inst.getChildContext && inst.getChildContext();
	    if (childContext) {
	      !(typeof Component.childContextTypes === 'object') ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s.getChildContext(): childContextTypes must be defined in order to ' + 'use getChildContext().', this.getName() || 'ReactCompositeComponent') : invariant(false) : undefined;
	      if (process.env.NODE_ENV !== 'production') {
	        this._checkPropTypes(Component.childContextTypes, childContext, ReactPropTypeLocations.childContext);
	      }
	      for (var name in childContext) {
	        !(name in Component.childContextTypes) ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s.getChildContext(): key "%s" is not defined in childContextTypes.', this.getName() || 'ReactCompositeComponent', name) : invariant(false) : undefined;
	      }
	      return assign({}, currentContext, childContext);
	    }
	    return currentContext;
	  },

	  /**
	   * Processes props by setting default values for unspecified props and
	   * asserting that the props are valid. Does not mutate its argument; returns
	   * a new props object with defaults merged in.
	   *
	   * @param {object} newProps
	   * @return {object}
	   * @private
	   */
	  _processProps: function (newProps) {
	    if (process.env.NODE_ENV !== 'production') {
	      var Component = this._currentElement.type;
	      if (Component.propTypes) {
	        this._checkPropTypes(Component.propTypes, newProps, ReactPropTypeLocations.prop);
	      }
	    }
	    return newProps;
	  },

	  /**
	   * Assert that the props are valid
	   *
	   * @param {object} propTypes Map of prop name to a ReactPropType
	   * @param {object} props
	   * @param {string} location e.g. "prop", "context", "child context"
	   * @private
	   */
	  _checkPropTypes: function (propTypes, props, location) {
	    // TODO: Stop validating prop types here and only use the element
	    // validation.
	    var componentName = this.getName();
	    for (var propName in propTypes) {
	      if (propTypes.hasOwnProperty(propName)) {
	        var error;
	        try {
	          // This is intentionally an invariant that gets caught. It's the same
	          // behavior as without this statement except with a better message.
	          !(typeof propTypes[propName] === 'function') ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s: %s type `%s` is invalid; it must be a function, usually ' + 'from React.PropTypes.', componentName || 'React class', ReactPropTypeLocationNames[location], propName) : invariant(false) : undefined;
	          error = propTypes[propName](props, propName, componentName, location);
	        } catch (ex) {
	          error = ex;
	        }
	        if (error instanceof Error) {
	          // We may want to extend this logic for similar errors in
	          // top-level render calls, so I'm abstracting it away into
	          // a function to minimize refactoring in the future
	          var addendum = getDeclarationErrorAddendum(this);

	          if (location === ReactPropTypeLocations.prop) {
	            // Preface gives us something to blacklist in warning module
	            process.env.NODE_ENV !== 'production' ? warning(false, 'Failed Composite propType: %s%s', error.message, addendum) : undefined;
	          } else {
	            process.env.NODE_ENV !== 'production' ? warning(false, 'Failed Context Types: %s%s', error.message, addendum) : undefined;
	          }
	        }
	      }
	    }
	  },

	  receiveComponent: function (nextElement, transaction, nextContext) {
	    var prevElement = this._currentElement;
	    var prevContext = this._context;

	    this._pendingElement = null;

	    this.updateComponent(transaction, prevElement, nextElement, prevContext, nextContext);
	  },

	  /**
	   * If any of `_pendingElement`, `_pendingStateQueue`, or `_pendingForceUpdate`
	   * is set, update the component.
	   *
	   * @param {ReactReconcileTransaction} transaction
	   * @internal
	   */
	  performUpdateIfNecessary: function (transaction) {
	    if (this._pendingElement != null) {
	      ReactReconciler.receiveComponent(this, this._pendingElement || this._currentElement, transaction, this._context);
	    }

	    if (this._pendingStateQueue !== null || this._pendingForceUpdate) {
	      this.updateComponent(transaction, this._currentElement, this._currentElement, this._context, this._context);
	    }
	  },

	  /**
	   * Perform an update to a mounted component. The componentWillReceiveProps and
	   * shouldComponentUpdate methods are called, then (assuming the update isn't
	   * skipped) the remaining update lifecycle methods are called and the DOM
	   * representation is updated.
	   *
	   * By default, this implements React's rendering and reconciliation algorithm.
	   * Sophisticated clients may wish to override this.
	   *
	   * @param {ReactReconcileTransaction} transaction
	   * @param {ReactElement} prevParentElement
	   * @param {ReactElement} nextParentElement
	   * @internal
	   * @overridable
	   */
	  updateComponent: function (transaction, prevParentElement, nextParentElement, prevUnmaskedContext, nextUnmaskedContext) {
	    var inst = this._instance;

	    var nextContext = this._context === nextUnmaskedContext ? inst.context : this._processContext(nextUnmaskedContext);
	    var nextProps;

	    // Distinguish between a props update versus a simple state update
	    if (prevParentElement === nextParentElement) {
	      // Skip checking prop types again -- we don't read inst.props to avoid
	      // warning for DOM component props in this upgrade
	      nextProps = nextParentElement.props;
	    } else {
	      nextProps = this._processProps(nextParentElement.props);
	      // An update here will schedule an update but immediately set
	      // _pendingStateQueue which will ensure that any state updates gets
	      // immediately reconciled instead of waiting for the next batch.

	      if (inst.componentWillReceiveProps) {
	        inst.componentWillReceiveProps(nextProps, nextContext);
	      }
	    }

	    var nextState = this._processPendingState(nextProps, nextContext);

	    var shouldUpdate = this._pendingForceUpdate || !inst.shouldComponentUpdate || inst.shouldComponentUpdate(nextProps, nextState, nextContext);

	    if (process.env.NODE_ENV !== 'production') {
	      process.env.NODE_ENV !== 'production' ? warning(typeof shouldUpdate !== 'undefined', '%s.shouldComponentUpdate(): Returned undefined instead of a ' + 'boolean value. Make sure to return true or false.', this.getName() || 'ReactCompositeComponent') : undefined;
	    }

	    if (shouldUpdate) {
	      this._pendingForceUpdate = false;
	      // Will set `this.props`, `this.state` and `this.context`.
	      this._performComponentUpdate(nextParentElement, nextProps, nextState, nextContext, transaction, nextUnmaskedContext);
	    } else {
	      // If it's determined that a component should not update, we still want
	      // to set props and state but we shortcut the rest of the update.
	      this._currentElement = nextParentElement;
	      this._context = nextUnmaskedContext;
	      inst.props = nextProps;
	      inst.state = nextState;
	      inst.context = nextContext;
	    }
	  },

	  _processPendingState: function (props, context) {
	    var inst = this._instance;
	    var queue = this._pendingStateQueue;
	    var replace = this._pendingReplaceState;
	    this._pendingReplaceState = false;
	    this._pendingStateQueue = null;

	    if (!queue) {
	      return inst.state;
	    }

	    if (replace && queue.length === 1) {
	      return queue[0];
	    }

	    var nextState = assign({}, replace ? queue[0] : inst.state);
	    for (var i = replace ? 1 : 0; i < queue.length; i++) {
	      var partial = queue[i];
	      assign(nextState, typeof partial === 'function' ? partial.call(inst, nextState, props, context) : partial);
	    }

	    return nextState;
	  },

	  /**
	   * Merges new props and state, notifies delegate methods of update and
	   * performs update.
	   *
	   * @param {ReactElement} nextElement Next element
	   * @param {object} nextProps Next public object to set as properties.
	   * @param {?object} nextState Next object to set as state.
	   * @param {?object} nextContext Next public object to set as context.
	   * @param {ReactReconcileTransaction} transaction
	   * @param {?object} unmaskedContext
	   * @private
	   */
	  _performComponentUpdate: function (nextElement, nextProps, nextState, nextContext, transaction, unmaskedContext) {
	    var inst = this._instance;

	    var hasComponentDidUpdate = Boolean(inst.componentDidUpdate);
	    var prevProps;
	    var prevState;
	    var prevContext;
	    if (hasComponentDidUpdate) {
	      prevProps = inst.props;
	      prevState = inst.state;
	      prevContext = inst.context;
	    }

	    if (inst.componentWillUpdate) {
	      inst.componentWillUpdate(nextProps, nextState, nextContext);
	    }

	    this._currentElement = nextElement;
	    this._context = unmaskedContext;
	    inst.props = nextProps;
	    inst.state = nextState;
	    inst.context = nextContext;

	    this._updateRenderedComponent(transaction, unmaskedContext);

	    if (hasComponentDidUpdate) {
	      transaction.getReactMountReady().enqueue(inst.componentDidUpdate.bind(inst, prevProps, prevState, prevContext), inst);
	    }
	  },

	  /**
	   * Call the component's `render` method and update the DOM accordingly.
	   *
	   * @param {ReactReconcileTransaction} transaction
	   * @internal
	   */
	  _updateRenderedComponent: function (transaction, context) {
	    var prevComponentInstance = this._renderedComponent;
	    var prevRenderedElement = prevComponentInstance._currentElement;
	    var nextRenderedElement = this._renderValidatedComponent();
	    if (shouldUpdateReactComponent(prevRenderedElement, nextRenderedElement)) {
	      ReactReconciler.receiveComponent(prevComponentInstance, nextRenderedElement, transaction, this._processChildContext(context));
	    } else {
	      // These two IDs are actually the same! But nothing should rely on that.
	      var thisID = this._rootNodeID;
	      var prevComponentID = prevComponentInstance._rootNodeID;
	      ReactReconciler.unmountComponent(prevComponentInstance);

	      this._renderedComponent = this._instantiateReactComponent(nextRenderedElement);
	      var nextMarkup = ReactReconciler.mountComponent(this._renderedComponent, thisID, transaction, this._processChildContext(context));
	      this._replaceNodeWithMarkupByID(prevComponentID, nextMarkup);
	    }
	  },

	  /**
	   * @protected
	   */
	  _replaceNodeWithMarkupByID: function (prevComponentID, nextMarkup) {
	    ReactComponentEnvironment.replaceNodeWithMarkupByID(prevComponentID, nextMarkup);
	  },

	  /**
	   * @protected
	   */
	  _renderValidatedComponentWithoutOwnerOrContext: function () {
	    var inst = this._instance;
	    var renderedComponent = inst.render();
	    if (process.env.NODE_ENV !== 'production') {
	      // We allow auto-mocks to proceed as if they're returning null.
	      if (typeof renderedComponent === 'undefined' && inst.render._isMockFunction) {
	        // This is probably bad practice. Consider warning here and
	        // deprecating this convenience.
	        renderedComponent = null;
	      }
	    }

	    return renderedComponent;
	  },

	  /**
	   * @private
	   */
	  _renderValidatedComponent: function () {
	    var renderedComponent;
	    ReactCurrentOwner.current = this;
	    try {
	      renderedComponent = this._renderValidatedComponentWithoutOwnerOrContext();
	    } finally {
	      ReactCurrentOwner.current = null;
	    }
	    !(
	    // TODO: An `isValidNode` function would probably be more appropriate
	    renderedComponent === null || renderedComponent === false || ReactElement.isValidElement(renderedComponent)) ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s.render(): A valid ReactComponent must be returned. You may have ' + 'returned undefined, an array or some other invalid object.', this.getName() || 'ReactCompositeComponent') : invariant(false) : undefined;
	    return renderedComponent;
	  },

	  /**
	   * Lazily allocates the refs object and stores `component` as `ref`.
	   *
	   * @param {string} ref Reference name.
	   * @param {component} component Component to store as `ref`.
	   * @final
	   * @private
	   */
	  attachRef: function (ref, component) {
	    var inst = this.getPublicInstance();
	    !(inst != null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Stateless function components cannot have refs.') : invariant(false) : undefined;
	    var publicComponentInstance = component.getPublicInstance();
	    if (process.env.NODE_ENV !== 'production') {
	      var componentName = component && component.getName ? component.getName() : 'a component';
	      process.env.NODE_ENV !== 'production' ? warning(publicComponentInstance != null, 'Stateless function components cannot be given refs ' + '(See ref "%s" in %s created by %s). ' + 'Attempts to access this ref will fail.', ref, componentName, this.getName()) : undefined;
	    }
	    var refs = inst.refs === emptyObject ? inst.refs = {} : inst.refs;
	    refs[ref] = publicComponentInstance;
	  },

	  /**
	   * Detaches a reference name.
	   *
	   * @param {string} ref Name to dereference.
	   * @final
	   * @private
	   */
	  detachRef: function (ref) {
	    var refs = this.getPublicInstance().refs;
	    delete refs[ref];
	  },

	  /**
	   * Get a text description of the component that can be used to identify it
	   * in error messages.
	   * @return {string} The name or null.
	   * @internal
	   */
	  getName: function () {
	    var type = this._currentElement.type;
	    var constructor = this._instance && this._instance.constructor;
	    return type.displayName || constructor && constructor.displayName || type.name || constructor && constructor.name || null;
	  },

	  /**
	   * Get the publicly accessible representation of this component - i.e. what
	   * is exposed by refs and returned by render. Can be null for stateless
	   * components.
	   *
	   * @return {ReactComponent} the public component instance.
	   * @internal
	   */
	  getPublicInstance: function () {
	    var inst = this._instance;
	    if (inst instanceof StatelessComponent) {
	      return null;
	    }
	    return inst;
	  },

	  // Stub
	  _instantiateReactComponent: null

	};

	ReactPerf.measureMethods(ReactCompositeComponentMixin, 'ReactCompositeComponent', {
	  mountComponent: 'mountComponent',
	  updateComponent: 'updateComponent',
	  _renderValidatedComponent: '_renderValidatedComponent'
	});

	var ReactCompositeComponent = {

	  Mixin: ReactCompositeComponentMixin

	};

	module.exports = ReactCompositeComponent;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(8)))

/***/ },
/* 67 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2014-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactComponentEnvironment
	 */

	'use strict';

	var invariant = __webpack_require__(17);

	var injected = false;

	var ReactComponentEnvironment = {

	  /**
	   * Optionally injectable environment dependent cleanup hook. (server vs.
	   * browser etc). Example: A browser system caches DOM nodes based on component
	   * ID and must remove that cache entry when this instance is unmounted.
	   */
	  unmountIDFromEnvironment: null,

	  /**
	   * Optionally injectable hook for swapping out mount images in the middle of
	   * the tree.
	   */
	  replaceNodeWithMarkupByID: null,

	  /**
	   * Optionally injectable hook for processing a queue of child updates. Will
	   * later move into MultiChildComponents.
	   */
	  processChildrenUpdates: null,

	  injection: {
	    injectEnvironment: function (environment) {
	      !!injected ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactCompositeComponent: injectEnvironment() can only be called once.') : invariant(false) : undefined;
	      ReactComponentEnvironment.unmountIDFromEnvironment = environment.unmountIDFromEnvironment;
	      ReactComponentEnvironment.replaceNodeWithMarkupByID = environment.replaceNodeWithMarkupByID;
	      ReactComponentEnvironment.processChildrenUpdates = environment.processChildrenUpdates;
	      injected = true;
	    }
	  }

	};

	module.exports = ReactComponentEnvironment;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(8)))

/***/ },
/* 68 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactPropTypeLocations
	 */

	'use strict';

	var keyMirror = __webpack_require__(21);

	var ReactPropTypeLocations = keyMirror({
	  prop: null,
	  context: null,
	  childContext: null
	});

	module.exports = ReactPropTypeLocations;

/***/ },
/* 69 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactPropTypeLocationNames
	 */

	'use strict';

	var ReactPropTypeLocationNames = {};

	if (process.env.NODE_ENV !== 'production') {
	  ReactPropTypeLocationNames = {
	    prop: 'prop',
	    context: 'context',
	    childContext: 'child context'
	  };
	}

	module.exports = ReactPropTypeLocationNames;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(8)))

/***/ },
/* 70 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule shouldUpdateReactComponent
	 * @typechecks static-only
	 */

	'use strict';

	/**
	 * Given a `prevElement` and `nextElement`, determines if the existing
	 * instance should be updated as opposed to being destroyed or replaced by a new
	 * instance. Both arguments are elements. This ensures that this logic can
	 * operate on stateless trees without any backing instance.
	 *
	 * @param {?object} prevElement
	 * @param {?object} nextElement
	 * @return {boolean} True if the existing instance should be updated.
	 * @protected
	 */
	function shouldUpdateReactComponent(prevElement, nextElement) {
	  var prevEmpty = prevElement === null || prevElement === false;
	  var nextEmpty = nextElement === null || nextElement === false;
	  if (prevEmpty || nextEmpty) {
	    return prevEmpty === nextEmpty;
	  }

	  var prevType = typeof prevElement;
	  var nextType = typeof nextElement;
	  if (prevType === 'string' || prevType === 'number') {
	    return nextType === 'string' || nextType === 'number';
	  } else {
	    return nextType === 'object' && prevElement.type === nextElement.type && prevElement.key === nextElement.key;
	  }
	  return false;
	}

	module.exports = shouldUpdateReactComponent;

/***/ },
/* 71 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2014-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactEmptyComponent
	 */

	'use strict';

	var ReactElement = __webpack_require__(46);
	var ReactEmptyComponentRegistry = __webpack_require__(47);
	var ReactReconciler = __webpack_require__(53);

	var assign = __webpack_require__(43);

	var placeholderElement;

	var ReactEmptyComponentInjection = {
	  injectEmptyComponent: function (component) {
	    placeholderElement = ReactElement.createElement(component);
	  }
	};

	var ReactEmptyComponent = function (instantiate) {
	  this._currentElement = null;
	  this._rootNodeID = null;
	  this._renderedComponent = instantiate(placeholderElement);
	};
	assign(ReactEmptyComponent.prototype, {
	  construct: function (element) {},
	  mountComponent: function (rootID, transaction, context) {
	    ReactEmptyComponentRegistry.registerNullComponentID(rootID);
	    this._rootNodeID = rootID;
	    return ReactReconciler.mountComponent(this._renderedComponent, rootID, transaction, context);
	  },
	  receiveComponent: function () {},
	  unmountComponent: function (rootID, transaction, context) {
	    ReactReconciler.unmountComponent(this._renderedComponent);
	    ReactEmptyComponentRegistry.deregisterNullComponentID(this._rootNodeID);
	    this._rootNodeID = null;
	    this._renderedComponent = null;
	  }
	});

	ReactEmptyComponent.injection = ReactEmptyComponentInjection;

	module.exports = ReactEmptyComponent;

/***/ },
/* 72 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2014-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactNativeComponent
	 */

	'use strict';

	var assign = __webpack_require__(43);
	var invariant = __webpack_require__(17);

	var autoGenerateWrapperClass = null;
	var genericComponentClass = null;
	// This registry keeps track of wrapper classes around native tags.
	var tagToComponentClass = {};
	var textComponentClass = null;

	var ReactNativeComponentInjection = {
	  // This accepts a class that receives the tag string. This is a catch all
	  // that can render any kind of tag.
	  injectGenericComponentClass: function (componentClass) {
	    genericComponentClass = componentClass;
	  },
	  // This accepts a text component class that takes the text string to be
	  // rendered as props.
	  injectTextComponentClass: function (componentClass) {
	    textComponentClass = componentClass;
	  },
	  // This accepts a keyed object with classes as values. Each key represents a
	  // tag. That particular tag will use this class instead of the generic one.
	  injectComponentClasses: function (componentClasses) {
	    assign(tagToComponentClass, componentClasses);
	  }
	};

	/**
	 * Get a composite component wrapper class for a specific tag.
	 *
	 * @param {ReactElement} element The tag for which to get the class.
	 * @return {function} The React class constructor function.
	 */
	function getComponentClassForElement(element) {
	  if (typeof element.type === 'function') {
	    return element.type;
	  }
	  var tag = element.type;
	  var componentClass = tagToComponentClass[tag];
	  if (componentClass == null) {
	    tagToComponentClass[tag] = componentClass = autoGenerateWrapperClass(tag);
	  }
	  return componentClass;
	}

	/**
	 * Get a native internal component class for a specific tag.
	 *
	 * @param {ReactElement} element The element to create.
	 * @return {function} The internal class constructor function.
	 */
	function createInternalComponent(element) {
	  !genericComponentClass ? process.env.NODE_ENV !== 'production' ? invariant(false, 'There is no registered component for the tag %s', element.type) : invariant(false) : undefined;
	  return new genericComponentClass(element.type, element.props);
	}

	/**
	 * @param {ReactText} text
	 * @return {ReactComponent}
	 */
	function createInstanceForText(text) {
	  return new textComponentClass(text);
	}

	/**
	 * @param {ReactComponent} component
	 * @return {boolean}
	 */
	function isTextComponent(component) {
	  return component instanceof textComponentClass;
	}

	var ReactNativeComponent = {
	  getComponentClassForElement: getComponentClassForElement,
	  createInternalComponent: createInternalComponent,
	  createInstanceForText: createInstanceForText,
	  isTextComponent: isTextComponent,
	  injection: ReactNativeComponentInjection
	};

	module.exports = ReactNativeComponent;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(8)))

/***/ },
/* 73 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule validateDOMNesting
	 */

	'use strict';

	var assign = __webpack_require__(43);
	var emptyFunction = __webpack_require__(19);
	var warning = __webpack_require__(29);

	var validateDOMNesting = emptyFunction;

	if (process.env.NODE_ENV !== 'production') {
	  // This validation code was written based on the HTML5 parsing spec:
	  // https://html.spec.whatwg.org/multipage/syntax.html#has-an-element-in-scope
	  //
	  // Note: this does not catch all invalid nesting, nor does it try to (as it's
	  // not clear what practical benefit doing so provides); instead, we warn only
	  // for cases where the parser will give a parse tree differing from what React
	  // intended. For example, <b><div></div></b> is invalid but we don't warn
	  // because it still parses correctly; we do warn for other cases like nested
	  // <p> tags where the beginning of the second element implicitly closes the
	  // first, causing a confusing mess.

	  // https://html.spec.whatwg.org/multipage/syntax.html#special
	  var specialTags = ['address', 'applet', 'area', 'article', 'aside', 'base', 'basefont', 'bgsound', 'blockquote', 'body', 'br', 'button', 'caption', 'center', 'col', 'colgroup', 'dd', 'details', 'dir', 'div', 'dl', 'dt', 'embed', 'fieldset', 'figcaption', 'figure', 'footer', 'form', 'frame', 'frameset', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'head', 'header', 'hgroup', 'hr', 'html', 'iframe', 'img', 'input', 'isindex', 'li', 'link', 'listing', 'main', 'marquee', 'menu', 'menuitem', 'meta', 'nav', 'noembed', 'noframes', 'noscript', 'object', 'ol', 'p', 'param', 'plaintext', 'pre', 'script', 'section', 'select', 'source', 'style', 'summary', 'table', 'tbody', 'td', 'template', 'textarea', 'tfoot', 'th', 'thead', 'title', 'tr', 'track', 'ul', 'wbr', 'xmp'];

	  // https://html.spec.whatwg.org/multipage/syntax.html#has-an-element-in-scope
	  var inScopeTags = ['applet', 'caption', 'html', 'table', 'td', 'th', 'marquee', 'object', 'template',

	  // https://html.spec.whatwg.org/multipage/syntax.html#html-integration-point
	  // TODO: Distinguish by namespace here -- for <title>, including it here
	  // errs on the side of fewer warnings
	  'foreignObject', 'desc', 'title'];

	  // https://html.spec.whatwg.org/multipage/syntax.html#has-an-element-in-button-scope
	  var buttonScopeTags = inScopeTags.concat(['button']);

	  // https://html.spec.whatwg.org/multipage/syntax.html#generate-implied-end-tags
	  var impliedEndTags = ['dd', 'dt', 'li', 'option', 'optgroup', 'p', 'rp', 'rt'];

	  var emptyAncestorInfo = {
	    parentTag: null,

	    formTag: null,
	    aTagInScope: null,
	    buttonTagInScope: null,
	    nobrTagInScope: null,
	    pTagInButtonScope: null,

	    listItemTagAutoclosing: null,
	    dlItemTagAutoclosing: null
	  };

	  var updatedAncestorInfo = function (oldInfo, tag, instance) {
	    var ancestorInfo = assign({}, oldInfo || emptyAncestorInfo);
	    var info = { tag: tag, instance: instance };

	    if (inScopeTags.indexOf(tag) !== -1) {
	      ancestorInfo.aTagInScope = null;
	      ancestorInfo.buttonTagInScope = null;
	      ancestorInfo.nobrTagInScope = null;
	    }
	    if (buttonScopeTags.indexOf(tag) !== -1) {
	      ancestorInfo.pTagInButtonScope = null;
	    }

	    // See rules for 'li', 'dd', 'dt' start tags in
	    // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inbody
	    if (specialTags.indexOf(tag) !== -1 && tag !== 'address' && tag !== 'div' && tag !== 'p') {
	      ancestorInfo.listItemTagAutoclosing = null;
	      ancestorInfo.dlItemTagAutoclosing = null;
	    }

	    ancestorInfo.parentTag = info;

	    if (tag === 'form') {
	      ancestorInfo.formTag = info;
	    }
	    if (tag === 'a') {
	      ancestorInfo.aTagInScope = info;
	    }
	    if (tag === 'button') {
	      ancestorInfo.buttonTagInScope = info;
	    }
	    if (tag === 'nobr') {
	      ancestorInfo.nobrTagInScope = info;
	    }
	    if (tag === 'p') {
	      ancestorInfo.pTagInButtonScope = info;
	    }
	    if (tag === 'li') {
	      ancestorInfo.listItemTagAutoclosing = info;
	    }
	    if (tag === 'dd' || tag === 'dt') {
	      ancestorInfo.dlItemTagAutoclosing = info;
	    }

	    return ancestorInfo;
	  };

	  /**
	   * Returns whether
	   */
	  var isTagValidWithParent = function (tag, parentTag) {
	    // First, let's check if we're in an unusual parsing mode...
	    switch (parentTag) {
	      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inselect
	      case 'select':
	        return tag === 'option' || tag === 'optgroup' || tag === '#text';
	      case 'optgroup':
	        return tag === 'option' || tag === '#text';
	      // Strictly speaking, seeing an <option> doesn't mean we're in a <select>
	      // but
	      case 'option':
	        return tag === '#text';

	      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intd
	      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-incaption
	      // No special behavior since these rules fall back to "in body" mode for
	      // all except special table nodes which cause bad parsing behavior anyway.

	      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intr
	      case 'tr':
	        return tag === 'th' || tag === 'td' || tag === 'style' || tag === 'script' || tag === 'template';

	      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intbody
	      case 'tbody':
	      case 'thead':
	      case 'tfoot':
	        return tag === 'tr' || tag === 'style' || tag === 'script' || tag === 'template';

	      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-incolgroup
	      case 'colgroup':
	        return tag === 'col' || tag === 'template';

	      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intable
	      case 'table':
	        return tag === 'caption' || tag === 'colgroup' || tag === 'tbody' || tag === 'tfoot' || tag === 'thead' || tag === 'style' || tag === 'script' || tag === 'template';

	      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inhead
	      case 'head':
	        return tag === 'base' || tag === 'basefont' || tag === 'bgsound' || tag === 'link' || tag === 'meta' || tag === 'title' || tag === 'noscript' || tag === 'noframes' || tag === 'style' || tag === 'script' || tag === 'template';

	      // https://html.spec.whatwg.org/multipage/semantics.html#the-html-element
	      case 'html':
	        return tag === 'head' || tag === 'body';
	    }

	    // Probably in the "in body" parsing mode, so we outlaw only tag combos
	    // where the parsing rules cause implicit opens or closes to be added.
	    // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inbody
	    switch (tag) {
	      case 'h1':
	      case 'h2':
	      case 'h3':
	      case 'h4':
	      case 'h5':
	      case 'h6':
	        return parentTag !== 'h1' && parentTag !== 'h2' && parentTag !== 'h3' && parentTag !== 'h4' && parentTag !== 'h5' && parentTag !== 'h6';

	      case 'rp':
	      case 'rt':
	        return impliedEndTags.indexOf(parentTag) === -1;

	      case 'caption':
	      case 'col':
	      case 'colgroup':
	      case 'frame':
	      case 'head':
	      case 'tbody':
	      case 'td':
	      case 'tfoot':
	      case 'th':
	      case 'thead':
	      case 'tr':
	        // These tags are only valid with a few parents that have special child
	        // parsing rules -- if we're down here, then none of those matched and
	        // so we allow it only if we don't know what the parent is, as all other
	        // cases are invalid.
	        return parentTag == null;
	    }

	    return true;
	  };

	  /**
	   * Returns whether
	   */
	  var findInvalidAncestorForTag = function (tag, ancestorInfo) {
	    switch (tag) {
	      case 'address':
	      case 'article':
	      case 'aside':
	      case 'blockquote':
	      case 'center':
	      case 'details':
	      case 'dialog':
	      case 'dir':
	      case 'div':
	      case 'dl':
	      case 'fieldset':
	      case 'figcaption':
	      case 'figure':
	      case 'footer':
	      case 'header':
	      case 'hgroup':
	      case 'main':
	      case 'menu':
	      case 'nav':
	      case 'ol':
	      case 'p':
	      case 'section':
	      case 'summary':
	      case 'ul':

	      case 'pre':
	      case 'listing':

	      case 'table':

	      case 'hr':

	      case 'xmp':

	      case 'h1':
	      case 'h2':
	      case 'h3':
	      case 'h4':
	      case 'h5':
	      case 'h6':
	        return ancestorInfo.pTagInButtonScope;

	      case 'form':
	        return ancestorInfo.formTag || ancestorInfo.pTagInButtonScope;

	      case 'li':
	        return ancestorInfo.listItemTagAutoclosing;

	      case 'dd':
	      case 'dt':
	        return ancestorInfo.dlItemTagAutoclosing;

	      case 'button':
	        return ancestorInfo.buttonTagInScope;

	      case 'a':
	        // Spec says something about storing a list of markers, but it sounds
	        // equivalent to this check.
	        return ancestorInfo.aTagInScope;

	      case 'nobr':
	        return ancestorInfo.nobrTagInScope;
	    }

	    return null;
	  };

	  /**
	   * Given a ReactCompositeComponent instance, return a list of its recursive
	   * owners, starting at the root and ending with the instance itself.
	   */
	  var findOwnerStack = function (instance) {
	    if (!instance) {
	      return [];
	    }

	    var stack = [];
	    /*eslint-disable space-after-keywords */
	    do {
	      /*eslint-enable space-after-keywords */
	      stack.push(instance);
	    } while (instance = instance._currentElement._owner);
	    stack.reverse();
	    return stack;
	  };

	  var didWarn = {};

	  validateDOMNesting = function (childTag, childInstance, ancestorInfo) {
	    ancestorInfo = ancestorInfo || emptyAncestorInfo;
	    var parentInfo = ancestorInfo.parentTag;
	    var parentTag = parentInfo && parentInfo.tag;

	    var invalidParent = isTagValidWithParent(childTag, parentTag) ? null : parentInfo;
	    var invalidAncestor = invalidParent ? null : findInvalidAncestorForTag(childTag, ancestorInfo);
	    var problematic = invalidParent || invalidAncestor;

	    if (problematic) {
	      var ancestorTag = problematic.tag;
	      var ancestorInstance = problematic.instance;

	      var childOwner = childInstance && childInstance._currentElement._owner;
	      var ancestorOwner = ancestorInstance && ancestorInstance._currentElement._owner;

	      var childOwners = findOwnerStack(childOwner);
	      var ancestorOwners = findOwnerStack(ancestorOwner);

	      var minStackLen = Math.min(childOwners.length, ancestorOwners.length);
	      var i;

	      var deepestCommon = -1;
	      for (i = 0; i < minStackLen; i++) {
	        if (childOwners[i] === ancestorOwners[i]) {
	          deepestCommon = i;
	        } else {
	          break;
	        }
	      }

	      var UNKNOWN = '(unknown)';
	      var childOwnerNames = childOwners.slice(deepestCommon + 1).map(function (inst) {
	        return inst.getName() || UNKNOWN;
	      });
	      var ancestorOwnerNames = ancestorOwners.slice(deepestCommon + 1).map(function (inst) {
	        return inst.getName() || UNKNOWN;
	      });
	      var ownerInfo = [].concat(
	      // If the parent and child instances have a common owner ancestor, start
	      // with that -- otherwise we just start with the parent's owners.
	      deepestCommon !== -1 ? childOwners[deepestCommon].getName() || UNKNOWN : [], ancestorOwnerNames, ancestorTag,
	      // If we're warning about an invalid (non-parent) ancestry, add '...'
	      invalidAncestor ? ['...'] : [], childOwnerNames, childTag).join(' > ');

	      var warnKey = !!invalidParent + '|' + childTag + '|' + ancestorTag + '|' + ownerInfo;
	      if (didWarn[warnKey]) {
	        return;
	      }
	      didWarn[warnKey] = true;

	      if (invalidParent) {
	        var info = '';
	        if (ancestorTag === 'table' && childTag === 'tr') {
	          info += ' Add a <tbody> to your code to match the DOM tree generated by ' + 'the browser.';
	        }
	        process.env.NODE_ENV !== 'production' ? warning(false, 'validateDOMNesting(...): <%s> cannot appear as a child of <%s>. ' + 'See %s.%s', childTag, ancestorTag, ownerInfo, info) : undefined;
	      } else {
	        process.env.NODE_ENV !== 'production' ? warning(false, 'validateDOMNesting(...): <%s> cannot appear as a descendant of ' + '<%s>. See %s.', childTag, ancestorTag, ownerInfo) : undefined;
	      }
	    }
	  };

	  validateDOMNesting.ancestorInfoContextKey = '__validateDOMNesting_ancestorInfo$' + Math.random().toString(36).slice(2);

	  validateDOMNesting.updatedAncestorInfo = updatedAncestorInfo;

	  // For testing
	  validateDOMNesting.isTagValidInContext = function (tag, ancestorInfo) {
	    ancestorInfo = ancestorInfo || emptyAncestorInfo;
	    var parentInfo = ancestorInfo.parentTag;
	    var parentTag = parentInfo && parentInfo.tag;
	    return isTagValidWithParent(tag, parentTag) && !findInvalidAncestorForTag(tag, ancestorInfo);
	  };
	}

	module.exports = validateDOMNesting;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(8)))

/***/ },
/* 74 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDefaultInjection
	 */

	'use strict';

	var BeforeInputEventPlugin = __webpack_require__(75);
	var ChangeEventPlugin = __webpack_require__(83);
	var ClientReactRootIndex = __webpack_require__(86);
	var DefaultEventPluginOrder = __webpack_require__(87);
	var EnterLeaveEventPlugin = __webpack_require__(88);
	var ExecutionEnvironment = __webpack_require__(13);
	var HTMLDOMPropertyConfig = __webpack_require__(92);
	var ReactBrowserComponentMixin = __webpack_require__(93);
	var ReactComponentBrowserEnvironment = __webpack_require__(30);
	var ReactDefaultBatchingStrategy = __webpack_require__(95);
	var ReactDOMComponent = __webpack_require__(96);
	var ReactDOMTextComponent = __webpack_require__(10);
	var ReactEventListener = __webpack_require__(121);
	var ReactInjection = __webpack_require__(124);
	var ReactInstanceHandles = __webpack_require__(48);
	var ReactMount = __webpack_require__(32);
	var ReactReconcileTransaction = __webpack_require__(128);
	var SelectEventPlugin = __webpack_require__(133);
	var ServerReactRootIndex = __webpack_require__(134);
	var SimpleEventPlugin = __webpack_require__(135);
	var SVGDOMPropertyConfig = __webpack_require__(144);

	var alreadyInjected = false;

	function inject() {
	  if (alreadyInjected) {
	    // TODO: This is currently true because these injections are shared between
	    // the client and the server package. They should be built independently
	    // and not share any injection state. Then this problem will be solved.
	    return;
	  }
	  alreadyInjected = true;

	  ReactInjection.EventEmitter.injectReactEventListener(ReactEventListener);

	  /**
	   * Inject modules for resolving DOM hierarchy and plugin ordering.
	   */
	  ReactInjection.EventPluginHub.injectEventPluginOrder(DefaultEventPluginOrder);
	  ReactInjection.EventPluginHub.injectInstanceHandle(ReactInstanceHandles);
	  ReactInjection.EventPluginHub.injectMount(ReactMount);

	  /**
	   * Some important event plugins included by default (without having to require
	   * them).
	   */
	  ReactInjection.EventPluginHub.injectEventPluginsByName({
	    SimpleEventPlugin: SimpleEventPlugin,
	    EnterLeaveEventPlugin: EnterLeaveEventPlugin,
	    ChangeEventPlugin: ChangeEventPlugin,
	    SelectEventPlugin: SelectEventPlugin,
	    BeforeInputEventPlugin: BeforeInputEventPlugin
	  });

	  ReactInjection.NativeComponent.injectGenericComponentClass(ReactDOMComponent);

	  ReactInjection.NativeComponent.injectTextComponentClass(ReactDOMTextComponent);

	  ReactInjection.Class.injectMixin(ReactBrowserComponentMixin);

	  ReactInjection.DOMProperty.injectDOMPropertyConfig(HTMLDOMPropertyConfig);
	  ReactInjection.DOMProperty.injectDOMPropertyConfig(SVGDOMPropertyConfig);

	  ReactInjection.EmptyComponent.injectEmptyComponent('noscript');

	  ReactInjection.Updates.injectReconcileTransaction(ReactReconcileTransaction);
	  ReactInjection.Updates.injectBatchingStrategy(ReactDefaultBatchingStrategy);

	  ReactInjection.RootIndex.injectCreateReactRootIndex(ExecutionEnvironment.canUseDOM ? ClientReactRootIndex.createReactRootIndex : ServerReactRootIndex.createReactRootIndex);

	  ReactInjection.Component.injectEnvironment(ReactComponentBrowserEnvironment);

	  if (process.env.NODE_ENV !== 'production') {
	    var url = ExecutionEnvironment.canUseDOM && window.location.href || '';
	    if (/[?&]react_perf\b/.test(url)) {
	      var ReactDefaultPerf = __webpack_require__(145);
	      ReactDefaultPerf.start();
	    }
	  }
	}

	module.exports = {
	  inject: inject
	};
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(8)))

/***/ },
/* 75 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015 Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule BeforeInputEventPlugin
	 * @typechecks static-only
	 */

	'use strict';

	var EventConstants = __webpack_require__(34);
	var EventPropagators = __webpack_require__(76);
	var ExecutionEnvironment = __webpack_require__(13);
	var FallbackCompositionState = __webpack_require__(77);
	var SyntheticCompositionEvent = __webpack_require__(79);
	var SyntheticInputEvent = __webpack_require__(81);

	var keyOf = __webpack_require__(82);

	var END_KEYCODES = [9, 13, 27, 32]; // Tab, Return, Esc, Space
	var START_KEYCODE = 229;

	var canUseCompositionEvent = ExecutionEnvironment.canUseDOM && 'CompositionEvent' in window;

	var documentMode = null;
	if (ExecutionEnvironment.canUseDOM && 'documentMode' in document) {
	  documentMode = document.documentMode;
	}

	// Webkit offers a very useful `textInput` event that can be used to
	// directly represent `beforeInput`. The IE `textinput` event is not as
	// useful, so we don't use it.
	var canUseTextInputEvent = ExecutionEnvironment.canUseDOM && 'TextEvent' in window && !documentMode && !isPresto();

	// In IE9+, we have access to composition events, but the data supplied
	// by the native compositionend event may be incorrect. Japanese ideographic
	// spaces, for instance (\u3000) are not recorded correctly.
	var useFallbackCompositionData = ExecutionEnvironment.canUseDOM && (!canUseCompositionEvent || documentMode && documentMode > 8 && documentMode <= 11);

	/**
	 * Opera <= 12 includes TextEvent in window, but does not fire
	 * text input events. Rely on keypress instead.
	 */
	function isPresto() {
	  var opera = window.opera;
	  return typeof opera === 'object' && typeof opera.version === 'function' && parseInt(opera.version(), 10) <= 12;
	}

	var SPACEBAR_CODE = 32;
	var SPACEBAR_CHAR = String.fromCharCode(SPACEBAR_CODE);

	var topLevelTypes = EventConstants.topLevelTypes;

	// Events and their corresponding property names.
	var eventTypes = {
	  beforeInput: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onBeforeInput: null }),
	      captured: keyOf({ onBeforeInputCapture: null })
	    },
	    dependencies: [topLevelTypes.topCompositionEnd, topLevelTypes.topKeyPress, topLevelTypes.topTextInput, topLevelTypes.topPaste]
	  },
	  compositionEnd: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onCompositionEnd: null }),
	      captured: keyOf({ onCompositionEndCapture: null })
	    },
	    dependencies: [topLevelTypes.topBlur, topLevelTypes.topCompositionEnd, topLevelTypes.topKeyDown, topLevelTypes.topKeyPress, topLevelTypes.topKeyUp, topLevelTypes.topMouseDown]
	  },
	  compositionStart: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onCompositionStart: null }),
	      captured: keyOf({ onCompositionStartCapture: null })
	    },
	    dependencies: [topLevelTypes.topBlur, topLevelTypes.topCompositionStart, topLevelTypes.topKeyDown, topLevelTypes.topKeyPress, topLevelTypes.topKeyUp, topLevelTypes.topMouseDown]
	  },
	  compositionUpdate: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onCompositionUpdate: null }),
	      captured: keyOf({ onCompositionUpdateCapture: null })
	    },
	    dependencies: [topLevelTypes.topBlur, topLevelTypes.topCompositionUpdate, topLevelTypes.topKeyDown, topLevelTypes.topKeyPress, topLevelTypes.topKeyUp, topLevelTypes.topMouseDown]
	  }
	};

	// Track whether we've ever handled a keypress on the space key.
	var hasSpaceKeypress = false;

	/**
	 * Return whether a native keypress event is assumed to be a command.
	 * This is required because Firefox fires `keypress` events for key commands
	 * (cut, copy, select-all, etc.) even though no character is inserted.
	 */
	function isKeypressCommand(nativeEvent) {
	  return (nativeEvent.ctrlKey || nativeEvent.altKey || nativeEvent.metaKey) &&
	  // ctrlKey && altKey is equivalent to AltGr, and is not a command.
	  !(nativeEvent.ctrlKey && nativeEvent.altKey);
	}

	/**
	 * Translate native top level events into event types.
	 *
	 * @param {string} topLevelType
	 * @return {object}
	 */
	function getCompositionEventType(topLevelType) {
	  switch (topLevelType) {
	    case topLevelTypes.topCompositionStart:
	      return eventTypes.compositionStart;
	    case topLevelTypes.topCompositionEnd:
	      return eventTypes.compositionEnd;
	    case topLevelTypes.topCompositionUpdate:
	      return eventTypes.compositionUpdate;
	  }
	}

	/**
	 * Does our fallback best-guess model think this event signifies that
	 * composition has begun?
	 *
	 * @param {string} topLevelType
	 * @param {object} nativeEvent
	 * @return {boolean}
	 */
	function isFallbackCompositionStart(topLevelType, nativeEvent) {
	  return topLevelType === topLevelTypes.topKeyDown && nativeEvent.keyCode === START_KEYCODE;
	}

	/**
	 * Does our fallback mode think that this event is the end of composition?
	 *
	 * @param {string} topLevelType
	 * @param {object} nativeEvent
	 * @return {boolean}
	 */
	function isFallbackCompositionEnd(topLevelType, nativeEvent) {
	  switch (topLevelType) {
	    case topLevelTypes.topKeyUp:
	      // Command keys insert or clear IME input.
	      return END_KEYCODES.indexOf(nativeEvent.keyCode) !== -1;
	    case topLevelTypes.topKeyDown:
	      // Expect IME keyCode on each keydown. If we get any other
	      // code we must have exited earlier.
	      return nativeEvent.keyCode !== START_KEYCODE;
	    case topLevelTypes.topKeyPress:
	    case topLevelTypes.topMouseDown:
	    case topLevelTypes.topBlur:
	      // Events are not possible without cancelling IME.
	      return true;
	    default:
	      return false;
	  }
	}

	/**
	 * Google Input Tools provides composition data via a CustomEvent,
	 * with the `data` property populated in the `detail` object. If this
	 * is available on the event object, use it. If not, this is a plain
	 * composition event and we have nothing special to extract.
	 *
	 * @param {object} nativeEvent
	 * @return {?string}
	 */
	function getDataFromCustomEvent(nativeEvent) {
	  var detail = nativeEvent.detail;
	  if (typeof detail === 'object' && 'data' in detail) {
	    return detail.data;
	  }
	  return null;
	}

	// Track the current IME composition fallback object, if any.
	var currentComposition = null;

	/**
	 * @param {string} topLevelType Record from `EventConstants`.
	 * @param {DOMEventTarget} topLevelTarget The listening component root node.
	 * @param {string} topLevelTargetID ID of `topLevelTarget`.
	 * @param {object} nativeEvent Native browser event.
	 * @return {?object} A SyntheticCompositionEvent.
	 */
	function extractCompositionEvent(topLevelType, topLevelTarget, topLevelTargetID, nativeEvent, nativeEventTarget) {
	  var eventType;
	  var fallbackData;

	  if (canUseCompositionEvent) {
	    eventType = getCompositionEventType(topLevelType);
	  } else if (!currentComposition) {
	    if (isFallbackCompositionStart(topLevelType, nativeEvent)) {
	      eventType = eventTypes.compositionStart;
	    }
	  } else if (isFallbackCompositionEnd(topLevelType, nativeEvent)) {
	    eventType = eventTypes.compositionEnd;
	  }

	  if (!eventType) {
	    return null;
	  }

	  if (useFallbackCompositionData) {
	    // The current composition is stored statically and must not be
	    // overwritten while composition continues.
	    if (!currentComposition && eventType === eventTypes.compositionStart) {
	      currentComposition = FallbackCompositionState.getPooled(topLevelTarget);
	    } else if (eventType === eventTypes.compositionEnd) {
	      if (currentComposition) {
	        fallbackData = currentComposition.getData();
	      }
	    }
	  }

	  var event = SyntheticCompositionEvent.getPooled(eventType, topLevelTargetID, nativeEvent, nativeEventTarget);

	  if (fallbackData) {
	    // Inject data generated from fallback path into the synthetic event.
	    // This matches the property of native CompositionEventInterface.
	    event.data = fallbackData;
	  } else {
	    var customData = getDataFromCustomEvent(nativeEvent);
	    if (customData !== null) {
	      event.data = customData;
	    }
	  }

	  EventPropagators.accumulateTwoPhaseDispatches(event);
	  return event;
	}

	/**
	 * @param {string} topLevelType Record from `EventConstants`.
	 * @param {object} nativeEvent Native browser event.
	 * @return {?string} The string corresponding to this `beforeInput` event.
	 */
	function getNativeBeforeInputChars(topLevelType, nativeEvent) {
	  switch (topLevelType) {
	    case topLevelTypes.topCompositionEnd:
	      return getDataFromCustomEvent(nativeEvent);
	    case topLevelTypes.topKeyPress:
	      /**
	       * If native `textInput` events are available, our goal is to make
	       * use of them. However, there is a special case: the spacebar key.
	       * In Webkit, preventing default on a spacebar `textInput` event
	       * cancels character insertion, but it *also* causes the browser
	       * to fall back to its default spacebar behavior of scrolling the
	       * page.
	       *
	       * Tracking at:
	       * https://code.google.com/p/chromium/issues/detail?id=355103
	       *
	       * To avoid this issue, use the keypress event as if no `textInput`
	       * event is available.
	       */
	      var which = nativeEvent.which;
	      if (which !== SPACEBAR_CODE) {
	        return null;
	      }

	      hasSpaceKeypress = true;
	      return SPACEBAR_CHAR;

	    case topLevelTypes.topTextInput:
	      // Record the characters to be added to the DOM.
	      var chars = nativeEvent.data;

	      // If it's a spacebar character, assume that we have already handled
	      // it at the keypress level and bail immediately. Android Chrome
	      // doesn't give us keycodes, so we need to blacklist it.
	      if (chars === SPACEBAR_CHAR && hasSpaceKeypress) {
	        return null;
	      }

	      return chars;

	    default:
	      // For other native event types, do nothing.
	      return null;
	  }
	}

	/**
	 * For browsers that do not provide the `textInput` event, extract the
	 * appropriate string to use for SyntheticInputEvent.
	 *
	 * @param {string} topLevelType Record from `EventConstants`.
	 * @param {object} nativeEvent Native browser event.
	 * @return {?string} The fallback string for this `beforeInput` event.
	 */
	function getFallbackBeforeInputChars(topLevelType, nativeEvent) {
	  // If we are currently composing (IME) and using a fallback to do so,
	  // try to extract the composed characters from the fallback object.
	  if (currentComposition) {
	    if (topLevelType === topLevelTypes.topCompositionEnd || isFallbackCompositionEnd(topLevelType, nativeEvent)) {
	      var chars = currentComposition.getData();
	      FallbackCompositionState.release(currentComposition);
	      currentComposition = null;
	      return chars;
	    }
	    return null;
	  }

	  switch (topLevelType) {
	    case topLevelTypes.topPaste:
	      // If a paste event occurs after a keypress, throw out the input
	      // chars. Paste events should not lead to BeforeInput events.
	      return null;
	    case topLevelTypes.topKeyPress:
	      /**
	       * As of v27, Firefox may fire keypress events even when no character
	       * will be inserted. A few possibilities:
	       *
	       * - `which` is `0`. Arrow keys, Esc key, etc.
	       *
	       * - `which` is the pressed key code, but no char is available.
	       *   Ex: 'AltGr + d` in Polish. There is no modified character for
	       *   this key combination and no character is inserted into the
	       *   document, but FF fires the keypress for char code `100` anyway.
	       *   No `input` event will occur.
	       *
	       * - `which` is the pressed key code, but a command combination is
	       *   being used. Ex: `Cmd+C`. No character is inserted, and no
	       *   `input` event will occur.
	       */
	      if (nativeEvent.which && !isKeypressCommand(nativeEvent)) {
	        return String.fromCharCode(nativeEvent.which);
	      }
	      return null;
	    case topLevelTypes.topCompositionEnd:
	      return useFallbackCompositionData ? null : nativeEvent.data;
	    default:
	      return null;
	  }
	}

	/**
	 * Extract a SyntheticInputEvent for `beforeInput`, based on either native
	 * `textInput` or fallback behavior.
	 *
	 * @param {string} topLevelType Record from `EventConstants`.
	 * @param {DOMEventTarget} topLevelTarget The listening component root node.
	 * @param {string} topLevelTargetID ID of `topLevelTarget`.
	 * @param {object} nativeEvent Native browser event.
	 * @return {?object} A SyntheticInputEvent.
	 */
	function extractBeforeInputEvent(topLevelType, topLevelTarget, topLevelTargetID, nativeEvent, nativeEventTarget) {
	  var chars;

	  if (canUseTextInputEvent) {
	    chars = getNativeBeforeInputChars(topLevelType, nativeEvent);
	  } else {
	    chars = getFallbackBeforeInputChars(topLevelType, nativeEvent);
	  }

	  // If no characters are being inserted, no BeforeInput event should
	  // be fired.
	  if (!chars) {
	    return null;
	  }

	  var event = SyntheticInputEvent.getPooled(eventTypes.beforeInput, topLevelTargetID, nativeEvent, nativeEventTarget);

	  event.data = chars;
	  EventPropagators.accumulateTwoPhaseDispatches(event);
	  return event;
	}

	/**
	 * Create an `onBeforeInput` event to match
	 * http://www.w3.org/TR/2013/WD-DOM-Level-3-Events-20131105/#events-inputevents.
	 *
	 * This event plugin is based on the native `textInput` event
	 * available in Chrome, Safari, Opera, and IE. This event fires after
	 * `onKeyPress` and `onCompositionEnd`, but before `onInput`.
	 *
	 * `beforeInput` is spec'd but not implemented in any browsers, and
	 * the `input` event does not provide any useful information about what has
	 * actually been added, contrary to the spec. Thus, `textInput` is the best
	 * available event to identify the characters that have actually been inserted
	 * into the target node.
	 *
	 * This plugin is also responsible for emitting `composition` events, thus
	 * allowing us to share composition fallback code for both `beforeInput` and
	 * `composition` event types.
	 */
	var BeforeInputEventPlugin = {

	  eventTypes: eventTypes,

	  /**
	   * @param {string} topLevelType Record from `EventConstants`.
	   * @param {DOMEventTarget} topLevelTarget The listening component root node.
	   * @param {string} topLevelTargetID ID of `topLevelTarget`.
	   * @param {object} nativeEvent Native browser event.
	   * @return {*} An accumulation of synthetic events.
	   * @see {EventPluginHub.extractEvents}
	   */
	  extractEvents: function (topLevelType, topLevelTarget, topLevelTargetID, nativeEvent, nativeEventTarget) {
	    return [extractCompositionEvent(topLevelType, topLevelTarget, topLevelTargetID, nativeEvent, nativeEventTarget), extractBeforeInputEvent(topLevelType, topLevelTarget, topLevelTargetID, nativeEvent, nativeEventTarget)];
	  }
	};

	module.exports = BeforeInputEventPlugin;

/***/ },
/* 76 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule EventPropagators
	 */

	'use strict';

	var EventConstants = __webpack_require__(34);
	var EventPluginHub = __webpack_require__(35);

	var warning = __webpack_require__(29);

	var accumulateInto = __webpack_require__(39);
	var forEachAccumulated = __webpack_require__(40);

	var PropagationPhases = EventConstants.PropagationPhases;
	var getListener = EventPluginHub.getListener;

	/**
	 * Some event types have a notion of different registration names for different
	 * "phases" of propagation. This finds listeners by a given phase.
	 */
	function listenerAtPhase(id, event, propagationPhase) {
	  var registrationName = event.dispatchConfig.phasedRegistrationNames[propagationPhase];
	  return getListener(id, registrationName);
	}

	/**
	 * Tags a `SyntheticEvent` with dispatched listeners. Creating this function
	 * here, allows us to not have to bind or create functions for each event.
	 * Mutating the event's members allows us to not have to create a wrapping
	 * "dispatch" object that pairs the event with the listener.
	 */
	function accumulateDirectionalDispatches(domID, upwards, event) {
	  if (process.env.NODE_ENV !== 'production') {
	    process.env.NODE_ENV !== 'production' ? warning(domID, 'Dispatching id must not be null') : undefined;
	  }
	  var phase = upwards ? PropagationPhases.bubbled : PropagationPhases.captured;
	  var listener = listenerAtPhase(domID, event, phase);
	  if (listener) {
	    event._dispatchListeners = accumulateInto(event._dispatchListeners, listener);
	    event._dispatchIDs = accumulateInto(event._dispatchIDs, domID);
	  }
	}

	/**
	 * Collect dispatches (must be entirely collected before dispatching - see unit
	 * tests). Lazily allocate the array to conserve memory.  We must loop through
	 * each event and perform the traversal for each one. We cannot perform a
	 * single traversal for the entire collection of events because each event may
	 * have a different target.
	 */
	function accumulateTwoPhaseDispatchesSingle(event) {
	  if (event && event.dispatchConfig.phasedRegistrationNames) {
	    EventPluginHub.injection.getInstanceHandle().traverseTwoPhase(event.dispatchMarker, accumulateDirectionalDispatches, event);
	  }
	}

	/**
	 * Same as `accumulateTwoPhaseDispatchesSingle`, but skips over the targetID.
	 */
	function accumulateTwoPhaseDispatchesSingleSkipTarget(event) {
	  if (event && event.dispatchConfig.phasedRegistrationNames) {
	    EventPluginHub.injection.getInstanceHandle().traverseTwoPhaseSkipTarget(event.dispatchMarker, accumulateDirectionalDispatches, event);
	  }
	}

	/**
	 * Accumulates without regard to direction, does not look for phased
	 * registration names. Same as `accumulateDirectDispatchesSingle` but without
	 * requiring that the `dispatchMarker` be the same as the dispatched ID.
	 */
	function accumulateDispatches(id, ignoredDirection, event) {
	  if (event && event.dispatchConfig.registrationName) {
	    var registrationName = event.dispatchConfig.registrationName;
	    var listener = getListener(id, registrationName);
	    if (listener) {
	      event._dispatchListeners = accumulateInto(event._dispatchListeners, listener);
	      event._dispatchIDs = accumulateInto(event._dispatchIDs, id);
	    }
	  }
	}

	/**
	 * Accumulates dispatches on an `SyntheticEvent`, but only for the
	 * `dispatchMarker`.
	 * @param {SyntheticEvent} event
	 */
	function accumulateDirectDispatchesSingle(event) {
	  if (event && event.dispatchConfig.registrationName) {
	    accumulateDispatches(event.dispatchMarker, null, event);
	  }
	}

	function accumulateTwoPhaseDispatches(events) {
	  forEachAccumulated(events, accumulateTwoPhaseDispatchesSingle);
	}

	function accumulateTwoPhaseDispatchesSkipTarget(events) {
	  forEachAccumulated(events, accumulateTwoPhaseDispatchesSingleSkipTarget);
	}

	function accumulateEnterLeaveDispatches(leave, enter, fromID, toID) {
	  EventPluginHub.injection.getInstanceHandle().traverseEnterLeave(fromID, toID, accumulateDispatches, leave, enter);
	}

	function accumulateDirectDispatches(events) {
	  forEachAccumulated(events, accumulateDirectDispatchesSingle);
	}

	/**
	 * A small set of propagation patterns, each of which will accept a small amount
	 * of information, and generate a set of "dispatch ready event objects" - which
	 * are sets of events that have already been annotated with a set of dispatched
	 * listener functions/ids. The API is designed this way to discourage these
	 * propagation strategies from actually executing the dispatches, since we
	 * always want to collect the entire set of dispatches before executing event a
	 * single one.
	 *
	 * @constructor EventPropagators
	 */
	var EventPropagators = {
	  accumulateTwoPhaseDispatches: accumulateTwoPhaseDispatches,
	  accumulateTwoPhaseDispatchesSkipTarget: accumulateTwoPhaseDispatchesSkipTarget,
	  accumulateDirectDispatches: accumulateDirectDispatches,
	  accumulateEnterLeaveDispatches: accumulateEnterLeaveDispatches
	};

	module.exports = EventPropagators;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(8)))

/***/ },
/* 77 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule FallbackCompositionState
	 * @typechecks static-only
	 */

	'use strict';

	var PooledClass = __webpack_require__(59);

	var assign = __webpack_require__(43);
	var getTextContentAccessor = __webpack_require__(78);

	/**
	 * This helper class stores information about text content of a target node,
	 * allowing comparison of content before and after a given event.
	 *
	 * Identify the node where selection currently begins, then observe
	 * both its text content and its current position in the DOM. Since the
	 * browser may natively replace the target node during composition, we can
	 * use its position to find its replacement.
	 *
	 * @param {DOMEventTarget} root
	 */
	function FallbackCompositionState(root) {
	  this._root = root;
	  this._startText = this.getText();
	  this._fallbackText = null;
	}

	assign(FallbackCompositionState.prototype, {
	  destructor: function () {
	    this._root = null;
	    this._startText = null;
	    this._fallbackText = null;
	  },

	  /**
	   * Get current text of input.
	   *
	   * @return {string}
	   */
	  getText: function () {
	    if ('value' in this._root) {
	      return this._root.value;
	    }
	    return this._root[getTextContentAccessor()];
	  },

	  /**
	   * Determine the differing substring between the initially stored
	   * text content and the current content.
	   *
	   * @return {string}
	   */
	  getData: function () {
	    if (this._fallbackText) {
	      return this._fallbackText;
	    }

	    var start;
	    var startValue = this._startText;
	    var startLength = startValue.length;
	    var end;
	    var endValue = this.getText();
	    var endLength = endValue.length;

	    for (start = 0; start < startLength; start++) {
	      if (startValue[start] !== endValue[start]) {
	        break;
	      }
	    }

	    var minEnd = startLength - start;
	    for (end = 1; end <= minEnd; end++) {
	      if (startValue[startLength - end] !== endValue[endLength - end]) {
	        break;
	      }
	    }

	    var sliceTail = end > 1 ? 1 - end : undefined;
	    this._fallbackText = endValue.slice(start, sliceTail);
	    return this._fallbackText;
	  }
	});

	PooledClass.addPoolingTo(FallbackCompositionState);

	module.exports = FallbackCompositionState;

/***/ },
/* 78 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule getTextContentAccessor
	 */

	'use strict';

	var ExecutionEnvironment = __webpack_require__(13);

	var contentKey = null;

	/**
	 * Gets the key used to access text content on a DOM node.
	 *
	 * @return {?string} Key used to access text content.
	 * @internal
	 */
	function getTextContentAccessor() {
	  if (!contentKey && ExecutionEnvironment.canUseDOM) {
	    // Prefer textContent to innerText because many browsers support both but
	    // SVG <text> elements don't support innerText even when <div> does.
	    contentKey = 'textContent' in document.documentElement ? 'textContent' : 'innerText';
	  }
	  return contentKey;
	}

	module.exports = getTextContentAccessor;

/***/ },
/* 79 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule SyntheticCompositionEvent
	 * @typechecks static-only
	 */

	'use strict';

	var SyntheticEvent = __webpack_require__(80);

	/**
	 * @interface Event
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/#events-compositionevents
	 */
	var CompositionEventInterface = {
	  data: null
	};

	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticUIEvent}
	 */
	function SyntheticCompositionEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
	  SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
	}

	SyntheticEvent.augmentClass(SyntheticCompositionEvent, CompositionEventInterface);

	module.exports = SyntheticCompositionEvent;

/***/ },
/* 80 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule SyntheticEvent
	 * @typechecks static-only
	 */

	'use strict';

	var PooledClass = __webpack_require__(59);

	var assign = __webpack_require__(43);
	var emptyFunction = __webpack_require__(19);
	var warning = __webpack_require__(29);

	/**
	 * @interface Event
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/
	 */
	var EventInterface = {
	  type: null,
	  // currentTarget is set when dispatching; no use in copying it here
	  currentTarget: emptyFunction.thatReturnsNull,
	  eventPhase: null,
	  bubbles: null,
	  cancelable: null,
	  timeStamp: function (event) {
	    return event.timeStamp || Date.now();
	  },
	  defaultPrevented: null,
	  isTrusted: null
	};

	/**
	 * Synthetic events are dispatched by event plugins, typically in response to a
	 * top-level event delegation handler.
	 *
	 * These systems should generally use pooling to reduce the frequency of garbage
	 * collection. The system should check `isPersistent` to determine whether the
	 * event should be released into the pool after being dispatched. Users that
	 * need a persisted event should invoke `persist`.
	 *
	 * Synthetic events (and subclasses) implement the DOM Level 3 Events API by
	 * normalizing browser quirks. Subclasses do not necessarily have to implement a
	 * DOM interface; custom application-specific events can also subclass this.
	 *
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 */
	function SyntheticEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
	  this.dispatchConfig = dispatchConfig;
	  this.dispatchMarker = dispatchMarker;
	  this.nativeEvent = nativeEvent;
	  this.target = nativeEventTarget;
	  this.currentTarget = nativeEventTarget;

	  var Interface = this.constructor.Interface;
	  for (var propName in Interface) {
	    if (!Interface.hasOwnProperty(propName)) {
	      continue;
	    }
	    var normalize = Interface[propName];
	    if (normalize) {
	      this[propName] = normalize(nativeEvent);
	    } else {
	      this[propName] = nativeEvent[propName];
	    }
	  }

	  var defaultPrevented = nativeEvent.defaultPrevented != null ? nativeEvent.defaultPrevented : nativeEvent.returnValue === false;
	  if (defaultPrevented) {
	    this.isDefaultPrevented = emptyFunction.thatReturnsTrue;
	  } else {
	    this.isDefaultPrevented = emptyFunction.thatReturnsFalse;
	  }
	  this.isPropagationStopped = emptyFunction.thatReturnsFalse;
	}

	assign(SyntheticEvent.prototype, {

	  preventDefault: function () {
	    this.defaultPrevented = true;
	    var event = this.nativeEvent;
	    if (process.env.NODE_ENV !== 'production') {
	      process.env.NODE_ENV !== 'production' ? warning(event, 'This synthetic event is reused for performance reasons. If you\'re ' + 'seeing this, you\'re calling `preventDefault` on a ' + 'released/nullified synthetic event. This is a no-op. See ' + 'https://fb.me/react-event-pooling for more information.') : undefined;
	    }
	    if (!event) {
	      return;
	    }

	    if (event.preventDefault) {
	      event.preventDefault();
	    } else {
	      event.returnValue = false;
	    }
	    this.isDefaultPrevented = emptyFunction.thatReturnsTrue;
	  },

	  stopPropagation: function () {
	    var event = this.nativeEvent;
	    if (process.env.NODE_ENV !== 'production') {
	      process.env.NODE_ENV !== 'production' ? warning(event, 'This synthetic event is reused for performance reasons. If you\'re ' + 'seeing this, you\'re calling `stopPropagation` on a ' + 'released/nullified synthetic event. This is a no-op. See ' + 'https://fb.me/react-event-pooling for more information.') : undefined;
	    }
	    if (!event) {
	      return;
	    }

	    if (event.stopPropagation) {
	      event.stopPropagation();
	    } else {
	      event.cancelBubble = true;
	    }
	    this.isPropagationStopped = emptyFunction.thatReturnsTrue;
	  },

	  /**
	   * We release all dispatched `SyntheticEvent`s after each event loop, adding
	   * them back into the pool. This allows a way to hold onto a reference that
	   * won't be added back into the pool.
	   */
	  persist: function () {
	    this.isPersistent = emptyFunction.thatReturnsTrue;
	  },

	  /**
	   * Checks if this event should be released back into the pool.
	   *
	   * @return {boolean} True if this should not be released, false otherwise.
	   */
	  isPersistent: emptyFunction.thatReturnsFalse,

	  /**
	   * `PooledClass` looks for `destructor` on each instance it releases.
	   */
	  destructor: function () {
	    var Interface = this.constructor.Interface;
	    for (var propName in Interface) {
	      this[propName] = null;
	    }
	    this.dispatchConfig = null;
	    this.dispatchMarker = null;
	    this.nativeEvent = null;
	  }

	});

	SyntheticEvent.Interface = EventInterface;

	/**
	 * Helper to reduce boilerplate when creating subclasses.
	 *
	 * @param {function} Class
	 * @param {?object} Interface
	 */
	SyntheticEvent.augmentClass = function (Class, Interface) {
	  var Super = this;

	  var prototype = Object.create(Super.prototype);
	  assign(prototype, Class.prototype);
	  Class.prototype = prototype;
	  Class.prototype.constructor = Class;

	  Class.Interface = assign({}, Super.Interface, Interface);
	  Class.augmentClass = Super.augmentClass;

	  PooledClass.addPoolingTo(Class, PooledClass.fourArgumentPooler);
	};

	PooledClass.addPoolingTo(SyntheticEvent, PooledClass.fourArgumentPooler);

	module.exports = SyntheticEvent;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(8)))

/***/ },
/* 81 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule SyntheticInputEvent
	 * @typechecks static-only
	 */

	'use strict';

	var SyntheticEvent = __webpack_require__(80);

	/**
	 * @interface Event
	 * @see http://www.w3.org/TR/2013/WD-DOM-Level-3-Events-20131105
	 *      /#events-inputevents
	 */
	var InputEventInterface = {
	  data: null
	};

	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticUIEvent}
	 */
	function SyntheticInputEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
	  SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
	}

	SyntheticEvent.augmentClass(SyntheticInputEvent, InputEventInterface);

	module.exports = SyntheticInputEvent;

/***/ },
/* 82 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule keyOf
	 */

	/**
	 * Allows extraction of a minified key. Let's the build system minify keys
	 * without losing the ability to dynamically use key strings as values
	 * themselves. Pass in an object with a single key/val pair and it will return
	 * you the string key of that single record. Suppose you want to grab the
	 * value for a key 'className' inside of an object. Key/val minification may
	 * have aliased that key to be 'xa12'. keyOf({className: null}) will return
	 * 'xa12' in that case. Resolve keys you want to use once at startup time, then
	 * reuse those resolutions.
	 */
	"use strict";

	var keyOf = function (oneKeyObj) {
	  var key;
	  for (key in oneKeyObj) {
	    if (!oneKeyObj.hasOwnProperty(key)) {
	      continue;
	    }
	    return key;
	  }
	  return null;
	};

	module.exports = keyOf;

/***/ },
/* 83 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ChangeEventPlugin
	 */

	'use strict';

	var EventConstants = __webpack_require__(34);
	var EventPluginHub = __webpack_require__(35);
	var EventPropagators = __webpack_require__(76);
	var ExecutionEnvironment = __webpack_require__(13);
	var ReactUpdates = __webpack_require__(57);
	var SyntheticEvent = __webpack_require__(80);

	var getEventTarget = __webpack_require__(84);
	var isEventSupported = __webpack_require__(44);
	var isTextInputElement = __webpack_require__(85);
	var keyOf = __webpack_require__(82);

	var topLevelTypes = EventConstants.topLevelTypes;

	var eventTypes = {
	  change: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onChange: null }),
	      captured: keyOf({ onChangeCapture: null })
	    },
	    dependencies: [topLevelTypes.topBlur, topLevelTypes.topChange, topLevelTypes.topClick, topLevelTypes.topFocus, topLevelTypes.topInput, topLevelTypes.topKeyDown, topLevelTypes.topKeyUp, topLevelTypes.topSelectionChange]
	  }
	};

	/**
	 * For IE shims
	 */
	var activeElement = null;
	var activeElementID = null;
	var activeElementValue = null;
	var activeElementValueProp = null;

	/**
	 * SECTION: handle `change` event
	 */
	function shouldUseChangeEvent(elem) {
	  var nodeName = elem.nodeName && elem.nodeName.toLowerCase();
	  return nodeName === 'select' || nodeName === 'input' && elem.type === 'file';
	}

	var doesChangeEventBubble = false;
	if (ExecutionEnvironment.canUseDOM) {
	  // See `handleChange` comment below
	  doesChangeEventBubble = isEventSupported('change') && (!('documentMode' in document) || document.documentMode > 8);
	}

	function manualDispatchChangeEvent(nativeEvent) {
	  var event = SyntheticEvent.getPooled(eventTypes.change, activeElementID, nativeEvent, getEventTarget(nativeEvent));
	  EventPropagators.accumulateTwoPhaseDispatches(event);

	  // If change and propertychange bubbled, we'd just bind to it like all the
	  // other events and have it go through ReactBrowserEventEmitter. Since it
	  // doesn't, we manually listen for the events and so we have to enqueue and
	  // process the abstract event manually.
	  //
	  // Batching is necessary here in order to ensure that all event handlers run
	  // before the next rerender (including event handlers attached to ancestor
	  // elements instead of directly on the input). Without this, controlled
	  // components don't work properly in conjunction with event bubbling because
	  // the component is rerendered and the value reverted before all the event
	  // handlers can run. See https://github.com/facebook/react/issues/708.
	  ReactUpdates.batchedUpdates(runEventInBatch, event);
	}

	function runEventInBatch(event) {
	  EventPluginHub.enqueueEvents(event);
	  EventPluginHub.processEventQueue(false);
	}

	function startWatchingForChangeEventIE8(target, targetID) {
	  activeElement = target;
	  activeElementID = targetID;
	  activeElement.attachEvent('onchange', manualDispatchChangeEvent);
	}

	function stopWatchingForChangeEventIE8() {
	  if (!activeElement) {
	    return;
	  }
	  activeElement.detachEvent('onchange', manualDispatchChangeEvent);
	  activeElement = null;
	  activeElementID = null;
	}

	function getTargetIDForChangeEvent(topLevelType, topLevelTarget, topLevelTargetID) {
	  if (topLevelType === topLevelTypes.topChange) {
	    return topLevelTargetID;
	  }
	}
	function handleEventsForChangeEventIE8(topLevelType, topLevelTarget, topLevelTargetID) {
	  if (topLevelType === topLevelTypes.topFocus) {
	    // stopWatching() should be a noop here but we call it just in case we
	    // missed a blur event somehow.
	    stopWatchingForChangeEventIE8();
	    startWatchingForChangeEventIE8(topLevelTarget, topLevelTargetID);
	  } else if (topLevelType === topLevelTypes.topBlur) {
	    stopWatchingForChangeEventIE8();
	  }
	}

	/**
	 * SECTION: handle `input` event
	 */
	var isInputEventSupported = false;
	if (ExecutionEnvironment.canUseDOM) {
	  // IE9 claims to support the input event but fails to trigger it when
	  // deleting text, so we ignore its input events
	  isInputEventSupported = isEventSupported('input') && (!('documentMode' in document) || document.documentMode > 9);
	}

	/**
	 * (For old IE.) Replacement getter/setter for the `value` property that gets
	 * set on the active element.
	 */
	var newValueProp = {
	  get: function () {
	    return activeElementValueProp.get.call(this);
	  },
	  set: function (val) {
	    // Cast to a string so we can do equality checks.
	    activeElementValue = '' + val;
	    activeElementValueProp.set.call(this, val);
	  }
	};

	/**
	 * (For old IE.) Starts tracking propertychange events on the passed-in element
	 * and override the value property so that we can distinguish user events from
	 * value changes in JS.
	 */
	function startWatchingForValueChange(target, targetID) {
	  activeElement = target;
	  activeElementID = targetID;
	  activeElementValue = target.value;
	  activeElementValueProp = Object.getOwnPropertyDescriptor(target.constructor.prototype, 'value');

	  Object.defineProperty(activeElement, 'value', newValueProp);
	  activeElement.attachEvent('onpropertychange', handlePropertyChange);
	}

	/**
	 * (For old IE.) Removes the event listeners from the currently-tracked element,
	 * if any exists.
	 */
	function stopWatchingForValueChange() {
	  if (!activeElement) {
	    return;
	  }

	  // delete restores the original property definition
	  delete activeElement.value;
	  activeElement.detachEvent('onpropertychange', handlePropertyChange);

	  activeElement = null;
	  activeElementID = null;
	  activeElementValue = null;
	  activeElementValueProp = null;
	}

	/**
	 * (For old IE.) Handles a propertychange event, sending a `change` event if
	 * the value of the active element has changed.
	 */
	function handlePropertyChange(nativeEvent) {
	  if (nativeEvent.propertyName !== 'value') {
	    return;
	  }
	  var value = nativeEvent.srcElement.value;
	  if (value === activeElementValue) {
	    return;
	  }
	  activeElementValue = value;

	  manualDispatchChangeEvent(nativeEvent);
	}

	/**
	 * If a `change` event should be fired, returns the target's ID.
	 */
	function getTargetIDForInputEvent(topLevelType, topLevelTarget, topLevelTargetID) {
	  if (topLevelType === topLevelTypes.topInput) {
	    // In modern browsers (i.e., not IE8 or IE9), the input event is exactly
	    // what we want so fall through here and trigger an abstract event
	    return topLevelTargetID;
	  }
	}

	// For IE8 and IE9.
	function handleEventsForInputEventIE(topLevelType, topLevelTarget, topLevelTargetID) {
	  if (topLevelType === topLevelTypes.topFocus) {
	    // In IE8, we can capture almost all .value changes by adding a
	    // propertychange handler and looking for events with propertyName
	    // equal to 'value'
	    // In IE9, propertychange fires for most input events but is buggy and
	    // doesn't fire when text is deleted, but conveniently, selectionchange
	    // appears to fire in all of the remaining cases so we catch those and
	    // forward the event if the value has changed
	    // In either case, we don't want to call the event handler if the value
	    // is changed from JS so we redefine a setter for `.value` that updates
	    // our activeElementValue variable, allowing us to ignore those changes
	    //
	    // stopWatching() should be a noop here but we call it just in case we
	    // missed a blur event somehow.
	    stopWatchingForValueChange();
	    startWatchingForValueChange(topLevelTarget, topLevelTargetID);
	  } else if (topLevelType === topLevelTypes.topBlur) {
	    stopWatchingForValueChange();
	  }
	}

	// For IE8 and IE9.
	function getTargetIDForInputEventIE(topLevelType, topLevelTarget, topLevelTargetID) {
	  if (topLevelType === topLevelTypes.topSelectionChange || topLevelType === topLevelTypes.topKeyUp || topLevelType === topLevelTypes.topKeyDown) {
	    // On the selectionchange event, the target is just document which isn't
	    // helpful for us so just check activeElement instead.
	    //
	    // 99% of the time, keydown and keyup aren't necessary. IE8 fails to fire
	    // propertychange on the first input event after setting `value` from a
	    // script and fires only keydown, keypress, keyup. Catching keyup usually
	    // gets it and catching keydown lets us fire an event for the first
	    // keystroke if user does a key repeat (it'll be a little delayed: right
	    // before the second keystroke). Other input methods (e.g., paste) seem to
	    // fire selectionchange normally.
	    if (activeElement && activeElement.value !== activeElementValue) {
	      activeElementValue = activeElement.value;
	      return activeElementID;
	    }
	  }
	}

	/**
	 * SECTION: handle `click` event
	 */
	function shouldUseClickEvent(elem) {
	  // Use the `click` event to detect changes to checkbox and radio inputs.
	  // This approach works across all browsers, whereas `change` does not fire
	  // until `blur` in IE8.
	  return elem.nodeName && elem.nodeName.toLowerCase() === 'input' && (elem.type === 'checkbox' || elem.type === 'radio');
	}

	function getTargetIDForClickEvent(topLevelType, topLevelTarget, topLevelTargetID) {
	  if (topLevelType === topLevelTypes.topClick) {
	    return topLevelTargetID;
	  }
	}

	/**
	 * This plugin creates an `onChange` event that normalizes change events
	 * across form elements. This event fires at a time when it's possible to
	 * change the element's value without seeing a flicker.
	 *
	 * Supported elements are:
	 * - input (see `isTextInputElement`)
	 * - textarea
	 * - select
	 */
	var ChangeEventPlugin = {

	  eventTypes: eventTypes,

	  /**
	   * @param {string} topLevelType Record from `EventConstants`.
	   * @param {DOMEventTarget} topLevelTarget The listening component root node.
	   * @param {string} topLevelTargetID ID of `topLevelTarget`.
	   * @param {object} nativeEvent Native browser event.
	   * @return {*} An accumulation of synthetic events.
	   * @see {EventPluginHub.extractEvents}
	   */
	  extractEvents: function (topLevelType, topLevelTarget, topLevelTargetID, nativeEvent, nativeEventTarget) {

	    var getTargetIDFunc, handleEventFunc;
	    if (shouldUseChangeEvent(topLevelTarget)) {
	      if (doesChangeEventBubble) {
	        getTargetIDFunc = getTargetIDForChangeEvent;
	      } else {
	        handleEventFunc = handleEventsForChangeEventIE8;
	      }
	    } else if (isTextInputElement(topLevelTarget)) {
	      if (isInputEventSupported) {
	        getTargetIDFunc = getTargetIDForInputEvent;
	      } else {
	        getTargetIDFunc = getTargetIDForInputEventIE;
	        handleEventFunc = handleEventsForInputEventIE;
	      }
	    } else if (shouldUseClickEvent(topLevelTarget)) {
	      getTargetIDFunc = getTargetIDForClickEvent;
	    }

	    if (getTargetIDFunc) {
	      var targetID = getTargetIDFunc(topLevelType, topLevelTarget, topLevelTargetID);
	      if (targetID) {
	        var event = SyntheticEvent.getPooled(eventTypes.change, targetID, nativeEvent, nativeEventTarget);
	        event.type = 'change';
	        EventPropagators.accumulateTwoPhaseDispatches(event);
	        return event;
	      }
	    }

	    if (handleEventFunc) {
	      handleEventFunc(topLevelType, topLevelTarget, topLevelTargetID);
	    }
	  }

	};

	module.exports = ChangeEventPlugin;

/***/ },
/* 84 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule getEventTarget
	 * @typechecks static-only
	 */

	'use strict';

	/**
	 * Gets the target node from a native browser event by accounting for
	 * inconsistencies in browser DOM APIs.
	 *
	 * @param {object} nativeEvent Native browser event.
	 * @return {DOMEventTarget} Target node.
	 */
	function getEventTarget(nativeEvent) {
	  var target = nativeEvent.target || nativeEvent.srcElement || window;
	  // Safari may fire events on text nodes (Node.TEXT_NODE is 3).
	  // @see http://www.quirksmode.org/js/events_properties.html
	  return target.nodeType === 3 ? target.parentNode : target;
	}

	module.exports = getEventTarget;

/***/ },
/* 85 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule isTextInputElement
	 */

	'use strict';

	/**
	 * @see http://www.whatwg.org/specs/web-apps/current-work/multipage/the-input-element.html#input-type-attr-summary
	 */
	var supportedInputTypes = {
	  'color': true,
	  'date': true,
	  'datetime': true,
	  'datetime-local': true,
	  'email': true,
	  'month': true,
	  'number': true,
	  'password': true,
	  'range': true,
	  'search': true,
	  'tel': true,
	  'text': true,
	  'time': true,
	  'url': true,
	  'week': true
	};

	function isTextInputElement(elem) {
	  var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();
	  return nodeName && (nodeName === 'input' && supportedInputTypes[elem.type] || nodeName === 'textarea');
	}

	module.exports = isTextInputElement;

/***/ },
/* 86 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ClientReactRootIndex
	 * @typechecks
	 */

	'use strict';

	var nextReactRootIndex = 0;

	var ClientReactRootIndex = {
	  createReactRootIndex: function () {
	    return nextReactRootIndex++;
	  }
	};

	module.exports = ClientReactRootIndex;

/***/ },
/* 87 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule DefaultEventPluginOrder
	 */

	'use strict';

	var keyOf = __webpack_require__(82);

	/**
	 * Module that is injectable into `EventPluginHub`, that specifies a
	 * deterministic ordering of `EventPlugin`s. A convenient way to reason about
	 * plugins, without having to package every one of them. This is better than
	 * having plugins be ordered in the same order that they are injected because
	 * that ordering would be influenced by the packaging order.
	 * `ResponderEventPlugin` must occur before `SimpleEventPlugin` so that
	 * preventing default on events is convenient in `SimpleEventPlugin` handlers.
	 */
	var DefaultEventPluginOrder = [keyOf({ ResponderEventPlugin: null }), keyOf({ SimpleEventPlugin: null }), keyOf({ TapEventPlugin: null }), keyOf({ EnterLeaveEventPlugin: null }), keyOf({ ChangeEventPlugin: null }), keyOf({ SelectEventPlugin: null }), keyOf({ BeforeInputEventPlugin: null })];

	module.exports = DefaultEventPluginOrder;

/***/ },
/* 88 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule EnterLeaveEventPlugin
	 * @typechecks static-only
	 */

	'use strict';

	var EventConstants = __webpack_require__(34);
	var EventPropagators = __webpack_require__(76);
	var SyntheticMouseEvent = __webpack_require__(89);

	var ReactMount = __webpack_require__(32);
	var keyOf = __webpack_require__(82);

	var topLevelTypes = EventConstants.topLevelTypes;
	var getFirstReactDOM = ReactMount.getFirstReactDOM;

	var eventTypes = {
	  mouseEnter: {
	    registrationName: keyOf({ onMouseEnter: null }),
	    dependencies: [topLevelTypes.topMouseOut, topLevelTypes.topMouseOver]
	  },
	  mouseLeave: {
	    registrationName: keyOf({ onMouseLeave: null }),
	    dependencies: [topLevelTypes.topMouseOut, topLevelTypes.topMouseOver]
	  }
	};

	var extractedEvents = [null, null];

	var EnterLeaveEventPlugin = {

	  eventTypes: eventTypes,

	  /**
	   * For almost every interaction we care about, there will be both a top-level
	   * `mouseover` and `mouseout` event that occurs. Only use `mouseout` so that
	   * we do not extract duplicate events. However, moving the mouse into the
	   * browser from outside will not fire a `mouseout` event. In this case, we use
	   * the `mouseover` top-level event.
	   *
	   * @param {string} topLevelType Record from `EventConstants`.
	   * @param {DOMEventTarget} topLevelTarget The listening component root node.
	   * @param {string} topLevelTargetID ID of `topLevelTarget`.
	   * @param {object} nativeEvent Native browser event.
	   * @return {*} An accumulation of synthetic events.
	   * @see {EventPluginHub.extractEvents}
	   */
	  extractEvents: function (topLevelType, topLevelTarget, topLevelTargetID, nativeEvent, nativeEventTarget) {
	    if (topLevelType === topLevelTypes.topMouseOver && (nativeEvent.relatedTarget || nativeEvent.fromElement)) {
	      return null;
	    }
	    if (topLevelType !== topLevelTypes.topMouseOut && topLevelType !== topLevelTypes.topMouseOver) {
	      // Must not be a mouse in or mouse out - ignoring.
	      return null;
	    }

	    var win;
	    if (topLevelTarget.window === topLevelTarget) {
	      // `topLevelTarget` is probably a window object.
	      win = topLevelTarget;
	    } else {
	      // TODO: Figure out why `ownerDocument` is sometimes undefined in IE8.
	      var doc = topLevelTarget.ownerDocument;
	      if (doc) {
	        win = doc.defaultView || doc.parentWindow;
	      } else {
	        win = window;
	      }
	    }

	    var from;
	    var to;
	    var fromID = '';
	    var toID = '';
	    if (topLevelType === topLevelTypes.topMouseOut) {
	      from = topLevelTarget;
	      fromID = topLevelTargetID;
	      to = getFirstReactDOM(nativeEvent.relatedTarget || nativeEvent.toElement);
	      if (to) {
	        toID = ReactMount.getID(to);
	      } else {
	        to = win;
	      }
	      to = to || win;
	    } else {
	      from = win;
	      to = topLevelTarget;
	      toID = topLevelTargetID;
	    }

	    if (from === to) {
	      // Nothing pertains to our managed components.
	      return null;
	    }

	    var leave = SyntheticMouseEvent.getPooled(eventTypes.mouseLeave, fromID, nativeEvent, nativeEventTarget);
	    leave.type = 'mouseleave';
	    leave.target = from;
	    leave.relatedTarget = to;

	    var enter = SyntheticMouseEvent.getPooled(eventTypes.mouseEnter, toID, nativeEvent, nativeEventTarget);
	    enter.type = 'mouseenter';
	    enter.target = to;
	    enter.relatedTarget = from;

	    EventPropagators.accumulateEnterLeaveDispatches(leave, enter, fromID, toID);

	    extractedEvents[0] = leave;
	    extractedEvents[1] = enter;

	    return extractedEvents;
	  }

	};

	module.exports = EnterLeaveEventPlugin;

/***/ },
/* 89 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule SyntheticMouseEvent
	 * @typechecks static-only
	 */

	'use strict';

	var SyntheticUIEvent = __webpack_require__(90);
	var ViewportMetrics = __webpack_require__(42);

	var getEventModifierState = __webpack_require__(91);

	/**
	 * @interface MouseEvent
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/
	 */
	var MouseEventInterface = {
	  screenX: null,
	  screenY: null,
	  clientX: null,
	  clientY: null,
	  ctrlKey: null,
	  shiftKey: null,
	  altKey: null,
	  metaKey: null,
	  getModifierState: getEventModifierState,
	  button: function (event) {
	    // Webkit, Firefox, IE9+
	    // which:  1 2 3
	    // button: 0 1 2 (standard)
	    var button = event.button;
	    if ('which' in event) {
	      return button;
	    }
	    // IE<9
	    // which:  undefined
	    // button: 0 0 0
	    // button: 1 4 2 (onmouseup)
	    return button === 2 ? 2 : button === 4 ? 1 : 0;
	  },
	  buttons: null,
	  relatedTarget: function (event) {
	    return event.relatedTarget || (event.fromElement === event.srcElement ? event.toElement : event.fromElement);
	  },
	  // "Proprietary" Interface.
	  pageX: function (event) {
	    return 'pageX' in event ? event.pageX : event.clientX + ViewportMetrics.currentScrollLeft;
	  },
	  pageY: function (event) {
	    return 'pageY' in event ? event.pageY : event.clientY + ViewportMetrics.currentScrollTop;
	  }
	};

	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticUIEvent}
	 */
	function SyntheticMouseEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
	  SyntheticUIEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
	}

	SyntheticUIEvent.augmentClass(SyntheticMouseEvent, MouseEventInterface);

	module.exports = SyntheticMouseEvent;

/***/ },
/* 90 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule SyntheticUIEvent
	 * @typechecks static-only
	 */

	'use strict';

	var SyntheticEvent = __webpack_require__(80);

	var getEventTarget = __webpack_require__(84);

	/**
	 * @interface UIEvent
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/
	 */
	var UIEventInterface = {
	  view: function (event) {
	    if (event.view) {
	      return event.view;
	    }

	    var target = getEventTarget(event);
	    if (target != null && target.window === target) {
	      // target is a window object
	      return target;
	    }

	    var doc = target.ownerDocument;
	    // TODO: Figure out why `ownerDocument` is sometimes undefined in IE8.
	    if (doc) {
	      return doc.defaultView || doc.parentWindow;
	    } else {
	      return window;
	    }
	  },
	  detail: function (event) {
	    return event.detail || 0;
	  }
	};

	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticEvent}
	 */
	function SyntheticUIEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
	  SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
	}

	SyntheticEvent.augmentClass(SyntheticUIEvent, UIEventInterface);

	module.exports = SyntheticUIEvent;

/***/ },
/* 91 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule getEventModifierState
	 * @typechecks static-only
	 */

	'use strict';

	/**
	 * Translation from modifier key to the associated property in the event.
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/#keys-Modifiers
	 */

	var modifierKeyToProp = {
	  'Alt': 'altKey',
	  'Control': 'ctrlKey',
	  'Meta': 'metaKey',
	  'Shift': 'shiftKey'
	};

	// IE8 does not implement getModifierState so we simply map it to the only
	// modifier keys exposed by the event itself, does not support Lock-keys.
	// Currently, all major browsers except Chrome seems to support Lock-keys.
	function modifierStateGetter(keyArg) {
	  var syntheticEvent = this;
	  var nativeEvent = syntheticEvent.nativeEvent;
	  if (nativeEvent.getModifierState) {
	    return nativeEvent.getModifierState(keyArg);
	  }
	  var keyProp = modifierKeyToProp[keyArg];
	  return keyProp ? !!nativeEvent[keyProp] : false;
	}

	function getEventModifierState(nativeEvent) {
	  return modifierStateGetter;
	}

	module.exports = getEventModifierState;

/***/ },
/* 92 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule HTMLDOMPropertyConfig
	 */

	'use strict';

	var DOMProperty = __webpack_require__(27);
	var ExecutionEnvironment = __webpack_require__(13);

	var MUST_USE_ATTRIBUTE = DOMProperty.injection.MUST_USE_ATTRIBUTE;
	var MUST_USE_PROPERTY = DOMProperty.injection.MUST_USE_PROPERTY;
	var HAS_BOOLEAN_VALUE = DOMProperty.injection.HAS_BOOLEAN_VALUE;
	var HAS_SIDE_EFFECTS = DOMProperty.injection.HAS_SIDE_EFFECTS;
	var HAS_NUMERIC_VALUE = DOMProperty.injection.HAS_NUMERIC_VALUE;
	var HAS_POSITIVE_NUMERIC_VALUE = DOMProperty.injection.HAS_POSITIVE_NUMERIC_VALUE;
	var HAS_OVERLOADED_BOOLEAN_VALUE = DOMProperty.injection.HAS_OVERLOADED_BOOLEAN_VALUE;

	var hasSVG;
	if (ExecutionEnvironment.canUseDOM) {
	  var implementation = document.implementation;
	  hasSVG = implementation && implementation.hasFeature && implementation.hasFeature('http://www.w3.org/TR/SVG11/feature#BasicStructure', '1.1');
	}

	var HTMLDOMPropertyConfig = {
	  isCustomAttribute: RegExp.prototype.test.bind(/^(data|aria)-[a-z_][a-z\d_.\-]*$/),
	  Properties: {
	    /**
	     * Standard Properties
	     */
	    accept: null,
	    acceptCharset: null,
	    accessKey: null,
	    action: null,
	    allowFullScreen: MUST_USE_ATTRIBUTE | HAS_BOOLEAN_VALUE,
	    allowTransparency: MUST_USE_ATTRIBUTE,
	    alt: null,
	    async: HAS_BOOLEAN_VALUE,
	    autoComplete: null,
	    // autoFocus is polyfilled/normalized by AutoFocusUtils
	    // autoFocus: HAS_BOOLEAN_VALUE,
	    autoPlay: HAS_BOOLEAN_VALUE,
	    capture: MUST_USE_ATTRIBUTE | HAS_BOOLEAN_VALUE,
	    cellPadding: null,
	    cellSpacing: null,
	    charSet: MUST_USE_ATTRIBUTE,
	    challenge: MUST_USE_ATTRIBUTE,
	    checked: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
	    classID: MUST_USE_ATTRIBUTE,
	    // To set className on SVG elements, it's necessary to use .setAttribute;
	    // this works on HTML elements too in all browsers except IE8. Conveniently,
	    // IE8 doesn't support SVG and so we can simply use the attribute in
	    // browsers that support SVG and the property in browsers that don't,
	    // regardless of whether the element is HTML or SVG.
	    className: hasSVG ? MUST_USE_ATTRIBUTE : MUST_USE_PROPERTY,
	    cols: MUST_USE_ATTRIBUTE | HAS_POSITIVE_NUMERIC_VALUE,
	    colSpan: null,
	    content: null,
	    contentEditable: null,
	    contextMenu: MUST_USE_ATTRIBUTE,
	    controls: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
	    coords: null,
	    crossOrigin: null,
	    data: null, // For `<object />` acts as `src`.
	    dateTime: MUST_USE_ATTRIBUTE,
	    defer: HAS_BOOLEAN_VALUE,
	    dir: null,
	    disabled: MUST_USE_ATTRIBUTE | HAS_BOOLEAN_VALUE,
	    download: HAS_OVERLOADED_BOOLEAN_VALUE,
	    draggable: null,
	    encType: null,
	    form: MUST_USE_ATTRIBUTE,
	    formAction: MUST_USE_ATTRIBUTE,
	    formEncType: MUST_USE_ATTRIBUTE,
	    formMethod: MUST_USE_ATTRIBUTE,
	    formNoValidate: HAS_BOOLEAN_VALUE,
	    formTarget: MUST_USE_ATTRIBUTE,
	    frameBorder: MUST_USE_ATTRIBUTE,
	    headers: null,
	    height: MUST_USE_ATTRIBUTE,
	    hidden: MUST_USE_ATTRIBUTE | HAS_BOOLEAN_VALUE,
	    high: null,
	    href: null,
	    hrefLang: null,
	    htmlFor: null,
	    httpEquiv: null,
	    icon: null,
	    id: MUST_USE_PROPERTY,
	    inputMode: MUST_USE_ATTRIBUTE,
	    is: MUST_USE_ATTRIBUTE,
	    keyParams: MUST_USE_ATTRIBUTE,
	    keyType: MUST_USE_ATTRIBUTE,
	    label: null,
	    lang: null,
	    list: MUST_USE_ATTRIBUTE,
	    loop: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
	    low: null,
	    manifest: MUST_USE_ATTRIBUTE,
	    marginHeight: null,
	    marginWidth: null,
	    max: null,
	    maxLength: MUST_USE_ATTRIBUTE,
	    media: MUST_USE_ATTRIBUTE,
	    mediaGroup: null,
	    method: null,
	    min: null,
	    minLength: MUST_USE_ATTRIBUTE,
	    multiple: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
	    muted: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
	    name: null,
	    noValidate: HAS_BOOLEAN_VALUE,
	    open: HAS_BOOLEAN_VALUE,
	    optimum: null,
	    pattern: null,
	    placeholder: null,
	    poster: null,
	    preload: null,
	    radioGroup: null,
	    readOnly: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
	    rel: null,
	    required: HAS_BOOLEAN_VALUE,
	    role: MUST_USE_ATTRIBUTE,
	    rows: MUST_USE_ATTRIBUTE | HAS_POSITIVE_NUMERIC_VALUE,
	    rowSpan: null,
	    sandbox: null,
	    scope: null,
	    scoped: HAS_BOOLEAN_VALUE,
	    scrolling: null,
	    seamless: MUST_USE_ATTRIBUTE | HAS_BOOLEAN_VALUE,
	    selected: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
	    shape: null,
	    size: MUST_USE_ATTRIBUTE | HAS_POSITIVE_NUMERIC_VALUE,
	    sizes: MUST_USE_ATTRIBUTE,
	    span: HAS_POSITIVE_NUMERIC_VALUE,
	    spellCheck: null,
	    src: null,
	    srcDoc: MUST_USE_PROPERTY,
	    srcSet: MUST_USE_ATTRIBUTE,
	    start: HAS_NUMERIC_VALUE,
	    step: null,
	    style: null,
	    summary: null,
	    tabIndex: null,
	    target: null,
	    title: null,
	    type: null,
	    useMap: null,
	    value: MUST_USE_PROPERTY | HAS_SIDE_EFFECTS,
	    width: MUST_USE_ATTRIBUTE,
	    wmode: MUST_USE_ATTRIBUTE,
	    wrap: null,

	    /**
	     * RDFa Properties
	     */
	    about: MUST_USE_ATTRIBUTE,
	    datatype: MUST_USE_ATTRIBUTE,
	    inlist: MUST_USE_ATTRIBUTE,
	    prefix: MUST_USE_ATTRIBUTE,
	    // property is also supported for OpenGraph in meta tags.
	    property: MUST_USE_ATTRIBUTE,
	    resource: MUST_USE_ATTRIBUTE,
	    'typeof': MUST_USE_ATTRIBUTE,
	    vocab: MUST_USE_ATTRIBUTE,

	    /**
	     * Non-standard Properties
	     */
	    // autoCapitalize and autoCorrect are supported in Mobile Safari for
	    // keyboard hints.
	    autoCapitalize: null,
	    autoCorrect: null,
	    // autoSave allows WebKit/Blink to persist values of input fields on page reloads
	    autoSave: null,
	    // itemProp, itemScope, itemType are for
	    // Microdata support. See http://schema.org/docs/gs.html
	    itemProp: MUST_USE_ATTRIBUTE,
	    itemScope: MUST_USE_ATTRIBUTE | HAS_BOOLEAN_VALUE,
	    itemType: MUST_USE_ATTRIBUTE,
	    // itemID and itemRef are for Microdata support as well but
	    // only specified in the the WHATWG spec document. See
	    // https://html.spec.whatwg.org/multipage/microdata.html#microdata-dom-api
	    itemID: MUST_USE_ATTRIBUTE,
	    itemRef: MUST_USE_ATTRIBUTE,
	    // results show looking glass icon and recent searches on input
	    // search fields in WebKit/Blink
	    results: null,
	    // IE-only attribute that specifies security restrictions on an iframe
	    // as an alternative to the sandbox attribute on IE<10
	    security: MUST_USE_ATTRIBUTE,
	    // IE-only attribute that controls focus behavior
	    unselectable: MUST_USE_ATTRIBUTE
	  },
	  DOMAttributeNames: {
	    acceptCharset: 'accept-charset',
	    className: 'class',
	    htmlFor: 'for',
	    httpEquiv: 'http-equiv'
	  },
	  DOMPropertyNames: {
	    autoCapitalize: 'autocapitalize',
	    autoComplete: 'autocomplete',
	    autoCorrect: 'autocorrect',
	    autoFocus: 'autofocus',
	    autoPlay: 'autoplay',
	    autoSave: 'autosave',
	    // `encoding` is equivalent to `enctype`, IE8 lacks an `enctype` setter.
	    // http://www.w3.org/TR/html5/forms.html#dom-fs-encoding
	    encType: 'encoding',
	    hrefLang: 'hreflang',
	    radioGroup: 'radiogroup',
	    spellCheck: 'spellcheck',
	    srcDoc: 'srcdoc',
	    srcSet: 'srcset'
	  }
	};

	module.exports = HTMLDOMPropertyConfig;

/***/ },
/* 93 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactBrowserComponentMixin
	 */

	'use strict';

	var ReactInstanceMap = __webpack_require__(50);

	var findDOMNode = __webpack_require__(94);
	var warning = __webpack_require__(29);

	var didWarnKey = '_getDOMNodeDidWarn';

	var ReactBrowserComponentMixin = {
	  /**
	   * Returns the DOM node rendered by this component.
	   *
	   * @return {DOMElement} The root node of this component.
	   * @final
	   * @protected
	   */
	  getDOMNode: function () {
	    process.env.NODE_ENV !== 'production' ? warning(this.constructor[didWarnKey], '%s.getDOMNode(...) is deprecated. Please use ' + 'ReactDOM.findDOMNode(instance) instead.', ReactInstanceMap.get(this).getName() || this.tagName || 'Unknown') : undefined;
	    this.constructor[didWarnKey] = true;
	    return findDOMNode(this);
	  }
	};

	module.exports = ReactBrowserComponentMixin;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(8)))

/***/ },
/* 94 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule findDOMNode
	 * @typechecks static-only
	 */

	'use strict';

	var ReactCurrentOwner = __webpack_require__(9);
	var ReactInstanceMap = __webpack_require__(50);
	var ReactMount = __webpack_require__(32);

	var invariant = __webpack_require__(17);
	var warning = __webpack_require__(29);

	/**
	 * Returns the DOM node rendered by this element.
	 *
	 * @param {ReactComponent|DOMElement} componentOrElement
	 * @return {?DOMElement} The root node of this element.
	 */
	function findDOMNode(componentOrElement) {
	  if (process.env.NODE_ENV !== 'production') {
	    var owner = ReactCurrentOwner.current;
	    if (owner !== null) {
	      process.env.NODE_ENV !== 'production' ? warning(owner._warnedAboutRefsInRender, '%s is accessing getDOMNode or findDOMNode inside its render(). ' + 'render() should be a pure function of props and state. It should ' + 'never access something that requires stale data from the previous ' + 'render, such as refs. Move this logic to componentDidMount and ' + 'componentDidUpdate instead.', owner.getName() || 'A component') : undefined;
	      owner._warnedAboutRefsInRender = true;
	    }
	  }
	  if (componentOrElement == null) {
	    return null;
	  }
	  if (componentOrElement.nodeType === 1) {
	    return componentOrElement;
	  }
	  if (ReactInstanceMap.has(componentOrElement)) {
	    return ReactMount.getNodeFromInstance(componentOrElement);
	  }
	  !(componentOrElement.render == null || typeof componentOrElement.render !== 'function') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'findDOMNode was called on an unmounted component.') : invariant(false) : undefined;
	   true ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Element appears to be neither ReactComponent nor DOMNode (keys: %s)', Object.keys(componentOrElement)) : invariant(false) : undefined;
	}

	module.exports = findDOMNode;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(8)))

/***/ },
/* 95 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDefaultBatchingStrategy
	 */

	'use strict';

	var ReactUpdates = __webpack_require__(57);
	var Transaction = __webpack_require__(60);

	var assign = __webpack_require__(43);
	var emptyFunction = __webpack_require__(19);

	var RESET_BATCHED_UPDATES = {
	  initialize: emptyFunction,
	  close: function () {
	    ReactDefaultBatchingStrategy.isBatchingUpdates = false;
	  }
	};

	var FLUSH_BATCHED_UPDATES = {
	  initialize: emptyFunction,
	  close: ReactUpdates.flushBatchedUpdates.bind(ReactUpdates)
	};

	var TRANSACTION_WRAPPERS = [FLUSH_BATCHED_UPDATES, RESET_BATCHED_UPDATES];

	function ReactDefaultBatchingStrategyTransaction() {
	  this.reinitializeTransaction();
	}

	assign(ReactDefaultBatchingStrategyTransaction.prototype, Transaction.Mixin, {
	  getTransactionWrappers: function () {
	    return TRANSACTION_WRAPPERS;
	  }
	});

	var transaction = new ReactDefaultBatchingStrategyTransaction();

	var ReactDefaultBatchingStrategy = {
	  isBatchingUpdates: false,

	  /**
	   * Call the provided function in a context within which calls to `setState`
	   * and friends are batched such that components aren't updated unnecessarily.
	   */
	  batchedUpdates: function (callback, a, b, c, d, e) {
	    var alreadyBatchingUpdates = ReactDefaultBatchingStrategy.isBatchingUpdates;

	    ReactDefaultBatchingStrategy.isBatchingUpdates = true;

	    // The code is written this way to avoid extra allocations
	    if (alreadyBatchingUpdates) {
	      callback(a, b, c, d, e);
	    } else {
	      transaction.perform(callback, null, a, b, c, d, e);
	    }
	  }
	};

	module.exports = ReactDefaultBatchingStrategy;

/***/ },
/* 96 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDOMComponent
	 * @typechecks static-only
	 */

	/* global hasOwnProperty:true */

	'use strict';

	var AutoFocusUtils = __webpack_require__(97);
	var CSSPropertyOperations = __webpack_require__(99);
	var DOMProperty = __webpack_require__(27);
	var DOMPropertyOperations = __webpack_require__(26);
	var EventConstants = __webpack_require__(34);
	var ReactBrowserEventEmitter = __webpack_require__(33);
	var ReactComponentBrowserEnvironment = __webpack_require__(30);
	var ReactDOMButton = __webpack_require__(107);
	var ReactDOMInput = __webpack_require__(108);
	var ReactDOMOption = __webpack_require__(112);
	var ReactDOMSelect = __webpack_require__(115);
	var ReactDOMTextarea = __webpack_require__(116);
	var ReactMount = __webpack_require__(32);
	var ReactMultiChild = __webpack_require__(117);
	var ReactPerf = __webpack_require__(22);
	var ReactUpdateQueue = __webpack_require__(56);

	var assign = __webpack_require__(43);
	var escapeTextContentForBrowser = __webpack_require__(25);
	var invariant = __webpack_require__(17);
	var isEventSupported = __webpack_require__(44);
	var keyOf = __webpack_require__(82);
	var setInnerHTML = __webpack_require__(23);
	var setTextContent = __webpack_require__(24);
	var shallowEqual = __webpack_require__(120);
	var validateDOMNesting = __webpack_require__(73);
	var warning = __webpack_require__(29);

	var deleteListener = ReactBrowserEventEmitter.deleteListener;
	var listenTo = ReactBrowserEventEmitter.listenTo;
	var registrationNameModules = ReactBrowserEventEmitter.registrationNameModules;

	// For quickly matching children type, to test if can be treated as content.
	var CONTENT_TYPES = { 'string': true, 'number': true };

	var STYLE = keyOf({ style: null });

	var ELEMENT_NODE_TYPE = 1;

	var canDefineProperty = false;
	try {
	  Object.defineProperty({}, 'test', { get: function () {} });
	  canDefineProperty = true;
	} catch (e) {}

	function getDeclarationErrorAddendum(internalInstance) {
	  if (internalInstance) {
	    var owner = internalInstance._currentElement._owner || null;
	    if (owner) {
	      var name = owner.getName();
	      if (name) {
	        return ' This DOM node was rendered by `' + name + '`.';
	      }
	    }
	  }
	  return '';
	}

	var legacyPropsDescriptor;
	if (process.env.NODE_ENV !== 'production') {
	  legacyPropsDescriptor = {
	    props: {
	      enumerable: false,
	      get: function () {
	        var component = this._reactInternalComponent;
	        process.env.NODE_ENV !== 'production' ? warning(false, 'ReactDOMComponent: Do not access .props of a DOM node; instead, ' + 'recreate the props as `render` did originally or read the DOM ' + 'properties/attributes directly from this node (e.g., ' + 'this.refs.box.className).%s', getDeclarationErrorAddendum(component)) : undefined;
	        return component._currentElement.props;
	      }
	    }
	  };
	}

	function legacyGetDOMNode() {
	  if (process.env.NODE_ENV !== 'production') {
	    var component = this._reactInternalComponent;
	    process.env.NODE_ENV !== 'production' ? warning(false, 'ReactDOMComponent: Do not access .getDOMNode() of a DOM node; ' + 'instead, use the node directly.%s', getDeclarationErrorAddendum(component)) : undefined;
	  }
	  return this;
	}

	function legacyIsMounted() {
	  var component = this._reactInternalComponent;
	  if (process.env.NODE_ENV !== 'production') {
	    process.env.NODE_ENV !== 'production' ? warning(false, 'ReactDOMComponent: Do not access .isMounted() of a DOM node.%s', getDeclarationErrorAddendum(component)) : undefined;
	  }
	  return !!component;
	}

	function legacySetStateEtc() {
	  if (process.env.NODE_ENV !== 'production') {
	    var component = this._reactInternalComponent;
	    process.env.NODE_ENV !== 'production' ? warning(false, 'ReactDOMComponent: Do not access .setState(), .replaceState(), or ' + '.forceUpdate() of a DOM node. This is a no-op.%s', getDeclarationErrorAddendum(component)) : undefined;
	  }
	}

	function legacySetProps(partialProps, callback) {
	  var component = this._reactInternalComponent;
	  if (process.env.NODE_ENV !== 'production') {
	    process.env.NODE_ENV !== 'production' ? warning(false, 'ReactDOMComponent: Do not access .setProps() of a DOM node. ' + 'Instead, call ReactDOM.render again at the top level.%s', getDeclarationErrorAddendum(component)) : undefined;
	  }
	  if (!component) {
	    return;
	  }
	  ReactUpdateQueue.enqueueSetPropsInternal(component, partialProps);
	  if (callback) {
	    ReactUpdateQueue.enqueueCallbackInternal(component, callback);
	  }
	}

	function legacyReplaceProps(partialProps, callback) {
	  var component = this._reactInternalComponent;
	  if (process.env.NODE_ENV !== 'production') {
	    process.env.NODE_ENV !== 'production' ? warning(false, 'ReactDOMComponent: Do not access .replaceProps() of a DOM node. ' + 'Instead, call ReactDOM.render again at the top level.%s', getDeclarationErrorAddendum(component)) : undefined;
	  }
	  if (!component) {
	    return;
	  }
	  ReactUpdateQueue.enqueueReplacePropsInternal(component, partialProps);
	  if (callback) {
	    ReactUpdateQueue.enqueueCallbackInternal(component, callback);
	  }
	}

	function friendlyStringify(obj) {
	  if (typeof obj === 'object') {
	    if (Array.isArray(obj)) {
	      return '[' + obj.map(friendlyStringify).join(', ') + ']';
	    } else {
	      var pairs = [];
	      for (var key in obj) {
	        if (Object.prototype.hasOwnProperty.call(obj, key)) {
	          var keyEscaped = /^[a-z$_][\w$_]*$/i.test(key) ? key : JSON.stringify(key);
	          pairs.push(keyEscaped + ': ' + friendlyStringify(obj[key]));
	        }
	      }
	      return '{' + pairs.join(', ') + '}';
	    }
	  } else if (typeof obj === 'string') {
	    return JSON.stringify(obj);
	  } else if (typeof obj === 'function') {
	    return '[function object]';
	  }
	  // Differs from JSON.stringify in that undefined becauses undefined and that
	  // inf and nan don't become null
	  return String(obj);
	}

	var styleMutationWarning = {};

	function checkAndWarnForMutatedStyle(style1, style2, component) {
	  if (style1 == null || style2 == null) {
	    return;
	  }
	  if (shallowEqual(style1, style2)) {
	    return;
	  }

	  var componentName = component._tag;
	  var owner = component._currentElement._owner;
	  var ownerName;
	  if (owner) {
	    ownerName = owner.getName();
	  }

	  var hash = ownerName + '|' + componentName;

	  if (styleMutationWarning.hasOwnProperty(hash)) {
	    return;
	  }

	  styleMutationWarning[hash] = true;

	  process.env.NODE_ENV !== 'production' ? warning(false, '`%s` was passed a style object that has previously been mutated. ' + 'Mutating `style` is deprecated. Consider cloning it beforehand. Check ' + 'the `render` %s. Previous style: %s. Mutated style: %s.', componentName, owner ? 'of `' + ownerName + '`' : 'using <' + componentName + '>', friendlyStringify(style1), friendlyStringify(style2)) : undefined;
	}

	/**
	 * @param {object} component
	 * @param {?object} props
	 */
	function assertValidProps(component, props) {
	  if (!props) {
	    return;
	  }
	  // Note the use of `==` which checks for null or undefined.
	  if (process.env.NODE_ENV !== 'production') {
	    if (voidElementTags[component._tag]) {
	      process.env.NODE_ENV !== 'production' ? warning(props.children == null && props.dangerouslySetInnerHTML == null, '%s is a void element tag and must not have `children` or ' + 'use `props.dangerouslySetInnerHTML`.%s', component._tag, component._currentElement._owner ? ' Check the render method of ' + component._currentElement._owner.getName() + '.' : '') : undefined;
	    }
	  }
	  if (props.dangerouslySetInnerHTML != null) {
	    !(props.children == null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Can only set one of `children` or `props.dangerouslySetInnerHTML`.') : invariant(false) : undefined;
	    !(typeof props.dangerouslySetInnerHTML === 'object' && '__html' in props.dangerouslySetInnerHTML) ? process.env.NODE_ENV !== 'production' ? invariant(false, '`props.dangerouslySetInnerHTML` must be in the form `{__html: ...}`. ' + 'Please visit https://fb.me/react-invariant-dangerously-set-inner-html ' + 'for more information.') : invariant(false) : undefined;
	  }
	  if (process.env.NODE_ENV !== 'production') {
	    process.env.NODE_ENV !== 'production' ? warning(props.innerHTML == null, 'Directly setting property `innerHTML` is not permitted. ' + 'For more information, lookup documentation on `dangerouslySetInnerHTML`.') : undefined;
	    process.env.NODE_ENV !== 'production' ? warning(!props.contentEditable || props.children == null, 'A component is `contentEditable` and contains `children` managed by ' + 'React. It is now your responsibility to guarantee that none of ' + 'those nodes are unexpectedly modified or duplicated. This is ' + 'probably not intentional.') : undefined;
	  }
	  !(props.style == null || typeof props.style === 'object') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'The `style` prop expects a mapping from style properties to values, ' + 'not a string. For example, style={{marginRight: spacing + \'em\'}} when ' + 'using JSX.%s', getDeclarationErrorAddendum(component)) : invariant(false) : undefined;
	}

	function enqueuePutListener(id, registrationName, listener, transaction) {
	  if (process.env.NODE_ENV !== 'production') {
	    // IE8 has no API for event capturing and the `onScroll` event doesn't
	    // bubble.
	    process.env.NODE_ENV !== 'production' ? warning(registrationName !== 'onScroll' || isEventSupported('scroll', true), 'This browser doesn\'t support the `onScroll` event') : undefined;
	  }
	  var container = ReactMount.findReactContainerForID(id);
	  if (container) {
	    var doc = container.nodeType === ELEMENT_NODE_TYPE ? container.ownerDocument : container;
	    listenTo(registrationName, doc);
	  }
	  transaction.getReactMountReady().enqueue(putListener, {
	    id: id,
	    registrationName: registrationName,
	    listener: listener
	  });
	}

	function putListener() {
	  var listenerToPut = this;
	  ReactBrowserEventEmitter.putListener(listenerToPut.id, listenerToPut.registrationName, listenerToPut.listener);
	}

	// There are so many media events, it makes sense to just
	// maintain a list rather than create a `trapBubbledEvent` for each
	var mediaEvents = {
	  topAbort: 'abort',
	  topCanPlay: 'canplay',
	  topCanPlayThrough: 'canplaythrough',
	  topDurationChange: 'durationchange',
	  topEmptied: 'emptied',
	  topEncrypted: 'encrypted',
	  topEnded: 'ended',
	  topError: 'error',
	  topLoadedData: 'loadeddata',
	  topLoadedMetadata: 'loadedmetadata',
	  topLoadStart: 'loadstart',
	  topPause: 'pause',
	  topPlay: 'play',
	  topPlaying: 'playing',
	  topProgress: 'progress',
	  topRateChange: 'ratechange',
	  topSeeked: 'seeked',
	  topSeeking: 'seeking',
	  topStalled: 'stalled',
	  topSuspend: 'suspend',
	  topTimeUpdate: 'timeupdate',
	  topVolumeChange: 'volumechange',
	  topWaiting: 'waiting'
	};

	function trapBubbledEventsLocal() {
	  var inst = this;
	  // If a component renders to null or if another component fatals and causes
	  // the state of the tree to be corrupted, `node` here can be null.
	  !inst._rootNodeID ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Must be mounted to trap events') : invariant(false) : undefined;
	  var node = ReactMount.getNode(inst._rootNodeID);
	  !node ? process.env.NODE_ENV !== 'production' ? invariant(false, 'trapBubbledEvent(...): Requires node to be rendered.') : invariant(false) : undefined;

	  switch (inst._tag) {
	    case 'iframe':
	      inst._wrapperState.listeners = [ReactBrowserEventEmitter.trapBubbledEvent(EventConstants.topLevelTypes.topLoad, 'load', node)];
	      break;
	    case 'video':
	    case 'audio':

	      inst._wrapperState.listeners = [];
	      // create listener for each media event
	      for (var event in mediaEvents) {
	        if (mediaEvents.hasOwnProperty(event)) {
	          inst._wrapperState.listeners.push(ReactBrowserEventEmitter.trapBubbledEvent(EventConstants.topLevelTypes[event], mediaEvents[event], node));
	        }
	      }

	      break;
	    case 'img':
	      inst._wrapperState.listeners = [ReactBrowserEventEmitter.trapBubbledEvent(EventConstants.topLevelTypes.topError, 'error', node), ReactBrowserEventEmitter.trapBubbledEvent(EventConstants.topLevelTypes.topLoad, 'load', node)];
	      break;
	    case 'form':
	      inst._wrapperState.listeners = [ReactBrowserEventEmitter.trapBubbledEvent(EventConstants.topLevelTypes.topReset, 'reset', node), ReactBrowserEventEmitter.trapBubbledEvent(EventConstants.topLevelTypes.topSubmit, 'submit', node)];
	      break;
	  }
	}

	function mountReadyInputWrapper() {
	  ReactDOMInput.mountReadyWrapper(this);
	}

	function postUpdateSelectWrapper() {
	  ReactDOMSelect.postUpdateWrapper(this);
	}

	// For HTML, certain tags should omit their close tag. We keep a whitelist for
	// those special cased tags.

	var omittedCloseTags = {
	  'area': true,
	  'base': true,
	  'br': true,
	  'col': true,
	  'embed': true,
	  'hr': true,
	  'img': true,
	  'input': true,
	  'keygen': true,
	  'link': true,
	  'meta': true,
	  'param': true,
	  'source': true,
	  'track': true,
	  'wbr': true
	};

	// NOTE: menuitem's close tag should be omitted, but that causes problems.
	var newlineEatingTags = {
	  'listing': true,
	  'pre': true,
	  'textarea': true
	};

	// For HTML, certain tags cannot have children. This has the same purpose as
	// `omittedCloseTags` except that `menuitem` should still have its closing tag.

	var voidElementTags = assign({
	  'menuitem': true
	}, omittedCloseTags);

	// We accept any tag to be rendered but since this gets injected into arbitrary
	// HTML, we want to make sure that it's a safe tag.
	// http://www.w3.org/TR/REC-xml/#NT-Name

	var VALID_TAG_REGEX = /^[a-zA-Z][a-zA-Z:_\.\-\d]*$/; // Simplified subset
	var validatedTagCache = {};
	var hasOwnProperty = ({}).hasOwnProperty;

	function validateDangerousTag(tag) {
	  if (!hasOwnProperty.call(validatedTagCache, tag)) {
	    !VALID_TAG_REGEX.test(tag) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Invalid tag: %s', tag) : invariant(false) : undefined;
	    validatedTagCache[tag] = true;
	  }
	}

	function processChildContextDev(context, inst) {
	  // Pass down our tag name to child components for validation purposes
	  context = assign({}, context);
	  var info = context[validateDOMNesting.ancestorInfoContextKey];
	  context[validateDOMNesting.ancestorInfoContextKey] = validateDOMNesting.updatedAncestorInfo(info, inst._tag, inst);
	  return context;
	}

	function isCustomComponent(tagName, props) {
	  return tagName.indexOf('-') >= 0 || props.is != null;
	}

	/**
	 * Creates a new React class that is idempotent and capable of containing other
	 * React components. It accepts event listeners and DOM properties that are
	 * valid according to `DOMProperty`.
	 *
	 *  - Event listeners: `onClick`, `onMouseDown`, etc.
	 *  - DOM properties: `className`, `name`, `title`, etc.
	 *
	 * The `style` property functions differently from the DOM API. It accepts an
	 * object mapping of style properties to values.
	 *
	 * @constructor ReactDOMComponent
	 * @extends ReactMultiChild
	 */
	function ReactDOMComponent(tag) {
	  validateDangerousTag(tag);
	  this._tag = tag.toLowerCase();
	  this._renderedChildren = null;
	  this._previousStyle = null;
	  this._previousStyleCopy = null;
	  this._rootNodeID = null;
	  this._wrapperState = null;
	  this._topLevelWrapper = null;
	  this._nodeWithLegacyProperties = null;
	  if (process.env.NODE_ENV !== 'production') {
	    this._unprocessedContextDev = null;
	    this._processedContextDev = null;
	  }
	}

	ReactDOMComponent.displayName = 'ReactDOMComponent';

	ReactDOMComponent.Mixin = {

	  construct: function (element) {
	    this._currentElement = element;
	  },

	  /**
	   * Generates root tag markup then recurses. This method has side effects and
	   * is not idempotent.
	   *
	   * @internal
	   * @param {string} rootID The root DOM ID for this node.
	   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
	   * @param {object} context
	   * @return {string} The computed markup.
	   */
	  mountComponent: function (rootID, transaction, context) {
	    this._rootNodeID = rootID;

	    var props = this._currentElement.props;

	    switch (this._tag) {
	      case 'iframe':
	      case 'img':
	      case 'form':
	      case 'video':
	      case 'audio':
	        this._wrapperState = {
	          listeners: null
	        };
	        transaction.getReactMountReady().enqueue(trapBubbledEventsLocal, this);
	        break;
	      case 'button':
	        props = ReactDOMButton.getNativeProps(this, props, context);
	        break;
	      case 'input':
	        ReactDOMInput.mountWrapper(this, props, context);
	        props = ReactDOMInput.getNativeProps(this, props, context);
	        break;
	      case 'option':
	        ReactDOMOption.mountWrapper(this, props, context);
	        props = ReactDOMOption.getNativeProps(this, props, context);
	        break;
	      case 'select':
	        ReactDOMSelect.mountWrapper(this, props, context);
	        props = ReactDOMSelect.getNativeProps(this, props, context);
	        context = ReactDOMSelect.processChildContext(this, props, context);
	        break;
	      case 'textarea':
	        ReactDOMTextarea.mountWrapper(this, props, context);
	        props = ReactDOMTextarea.getNativeProps(this, props, context);
	        break;
	    }

	    assertValidProps(this, props);
	    if (process.env.NODE_ENV !== 'production') {
	      if (context[validateDOMNesting.ancestorInfoContextKey]) {
	        validateDOMNesting(this._tag, this, context[validateDOMNesting.ancestorInfoContextKey]);
	      }
	    }

	    if (process.env.NODE_ENV !== 'production') {
	      this._unprocessedContextDev = context;
	      this._processedContextDev = processChildContextDev(context, this);
	      context = this._processedContextDev;
	    }

	    var mountImage;
	    if (transaction.useCreateElement) {
	      var ownerDocument = context[ReactMount.ownerDocumentContextKey];
	      var el = ownerDocument.createElement(this._currentElement.type);
	      DOMPropertyOperations.setAttributeForID(el, this._rootNodeID);
	      // Populate node cache
	      ReactMount.getID(el);
	      this._updateDOMProperties({}, props, transaction, el);
	      this._createInitialChildren(transaction, props, context, el);
	      mountImage = el;
	    } else {
	      var tagOpen = this._createOpenTagMarkupAndPutListeners(transaction, props);
	      var tagContent = this._createContentMarkup(transaction, props, context);
	      if (!tagContent && omittedCloseTags[this._tag]) {
	        mountImage = tagOpen + '/>';
	      } else {
	        mountImage = tagOpen + '>' + tagContent + '</' + this._currentElement.type + '>';
	      }
	    }

	    switch (this._tag) {
	      case 'input':
	        transaction.getReactMountReady().enqueue(mountReadyInputWrapper, this);
	      // falls through
	      case 'button':
	      case 'select':
	      case 'textarea':
	        if (props.autoFocus) {
	          transaction.getReactMountReady().enqueue(AutoFocusUtils.focusDOMComponent, this);
	        }
	        break;
	    }

	    return mountImage;
	  },

	  /**
	   * Creates markup for the open tag and all attributes.
	   *
	   * This method has side effects because events get registered.
	   *
	   * Iterating over object properties is faster than iterating over arrays.
	   * @see http://jsperf.com/obj-vs-arr-iteration
	   *
	   * @private
	   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
	   * @param {object} props
	   * @return {string} Markup of opening tag.
	   */
	  _createOpenTagMarkupAndPutListeners: function (transaction, props) {
	    var ret = '<' + this._currentElement.type;

	    for (var propKey in props) {
	      if (!props.hasOwnProperty(propKey)) {
	        continue;
	      }
	      var propValue = props[propKey];
	      if (propValue == null) {
	        continue;
	      }
	      if (registrationNameModules.hasOwnProperty(propKey)) {
	        if (propValue) {
	          enqueuePutListener(this._rootNodeID, propKey, propValue, transaction);
	        }
	      } else {
	        if (propKey === STYLE) {
	          if (propValue) {
	            if (process.env.NODE_ENV !== 'production') {
	              // See `_updateDOMProperties`. style block
	              this._previousStyle = propValue;
	            }
	            propValue = this._previousStyleCopy = assign({}, props.style);
	          }
	          propValue = CSSPropertyOperations.createMarkupForStyles(propValue);
	        }
	        var markup = null;
	        if (this._tag != null && isCustomComponent(this._tag, props)) {
	          markup = DOMPropertyOperations.createMarkupForCustomAttribute(propKey, propValue);
	        } else {
	          markup = DOMPropertyOperations.createMarkupForProperty(propKey, propValue);
	        }
	        if (markup) {
	          ret += ' ' + markup;
	        }
	      }
	    }

	    // For static pages, no need to put React ID and checksum. Saves lots of
	    // bytes.
	    if (transaction.renderToStaticMarkup) {
	      return ret;
	    }

	    var markupForID = DOMPropertyOperations.createMarkupForID(this._rootNodeID);
	    return ret + ' ' + markupForID;
	  },

	  /**
	   * Creates markup for the content between the tags.
	   *
	   * @private
	   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
	   * @param {object} props
	   * @param {object} context
	   * @return {string} Content markup.
	   */
	  _createContentMarkup: function (transaction, props, context) {
	    var ret = '';

	    // Intentional use of != to avoid catching zero/false.
	    var innerHTML = props.dangerouslySetInnerHTML;
	    if (innerHTML != null) {
	      if (innerHTML.__html != null) {
	        ret = innerHTML.__html;
	      }
	    } else {
	      var contentToUse = CONTENT_TYPES[typeof props.children] ? props.children : null;
	      var childrenToUse = contentToUse != null ? null : props.children;
	      if (contentToUse != null) {
	        // TODO: Validate that text is allowed as a child of this node
	        ret = escapeTextContentForBrowser(contentToUse);
	      } else if (childrenToUse != null) {
	        var mountImages = this.mountChildren(childrenToUse, transaction, context);
	        ret = mountImages.join('');
	      }
	    }
	    if (newlineEatingTags[this._tag] && ret.charAt(0) === '\n') {
	      // text/html ignores the first character in these tags if it's a newline
	      // Prefer to break application/xml over text/html (for now) by adding
	      // a newline specifically to get eaten by the parser. (Alternately for
	      // textareas, replacing "^\n" with "\r\n" doesn't get eaten, and the first
	      // \r is normalized out by HTMLTextAreaElement#value.)
	      // See: <http://www.w3.org/TR/html-polyglot/#newlines-in-textarea-and-pre>
	      // See: <http://www.w3.org/TR/html5/syntax.html#element-restrictions>
	      // See: <http://www.w3.org/TR/html5/syntax.html#newlines>
	      // See: Parsing of "textarea" "listing" and "pre" elements
	      //  from <http://www.w3.org/TR/html5/syntax.html#parsing-main-inbody>
	      return '\n' + ret;
	    } else {
	      return ret;
	    }
	  },

	  _createInitialChildren: function (transaction, props, context, el) {
	    // Intentional use of != to avoid catching zero/false.
	    var innerHTML = props.dangerouslySetInnerHTML;
	    if (innerHTML != null) {
	      if (innerHTML.__html != null) {
	        setInnerHTML(el, innerHTML.__html);
	      }
	    } else {
	      var contentToUse = CONTENT_TYPES[typeof props.children] ? props.children : null;
	      var childrenToUse = contentToUse != null ? null : props.children;
	      if (contentToUse != null) {
	        // TODO: Validate that text is allowed as a child of this node
	        setTextContent(el, contentToUse);
	      } else if (childrenToUse != null) {
	        var mountImages = this.mountChildren(childrenToUse, transaction, context);
	        for (var i = 0; i < mountImages.length; i++) {
	          el.appendChild(mountImages[i]);
	        }
	      }
	    }
	  },

	  /**
	   * Receives a next element and updates the component.
	   *
	   * @internal
	   * @param {ReactElement} nextElement
	   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
	   * @param {object} context
	   */
	  receiveComponent: function (nextElement, transaction, context) {
	    var prevElement = this._currentElement;
	    this._currentElement = nextElement;
	    this.updateComponent(transaction, prevElement, nextElement, context);
	  },

	  /**
	   * Updates a native DOM component after it has already been allocated and
	   * attached to the DOM. Reconciles the root DOM node, then recurses.
	   *
	   * @param {ReactReconcileTransaction} transaction
	   * @param {ReactElement} prevElement
	   * @param {ReactElement} nextElement
	   * @internal
	   * @overridable
	   */
	  updateComponent: function (transaction, prevElement, nextElement, context) {
	    var lastProps = prevElement.props;
	    var nextProps = this._currentElement.props;

	    switch (this._tag) {
	      case 'button':
	        lastProps = ReactDOMButton.getNativeProps(this, lastProps);
	        nextProps = ReactDOMButton.getNativeProps(this, nextProps);
	        break;
	      case 'input':
	        ReactDOMInput.updateWrapper(this);
	        lastProps = ReactDOMInput.getNativeProps(this, lastProps);
	        nextProps = ReactDOMInput.getNativeProps(this, nextProps);
	        break;
	      case 'option':
	        lastProps = ReactDOMOption.getNativeProps(this, lastProps);
	        nextProps = ReactDOMOption.getNativeProps(this, nextProps);
	        break;
	      case 'select':
	        lastProps = ReactDOMSelect.getNativeProps(this, lastProps);
	        nextProps = ReactDOMSelect.getNativeProps(this, nextProps);
	        break;
	      case 'textarea':
	        ReactDOMTextarea.updateWrapper(this);
	        lastProps = ReactDOMTextarea.getNativeProps(this, lastProps);
	        nextProps = ReactDOMTextarea.getNativeProps(this, nextProps);
	        break;
	    }

	    if (process.env.NODE_ENV !== 'production') {
	      // If the context is reference-equal to the old one, pass down the same
	      // processed object so the update bailout in ReactReconciler behaves
	      // correctly (and identically in dev and prod). See #5005.
	      if (this._unprocessedContextDev !== context) {
	        this._unprocessedContextDev = context;
	        this._processedContextDev = processChildContextDev(context, this);
	      }
	      context = this._processedContextDev;
	    }

	    assertValidProps(this, nextProps);
	    this._updateDOMProperties(lastProps, nextProps, transaction, null);
	    this._updateDOMChildren(lastProps, nextProps, transaction, context);

	    if (!canDefineProperty && this._nodeWithLegacyProperties) {
	      this._nodeWithLegacyProperties.props = nextProps;
	    }

	    if (this._tag === 'select') {
	      // <select> value update needs to occur after <option> children
	      // reconciliation
	      transaction.getReactMountReady().enqueue(postUpdateSelectWrapper, this);
	    }
	  },

	  /**
	   * Reconciles the properties by detecting differences in property values and
	   * updating the DOM as necessary. This function is probably the single most
	   * critical path for performance optimization.
	   *
	   * TODO: Benchmark whether checking for changed values in memory actually
	   *       improves performance (especially statically positioned elements).
	   * TODO: Benchmark the effects of putting this at the top since 99% of props
	   *       do not change for a given reconciliation.
	   * TODO: Benchmark areas that can be improved with caching.
	   *
	   * @private
	   * @param {object} lastProps
	   * @param {object} nextProps
	   * @param {ReactReconcileTransaction} transaction
	   * @param {?DOMElement} node
	   */
	  _updateDOMProperties: function (lastProps, nextProps, transaction, node) {
	    var propKey;
	    var styleName;
	    var styleUpdates;
	    for (propKey in lastProps) {
	      if (nextProps.hasOwnProperty(propKey) || !lastProps.hasOwnProperty(propKey)) {
	        continue;
	      }
	      if (propKey === STYLE) {
	        var lastStyle = this._previousStyleCopy;
	        for (styleName in lastStyle) {
	          if (lastStyle.hasOwnProperty(styleName)) {
	            styleUpdates = styleUpdates || {};
	            styleUpdates[styleName] = '';
	          }
	        }
	        this._previousStyleCopy = null;
	      } else if (registrationNameModules.hasOwnProperty(propKey)) {
	        if (lastProps[propKey]) {
	          // Only call deleteListener if there was a listener previously or
	          // else willDeleteListener gets called when there wasn't actually a
	          // listener (e.g., onClick={null})
	          deleteListener(this._rootNodeID, propKey);
	        }
	      } else if (DOMProperty.properties[propKey] || DOMProperty.isCustomAttribute(propKey)) {
	        if (!node) {
	          node = ReactMount.getNode(this._rootNodeID);
	        }
	        DOMPropertyOperations.deleteValueForProperty(node, propKey);
	      }
	    }
	    for (propKey in nextProps) {
	      var nextProp = nextProps[propKey];
	      var lastProp = propKey === STYLE ? this._previousStyleCopy : lastProps[propKey];
	      if (!nextProps.hasOwnProperty(propKey) || nextProp === lastProp) {
	        continue;
	      }
	      if (propKey === STYLE) {
	        if (nextProp) {
	          if (process.env.NODE_ENV !== 'production') {
	            checkAndWarnForMutatedStyle(this._previousStyleCopy, this._previousStyle, this);
	            this._previousStyle = nextProp;
	          }
	          nextProp = this._previousStyleCopy = assign({}, nextProp);
	        } else {
	          this._previousStyleCopy = null;
	        }
	        if (lastProp) {
	          // Unset styles on `lastProp` but not on `nextProp`.
	          for (styleName in lastProp) {
	            if (lastProp.hasOwnProperty(styleName) && (!nextProp || !nextProp.hasOwnProperty(styleName))) {
	              styleUpdates = styleUpdates || {};
	              styleUpdates[styleName] = '';
	            }
	          }
	          // Update styles that changed since `lastProp`.
	          for (styleName in nextProp) {
	            if (nextProp.hasOwnProperty(styleName) && lastProp[styleName] !== nextProp[styleName]) {
	              styleUpdates = styleUpdates || {};
	              styleUpdates[styleName] = nextProp[styleName];
	            }
	          }
	        } else {
	          // Relies on `updateStylesByID` not mutating `styleUpdates`.
	          styleUpdates = nextProp;
	        }
	      } else if (registrationNameModules.hasOwnProperty(propKey)) {
	        if (nextProp) {
	          enqueuePutListener(this._rootNodeID, propKey, nextProp, transaction);
	        } else if (lastProp) {
	          deleteListener(this._rootNodeID, propKey);
	        }
	      } else if (isCustomComponent(this._tag, nextProps)) {
	        if (!node) {
	          node = ReactMount.getNode(this._rootNodeID);
	        }
	        DOMPropertyOperations.setValueForAttribute(node, propKey, nextProp);
	      } else if (DOMProperty.properties[propKey] || DOMProperty.isCustomAttribute(propKey)) {
	        if (!node) {
	          node = ReactMount.getNode(this._rootNodeID);
	        }
	        // If we're updating to null or undefined, we should remove the property
	        // from the DOM node instead of inadvertantly setting to a string. This
	        // brings us in line with the same behavior we have on initial render.
	        if (nextProp != null) {
	          DOMPropertyOperations.setValueForProperty(node, propKey, nextProp);
	        } else {
	          DOMPropertyOperations.deleteValueForProperty(node, propKey);
	        }
	      }
	    }
	    if (styleUpdates) {
	      if (!node) {
	        node = ReactMount.getNode(this._rootNodeID);
	      }
	      CSSPropertyOperations.setValueForStyles(node, styleUpdates);
	    }
	  },

	  /**
	   * Reconciles the children with the various properties that affect the
	   * children content.
	   *
	   * @param {object} lastProps
	   * @param {object} nextProps
	   * @param {ReactReconcileTransaction} transaction
	   * @param {object} context
	   */
	  _updateDOMChildren: function (lastProps, nextProps, transaction, context) {
	    var lastContent = CONTENT_TYPES[typeof lastProps.children] ? lastProps.children : null;
	    var nextContent = CONTENT_TYPES[typeof nextProps.children] ? nextProps.children : null;

	    var lastHtml = lastProps.dangerouslySetInnerHTML && lastProps.dangerouslySetInnerHTML.__html;
	    var nextHtml = nextProps.dangerouslySetInnerHTML && nextProps.dangerouslySetInnerHTML.__html;

	    // Note the use of `!=` which checks for null or undefined.
	    var lastChildren = lastContent != null ? null : lastProps.children;
	    var nextChildren = nextContent != null ? null : nextProps.children;

	    // If we're switching from children to content/html or vice versa, remove
	    // the old content
	    var lastHasContentOrHtml = lastContent != null || lastHtml != null;
	    var nextHasContentOrHtml = nextContent != null || nextHtml != null;
	    if (lastChildren != null && nextChildren == null) {
	      this.updateChildren(null, transaction, context);
	    } else if (lastHasContentOrHtml && !nextHasContentOrHtml) {
	      this.updateTextContent('');
	    }

	    if (nextContent != null) {
	      if (lastContent !== nextContent) {
	        this.updateTextContent('' + nextContent);
	      }
	    } else if (nextHtml != null) {
	      if (lastHtml !== nextHtml) {
	        this.updateMarkup('' + nextHtml);
	      }
	    } else if (nextChildren != null) {
	      this.updateChildren(nextChildren, transaction, context);
	    }
	  },

	  /**
	   * Destroys all event registrations for this instance. Does not remove from
	   * the DOM. That must be done by the parent.
	   *
	   * @internal
	   */
	  unmountComponent: function () {
	    switch (this._tag) {
	      case 'iframe':
	      case 'img':
	      case 'form':
	      case 'video':
	      case 'audio':
	        var listeners = this._wrapperState.listeners;
	        if (listeners) {
	          for (var i = 0; i < listeners.length; i++) {
	            listeners[i].remove();
	          }
	        }
	        break;
	      case 'input':
	        ReactDOMInput.unmountWrapper(this);
	        break;
	      case 'html':
	      case 'head':
	      case 'body':
	        /**
	         * Components like <html> <head> and <body> can't be removed or added
	         * easily in a cross-browser way, however it's valuable to be able to
	         * take advantage of React's reconciliation for styling and <title>
	         * management. So we just document it and throw in dangerous cases.
	         */
	         true ? process.env.NODE_ENV !== 'production' ? invariant(false, '<%s> tried to unmount. Because of cross-browser quirks it is ' + 'impossible to unmount some top-level components (eg <html>, ' + '<head>, and <body>) reliably and efficiently. To fix this, have a ' + 'single top-level component that never unmounts render these ' + 'elements.', this._tag) : invariant(false) : undefined;
	        break;
	    }

	    this.unmountChildren();
	    ReactBrowserEventEmitter.deleteAllListeners(this._rootNodeID);
	    ReactComponentBrowserEnvironment.unmountIDFromEnvironment(this._rootNodeID);
	    this._rootNodeID = null;
	    this._wrapperState = null;
	    if (this._nodeWithLegacyProperties) {
	      var node = this._nodeWithLegacyProperties;
	      node._reactInternalComponent = null;
	      this._nodeWithLegacyProperties = null;
	    }
	  },

	  getPublicInstance: function () {
	    if (!this._nodeWithLegacyProperties) {
	      var node = ReactMount.getNode(this._rootNodeID);

	      node._reactInternalComponent = this;
	      node.getDOMNode = legacyGetDOMNode;
	      node.isMounted = legacyIsMounted;
	      node.setState = legacySetStateEtc;
	      node.replaceState = legacySetStateEtc;
	      node.forceUpdate = legacySetStateEtc;
	      node.setProps = legacySetProps;
	      node.replaceProps = legacyReplaceProps;

	      if (process.env.NODE_ENV !== 'production') {
	        if (canDefineProperty) {
	          Object.defineProperties(node, legacyPropsDescriptor);
	        } else {
	          // updateComponent will update this property on subsequent renders
	          node.props = this._currentElement.props;
	        }
	      } else {
	        // updateComponent will update this property on subsequent renders
	        node.props = this._currentElement.props;
	      }

	      this._nodeWithLegacyProperties = node;
	    }
	    return this._nodeWithLegacyProperties;
	  }

	};

	ReactPerf.measureMethods(ReactDOMComponent, 'ReactDOMComponent', {
	  mountComponent: 'mountComponent',
	  updateComponent: 'updateComponent'
	});

	assign(ReactDOMComponent.prototype, ReactDOMComponent.Mixin, ReactMultiChild.Mixin);

	module.exports = ReactDOMComponent;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(8)))

/***/ },
/* 97 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule AutoFocusUtils
	 * @typechecks static-only
	 */

	'use strict';

	var ReactMount = __webpack_require__(32);

	var findDOMNode = __webpack_require__(94);
	var focusNode = __webpack_require__(98);

	var Mixin = {
	  componentDidMount: function () {
	    if (this.props.autoFocus) {
	      focusNode(findDOMNode(this));
	    }
	  }
	};

	var AutoFocusUtils = {
	  Mixin: Mixin,

	  focusDOMComponent: function () {
	    focusNode(ReactMount.getNode(this._rootNodeID));
	  }
	};

	module.exports = AutoFocusUtils;

/***/ },
/* 98 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule focusNode
	 */

	'use strict';

	/**
	 * @param {DOMElement} node input/textarea to focus
	 */
	function focusNode(node) {
	  // IE8 can throw "Can't move focus to the control because it is invisible,
	  // not enabled, or of a type that does not accept the focus." for all kinds of
	  // reasons that are too expensive and fragile to test.
	  try {
	    node.focus();
	  } catch (e) {}
	}

	module.exports = focusNode;

/***/ },
/* 99 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule CSSPropertyOperations
	 * @typechecks static-only
	 */

	'use strict';

	var CSSProperty = __webpack_require__(100);
	var ExecutionEnvironment = __webpack_require__(13);
	var ReactPerf = __webpack_require__(22);

	var camelizeStyleName = __webpack_require__(101);
	var dangerousStyleValue = __webpack_require__(103);
	var hyphenateStyleName = __webpack_require__(104);
	var memoizeStringOnly = __webpack_require__(106);
	var warning = __webpack_require__(29);

	var processStyleName = memoizeStringOnly(function (styleName) {
	  return hyphenateStyleName(styleName);
	});

	var hasShorthandPropertyBug = false;
	var styleFloatAccessor = 'cssFloat';
	if (ExecutionEnvironment.canUseDOM) {
	  var tempStyle = document.createElement('div').style;
	  try {
	    // IE8 throws "Invalid argument." if resetting shorthand style properties.
	    tempStyle.font = '';
	  } catch (e) {
	    hasShorthandPropertyBug = true;
	  }
	  // IE8 only supports accessing cssFloat (standard) as styleFloat
	  if (document.documentElement.style.cssFloat === undefined) {
	    styleFloatAccessor = 'styleFloat';
	  }
	}

	if (process.env.NODE_ENV !== 'production') {
	  // 'msTransform' is correct, but the other prefixes should be capitalized
	  var badVendoredStyleNamePattern = /^(?:webkit|moz|o)[A-Z]/;

	  // style values shouldn't contain a semicolon
	  var badStyleValueWithSemicolonPattern = /;\s*$/;

	  var warnedStyleNames = {};
	  var warnedStyleValues = {};

	  var warnHyphenatedStyleName = function (name) {
	    if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {
	      return;
	    }

	    warnedStyleNames[name] = true;
	    process.env.NODE_ENV !== 'production' ? warning(false, 'Unsupported style property %s. Did you mean %s?', name, camelizeStyleName(name)) : undefined;
	  };

	  var warnBadVendoredStyleName = function (name) {
	    if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {
	      return;
	    }

	    warnedStyleNames[name] = true;
	    process.env.NODE_ENV !== 'production' ? warning(false, 'Unsupported vendor-prefixed style property %s. Did you mean %s?', name, name.charAt(0).toUpperCase() + name.slice(1)) : undefined;
	  };

	  var warnStyleValueWithSemicolon = function (name, value) {
	    if (warnedStyleValues.hasOwnProperty(value) && warnedStyleValues[value]) {
	      return;
	    }

	    warnedStyleValues[value] = true;
	    process.env.NODE_ENV !== 'production' ? warning(false, 'Style property values shouldn\'t contain a semicolon. ' + 'Try "%s: %s" instead.', name, value.replace(badStyleValueWithSemicolonPattern, '')) : undefined;
	  };

	  /**
	   * @param {string} name
	   * @param {*} value
	   */
	  var warnValidStyle = function (name, value) {
	    if (name.indexOf('-') > -1) {
	      warnHyphenatedStyleName(name);
	    } else if (badVendoredStyleNamePattern.test(name)) {
	      warnBadVendoredStyleName(name);
	    } else if (badStyleValueWithSemicolonPattern.test(value)) {
	      warnStyleValueWithSemicolon(name, value);
	    }
	  };
	}

	/**
	 * Operations for dealing with CSS properties.
	 */
	var CSSPropertyOperations = {

	  /**
	   * Serializes a mapping of style properties for use as inline styles:
	   *
	   *   > createMarkupForStyles({width: '200px', height: 0})
	   *   "width:200px;height:0;"
	   *
	   * Undefined values are ignored so that declarative programming is easier.
	   * The result should be HTML-escaped before insertion into the DOM.
	   *
	   * @param {object} styles
	   * @return {?string}
	   */
	  createMarkupForStyles: function (styles) {
	    var serialized = '';
	    for (var styleName in styles) {
	      if (!styles.hasOwnProperty(styleName)) {
	        continue;
	      }
	      var styleValue = styles[styleName];
	      if (process.env.NODE_ENV !== 'production') {
	        warnValidStyle(styleName, styleValue);
	      }
	      if (styleValue != null) {
	        serialized += processStyleName(styleName) + ':';
	        serialized += dangerousStyleValue(styleName, styleValue) + ';';
	      }
	    }
	    return serialized || null;
	  },

	  /**
	   * Sets the value for multiple styles on a node.  If a value is specified as
	   * '' (empty string), the corresponding style property will be unset.
	   *
	   * @param {DOMElement} node
	   * @param {object} styles
	   */
	  setValueForStyles: function (node, styles) {
	    var style = node.style;
	    for (var styleName in styles) {
	      if (!styles.hasOwnProperty(styleName)) {
	        continue;
	      }
	      if (process.env.NODE_ENV !== 'production') {
	        warnValidStyle(styleName, styles[styleName]);
	      }
	      var styleValue = dangerousStyleValue(styleName, styles[styleName]);
	      if (styleName === 'float') {
	        styleName = styleFloatAccessor;
	      }
	      if (styleValue) {
	        style[styleName] = styleValue;
	      } else {
	        var expansion = hasShorthandPropertyBug && CSSProperty.shorthandPropertyExpansions[styleName];
	        if (expansion) {
	          // Shorthand property that IE8 won't like unsetting, so unset each
	          // component to placate it
	          for (var individualStyleName in expansion) {
	            style[individualStyleName] = '';
	          }
	        } else {
	          style[styleName] = '';
	        }
	      }
	    }
	  }

	};

	ReactPerf.measureMethods(CSSPropertyOperations, 'CSSPropertyOperations', {
	  setValueForStyles: 'setValueForStyles'
	});

	module.exports = CSSPropertyOperations;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(8)))

/***/ },
/* 100 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule CSSProperty
	 */

	'use strict';

	/**
	 * CSS properties which accept numbers but are not in units of "px".
	 */
	var isUnitlessNumber = {
	  animationIterationCount: true,
	  boxFlex: true,
	  boxFlexGroup: true,
	  boxOrdinalGroup: true,
	  columnCount: true,
	  flex: true,
	  flexGrow: true,
	  flexPositive: true,
	  flexShrink: true,
	  flexNegative: true,
	  flexOrder: true,
	  fontWeight: true,
	  lineClamp: true,
	  lineHeight: true,
	  opacity: true,
	  order: true,
	  orphans: true,
	  tabSize: true,
	  widows: true,
	  zIndex: true,
	  zoom: true,

	  // SVG-related properties
	  fillOpacity: true,
	  stopOpacity: true,
	  strokeDashoffset: true,
	  strokeOpacity: true,
	  strokeWidth: true
	};

	/**
	 * @param {string} prefix vendor-specific prefix, eg: Webkit
	 * @param {string} key style name, eg: transitionDuration
	 * @return {string} style name prefixed with `prefix`, properly camelCased, eg:
	 * WebkitTransitionDuration
	 */
	function prefixKey(prefix, key) {
	  return prefix + key.charAt(0).toUpperCase() + key.substring(1);
	}

	/**
	 * Support style names that may come passed in prefixed by adding permutations
	 * of vendor prefixes.
	 */
	var prefixes = ['Webkit', 'ms', 'Moz', 'O'];

	// Using Object.keys here, or else the vanilla for-in loop makes IE8 go into an
	// infinite loop, because it iterates over the newly added props too.
	Object.keys(isUnitlessNumber).forEach(function (prop) {
	  prefixes.forEach(function (prefix) {
	    isUnitlessNumber[prefixKey(prefix, prop)] = isUnitlessNumber[prop];
	  });
	});

	/**
	 * Most style properties can be unset by doing .style[prop] = '' but IE8
	 * doesn't like doing that with shorthand properties so for the properties that
	 * IE8 breaks on, which are listed here, we instead unset each of the
	 * individual properties. See http://bugs.jquery.com/ticket/12385.
	 * The 4-value 'clock' properties like margin, padding, border-width seem to
	 * behave without any problems. Curiously, list-style works too without any
	 * special prodding.
	 */
	var shorthandPropertyExpansions = {
	  background: {
	    backgroundAttachment: true,
	    backgroundColor: true,
	    backgroundImage: true,
	    backgroundPositionX: true,
	    backgroundPositionY: true,
	    backgroundRepeat: true
	  },
	  backgroundPosition: {
	    backgroundPositionX: true,
	    backgroundPositionY: true
	  },
	  border: {
	    borderWidth: true,
	    borderStyle: true,
	    borderColor: true
	  },
	  borderBottom: {
	    borderBottomWidth: true,
	    borderBottomStyle: true,
	    borderBottomColor: true
	  },
	  borderLeft: {
	    borderLeftWidth: true,
	    borderLeftStyle: true,
	    borderLeftColor: true
	  },
	  borderRight: {
	    borderRightWidth: true,
	    borderRightStyle: true,
	    borderRightColor: true
	  },
	  borderTop: {
	    borderTopWidth: true,
	    borderTopStyle: true,
	    borderTopColor: true
	  },
	  font: {
	    fontStyle: true,
	    fontVariant: true,
	    fontWeight: true,
	    fontSize: true,
	    lineHeight: true,
	    fontFamily: true
	  },
	  outline: {
	    outlineWidth: true,
	    outlineStyle: true,
	    outlineColor: true
	  }
	};

	var CSSProperty = {
	  isUnitlessNumber: isUnitlessNumber,
	  shorthandPropertyExpansions: shorthandPropertyExpansions
	};

	module.exports = CSSProperty;

/***/ },
/* 101 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule camelizeStyleName
	 * @typechecks
	 */

	'use strict';

	var camelize = __webpack_require__(102);

	var msPattern = /^-ms-/;

	/**
	 * Camelcases a hyphenated CSS property name, for example:
	 *
	 *   > camelizeStyleName('background-color')
	 *   < "backgroundColor"
	 *   > camelizeStyleName('-moz-transition')
	 *   < "MozTransition"
	 *   > camelizeStyleName('-ms-transition')
	 *   < "msTransition"
	 *
	 * As Andi Smith suggests
	 * (http://www.andismith.com/blog/2012/02/modernizr-prefixed/), an `-ms` prefix
	 * is converted to lowercase `ms`.
	 *
	 * @param {string} string
	 * @return {string}
	 */
	function camelizeStyleName(string) {
	  return camelize(string.replace(msPattern, 'ms-'));
	}

	module.exports = camelizeStyleName;

/***/ },
/* 102 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule camelize
	 * @typechecks
	 */

	"use strict";

	var _hyphenPattern = /-(.)/g;

	/**
	 * Camelcases a hyphenated string, for example:
	 *
	 *   > camelize('background-color')
	 *   < "backgroundColor"
	 *
	 * @param {string} string
	 * @return {string}
	 */
	function camelize(string) {
	  return string.replace(_hyphenPattern, function (_, character) {
	    return character.toUpperCase();
	  });
	}

	module.exports = camelize;

/***/ },
/* 103 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule dangerousStyleValue
	 * @typechecks static-only
	 */

	'use strict';

	var CSSProperty = __webpack_require__(100);

	var isUnitlessNumber = CSSProperty.isUnitlessNumber;

	/**
	 * Convert a value into the proper css writable value. The style name `name`
	 * should be logical (no hyphens), as specified
	 * in `CSSProperty.isUnitlessNumber`.
	 *
	 * @param {string} name CSS property name such as `topMargin`.
	 * @param {*} value CSS property value such as `10px`.
	 * @return {string} Normalized style value with dimensions applied.
	 */
	function dangerousStyleValue(name, value) {
	  // Note that we've removed escapeTextForBrowser() calls here since the
	  // whole string will be escaped when the attribute is injected into
	  // the markup. If you provide unsafe user data here they can inject
	  // arbitrary CSS which may be problematic (I couldn't repro this):
	  // https://www.owasp.org/index.php/XSS_Filter_Evasion_Cheat_Sheet
	  // http://www.thespanner.co.uk/2007/11/26/ultimate-xss-css-injection/
	  // This is not an XSS hole but instead a potential CSS injection issue
	  // which has lead to a greater discussion about how we're going to
	  // trust URLs moving forward. See #2115901

	  var isEmpty = value == null || typeof value === 'boolean' || value === '';
	  if (isEmpty) {
	    return '';
	  }

	  var isNonNumeric = isNaN(value);
	  if (isNonNumeric || value === 0 || isUnitlessNumber.hasOwnProperty(name) && isUnitlessNumber[name]) {
	    return '' + value; // cast to string
	  }

	  if (typeof value === 'string') {
	    value = value.trim();
	  }
	  return value + 'px';
	}

	module.exports = dangerousStyleValue;

/***/ },
/* 104 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule hyphenateStyleName
	 * @typechecks
	 */

	'use strict';

	var hyphenate = __webpack_require__(105);

	var msPattern = /^ms-/;

	/**
	 * Hyphenates a camelcased CSS property name, for example:
	 *
	 *   > hyphenateStyleName('backgroundColor')
	 *   < "background-color"
	 *   > hyphenateStyleName('MozTransition')
	 *   < "-moz-transition"
	 *   > hyphenateStyleName('msTransition')
	 *   < "-ms-transition"
	 *
	 * As Modernizr suggests (http://modernizr.com/docs/#prefixed), an `ms` prefix
	 * is converted to `-ms-`.
	 *
	 * @param {string} string
	 * @return {string}
	 */
	function hyphenateStyleName(string) {
	  return hyphenate(string).replace(msPattern, '-ms-');
	}

	module.exports = hyphenateStyleName;

/***/ },
/* 105 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule hyphenate
	 * @typechecks
	 */

	'use strict';

	var _uppercasePattern = /([A-Z])/g;

	/**
	 * Hyphenates a camelcased string, for example:
	 *
	 *   > hyphenate('backgroundColor')
	 *   < "background-color"
	 *
	 * For CSS style names, use `hyphenateStyleName` instead which works properly
	 * with all vendor prefixes, including `ms`.
	 *
	 * @param {string} string
	 * @return {string}
	 */
	function hyphenate(string) {
	  return string.replace(_uppercasePattern, '-$1').toLowerCase();
	}

	module.exports = hyphenate;

/***/ },
/* 106 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule memoizeStringOnly
	 * @typechecks static-only
	 */

	'use strict';

	/**
	 * Memoizes the return value of a function that accepts one string argument.
	 *
	 * @param {function} callback
	 * @return {function}
	 */
	function memoizeStringOnly(callback) {
	  var cache = {};
	  return function (string) {
	    if (!cache.hasOwnProperty(string)) {
	      cache[string] = callback.call(this, string);
	    }
	    return cache[string];
	  };
	}

	module.exports = memoizeStringOnly;

/***/ },
/* 107 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDOMButton
	 */

	'use strict';

	var mouseListenerNames = {
	  onClick: true,
	  onDoubleClick: true,
	  onMouseDown: true,
	  onMouseMove: true,
	  onMouseUp: true,

	  onClickCapture: true,
	  onDoubleClickCapture: true,
	  onMouseDownCapture: true,
	  onMouseMoveCapture: true,
	  onMouseUpCapture: true
	};

	/**
	 * Implements a <button> native component that does not receive mouse events
	 * when `disabled` is set.
	 */
	var ReactDOMButton = {
	  getNativeProps: function (inst, props, context) {
	    if (!props.disabled) {
	      return props;
	    }

	    // Copy the props, except the mouse listeners
	    var nativeProps = {};
	    for (var key in props) {
	      if (props.hasOwnProperty(key) && !mouseListenerNames[key]) {
	        nativeProps[key] = props[key];
	      }
	    }

	    return nativeProps;
	  }
	};

	module.exports = ReactDOMButton;

/***/ },
/* 108 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDOMInput
	 */

	'use strict';

	var ReactDOMIDOperations = __webpack_require__(31);
	var LinkedValueUtils = __webpack_require__(109);
	var ReactMount = __webpack_require__(32);
	var ReactUpdates = __webpack_require__(57);

	var assign = __webpack_require__(43);
	var invariant = __webpack_require__(17);

	var instancesByReactID = {};

	function forceUpdateIfMounted() {
	  if (this._rootNodeID) {
	    // DOM component is still mounted; update
	    ReactDOMInput.updateWrapper(this);
	  }
	}

	/**
	 * Implements an <input> native component that allows setting these optional
	 * props: `checked`, `value`, `defaultChecked`, and `defaultValue`.
	 *
	 * If `checked` or `value` are not supplied (or null/undefined), user actions
	 * that affect the checked state or value will trigger updates to the element.
	 *
	 * If they are supplied (and not null/undefined), the rendered element will not
	 * trigger updates to the element. Instead, the props must change in order for
	 * the rendered element to be updated.
	 *
	 * The rendered element will be initialized as unchecked (or `defaultChecked`)
	 * with an empty value (or `defaultValue`).
	 *
	 * @see http://www.w3.org/TR/2012/WD-html5-20121025/the-input-element.html
	 */
	var ReactDOMInput = {
	  getNativeProps: function (inst, props, context) {
	    var value = LinkedValueUtils.getValue(props);
	    var checked = LinkedValueUtils.getChecked(props);

	    var nativeProps = assign({}, props, {
	      defaultChecked: undefined,
	      defaultValue: undefined,
	      value: value != null ? value : inst._wrapperState.initialValue,
	      checked: checked != null ? checked : inst._wrapperState.initialChecked,
	      onChange: inst._wrapperState.onChange
	    });

	    return nativeProps;
	  },

	  mountWrapper: function (inst, props) {
	    if (process.env.NODE_ENV !== 'production') {
	      LinkedValueUtils.checkPropTypes('input', props, inst._currentElement._owner);
	    }

	    var defaultValue = props.defaultValue;
	    inst._wrapperState = {
	      initialChecked: props.defaultChecked || false,
	      initialValue: defaultValue != null ? defaultValue : null,
	      onChange: _handleChange.bind(inst)
	    };
	  },

	  mountReadyWrapper: function (inst) {
	    // Can't be in mountWrapper or else server rendering leaks.
	    instancesByReactID[inst._rootNodeID] = inst;
	  },

	  unmountWrapper: function (inst) {
	    delete instancesByReactID[inst._rootNodeID];
	  },

	  updateWrapper: function (inst) {
	    var props = inst._currentElement.props;

	    // TODO: Shouldn't this be getChecked(props)?
	    var checked = props.checked;
	    if (checked != null) {
	      ReactDOMIDOperations.updatePropertyByID(inst._rootNodeID, 'checked', checked || false);
	    }

	    var value = LinkedValueUtils.getValue(props);
	    if (value != null) {
	      // Cast `value` to a string to ensure the value is set correctly. While
	      // browsers typically do this as necessary, jsdom doesn't.
	      ReactDOMIDOperations.updatePropertyByID(inst._rootNodeID, 'value', '' + value);
	    }
	  }
	};

	function _handleChange(event) {
	  var props = this._currentElement.props;

	  var returnValue = LinkedValueUtils.executeOnChange(props, event);

	  // Here we use asap to wait until all updates have propagated, which
	  // is important when using controlled components within layers:
	  // https://github.com/facebook/react/issues/1698
	  ReactUpdates.asap(forceUpdateIfMounted, this);

	  var name = props.name;
	  if (props.type === 'radio' && name != null) {
	    var rootNode = ReactMount.getNode(this._rootNodeID);
	    var queryRoot = rootNode;

	    while (queryRoot.parentNode) {
	      queryRoot = queryRoot.parentNode;
	    }

	    // If `rootNode.form` was non-null, then we could try `form.elements`,
	    // but that sometimes behaves strangely in IE8. We could also try using
	    // `form.getElementsByName`, but that will only return direct children
	    // and won't include inputs that use the HTML5 `form=` attribute. Since
	    // the input might not even be in a form, let's just use the global
	    // `querySelectorAll` to ensure we don't miss anything.
	    var group = queryRoot.querySelectorAll('input[name=' + JSON.stringify('' + name) + '][type="radio"]');

	    for (var i = 0; i < group.length; i++) {
	      var otherNode = group[i];
	      if (otherNode === rootNode || otherNode.form !== rootNode.form) {
	        continue;
	      }
	      // This will throw if radio buttons rendered by different copies of React
	      // and the same name are rendered into the same form (same as #1939).
	      // That's probably okay; we don't support it just as we don't support
	      // mixing React with non-React.
	      var otherID = ReactMount.getID(otherNode);
	      !otherID ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactDOMInput: Mixing React and non-React radio inputs with the ' + 'same `name` is not supported.') : invariant(false) : undefined;
	      var otherInstance = instancesByReactID[otherID];
	      !otherInstance ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactDOMInput: Unknown radio button ID %s.', otherID) : invariant(false) : undefined;
	      // If this is a controlled radio button group, forcing the input that
	      // was previously checked to update will cause it to be come re-checked
	      // as appropriate.
	      ReactUpdates.asap(forceUpdateIfMounted, otherInstance);
	    }
	  }

	  return returnValue;
	}

	module.exports = ReactDOMInput;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(8)))

/***/ },
/* 109 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule LinkedValueUtils
	 * @typechecks static-only
	 */

	'use strict';

	var ReactPropTypes = __webpack_require__(110);
	var ReactPropTypeLocations = __webpack_require__(68);

	var invariant = __webpack_require__(17);
	var warning = __webpack_require__(29);

	var hasReadOnlyValue = {
	  'button': true,
	  'checkbox': true,
	  'image': true,
	  'hidden': true,
	  'radio': true,
	  'reset': true,
	  'submit': true
	};

	function _assertSingleLink(inputProps) {
	  !(inputProps.checkedLink == null || inputProps.valueLink == null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Cannot provide a checkedLink and a valueLink. If you want to use ' + 'checkedLink, you probably don\'t want to use valueLink and vice versa.') : invariant(false) : undefined;
	}
	function _assertValueLink(inputProps) {
	  _assertSingleLink(inputProps);
	  !(inputProps.value == null && inputProps.onChange == null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Cannot provide a valueLink and a value or onChange event. If you want ' + 'to use value or onChange, you probably don\'t want to use valueLink.') : invariant(false) : undefined;
	}

	function _assertCheckedLink(inputProps) {
	  _assertSingleLink(inputProps);
	  !(inputProps.checked == null && inputProps.onChange == null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Cannot provide a checkedLink and a checked property or onChange event. ' + 'If you want to use checked or onChange, you probably don\'t want to ' + 'use checkedLink') : invariant(false) : undefined;
	}

	var propTypes = {
	  value: function (props, propName, componentName) {
	    if (!props[propName] || hasReadOnlyValue[props.type] || props.onChange || props.readOnly || props.disabled) {
	      return null;
	    }
	    return new Error('You provided a `value` prop to a form field without an ' + '`onChange` handler. This will render a read-only field. If ' + 'the field should be mutable use `defaultValue`. Otherwise, ' + 'set either `onChange` or `readOnly`.');
	  },
	  checked: function (props, propName, componentName) {
	    if (!props[propName] || props.onChange || props.readOnly || props.disabled) {
	      return null;
	    }
	    return new Error('You provided a `checked` prop to a form field without an ' + '`onChange` handler. This will render a read-only field. If ' + 'the field should be mutable use `defaultChecked`. Otherwise, ' + 'set either `onChange` or `readOnly`.');
	  },
	  onChange: ReactPropTypes.func
	};

	var loggedTypeFailures = {};
	function getDeclarationErrorAddendum(owner) {
	  if (owner) {
	    var name = owner.getName();
	    if (name) {
	      return ' Check the render method of `' + name + '`.';
	    }
	  }
	  return '';
	}

	/**
	 * Provide a linked `value` attribute for controlled forms. You should not use
	 * this outside of the ReactDOM controlled form components.
	 */
	var LinkedValueUtils = {
	  checkPropTypes: function (tagName, props, owner) {
	    for (var propName in propTypes) {
	      if (propTypes.hasOwnProperty(propName)) {
	        var error = propTypes[propName](props, propName, tagName, ReactPropTypeLocations.prop);
	      }
	      if (error instanceof Error && !(error.message in loggedTypeFailures)) {
	        // Only monitor this failure once because there tends to be a lot of the
	        // same error.
	        loggedTypeFailures[error.message] = true;

	        var addendum = getDeclarationErrorAddendum(owner);
	        process.env.NODE_ENV !== 'production' ? warning(false, 'Failed form propType: %s%s', error.message, addendum) : undefined;
	      }
	    }
	  },

	  /**
	   * @param {object} inputProps Props for form component
	   * @return {*} current value of the input either from value prop or link.
	   */
	  getValue: function (inputProps) {
	    if (inputProps.valueLink) {
	      _assertValueLink(inputProps);
	      return inputProps.valueLink.value;
	    }
	    return inputProps.value;
	  },

	  /**
	   * @param {object} inputProps Props for form component
	   * @return {*} current checked status of the input either from checked prop
	   *             or link.
	   */
	  getChecked: function (inputProps) {
	    if (inputProps.checkedLink) {
	      _assertCheckedLink(inputProps);
	      return inputProps.checkedLink.value;
	    }
	    return inputProps.checked;
	  },

	  /**
	   * @param {object} inputProps Props for form component
	   * @param {SyntheticEvent} event change event to handle
	   */
	  executeOnChange: function (inputProps, event) {
	    if (inputProps.valueLink) {
	      _assertValueLink(inputProps);
	      return inputProps.valueLink.requestChange(event.target.value);
	    } else if (inputProps.checkedLink) {
	      _assertCheckedLink(inputProps);
	      return inputProps.checkedLink.requestChange(event.target.checked);
	    } else if (inputProps.onChange) {
	      return inputProps.onChange.call(undefined, event);
	    }
	  }
	};

	module.exports = LinkedValueUtils;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(8)))

/***/ },
/* 110 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactPropTypes
	 */

	'use strict';

	var ReactElement = __webpack_require__(46);
	var ReactPropTypeLocationNames = __webpack_require__(69);

	var emptyFunction = __webpack_require__(19);
	var getIteratorFn = __webpack_require__(111);

	/**
	 * Collection of methods that allow declaration and validation of props that are
	 * supplied to React components. Example usage:
	 *
	 *   var Props = require('ReactPropTypes');
	 *   var MyArticle = React.createClass({
	 *     propTypes: {
	 *       // An optional string prop named "description".
	 *       description: Props.string,
	 *
	 *       // A required enum prop named "category".
	 *       category: Props.oneOf(['News','Photos']).isRequired,
	 *
	 *       // A prop named "dialog" that requires an instance of Dialog.
	 *       dialog: Props.instanceOf(Dialog).isRequired
	 *     },
	 *     render: function() { ... }
	 *   });
	 *
	 * A more formal specification of how these methods are used:
	 *
	 *   type := array|bool|func|object|number|string|oneOf([...])|instanceOf(...)
	 *   decl := ReactPropTypes.{type}(.isRequired)?
	 *
	 * Each and every declaration produces a function with the same signature. This
	 * allows the creation of custom validation functions. For example:
	 *
	 *  var MyLink = React.createClass({
	 *    propTypes: {
	 *      // An optional string or URI prop named "href".
	 *      href: function(props, propName, componentName) {
	 *        var propValue = props[propName];
	 *        if (propValue != null && typeof propValue !== 'string' &&
	 *            !(propValue instanceof URI)) {
	 *          return new Error(
	 *            'Expected a string or an URI for ' + propName + ' in ' +
	 *            componentName
	 *          );
	 *        }
	 *      }
	 *    },
	 *    render: function() {...}
	 *  });
	 *
	 * @internal
	 */

	var ANONYMOUS = '<<anonymous>>';

	var ReactPropTypes = {
	  array: createPrimitiveTypeChecker('array'),
	  bool: createPrimitiveTypeChecker('boolean'),
	  func: createPrimitiveTypeChecker('function'),
	  number: createPrimitiveTypeChecker('number'),
	  object: createPrimitiveTypeChecker('object'),
	  string: createPrimitiveTypeChecker('string'),

	  any: createAnyTypeChecker(),
	  arrayOf: createArrayOfTypeChecker,
	  element: createElementTypeChecker(),
	  instanceOf: createInstanceTypeChecker,
	  node: createNodeChecker(),
	  objectOf: createObjectOfTypeChecker,
	  oneOf: createEnumTypeChecker,
	  oneOfType: createUnionTypeChecker,
	  shape: createShapeTypeChecker
	};

	function createChainableTypeChecker(validate) {
	  function checkType(isRequired, props, propName, componentName, location, propFullName) {
	    componentName = componentName || ANONYMOUS;
	    propFullName = propFullName || propName;
	    if (props[propName] == null) {
	      var locationName = ReactPropTypeLocationNames[location];
	      if (isRequired) {
	        return new Error('Required ' + locationName + ' `' + propFullName + '` was not specified in ' + ('`' + componentName + '`.'));
	      }
	      return null;
	    } else {
	      return validate(props, propName, componentName, location, propFullName);
	    }
	  }

	  var chainedCheckType = checkType.bind(null, false);
	  chainedCheckType.isRequired = checkType.bind(null, true);

	  return chainedCheckType;
	}

	function createPrimitiveTypeChecker(expectedType) {
	  function validate(props, propName, componentName, location, propFullName) {
	    var propValue = props[propName];
	    var propType = getPropType(propValue);
	    if (propType !== expectedType) {
	      var locationName = ReactPropTypeLocationNames[location];
	      // `propValue` being instance of, say, date/regexp, pass the 'object'
	      // check, but we can offer a more precise error message here rather than
	      // 'of type `object`'.
	      var preciseType = getPreciseType(propValue);

	      return new Error('Invalid ' + locationName + ' `' + propFullName + '` of type ' + ('`' + preciseType + '` supplied to `' + componentName + '`, expected ') + ('`' + expectedType + '`.'));
	    }
	    return null;
	  }
	  return createChainableTypeChecker(validate);
	}

	function createAnyTypeChecker() {
	  return createChainableTypeChecker(emptyFunction.thatReturns(null));
	}

	function createArrayOfTypeChecker(typeChecker) {
	  function validate(props, propName, componentName, location, propFullName) {
	    var propValue = props[propName];
	    if (!Array.isArray(propValue)) {
	      var locationName = ReactPropTypeLocationNames[location];
	      var propType = getPropType(propValue);
	      return new Error('Invalid ' + locationName + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected an array.'));
	    }
	    for (var i = 0; i < propValue.length; i++) {
	      var error = typeChecker(propValue, i, componentName, location, propFullName + '[' + i + ']');
	      if (error instanceof Error) {
	        return error;
	      }
	    }
	    return null;
	  }
	  return createChainableTypeChecker(validate);
	}

	function createElementTypeChecker() {
	  function validate(props, propName, componentName, location, propFullName) {
	    if (!ReactElement.isValidElement(props[propName])) {
	      var locationName = ReactPropTypeLocationNames[location];
	      return new Error('Invalid ' + locationName + ' `' + propFullName + '` supplied to ' + ('`' + componentName + '`, expected a single ReactElement.'));
	    }
	    return null;
	  }
	  return createChainableTypeChecker(validate);
	}

	function createInstanceTypeChecker(expectedClass) {
	  function validate(props, propName, componentName, location, propFullName) {
	    if (!(props[propName] instanceof expectedClass)) {
	      var locationName = ReactPropTypeLocationNames[location];
	      var expectedClassName = expectedClass.name || ANONYMOUS;
	      var actualClassName = getClassName(props[propName]);
	      return new Error('Invalid ' + locationName + ' `' + propFullName + '` of type ' + ('`' + actualClassName + '` supplied to `' + componentName + '`, expected ') + ('instance of `' + expectedClassName + '`.'));
	    }
	    return null;
	  }
	  return createChainableTypeChecker(validate);
	}

	function createEnumTypeChecker(expectedValues) {
	  if (!Array.isArray(expectedValues)) {
	    return createChainableTypeChecker(function () {
	      return new Error('Invalid argument supplied to oneOf, expected an instance of array.');
	    });
	  }

	  function validate(props, propName, componentName, location, propFullName) {
	    var propValue = props[propName];
	    for (var i = 0; i < expectedValues.length; i++) {
	      if (propValue === expectedValues[i]) {
	        return null;
	      }
	    }

	    var locationName = ReactPropTypeLocationNames[location];
	    var valuesString = JSON.stringify(expectedValues);
	    return new Error('Invalid ' + locationName + ' `' + propFullName + '` of value `' + propValue + '` ' + ('supplied to `' + componentName + '`, expected one of ' + valuesString + '.'));
	  }
	  return createChainableTypeChecker(validate);
	}

	function createObjectOfTypeChecker(typeChecker) {
	  function validate(props, propName, componentName, location, propFullName) {
	    var propValue = props[propName];
	    var propType = getPropType(propValue);
	    if (propType !== 'object') {
	      var locationName = ReactPropTypeLocationNames[location];
	      return new Error('Invalid ' + locationName + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected an object.'));
	    }
	    for (var key in propValue) {
	      if (propValue.hasOwnProperty(key)) {
	        var error = typeChecker(propValue, key, componentName, location, propFullName + '.' + key);
	        if (error instanceof Error) {
	          return error;
	        }
	      }
	    }
	    return null;
	  }
	  return createChainableTypeChecker(validate);
	}

	function createUnionTypeChecker(arrayOfTypeCheckers) {
	  if (!Array.isArray(arrayOfTypeCheckers)) {
	    return createChainableTypeChecker(function () {
	      return new Error('Invalid argument supplied to oneOfType, expected an instance of array.');
	    });
	  }

	  function validate(props, propName, componentName, location, propFullName) {
	    for (var i = 0; i < arrayOfTypeCheckers.length; i++) {
	      var checker = arrayOfTypeCheckers[i];
	      if (checker(props, propName, componentName, location, propFullName) == null) {
	        return null;
	      }
	    }

	    var locationName = ReactPropTypeLocationNames[location];
	    return new Error('Invalid ' + locationName + ' `' + propFullName + '` supplied to ' + ('`' + componentName + '`.'));
	  }
	  return createChainableTypeChecker(validate);
	}

	function createNodeChecker() {
	  function validate(props, propName, componentName, location, propFullName) {
	    if (!isNode(props[propName])) {
	      var locationName = ReactPropTypeLocationNames[location];
	      return new Error('Invalid ' + locationName + ' `' + propFullName + '` supplied to ' + ('`' + componentName + '`, expected a ReactNode.'));
	    }
	    return null;
	  }
	  return createChainableTypeChecker(validate);
	}

	function createShapeTypeChecker(shapeTypes) {
	  function validate(props, propName, componentName, location, propFullName) {
	    var propValue = props[propName];
	    var propType = getPropType(propValue);
	    if (propType !== 'object') {
	      var locationName = ReactPropTypeLocationNames[location];
	      return new Error('Invalid ' + locationName + ' `' + propFullName + '` of type `' + propType + '` ' + ('supplied to `' + componentName + '`, expected `object`.'));
	    }
	    for (var key in shapeTypes) {
	      var checker = shapeTypes[key];
	      if (!checker) {
	        continue;
	      }
	      var error = checker(propValue, key, componentName, location, propFullName + '.' + key);
	      if (error) {
	        return error;
	      }
	    }
	    return null;
	  }
	  return createChainableTypeChecker(validate);
	}

	function isNode(propValue) {
	  switch (typeof propValue) {
	    case 'number':
	    case 'string':
	    case 'undefined':
	      return true;
	    case 'boolean':
	      return !propValue;
	    case 'object':
	      if (Array.isArray(propValue)) {
	        return propValue.every(isNode);
	      }
	      if (propValue === null || ReactElement.isValidElement(propValue)) {
	        return true;
	      }

	      var iteratorFn = getIteratorFn(propValue);
	      if (iteratorFn) {
	        var iterator = iteratorFn.call(propValue);
	        var step;
	        if (iteratorFn !== propValue.entries) {
	          while (!(step = iterator.next()).done) {
	            if (!isNode(step.value)) {
	              return false;
	            }
	          }
	        } else {
	          // Iterator will provide entry [k,v] tuples rather than values.
	          while (!(step = iterator.next()).done) {
	            var entry = step.value;
	            if (entry) {
	              if (!isNode(entry[1])) {
	                return false;
	              }
	            }
	          }
	        }
	      } else {
	        return false;
	      }

	      return true;
	    default:
	      return false;
	  }
	}

	// Equivalent of `typeof` but with special handling for array and regexp.
	function getPropType(propValue) {
	  var propType = typeof propValue;
	  if (Array.isArray(propValue)) {
	    return 'array';
	  }
	  if (propValue instanceof RegExp) {
	    // Old webkits (at least until Android 4.0) return 'function' rather than
	    // 'object' for typeof a RegExp. We'll normalize this here so that /bla/
	    // passes PropTypes.object.
	    return 'object';
	  }
	  return propType;
	}

	// This handles more types than `getPropType`. Only used for error messages.
	// See `createPrimitiveTypeChecker`.
	function getPreciseType(propValue) {
	  var propType = getPropType(propValue);
	  if (propType === 'object') {
	    if (propValue instanceof Date) {
	      return 'date';
	    } else if (propValue instanceof RegExp) {
	      return 'regexp';
	    }
	  }
	  return propType;
	}

	// Returns class name of the object, if any.
	function getClassName(propValue) {
	  if (!propValue.constructor || !propValue.constructor.name) {
	    return '<<anonymous>>';
	  }
	  return propValue.constructor.name;
	}

	module.exports = ReactPropTypes;

/***/ },
/* 111 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule getIteratorFn
	 * @typechecks static-only
	 */

	'use strict';

	/* global Symbol */
	var ITERATOR_SYMBOL = typeof Symbol === 'function' && Symbol.iterator;
	var FAUX_ITERATOR_SYMBOL = '@@iterator'; // Before Symbol spec.

	/**
	 * Returns the iterator method function contained on the iterable object.
	 *
	 * Be sure to invoke the function with the iterable as context:
	 *
	 *     var iteratorFn = getIteratorFn(myIterable);
	 *     if (iteratorFn) {
	 *       var iterator = iteratorFn.call(myIterable);
	 *       ...
	 *     }
	 *
	 * @param {?object} maybeIterable
	 * @return {?function}
	 */
	function getIteratorFn(maybeIterable) {
	  var iteratorFn = maybeIterable && (ITERATOR_SYMBOL && maybeIterable[ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL]);
	  if (typeof iteratorFn === 'function') {
	    return iteratorFn;
	  }
	}

	module.exports = getIteratorFn;

/***/ },
/* 112 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDOMOption
	 */

	'use strict';

	var ReactChildren = __webpack_require__(113);
	var ReactDOMSelect = __webpack_require__(115);

	var assign = __webpack_require__(43);
	var warning = __webpack_require__(29);

	var valueContextKey = ReactDOMSelect.valueContextKey;

	/**
	 * Implements an <option> native component that warns when `selected` is set.
	 */
	var ReactDOMOption = {
	  mountWrapper: function (inst, props, context) {
	    // TODO (yungsters): Remove support for `selected` in <option>.
	    if (process.env.NODE_ENV !== 'production') {
	      process.env.NODE_ENV !== 'production' ? warning(props.selected == null, 'Use the `defaultValue` or `value` props on <select> instead of ' + 'setting `selected` on <option>.') : undefined;
	    }

	    // Look up whether this option is 'selected' via context
	    var selectValue = context[valueContextKey];

	    // If context key is null (e.g., no specified value or after initial mount)
	    // or missing (e.g., for <datalist>), we don't change props.selected
	    var selected = null;
	    if (selectValue != null) {
	      selected = false;
	      if (Array.isArray(selectValue)) {
	        // multiple
	        for (var i = 0; i < selectValue.length; i++) {
	          if ('' + selectValue[i] === '' + props.value) {
	            selected = true;
	            break;
	          }
	        }
	      } else {
	        selected = '' + selectValue === '' + props.value;
	      }
	    }

	    inst._wrapperState = { selected: selected };
	  },

	  getNativeProps: function (inst, props, context) {
	    var nativeProps = assign({ selected: undefined, children: undefined }, props);

	    // Read state only from initial mount because <select> updates value
	    // manually; we need the initial state only for server rendering
	    if (inst._wrapperState.selected != null) {
	      nativeProps.selected = inst._wrapperState.selected;
	    }

	    var content = '';

	    // Flatten children and warn if they aren't strings or numbers;
	    // invalid types are ignored.
	    ReactChildren.forEach(props.children, function (child) {
	      if (child == null) {
	        return;
	      }
	      if (typeof child === 'string' || typeof child === 'number') {
	        content += child;
	      } else {
	        process.env.NODE_ENV !== 'production' ? warning(false, 'Only strings and numbers are supported as <option> children.') : undefined;
	      }
	    });

	    nativeProps.children = content;
	    return nativeProps;
	  }

	};

	module.exports = ReactDOMOption;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(8)))

/***/ },
/* 113 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactChildren
	 */

	'use strict';

	var PooledClass = __webpack_require__(59);
	var ReactElement = __webpack_require__(46);

	var emptyFunction = __webpack_require__(19);
	var traverseAllChildren = __webpack_require__(114);

	var twoArgumentPooler = PooledClass.twoArgumentPooler;
	var fourArgumentPooler = PooledClass.fourArgumentPooler;

	var userProvidedKeyEscapeRegex = /\/(?!\/)/g;
	function escapeUserProvidedKey(text) {
	  return ('' + text).replace(userProvidedKeyEscapeRegex, '//');
	}

	/**
	 * PooledClass representing the bookkeeping associated with performing a child
	 * traversal. Allows avoiding binding callbacks.
	 *
	 * @constructor ForEachBookKeeping
	 * @param {!function} forEachFunction Function to perform traversal with.
	 * @param {?*} forEachContext Context to perform context with.
	 */
	function ForEachBookKeeping(forEachFunction, forEachContext) {
	  this.func = forEachFunction;
	  this.context = forEachContext;
	  this.count = 0;
	}
	ForEachBookKeeping.prototype.destructor = function () {
	  this.func = null;
	  this.context = null;
	  this.count = 0;
	};
	PooledClass.addPoolingTo(ForEachBookKeeping, twoArgumentPooler);

	function forEachSingleChild(bookKeeping, child, name) {
	  var func = bookKeeping.func;
	  var context = bookKeeping.context;

	  func.call(context, child, bookKeeping.count++);
	}

	/**
	 * Iterates through children that are typically specified as `props.children`.
	 *
	 * The provided forEachFunc(child, index) will be called for each
	 * leaf child.
	 *
	 * @param {?*} children Children tree container.
	 * @param {function(*, int)} forEachFunc
	 * @param {*} forEachContext Context for forEachContext.
	 */
	function forEachChildren(children, forEachFunc, forEachContext) {
	  if (children == null) {
	    return children;
	  }
	  var traverseContext = ForEachBookKeeping.getPooled(forEachFunc, forEachContext);
	  traverseAllChildren(children, forEachSingleChild, traverseContext);
	  ForEachBookKeeping.release(traverseContext);
	}

	/**
	 * PooledClass representing the bookkeeping associated with performing a child
	 * mapping. Allows avoiding binding callbacks.
	 *
	 * @constructor MapBookKeeping
	 * @param {!*} mapResult Object containing the ordered map of results.
	 * @param {!function} mapFunction Function to perform mapping with.
	 * @param {?*} mapContext Context to perform mapping with.
	 */
	function MapBookKeeping(mapResult, keyPrefix, mapFunction, mapContext) {
	  this.result = mapResult;
	  this.keyPrefix = keyPrefix;
	  this.func = mapFunction;
	  this.context = mapContext;
	  this.count = 0;
	}
	MapBookKeeping.prototype.destructor = function () {
	  this.result = null;
	  this.keyPrefix = null;
	  this.func = null;
	  this.context = null;
	  this.count = 0;
	};
	PooledClass.addPoolingTo(MapBookKeeping, fourArgumentPooler);

	function mapSingleChildIntoContext(bookKeeping, child, childKey) {
	  var result = bookKeeping.result;
	  var keyPrefix = bookKeeping.keyPrefix;
	  var func = bookKeeping.func;
	  var context = bookKeeping.context;

	  var mappedChild = func.call(context, child, bookKeeping.count++);
	  if (Array.isArray(mappedChild)) {
	    mapIntoWithKeyPrefixInternal(mappedChild, result, childKey, emptyFunction.thatReturnsArgument);
	  } else if (mappedChild != null) {
	    if (ReactElement.isValidElement(mappedChild)) {
	      mappedChild = ReactElement.cloneAndReplaceKey(mappedChild,
	      // Keep both the (mapped) and old keys if they differ, just as
	      // traverseAllChildren used to do for objects as children
	      keyPrefix + (mappedChild !== child ? escapeUserProvidedKey(mappedChild.key || '') + '/' : '') + childKey);
	    }
	    result.push(mappedChild);
	  }
	}

	function mapIntoWithKeyPrefixInternal(children, array, prefix, func, context) {
	  var escapedPrefix = '';
	  if (prefix != null) {
	    escapedPrefix = escapeUserProvidedKey(prefix) + '/';
	  }
	  var traverseContext = MapBookKeeping.getPooled(array, escapedPrefix, func, context);
	  traverseAllChildren(children, mapSingleChildIntoContext, traverseContext);
	  MapBookKeeping.release(traverseContext);
	}

	/**
	 * Maps children that are typically specified as `props.children`.
	 *
	 * The provided mapFunction(child, key, index) will be called for each
	 * leaf child.
	 *
	 * @param {?*} children Children tree container.
	 * @param {function(*, int)} func The map function.
	 * @param {*} context Context for mapFunction.
	 * @return {object} Object containing the ordered map of results.
	 */
	function mapChildren(children, func, context) {
	  if (children == null) {
	    return children;
	  }
	  var result = [];
	  mapIntoWithKeyPrefixInternal(children, result, null, func, context);
	  return result;
	}

	function forEachSingleChildDummy(traverseContext, child, name) {
	  return null;
	}

	/**
	 * Count the number of children that are typically specified as
	 * `props.children`.
	 *
	 * @param {?*} children Children tree container.
	 * @return {number} The number of children.
	 */
	function countChildren(children, context) {
	  return traverseAllChildren(children, forEachSingleChildDummy, null);
	}

	/**
	 * Flatten a children object (typically specified as `props.children`) and
	 * return an array with appropriately re-keyed children.
	 */
	function toArray(children) {
	  var result = [];
	  mapIntoWithKeyPrefixInternal(children, result, null, emptyFunction.thatReturnsArgument);
	  return result;
	}

	var ReactChildren = {
	  forEach: forEachChildren,
	  map: mapChildren,
	  mapIntoWithKeyPrefixInternal: mapIntoWithKeyPrefixInternal,
	  count: countChildren,
	  toArray: toArray
	};

	module.exports = ReactChildren;

/***/ },
/* 114 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule traverseAllChildren
	 */

	'use strict';

	var ReactCurrentOwner = __webpack_require__(9);
	var ReactElement = __webpack_require__(46);
	var ReactInstanceHandles = __webpack_require__(48);

	var getIteratorFn = __webpack_require__(111);
	var invariant = __webpack_require__(17);
	var warning = __webpack_require__(29);

	var SEPARATOR = ReactInstanceHandles.SEPARATOR;
	var SUBSEPARATOR = ':';

	/**
	 * TODO: Test that a single child and an array with one item have the same key
	 * pattern.
	 */

	var userProvidedKeyEscaperLookup = {
	  '=': '=0',
	  '.': '=1',
	  ':': '=2'
	};

	var userProvidedKeyEscapeRegex = /[=.:]/g;

	var didWarnAboutMaps = false;

	function userProvidedKeyEscaper(match) {
	  return userProvidedKeyEscaperLookup[match];
	}

	/**
	 * Generate a key string that identifies a component within a set.
	 *
	 * @param {*} component A component that could contain a manual key.
	 * @param {number} index Index that is used if a manual key is not provided.
	 * @return {string}
	 */
	function getComponentKey(component, index) {
	  if (component && component.key != null) {
	    // Explicit key
	    return wrapUserProvidedKey(component.key);
	  }
	  // Implicit key determined by the index in the set
	  return index.toString(36);
	}

	/**
	 * Escape a component key so that it is safe to use in a reactid.
	 *
	 * @param {*} text Component key to be escaped.
	 * @return {string} An escaped string.
	 */
	function escapeUserProvidedKey(text) {
	  return ('' + text).replace(userProvidedKeyEscapeRegex, userProvidedKeyEscaper);
	}

	/**
	 * Wrap a `key` value explicitly provided by the user to distinguish it from
	 * implicitly-generated keys generated by a component's index in its parent.
	 *
	 * @param {string} key Value of a user-provided `key` attribute
	 * @return {string}
	 */
	function wrapUserProvidedKey(key) {
	  return '$' + escapeUserProvidedKey(key);
	}

	/**
	 * @param {?*} children Children tree container.
	 * @param {!string} nameSoFar Name of the key path so far.
	 * @param {!function} callback Callback to invoke with each child found.
	 * @param {?*} traverseContext Used to pass information throughout the traversal
	 * process.
	 * @return {!number} The number of children in this subtree.
	 */
	function traverseAllChildrenImpl(children, nameSoFar, callback, traverseContext) {
	  var type = typeof children;

	  if (type === 'undefined' || type === 'boolean') {
	    // All of the above are perceived as null.
	    children = null;
	  }

	  if (children === null || type === 'string' || type === 'number' || ReactElement.isValidElement(children)) {
	    callback(traverseContext, children,
	    // If it's the only child, treat the name as if it was wrapped in an array
	    // so that it's consistent if the number of children grows.
	    nameSoFar === '' ? SEPARATOR + getComponentKey(children, 0) : nameSoFar);
	    return 1;
	  }

	  var child;
	  var nextName;
	  var subtreeCount = 0; // Count of children found in the current subtree.
	  var nextNamePrefix = nameSoFar === '' ? SEPARATOR : nameSoFar + SUBSEPARATOR;

	  if (Array.isArray(children)) {
	    for (var i = 0; i < children.length; i++) {
	      child = children[i];
	      nextName = nextNamePrefix + getComponentKey(child, i);
	      subtreeCount += traverseAllChildrenImpl(child, nextName, callback, traverseContext);
	    }
	  } else {
	    var iteratorFn = getIteratorFn(children);
	    if (iteratorFn) {
	      var iterator = iteratorFn.call(children);
	      var step;
	      if (iteratorFn !== children.entries) {
	        var ii = 0;
	        while (!(step = iterator.next()).done) {
	          child = step.value;
	          nextName = nextNamePrefix + getComponentKey(child, ii++);
	          subtreeCount += traverseAllChildrenImpl(child, nextName, callback, traverseContext);
	        }
	      } else {
	        if (process.env.NODE_ENV !== 'production') {
	          process.env.NODE_ENV !== 'production' ? warning(didWarnAboutMaps, 'Using Maps as children is not yet fully supported. It is an ' + 'experimental feature that might be removed. Convert it to a ' + 'sequence / iterable of keyed ReactElements instead.') : undefined;
	          didWarnAboutMaps = true;
	        }
	        // Iterator will provide entry [k,v] tuples rather than values.
	        while (!(step = iterator.next()).done) {
	          var entry = step.value;
	          if (entry) {
	            child = entry[1];
	            nextName = nextNamePrefix + wrapUserProvidedKey(entry[0]) + SUBSEPARATOR + getComponentKey(child, 0);
	            subtreeCount += traverseAllChildrenImpl(child, nextName, callback, traverseContext);
	          }
	        }
	      }
	    } else if (type === 'object') {
	      var addendum = '';
	      if (process.env.NODE_ENV !== 'production') {
	        addendum = ' If you meant to render a collection of children, use an array ' + 'instead or wrap the object using createFragment(object) from the ' + 'React add-ons.';
	        if (children._isReactElement) {
	          addendum = ' It looks like you\'re using an element created by a different ' + 'version of React. Make sure to use only one copy of React.';
	        }
	        if (ReactCurrentOwner.current) {
	          var name = ReactCurrentOwner.current.getName();
	          if (name) {
	            addendum += ' Check the render method of `' + name + '`.';
	          }
	        }
	      }
	      var childrenString = String(children);
	       true ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Objects are not valid as a React child (found: %s).%s', childrenString === '[object Object]' ? 'object with keys {' + Object.keys(children).join(', ') + '}' : childrenString, addendum) : invariant(false) : undefined;
	    }
	  }

	  return subtreeCount;
	}

	/**
	 * Traverses children that are typically specified as `props.children`, but
	 * might also be specified through attributes:
	 *
	 * - `traverseAllChildren(this.props.children, ...)`
	 * - `traverseAllChildren(this.props.leftPanelChildren, ...)`
	 *
	 * The `traverseContext` is an optional argument that is passed through the
	 * entire traversal. It can be used to store accumulations or anything else that
	 * the callback might find relevant.
	 *
	 * @param {?*} children Children tree object.
	 * @param {!function} callback To invoke upon traversing each child.
	 * @param {?*} traverseContext Context for traversal.
	 * @return {!number} The number of children in this subtree.
	 */
	function traverseAllChildren(children, callback, traverseContext) {
	  if (children == null) {
	    return 0;
	  }

	  return traverseAllChildrenImpl(children, '', callback, traverseContext);
	}

	module.exports = traverseAllChildren;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(8)))

/***/ },
/* 115 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDOMSelect
	 */

	'use strict';

	var LinkedValueUtils = __webpack_require__(109);
	var ReactMount = __webpack_require__(32);
	var ReactUpdates = __webpack_require__(57);

	var assign = __webpack_require__(43);
	var warning = __webpack_require__(29);

	var valueContextKey = '__ReactDOMSelect_value$' + Math.random().toString(36).slice(2);

	function updateOptionsIfPendingUpdateAndMounted() {
	  if (this._rootNodeID && this._wrapperState.pendingUpdate) {
	    this._wrapperState.pendingUpdate = false;

	    var props = this._currentElement.props;
	    var value = LinkedValueUtils.getValue(props);

	    if (value != null) {
	      updateOptions(this, props, value);
	    }
	  }
	}

	function getDeclarationErrorAddendum(owner) {
	  if (owner) {
	    var name = owner.getName();
	    if (name) {
	      return ' Check the render method of `' + name + '`.';
	    }
	  }
	  return '';
	}

	var valuePropNames = ['value', 'defaultValue'];

	/**
	 * Validation function for `value` and `defaultValue`.
	 * @private
	 */
	function checkSelectPropTypes(inst, props) {
	  var owner = inst._currentElement._owner;
	  LinkedValueUtils.checkPropTypes('select', props, owner);

	  for (var i = 0; i < valuePropNames.length; i++) {
	    var propName = valuePropNames[i];
	    if (props[propName] == null) {
	      continue;
	    }
	    if (props.multiple) {
	      process.env.NODE_ENV !== 'production' ? warning(Array.isArray(props[propName]), 'The `%s` prop supplied to <select> must be an array if ' + '`multiple` is true.%s', propName, getDeclarationErrorAddendum(owner)) : undefined;
	    } else {
	      process.env.NODE_ENV !== 'production' ? warning(!Array.isArray(props[propName]), 'The `%s` prop supplied to <select> must be a scalar ' + 'value if `multiple` is false.%s', propName, getDeclarationErrorAddendum(owner)) : undefined;
	    }
	  }
	}

	/**
	 * @param {ReactDOMComponent} inst
	 * @param {boolean} multiple
	 * @param {*} propValue A stringable (with `multiple`, a list of stringables).
	 * @private
	 */
	function updateOptions(inst, multiple, propValue) {
	  var selectedValue, i;
	  var options = ReactMount.getNode(inst._rootNodeID).options;

	  if (multiple) {
	    selectedValue = {};
	    for (i = 0; i < propValue.length; i++) {
	      selectedValue['' + propValue[i]] = true;
	    }
	    for (i = 0; i < options.length; i++) {
	      var selected = selectedValue.hasOwnProperty(options[i].value);
	      if (options[i].selected !== selected) {
	        options[i].selected = selected;
	      }
	    }
	  } else {
	    // Do not set `select.value` as exact behavior isn't consistent across all
	    // browsers for all cases.
	    selectedValue = '' + propValue;
	    for (i = 0; i < options.length; i++) {
	      if (options[i].value === selectedValue) {
	        options[i].selected = true;
	        return;
	      }
	    }
	    if (options.length) {
	      options[0].selected = true;
	    }
	  }
	}

	/**
	 * Implements a <select> native component that allows optionally setting the
	 * props `value` and `defaultValue`. If `multiple` is false, the prop must be a
	 * stringable. If `multiple` is true, the prop must be an array of stringables.
	 *
	 * If `value` is not supplied (or null/undefined), user actions that change the
	 * selected option will trigger updates to the rendered options.
	 *
	 * If it is supplied (and not null/undefined), the rendered options will not
	 * update in response to user actions. Instead, the `value` prop must change in
	 * order for the rendered options to update.
	 *
	 * If `defaultValue` is provided, any options with the supplied values will be
	 * selected.
	 */
	var ReactDOMSelect = {
	  valueContextKey: valueContextKey,

	  getNativeProps: function (inst, props, context) {
	    return assign({}, props, {
	      onChange: inst._wrapperState.onChange,
	      value: undefined
	    });
	  },

	  mountWrapper: function (inst, props) {
	    if (process.env.NODE_ENV !== 'production') {
	      checkSelectPropTypes(inst, props);
	    }

	    var value = LinkedValueUtils.getValue(props);
	    inst._wrapperState = {
	      pendingUpdate: false,
	      initialValue: value != null ? value : props.defaultValue,
	      onChange: _handleChange.bind(inst),
	      wasMultiple: Boolean(props.multiple)
	    };
	  },

	  processChildContext: function (inst, props, context) {
	    // Pass down initial value so initial generated markup has correct
	    // `selected` attributes
	    var childContext = assign({}, context);
	    childContext[valueContextKey] = inst._wrapperState.initialValue;
	    return childContext;
	  },

	  postUpdateWrapper: function (inst) {
	    var props = inst._currentElement.props;

	    // After the initial mount, we control selected-ness manually so don't pass
	    // the context value down
	    inst._wrapperState.initialValue = undefined;

	    var wasMultiple = inst._wrapperState.wasMultiple;
	    inst._wrapperState.wasMultiple = Boolean(props.multiple);

	    var value = LinkedValueUtils.getValue(props);
	    if (value != null) {
	      inst._wrapperState.pendingUpdate = false;
	      updateOptions(inst, Boolean(props.multiple), value);
	    } else if (wasMultiple !== Boolean(props.multiple)) {
	      // For simplicity, reapply `defaultValue` if `multiple` is toggled.
	      if (props.defaultValue != null) {
	        updateOptions(inst, Boolean(props.multiple), props.defaultValue);
	      } else {
	        // Revert the select back to its default unselected state.
	        updateOptions(inst, Boolean(props.multiple), props.multiple ? [] : '');
	      }
	    }
	  }
	};

	function _handleChange(event) {
	  var props = this._currentElement.props;
	  var returnValue = LinkedValueUtils.executeOnChange(props, event);

	  this._wrapperState.pendingUpdate = true;
	  ReactUpdates.asap(updateOptionsIfPendingUpdateAndMounted, this);
	  return returnValue;
	}

	module.exports = ReactDOMSelect;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(8)))

/***/ },
/* 116 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDOMTextarea
	 */

	'use strict';

	var LinkedValueUtils = __webpack_require__(109);
	var ReactDOMIDOperations = __webpack_require__(31);
	var ReactUpdates = __webpack_require__(57);

	var assign = __webpack_require__(43);
	var invariant = __webpack_require__(17);
	var warning = __webpack_require__(29);

	function forceUpdateIfMounted() {
	  if (this._rootNodeID) {
	    // DOM component is still mounted; update
	    ReactDOMTextarea.updateWrapper(this);
	  }
	}

	/**
	 * Implements a <textarea> native component that allows setting `value`, and
	 * `defaultValue`. This differs from the traditional DOM API because value is
	 * usually set as PCDATA children.
	 *
	 * If `value` is not supplied (or null/undefined), user actions that affect the
	 * value will trigger updates to the element.
	 *
	 * If `value` is supplied (and not null/undefined), the rendered element will
	 * not trigger updates to the element. Instead, the `value` prop must change in
	 * order for the rendered element to be updated.
	 *
	 * The rendered element will be initialized with an empty value, the prop
	 * `defaultValue` if specified, or the children content (deprecated).
	 */
	var ReactDOMTextarea = {
	  getNativeProps: function (inst, props, context) {
	    !(props.dangerouslySetInnerHTML == null) ? process.env.NODE_ENV !== 'production' ? invariant(false, '`dangerouslySetInnerHTML` does not make sense on <textarea>.') : invariant(false) : undefined;

	    // Always set children to the same thing. In IE9, the selection range will
	    // get reset if `textContent` is mutated.
	    var nativeProps = assign({}, props, {
	      defaultValue: undefined,
	      value: undefined,
	      children: inst._wrapperState.initialValue,
	      onChange: inst._wrapperState.onChange
	    });

	    return nativeProps;
	  },

	  mountWrapper: function (inst, props) {
	    if (process.env.NODE_ENV !== 'production') {
	      LinkedValueUtils.checkPropTypes('textarea', props, inst._currentElement._owner);
	    }

	    var defaultValue = props.defaultValue;
	    // TODO (yungsters): Remove support for children content in <textarea>.
	    var children = props.children;
	    if (children != null) {
	      if (process.env.NODE_ENV !== 'production') {
	        process.env.NODE_ENV !== 'production' ? warning(false, 'Use the `defaultValue` or `value` props instead of setting ' + 'children on <textarea>.') : undefined;
	      }
	      !(defaultValue == null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'If you supply `defaultValue` on a <textarea>, do not pass children.') : invariant(false) : undefined;
	      if (Array.isArray(children)) {
	        !(children.length <= 1) ? process.env.NODE_ENV !== 'production' ? invariant(false, '<textarea> can only have at most one child.') : invariant(false) : undefined;
	        children = children[0];
	      }

	      defaultValue = '' + children;
	    }
	    if (defaultValue == null) {
	      defaultValue = '';
	    }
	    var value = LinkedValueUtils.getValue(props);

	    inst._wrapperState = {
	      // We save the initial value so that `ReactDOMComponent` doesn't update
	      // `textContent` (unnecessary since we update value).
	      // The initial value can be a boolean or object so that's why it's
	      // forced to be a string.
	      initialValue: '' + (value != null ? value : defaultValue),
	      onChange: _handleChange.bind(inst)
	    };
	  },

	  updateWrapper: function (inst) {
	    var props = inst._currentElement.props;
	    var value = LinkedValueUtils.getValue(props);
	    if (value != null) {
	      // Cast `value` to a string to ensure the value is set correctly. While
	      // browsers typically do this as necessary, jsdom doesn't.
	      ReactDOMIDOperations.updatePropertyByID(inst._rootNodeID, 'value', '' + value);
	    }
	  }
	};

	function _handleChange(event) {
	  var props = this._currentElement.props;
	  var returnValue = LinkedValueUtils.executeOnChange(props, event);
	  ReactUpdates.asap(forceUpdateIfMounted, this);
	  return returnValue;
	}

	module.exports = ReactDOMTextarea;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(8)))

/***/ },
/* 117 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactMultiChild
	 * @typechecks static-only
	 */

	'use strict';

	var ReactComponentEnvironment = __webpack_require__(67);
	var ReactMultiChildUpdateTypes = __webpack_require__(20);

	var ReactCurrentOwner = __webpack_require__(9);
	var ReactReconciler = __webpack_require__(53);
	var ReactChildReconciler = __webpack_require__(118);

	var flattenChildren = __webpack_require__(119);

	/**
	 * Updating children of a component may trigger recursive updates. The depth is
	 * used to batch recursive updates to render markup more efficiently.
	 *
	 * @type {number}
	 * @private
	 */
	var updateDepth = 0;

	/**
	 * Queue of update configuration objects.
	 *
	 * Each object has a `type` property that is in `ReactMultiChildUpdateTypes`.
	 *
	 * @type {array<object>}
	 * @private
	 */
	var updateQueue = [];

	/**
	 * Queue of markup to be rendered.
	 *
	 * @type {array<string>}
	 * @private
	 */
	var markupQueue = [];

	/**
	 * Enqueues markup to be rendered and inserted at a supplied index.
	 *
	 * @param {string} parentID ID of the parent component.
	 * @param {string} markup Markup that renders into an element.
	 * @param {number} toIndex Destination index.
	 * @private
	 */
	function enqueueInsertMarkup(parentID, markup, toIndex) {
	  // NOTE: Null values reduce hidden classes.
	  updateQueue.push({
	    parentID: parentID,
	    parentNode: null,
	    type: ReactMultiChildUpdateTypes.INSERT_MARKUP,
	    markupIndex: markupQueue.push(markup) - 1,
	    content: null,
	    fromIndex: null,
	    toIndex: toIndex
	  });
	}

	/**
	 * Enqueues moving an existing element to another index.
	 *
	 * @param {string} parentID ID of the parent component.
	 * @param {number} fromIndex Source index of the existing element.
	 * @param {number} toIndex Destination index of the element.
	 * @private
	 */
	function enqueueMove(parentID, fromIndex, toIndex) {
	  // NOTE: Null values reduce hidden classes.
	  updateQueue.push({
	    parentID: parentID,
	    parentNode: null,
	    type: ReactMultiChildUpdateTypes.MOVE_EXISTING,
	    markupIndex: null,
	    content: null,
	    fromIndex: fromIndex,
	    toIndex: toIndex
	  });
	}

	/**
	 * Enqueues removing an element at an index.
	 *
	 * @param {string} parentID ID of the parent component.
	 * @param {number} fromIndex Index of the element to remove.
	 * @private
	 */
	function enqueueRemove(parentID, fromIndex) {
	  // NOTE: Null values reduce hidden classes.
	  updateQueue.push({
	    parentID: parentID,
	    parentNode: null,
	    type: ReactMultiChildUpdateTypes.REMOVE_NODE,
	    markupIndex: null,
	    content: null,
	    fromIndex: fromIndex,
	    toIndex: null
	  });
	}

	/**
	 * Enqueues setting the markup of a node.
	 *
	 * @param {string} parentID ID of the parent component.
	 * @param {string} markup Markup that renders into an element.
	 * @private
	 */
	function enqueueSetMarkup(parentID, markup) {
	  // NOTE: Null values reduce hidden classes.
	  updateQueue.push({
	    parentID: parentID,
	    parentNode: null,
	    type: ReactMultiChildUpdateTypes.SET_MARKUP,
	    markupIndex: null,
	    content: markup,
	    fromIndex: null,
	    toIndex: null
	  });
	}

	/**
	 * Enqueues setting the text content.
	 *
	 * @param {string} parentID ID of the parent component.
	 * @param {string} textContent Text content to set.
	 * @private
	 */
	function enqueueTextContent(parentID, textContent) {
	  // NOTE: Null values reduce hidden classes.
	  updateQueue.push({
	    parentID: parentID,
	    parentNode: null,
	    type: ReactMultiChildUpdateTypes.TEXT_CONTENT,
	    markupIndex: null,
	    content: textContent,
	    fromIndex: null,
	    toIndex: null
	  });
	}

	/**
	 * Processes any enqueued updates.
	 *
	 * @private
	 */
	function processQueue() {
	  if (updateQueue.length) {
	    ReactComponentEnvironment.processChildrenUpdates(updateQueue, markupQueue);
	    clearQueue();
	  }
	}

	/**
	 * Clears any enqueued updates.
	 *
	 * @private
	 */
	function clearQueue() {
	  updateQueue.length = 0;
	  markupQueue.length = 0;
	}

	/**
	 * ReactMultiChild are capable of reconciling multiple children.
	 *
	 * @class ReactMultiChild
	 * @internal
	 */
	var ReactMultiChild = {

	  /**
	   * Provides common functionality for components that must reconcile multiple
	   * children. This is used by `ReactDOMComponent` to mount, update, and
	   * unmount child components.
	   *
	   * @lends {ReactMultiChild.prototype}
	   */
	  Mixin: {

	    _reconcilerInstantiateChildren: function (nestedChildren, transaction, context) {
	      if (process.env.NODE_ENV !== 'production') {
	        if (this._currentElement) {
	          try {
	            ReactCurrentOwner.current = this._currentElement._owner;
	            return ReactChildReconciler.instantiateChildren(nestedChildren, transaction, context);
	          } finally {
	            ReactCurrentOwner.current = null;
	          }
	        }
	      }
	      return ReactChildReconciler.instantiateChildren(nestedChildren, transaction, context);
	    },

	    _reconcilerUpdateChildren: function (prevChildren, nextNestedChildrenElements, transaction, context) {
	      var nextChildren;
	      if (process.env.NODE_ENV !== 'production') {
	        if (this._currentElement) {
	          try {
	            ReactCurrentOwner.current = this._currentElement._owner;
	            nextChildren = flattenChildren(nextNestedChildrenElements);
	          } finally {
	            ReactCurrentOwner.current = null;
	          }
	          return ReactChildReconciler.updateChildren(prevChildren, nextChildren, transaction, context);
	        }
	      }
	      nextChildren = flattenChildren(nextNestedChildrenElements);
	      return ReactChildReconciler.updateChildren(prevChildren, nextChildren, transaction, context);
	    },

	    /**
	     * Generates a "mount image" for each of the supplied children. In the case
	     * of `ReactDOMComponent`, a mount image is a string of markup.
	     *
	     * @param {?object} nestedChildren Nested child maps.
	     * @return {array} An array of mounted representations.
	     * @internal
	     */
	    mountChildren: function (nestedChildren, transaction, context) {
	      var children = this._reconcilerInstantiateChildren(nestedChildren, transaction, context);
	      this._renderedChildren = children;
	      var mountImages = [];
	      var index = 0;
	      for (var name in children) {
	        if (children.hasOwnProperty(name)) {
	          var child = children[name];
	          // Inlined for performance, see `ReactInstanceHandles.createReactID`.
	          var rootID = this._rootNodeID + name;
	          var mountImage = ReactReconciler.mountComponent(child, rootID, transaction, context);
	          child._mountIndex = index++;
	          mountImages.push(mountImage);
	        }
	      }
	      return mountImages;
	    },

	    /**
	     * Replaces any rendered children with a text content string.
	     *
	     * @param {string} nextContent String of content.
	     * @internal
	     */
	    updateTextContent: function (nextContent) {
	      updateDepth++;
	      var errorThrown = true;
	      try {
	        var prevChildren = this._renderedChildren;
	        // Remove any rendered children.
	        ReactChildReconciler.unmountChildren(prevChildren);
	        // TODO: The setTextContent operation should be enough
	        for (var name in prevChildren) {
	          if (prevChildren.hasOwnProperty(name)) {
	            this._unmountChild(prevChildren[name]);
	          }
	        }
	        // Set new text content.
	        this.setTextContent(nextContent);
	        errorThrown = false;
	      } finally {
	        updateDepth--;
	        if (!updateDepth) {
	          if (errorThrown) {
	            clearQueue();
	          } else {
	            processQueue();
	          }
	        }
	      }
	    },

	    /**
	     * Replaces any rendered children with a markup string.
	     *
	     * @param {string} nextMarkup String of markup.
	     * @internal
	     */
	    updateMarkup: function (nextMarkup) {
	      updateDepth++;
	      var errorThrown = true;
	      try {
	        var prevChildren = this._renderedChildren;
	        // Remove any rendered children.
	        ReactChildReconciler.unmountChildren(prevChildren);
	        for (var name in prevChildren) {
	          if (prevChildren.hasOwnProperty(name)) {
	            this._unmountChildByName(prevChildren[name], name);
	          }
	        }
	        this.setMarkup(nextMarkup);
	        errorThrown = false;
	      } finally {
	        updateDepth--;
	        if (!updateDepth) {
	          if (errorThrown) {
	            clearQueue();
	          } else {
	            processQueue();
	          }
	        }
	      }
	    },

	    /**
	     * Updates the rendered children with new children.
	     *
	     * @param {?object} nextNestedChildrenElements Nested child element maps.
	     * @param {ReactReconcileTransaction} transaction
	     * @internal
	     */
	    updateChildren: function (nextNestedChildrenElements, transaction, context) {
	      updateDepth++;
	      var errorThrown = true;
	      try {
	        this._updateChildren(nextNestedChildrenElements, transaction, context);
	        errorThrown = false;
	      } finally {
	        updateDepth--;
	        if (!updateDepth) {
	          if (errorThrown) {
	            clearQueue();
	          } else {
	            processQueue();
	          }
	        }
	      }
	    },

	    /**
	     * Improve performance by isolating this hot code path from the try/catch
	     * block in `updateChildren`.
	     *
	     * @param {?object} nextNestedChildrenElements Nested child element maps.
	     * @param {ReactReconcileTransaction} transaction
	     * @final
	     * @protected
	     */
	    _updateChildren: function (nextNestedChildrenElements, transaction, context) {
	      var prevChildren = this._renderedChildren;
	      var nextChildren = this._reconcilerUpdateChildren(prevChildren, nextNestedChildrenElements, transaction, context);
	      this._renderedChildren = nextChildren;
	      if (!nextChildren && !prevChildren) {
	        return;
	      }
	      var name;
	      // `nextIndex` will increment for each child in `nextChildren`, but
	      // `lastIndex` will be the last index visited in `prevChildren`.
	      var lastIndex = 0;
	      var nextIndex = 0;
	      for (name in nextChildren) {
	        if (!nextChildren.hasOwnProperty(name)) {
	          continue;
	        }
	        var prevChild = prevChildren && prevChildren[name];
	        var nextChild = nextChildren[name];
	        if (prevChild === nextChild) {
	          this.moveChild(prevChild, nextIndex, lastIndex);
	          lastIndex = Math.max(prevChild._mountIndex, lastIndex);
	          prevChild._mountIndex = nextIndex;
	        } else {
	          if (prevChild) {
	            // Update `lastIndex` before `_mountIndex` gets unset by unmounting.
	            lastIndex = Math.max(prevChild._mountIndex, lastIndex);
	            this._unmountChild(prevChild);
	          }
	          // The child must be instantiated before it's mounted.
	          this._mountChildByNameAtIndex(nextChild, name, nextIndex, transaction, context);
	        }
	        nextIndex++;
	      }
	      // Remove children that are no longer present.
	      for (name in prevChildren) {
	        if (prevChildren.hasOwnProperty(name) && !(nextChildren && nextChildren.hasOwnProperty(name))) {
	          this._unmountChild(prevChildren[name]);
	        }
	      }
	    },

	    /**
	     * Unmounts all rendered children. This should be used to clean up children
	     * when this component is unmounted.
	     *
	     * @internal
	     */
	    unmountChildren: function () {
	      var renderedChildren = this._renderedChildren;
	      ReactChildReconciler.unmountChildren(renderedChildren);
	      this._renderedChildren = null;
	    },

	    /**
	     * Moves a child component to the supplied index.
	     *
	     * @param {ReactComponent} child Component to move.
	     * @param {number} toIndex Destination index of the element.
	     * @param {number} lastIndex Last index visited of the siblings of `child`.
	     * @protected
	     */
	    moveChild: function (child, toIndex, lastIndex) {
	      // If the index of `child` is less than `lastIndex`, then it needs to
	      // be moved. Otherwise, we do not need to move it because a child will be
	      // inserted or moved before `child`.
	      if (child._mountIndex < lastIndex) {
	        enqueueMove(this._rootNodeID, child._mountIndex, toIndex);
	      }
	    },

	    /**
	     * Creates a child component.
	     *
	     * @param {ReactComponent} child Component to create.
	     * @param {string} mountImage Markup to insert.
	     * @protected
	     */
	    createChild: function (child, mountImage) {
	      enqueueInsertMarkup(this._rootNodeID, mountImage, child._mountIndex);
	    },

	    /**
	     * Removes a child component.
	     *
	     * @param {ReactComponent} child Child to remove.
	     * @protected
	     */
	    removeChild: function (child) {
	      enqueueRemove(this._rootNodeID, child._mountIndex);
	    },

	    /**
	     * Sets this text content string.
	     *
	     * @param {string} textContent Text content to set.
	     * @protected
	     */
	    setTextContent: function (textContent) {
	      enqueueTextContent(this._rootNodeID, textContent);
	    },

	    /**
	     * Sets this markup string.
	     *
	     * @param {string} markup Markup to set.
	     * @protected
	     */
	    setMarkup: function (markup) {
	      enqueueSetMarkup(this._rootNodeID, markup);
	    },

	    /**
	     * Mounts a child with the supplied name.
	     *
	     * NOTE: This is part of `updateChildren` and is here for readability.
	     *
	     * @param {ReactComponent} child Component to mount.
	     * @param {string} name Name of the child.
	     * @param {number} index Index at which to insert the child.
	     * @param {ReactReconcileTransaction} transaction
	     * @private
	     */
	    _mountChildByNameAtIndex: function (child, name, index, transaction, context) {
	      // Inlined for performance, see `ReactInstanceHandles.createReactID`.
	      var rootID = this._rootNodeID + name;
	      var mountImage = ReactReconciler.mountComponent(child, rootID, transaction, context);
	      child._mountIndex = index;
	      this.createChild(child, mountImage);
	    },

	    /**
	     * Unmounts a rendered child.
	     *
	     * NOTE: This is part of `updateChildren` and is here for readability.
	     *
	     * @param {ReactComponent} child Component to unmount.
	     * @private
	     */
	    _unmountChild: function (child) {
	      this.removeChild(child);
	      child._mountIndex = null;
	    }

	  }

	};

	module.exports = ReactMultiChild;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(8)))

/***/ },
/* 118 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2014-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactChildReconciler
	 * @typechecks static-only
	 */

	'use strict';

	var ReactReconciler = __webpack_require__(53);

	var instantiateReactComponent = __webpack_require__(65);
	var shouldUpdateReactComponent = __webpack_require__(70);
	var traverseAllChildren = __webpack_require__(114);
	var warning = __webpack_require__(29);

	function instantiateChild(childInstances, child, name) {
	  // We found a component instance.
	  var keyUnique = childInstances[name] === undefined;
	  if (process.env.NODE_ENV !== 'production') {
	    process.env.NODE_ENV !== 'production' ? warning(keyUnique, 'flattenChildren(...): Encountered two children with the same key, ' + '`%s`. Child keys must be unique; when two children share a key, only ' + 'the first child will be used.', name) : undefined;
	  }
	  if (child != null && keyUnique) {
	    childInstances[name] = instantiateReactComponent(child, null);
	  }
	}

	/**
	 * ReactChildReconciler provides helpers for initializing or updating a set of
	 * children. Its output is suitable for passing it onto ReactMultiChild which
	 * does diffed reordering and insertion.
	 */
	var ReactChildReconciler = {
	  /**
	   * Generates a "mount image" for each of the supplied children. In the case
	   * of `ReactDOMComponent`, a mount image is a string of markup.
	   *
	   * @param {?object} nestedChildNodes Nested child maps.
	   * @return {?object} A set of child instances.
	   * @internal
	   */
	  instantiateChildren: function (nestedChildNodes, transaction, context) {
	    if (nestedChildNodes == null) {
	      return null;
	    }
	    var childInstances = {};
	    traverseAllChildren(nestedChildNodes, instantiateChild, childInstances);
	    return childInstances;
	  },

	  /**
	   * Updates the rendered children and returns a new set of children.
	   *
	   * @param {?object} prevChildren Previously initialized set of children.
	   * @param {?object} nextChildren Flat child element maps.
	   * @param {ReactReconcileTransaction} transaction
	   * @param {object} context
	   * @return {?object} A new set of child instances.
	   * @internal
	   */
	  updateChildren: function (prevChildren, nextChildren, transaction, context) {
	    // We currently don't have a way to track moves here but if we use iterators
	    // instead of for..in we can zip the iterators and check if an item has
	    // moved.
	    // TODO: If nothing has changed, return the prevChildren object so that we
	    // can quickly bailout if nothing has changed.
	    if (!nextChildren && !prevChildren) {
	      return null;
	    }
	    var name;
	    for (name in nextChildren) {
	      if (!nextChildren.hasOwnProperty(name)) {
	        continue;
	      }
	      var prevChild = prevChildren && prevChildren[name];
	      var prevElement = prevChild && prevChild._currentElement;
	      var nextElement = nextChildren[name];
	      if (prevChild != null && shouldUpdateReactComponent(prevElement, nextElement)) {
	        ReactReconciler.receiveComponent(prevChild, nextElement, transaction, context);
	        nextChildren[name] = prevChild;
	      } else {
	        if (prevChild) {
	          ReactReconciler.unmountComponent(prevChild, name);
	        }
	        // The child must be instantiated before it's mounted.
	        var nextChildInstance = instantiateReactComponent(nextElement, null);
	        nextChildren[name] = nextChildInstance;
	      }
	    }
	    // Unmount children that are no longer present.
	    for (name in prevChildren) {
	      if (prevChildren.hasOwnProperty(name) && !(nextChildren && nextChildren.hasOwnProperty(name))) {
	        ReactReconciler.unmountComponent(prevChildren[name]);
	      }
	    }
	    return nextChildren;
	  },

	  /**
	   * Unmounts all rendered children. This should be used to clean up children
	   * when this component is unmounted.
	   *
	   * @param {?object} renderedChildren Previously initialized set of children.
	   * @internal
	   */
	  unmountChildren: function (renderedChildren) {
	    for (var name in renderedChildren) {
	      if (renderedChildren.hasOwnProperty(name)) {
	        var renderedChild = renderedChildren[name];
	        ReactReconciler.unmountComponent(renderedChild);
	      }
	    }
	  }

	};

	module.exports = ReactChildReconciler;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(8)))

/***/ },
/* 119 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule flattenChildren
	 */

	'use strict';

	var traverseAllChildren = __webpack_require__(114);
	var warning = __webpack_require__(29);

	/**
	 * @param {function} traverseContext Context passed through traversal.
	 * @param {?ReactComponent} child React child component.
	 * @param {!string} name String name of key path to child.
	 */
	function flattenSingleChildIntoContext(traverseContext, child, name) {
	  // We found a component instance.
	  var result = traverseContext;
	  var keyUnique = result[name] === undefined;
	  if (process.env.NODE_ENV !== 'production') {
	    process.env.NODE_ENV !== 'production' ? warning(keyUnique, 'flattenChildren(...): Encountered two children with the same key, ' + '`%s`. Child keys must be unique; when two children share a key, only ' + 'the first child will be used.', name) : undefined;
	  }
	  if (keyUnique && child != null) {
	    result[name] = child;
	  }
	}

	/**
	 * Flattens children that are typically specified as `props.children`. Any null
	 * children will not be included in the resulting object.
	 * @return {!object} flattened children keyed by name.
	 */
	function flattenChildren(children) {
	  if (children == null) {
	    return children;
	  }
	  var result = {};
	  traverseAllChildren(children, flattenSingleChildIntoContext, result);
	  return result;
	}

	module.exports = flattenChildren;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(8)))

/***/ },
/* 120 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule shallowEqual
	 * @typechecks
	 * 
	 */

	'use strict';

	var hasOwnProperty = Object.prototype.hasOwnProperty;

	/**
	 * Performs equality by iterating through keys on an object and returning false
	 * when any key has values which are not strictly equal between the arguments.
	 * Returns true when the values of all keys are strictly equal.
	 */
	function shallowEqual(objA, objB) {
	  if (objA === objB) {
	    return true;
	  }

	  if (typeof objA !== 'object' || objA === null || typeof objB !== 'object' || objB === null) {
	    return false;
	  }

	  var keysA = Object.keys(objA);
	  var keysB = Object.keys(objB);

	  if (keysA.length !== keysB.length) {
	    return false;
	  }

	  // Test for A's keys different from B.
	  var bHasOwnProperty = hasOwnProperty.bind(objB);
	  for (var i = 0; i < keysA.length; i++) {
	    if (!bHasOwnProperty(keysA[i]) || objA[keysA[i]] !== objB[keysA[i]]) {
	      return false;
	    }
	  }

	  return true;
	}

	module.exports = shallowEqual;

/***/ },
/* 121 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactEventListener
	 * @typechecks static-only
	 */

	'use strict';

	var EventListener = __webpack_require__(122);
	var ExecutionEnvironment = __webpack_require__(13);
	var PooledClass = __webpack_require__(59);
	var ReactInstanceHandles = __webpack_require__(48);
	var ReactMount = __webpack_require__(32);
	var ReactUpdates = __webpack_require__(57);

	var assign = __webpack_require__(43);
	var getEventTarget = __webpack_require__(84);
	var getUnboundedScrollPosition = __webpack_require__(123);

	var DOCUMENT_FRAGMENT_NODE_TYPE = 11;

	/**
	 * Finds the parent React component of `node`.
	 *
	 * @param {*} node
	 * @return {?DOMEventTarget} Parent container, or `null` if the specified node
	 *                           is not nested.
	 */
	function findParent(node) {
	  // TODO: It may be a good idea to cache this to prevent unnecessary DOM
	  // traversal, but caching is difficult to do correctly without using a
	  // mutation observer to listen for all DOM changes.
	  var nodeID = ReactMount.getID(node);
	  var rootID = ReactInstanceHandles.getReactRootIDFromNodeID(nodeID);
	  var container = ReactMount.findReactContainerForID(rootID);
	  var parent = ReactMount.getFirstReactDOM(container);
	  return parent;
	}

	// Used to store ancestor hierarchy in top level callback
	function TopLevelCallbackBookKeeping(topLevelType, nativeEvent) {
	  this.topLevelType = topLevelType;
	  this.nativeEvent = nativeEvent;
	  this.ancestors = [];
	}
	assign(TopLevelCallbackBookKeeping.prototype, {
	  destructor: function () {
	    this.topLevelType = null;
	    this.nativeEvent = null;
	    this.ancestors.length = 0;
	  }
	});
	PooledClass.addPoolingTo(TopLevelCallbackBookKeeping, PooledClass.twoArgumentPooler);

	function handleTopLevelImpl(bookKeeping) {
	  // TODO: Re-enable event.path handling
	  //
	  // if (bookKeeping.nativeEvent.path && bookKeeping.nativeEvent.path.length > 1) {
	  //   // New browsers have a path attribute on native events
	  //   handleTopLevelWithPath(bookKeeping);
	  // } else {
	  //   // Legacy browsers don't have a path attribute on native events
	  //   handleTopLevelWithoutPath(bookKeeping);
	  // }

	  void handleTopLevelWithPath; // temporarily unused
	  handleTopLevelWithoutPath(bookKeeping);
	}

	// Legacy browsers don't have a path attribute on native events
	function handleTopLevelWithoutPath(bookKeeping) {
	  var topLevelTarget = ReactMount.getFirstReactDOM(getEventTarget(bookKeeping.nativeEvent)) || window;

	  // Loop through the hierarchy, in case there's any nested components.
	  // It's important that we build the array of ancestors before calling any
	  // event handlers, because event handlers can modify the DOM, leading to
	  // inconsistencies with ReactMount's node cache. See #1105.
	  var ancestor = topLevelTarget;
	  while (ancestor) {
	    bookKeeping.ancestors.push(ancestor);
	    ancestor = findParent(ancestor);
	  }

	  for (var i = 0; i < bookKeeping.ancestors.length; i++) {
	    topLevelTarget = bookKeeping.ancestors[i];
	    var topLevelTargetID = ReactMount.getID(topLevelTarget) || '';
	    ReactEventListener._handleTopLevel(bookKeeping.topLevelType, topLevelTarget, topLevelTargetID, bookKeeping.nativeEvent, getEventTarget(bookKeeping.nativeEvent));
	  }
	}

	// New browsers have a path attribute on native events
	function handleTopLevelWithPath(bookKeeping) {
	  var path = bookKeeping.nativeEvent.path;
	  var currentNativeTarget = path[0];
	  var eventsFired = 0;
	  for (var i = 0; i < path.length; i++) {
	    var currentPathElement = path[i];
	    if (currentPathElement.nodeType === DOCUMENT_FRAGMENT_NODE_TYPE) {
	      currentNativeTarget = path[i + 1];
	    }
	    // TODO: slow
	    var reactParent = ReactMount.getFirstReactDOM(currentPathElement);
	    if (reactParent === currentPathElement) {
	      var currentPathElementID = ReactMount.getID(currentPathElement);
	      var newRootID = ReactInstanceHandles.getReactRootIDFromNodeID(currentPathElementID);
	      bookKeeping.ancestors.push(currentPathElement);

	      var topLevelTargetID = ReactMount.getID(currentPathElement) || '';
	      eventsFired++;
	      ReactEventListener._handleTopLevel(bookKeeping.topLevelType, currentPathElement, topLevelTargetID, bookKeeping.nativeEvent, currentNativeTarget);

	      // Jump to the root of this React render tree
	      while (currentPathElementID !== newRootID) {
	        i++;
	        currentPathElement = path[i];
	        currentPathElementID = ReactMount.getID(currentPathElement);
	      }
	    }
	  }
	  if (eventsFired === 0) {
	    ReactEventListener._handleTopLevel(bookKeeping.topLevelType, window, '', bookKeeping.nativeEvent, getEventTarget(bookKeeping.nativeEvent));
	  }
	}

	function scrollValueMonitor(cb) {
	  var scrollPosition = getUnboundedScrollPosition(window);
	  cb(scrollPosition);
	}

	var ReactEventListener = {
	  _enabled: true,
	  _handleTopLevel: null,

	  WINDOW_HANDLE: ExecutionEnvironment.canUseDOM ? window : null,

	  setHandleTopLevel: function (handleTopLevel) {
	    ReactEventListener._handleTopLevel = handleTopLevel;
	  },

	  setEnabled: function (enabled) {
	    ReactEventListener._enabled = !!enabled;
	  },

	  isEnabled: function () {
	    return ReactEventListener._enabled;
	  },

	  /**
	   * Traps top-level events by using event bubbling.
	   *
	   * @param {string} topLevelType Record from `EventConstants`.
	   * @param {string} handlerBaseName Event name (e.g. "click").
	   * @param {object} handle Element on which to attach listener.
	   * @return {?object} An object with a remove function which will forcefully
	   *                  remove the listener.
	   * @internal
	   */
	  trapBubbledEvent: function (topLevelType, handlerBaseName, handle) {
	    var element = handle;
	    if (!element) {
	      return null;
	    }
	    return EventListener.listen(element, handlerBaseName, ReactEventListener.dispatchEvent.bind(null, topLevelType));
	  },

	  /**
	   * Traps a top-level event by using event capturing.
	   *
	   * @param {string} topLevelType Record from `EventConstants`.
	   * @param {string} handlerBaseName Event name (e.g. "click").
	   * @param {object} handle Element on which to attach listener.
	   * @return {?object} An object with a remove function which will forcefully
	   *                  remove the listener.
	   * @internal
	   */
	  trapCapturedEvent: function (topLevelType, handlerBaseName, handle) {
	    var element = handle;
	    if (!element) {
	      return null;
	    }
	    return EventListener.capture(element, handlerBaseName, ReactEventListener.dispatchEvent.bind(null, topLevelType));
	  },

	  monitorScrollValue: function (refresh) {
	    var callback = scrollValueMonitor.bind(null, refresh);
	    EventListener.listen(window, 'scroll', callback);
	  },

	  dispatchEvent: function (topLevelType, nativeEvent) {
	    if (!ReactEventListener._enabled) {
	      return;
	    }

	    var bookKeeping = TopLevelCallbackBookKeeping.getPooled(topLevelType, nativeEvent);
	    try {
	      // Event queue being processed in the same cycle allows
	      // `preventDefault`.
	      ReactUpdates.batchedUpdates(handleTopLevelImpl, bookKeeping);
	    } finally {
	      TopLevelCallbackBookKeeping.release(bookKeeping);
	    }
	  }
	};

	module.exports = ReactEventListener;

/***/ },
/* 122 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 * http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 *
	 * @providesModule EventListener
	 * @typechecks
	 */

	'use strict';

	var emptyFunction = __webpack_require__(19);

	/**
	 * Upstream version of event listener. Does not take into account specific
	 * nature of platform.
	 */
	var EventListener = {
	  /**
	   * Listen to DOM events during the bubble phase.
	   *
	   * @param {DOMEventTarget} target DOM element to register listener on.
	   * @param {string} eventType Event type, e.g. 'click' or 'mouseover'.
	   * @param {function} callback Callback function.
	   * @return {object} Object with a `remove` method.
	   */
	  listen: function (target, eventType, callback) {
	    if (target.addEventListener) {
	      target.addEventListener(eventType, callback, false);
	      return {
	        remove: function () {
	          target.removeEventListener(eventType, callback, false);
	        }
	      };
	    } else if (target.attachEvent) {
	      target.attachEvent('on' + eventType, callback);
	      return {
	        remove: function () {
	          target.detachEvent('on' + eventType, callback);
	        }
	      };
	    }
	  },

	  /**
	   * Listen to DOM events during the capture phase.
	   *
	   * @param {DOMEventTarget} target DOM element to register listener on.
	   * @param {string} eventType Event type, e.g. 'click' or 'mouseover'.
	   * @param {function} callback Callback function.
	   * @return {object} Object with a `remove` method.
	   */
	  capture: function (target, eventType, callback) {
	    if (target.addEventListener) {
	      target.addEventListener(eventType, callback, true);
	      return {
	        remove: function () {
	          target.removeEventListener(eventType, callback, true);
	        }
	      };
	    } else {
	      if (process.env.NODE_ENV !== 'production') {
	        console.error('Attempted to listen to events during the capture phase on a ' + 'browser that does not support the capture phase. Your application ' + 'will not receive some events.');
	      }
	      return {
	        remove: emptyFunction
	      };
	    }
	  },

	  registerDefault: function () {}
	};

	module.exports = EventListener;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(8)))

/***/ },
/* 123 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule getUnboundedScrollPosition
	 * @typechecks
	 */

	'use strict';

	/**
	 * Gets the scroll position of the supplied element or window.
	 *
	 * The return values are unbounded, unlike `getScrollPosition`. This means they
	 * may be negative or exceed the element boundaries (which is possible using
	 * inertial scrolling).
	 *
	 * @param {DOMWindow|DOMElement} scrollable
	 * @return {object} Map with `x` and `y` keys.
	 */
	function getUnboundedScrollPosition(scrollable) {
	  if (scrollable === window) {
	    return {
	      x: window.pageXOffset || document.documentElement.scrollLeft,
	      y: window.pageYOffset || document.documentElement.scrollTop
	    };
	  }
	  return {
	    x: scrollable.scrollLeft,
	    y: scrollable.scrollTop
	  };
	}

	module.exports = getUnboundedScrollPosition;

/***/ },
/* 124 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactInjection
	 */

	'use strict';

	var DOMProperty = __webpack_require__(27);
	var EventPluginHub = __webpack_require__(35);
	var ReactComponentEnvironment = __webpack_require__(67);
	var ReactClass = __webpack_require__(125);
	var ReactEmptyComponent = __webpack_require__(71);
	var ReactBrowserEventEmitter = __webpack_require__(33);
	var ReactNativeComponent = __webpack_require__(72);
	var ReactPerf = __webpack_require__(22);
	var ReactRootIndex = __webpack_require__(49);
	var ReactUpdates = __webpack_require__(57);

	var ReactInjection = {
	  Component: ReactComponentEnvironment.injection,
	  Class: ReactClass.injection,
	  DOMProperty: DOMProperty.injection,
	  EmptyComponent: ReactEmptyComponent.injection,
	  EventPluginHub: EventPluginHub.injection,
	  EventEmitter: ReactBrowserEventEmitter.injection,
	  NativeComponent: ReactNativeComponent.injection,
	  Perf: ReactPerf.injection,
	  RootIndex: ReactRootIndex.injection,
	  Updates: ReactUpdates.injection
	};

	module.exports = ReactInjection;

/***/ },
/* 125 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactClass
	 */

	'use strict';

	var ReactComponent = __webpack_require__(126);
	var ReactElement = __webpack_require__(46);
	var ReactPropTypeLocations = __webpack_require__(68);
	var ReactPropTypeLocationNames = __webpack_require__(69);
	var ReactNoopUpdateQueue = __webpack_require__(127);

	var assign = __webpack_require__(43);
	var emptyObject = __webpack_require__(61);
	var invariant = __webpack_require__(17);
	var keyMirror = __webpack_require__(21);
	var keyOf = __webpack_require__(82);
	var warning = __webpack_require__(29);

	var MIXINS_KEY = keyOf({ mixins: null });

	/**
	 * Policies that describe methods in `ReactClassInterface`.
	 */
	var SpecPolicy = keyMirror({
	  /**
	   * These methods may be defined only once by the class specification or mixin.
	   */
	  DEFINE_ONCE: null,
	  /**
	   * These methods may be defined by both the class specification and mixins.
	   * Subsequent definitions will be chained. These methods must return void.
	   */
	  DEFINE_MANY: null,
	  /**
	   * These methods are overriding the base class.
	   */
	  OVERRIDE_BASE: null,
	  /**
	   * These methods are similar to DEFINE_MANY, except we assume they return
	   * objects. We try to merge the keys of the return values of all the mixed in
	   * functions. If there is a key conflict we throw.
	   */
	  DEFINE_MANY_MERGED: null
	});

	var injectedMixins = [];

	var warnedSetProps = false;
	function warnSetProps() {
	  if (!warnedSetProps) {
	    warnedSetProps = true;
	    process.env.NODE_ENV !== 'production' ? warning(false, 'setProps(...) and replaceProps(...) are deprecated. ' + 'Instead, call render again at the top level.') : undefined;
	  }
	}

	/**
	 * Composite components are higher-level components that compose other composite
	 * or native components.
	 *
	 * To create a new type of `ReactClass`, pass a specification of
	 * your new class to `React.createClass`. The only requirement of your class
	 * specification is that you implement a `render` method.
	 *
	 *   var MyComponent = React.createClass({
	 *     render: function() {
	 *       return <div>Hello World</div>;
	 *     }
	 *   });
	 *
	 * The class specification supports a specific protocol of methods that have
	 * special meaning (e.g. `render`). See `ReactClassInterface` for
	 * more the comprehensive protocol. Any other properties and methods in the
	 * class specification will be available on the prototype.
	 *
	 * @interface ReactClassInterface
	 * @internal
	 */
	var ReactClassInterface = {

	  /**
	   * An array of Mixin objects to include when defining your component.
	   *
	   * @type {array}
	   * @optional
	   */
	  mixins: SpecPolicy.DEFINE_MANY,

	  /**
	   * An object containing properties and methods that should be defined on
	   * the component's constructor instead of its prototype (static methods).
	   *
	   * @type {object}
	   * @optional
	   */
	  statics: SpecPolicy.DEFINE_MANY,

	  /**
	   * Definition of prop types for this component.
	   *
	   * @type {object}
	   * @optional
	   */
	  propTypes: SpecPolicy.DEFINE_MANY,

	  /**
	   * Definition of context types for this component.
	   *
	   * @type {object}
	   * @optional
	   */
	  contextTypes: SpecPolicy.DEFINE_MANY,

	  /**
	   * Definition of context types this component sets for its children.
	   *
	   * @type {object}
	   * @optional
	   */
	  childContextTypes: SpecPolicy.DEFINE_MANY,

	  // ==== Definition methods ====

	  /**
	   * Invoked when the component is mounted. Values in the mapping will be set on
	   * `this.props` if that prop is not specified (i.e. using an `in` check).
	   *
	   * This method is invoked before `getInitialState` and therefore cannot rely
	   * on `this.state` or use `this.setState`.
	   *
	   * @return {object}
	   * @optional
	   */
	  getDefaultProps: SpecPolicy.DEFINE_MANY_MERGED,

	  /**
	   * Invoked once before the component is mounted. The return value will be used
	   * as the initial value of `this.state`.
	   *
	   *   getInitialState: function() {
	   *     return {
	   *       isOn: false,
	   *       fooBaz: new BazFoo()
	   *     }
	   *   }
	   *
	   * @return {object}
	   * @optional
	   */
	  getInitialState: SpecPolicy.DEFINE_MANY_MERGED,

	  /**
	   * @return {object}
	   * @optional
	   */
	  getChildContext: SpecPolicy.DEFINE_MANY_MERGED,

	  /**
	   * Uses props from `this.props` and state from `this.state` to render the
	   * structure of the component.
	   *
	   * No guarantees are made about when or how often this method is invoked, so
	   * it must not have side effects.
	   *
	   *   render: function() {
	   *     var name = this.props.name;
	   *     return <div>Hello, {name}!</div>;
	   *   }
	   *
	   * @return {ReactComponent}
	   * @nosideeffects
	   * @required
	   */
	  render: SpecPolicy.DEFINE_ONCE,

	  // ==== Delegate methods ====

	  /**
	   * Invoked when the component is initially created and about to be mounted.
	   * This may have side effects, but any external subscriptions or data created
	   * by this method must be cleaned up in `componentWillUnmount`.
	   *
	   * @optional
	   */
	  componentWillMount: SpecPolicy.DEFINE_MANY,

	  /**
	   * Invoked when the component has been mounted and has a DOM representation.
	   * However, there is no guarantee that the DOM node is in the document.
	   *
	   * Use this as an opportunity to operate on the DOM when the component has
	   * been mounted (initialized and rendered) for the first time.
	   *
	   * @param {DOMElement} rootNode DOM element representing the component.
	   * @optional
	   */
	  componentDidMount: SpecPolicy.DEFINE_MANY,

	  /**
	   * Invoked before the component receives new props.
	   *
	   * Use this as an opportunity to react to a prop transition by updating the
	   * state using `this.setState`. Current props are accessed via `this.props`.
	   *
	   *   componentWillReceiveProps: function(nextProps, nextContext) {
	   *     this.setState({
	   *       likesIncreasing: nextProps.likeCount > this.props.likeCount
	   *     });
	   *   }
	   *
	   * NOTE: There is no equivalent `componentWillReceiveState`. An incoming prop
	   * transition may cause a state change, but the opposite is not true. If you
	   * need it, you are probably looking for `componentWillUpdate`.
	   *
	   * @param {object} nextProps
	   * @optional
	   */
	  componentWillReceiveProps: SpecPolicy.DEFINE_MANY,

	  /**
	   * Invoked while deciding if the component should be updated as a result of
	   * receiving new props, state and/or context.
	   *
	   * Use this as an opportunity to `return false` when you're certain that the
	   * transition to the new props/state/context will not require a component
	   * update.
	   *
	   *   shouldComponentUpdate: function(nextProps, nextState, nextContext) {
	   *     return !equal(nextProps, this.props) ||
	   *       !equal(nextState, this.state) ||
	   *       !equal(nextContext, this.context);
	   *   }
	   *
	   * @param {object} nextProps
	   * @param {?object} nextState
	   * @param {?object} nextContext
	   * @return {boolean} True if the component should update.
	   * @optional
	   */
	  shouldComponentUpdate: SpecPolicy.DEFINE_ONCE,

	  /**
	   * Invoked when the component is about to update due to a transition from
	   * `this.props`, `this.state` and `this.context` to `nextProps`, `nextState`
	   * and `nextContext`.
	   *
	   * Use this as an opportunity to perform preparation before an update occurs.
	   *
	   * NOTE: You **cannot** use `this.setState()` in this method.
	   *
	   * @param {object} nextProps
	   * @param {?object} nextState
	   * @param {?object} nextContext
	   * @param {ReactReconcileTransaction} transaction
	   * @optional
	   */
	  componentWillUpdate: SpecPolicy.DEFINE_MANY,

	  /**
	   * Invoked when the component's DOM representation has been updated.
	   *
	   * Use this as an opportunity to operate on the DOM when the component has
	   * been updated.
	   *
	   * @param {object} prevProps
	   * @param {?object} prevState
	   * @param {?object} prevContext
	   * @param {DOMElement} rootNode DOM element representing the component.
	   * @optional
	   */
	  componentDidUpdate: SpecPolicy.DEFINE_MANY,

	  /**
	   * Invoked when the component is about to be removed from its parent and have
	   * its DOM representation destroyed.
	   *
	   * Use this as an opportunity to deallocate any external resources.
	   *
	   * NOTE: There is no `componentDidUnmount` since your component will have been
	   * destroyed by that point.
	   *
	   * @optional
	   */
	  componentWillUnmount: SpecPolicy.DEFINE_MANY,

	  // ==== Advanced methods ====

	  /**
	   * Updates the component's currently mounted DOM representation.
	   *
	   * By default, this implements React's rendering and reconciliation algorithm.
	   * Sophisticated clients may wish to override this.
	   *
	   * @param {ReactReconcileTransaction} transaction
	   * @internal
	   * @overridable
	   */
	  updateComponent: SpecPolicy.OVERRIDE_BASE

	};

	/**
	 * Mapping from class specification keys to special processing functions.
	 *
	 * Although these are declared like instance properties in the specification
	 * when defining classes using `React.createClass`, they are actually static
	 * and are accessible on the constructor instead of the prototype. Despite
	 * being static, they must be defined outside of the "statics" key under
	 * which all other static methods are defined.
	 */
	var RESERVED_SPEC_KEYS = {
	  displayName: function (Constructor, displayName) {
	    Constructor.displayName = displayName;
	  },
	  mixins: function (Constructor, mixins) {
	    if (mixins) {
	      for (var i = 0; i < mixins.length; i++) {
	        mixSpecIntoComponent(Constructor, mixins[i]);
	      }
	    }
	  },
	  childContextTypes: function (Constructor, childContextTypes) {
	    if (process.env.NODE_ENV !== 'production') {
	      validateTypeDef(Constructor, childContextTypes, ReactPropTypeLocations.childContext);
	    }
	    Constructor.childContextTypes = assign({}, Constructor.childContextTypes, childContextTypes);
	  },
	  contextTypes: function (Constructor, contextTypes) {
	    if (process.env.NODE_ENV !== 'production') {
	      validateTypeDef(Constructor, contextTypes, ReactPropTypeLocations.context);
	    }
	    Constructor.contextTypes = assign({}, Constructor.contextTypes, contextTypes);
	  },
	  /**
	   * Special case getDefaultProps which should move into statics but requires
	   * automatic merging.
	   */
	  getDefaultProps: function (Constructor, getDefaultProps) {
	    if (Constructor.getDefaultProps) {
	      Constructor.getDefaultProps = createMergedResultFunction(Constructor.getDefaultProps, getDefaultProps);
	    } else {
	      Constructor.getDefaultProps = getDefaultProps;
	    }
	  },
	  propTypes: function (Constructor, propTypes) {
	    if (process.env.NODE_ENV !== 'production') {
	      validateTypeDef(Constructor, propTypes, ReactPropTypeLocations.prop);
	    }
	    Constructor.propTypes = assign({}, Constructor.propTypes, propTypes);
	  },
	  statics: function (Constructor, statics) {
	    mixStaticSpecIntoComponent(Constructor, statics);
	  },
	  autobind: function () {} };

	// noop
	function validateTypeDef(Constructor, typeDef, location) {
	  for (var propName in typeDef) {
	    if (typeDef.hasOwnProperty(propName)) {
	      // use a warning instead of an invariant so components
	      // don't show up in prod but not in __DEV__
	      process.env.NODE_ENV !== 'production' ? warning(typeof typeDef[propName] === 'function', '%s: %s type `%s` is invalid; it must be a function, usually from ' + 'React.PropTypes.', Constructor.displayName || 'ReactClass', ReactPropTypeLocationNames[location], propName) : undefined;
	    }
	  }
	}

	function validateMethodOverride(proto, name) {
	  var specPolicy = ReactClassInterface.hasOwnProperty(name) ? ReactClassInterface[name] : null;

	  // Disallow overriding of base class methods unless explicitly allowed.
	  if (ReactClassMixin.hasOwnProperty(name)) {
	    !(specPolicy === SpecPolicy.OVERRIDE_BASE) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactClassInterface: You are attempting to override ' + '`%s` from your class specification. Ensure that your method names ' + 'do not overlap with React methods.', name) : invariant(false) : undefined;
	  }

	  // Disallow defining methods more than once unless explicitly allowed.
	  if (proto.hasOwnProperty(name)) {
	    !(specPolicy === SpecPolicy.DEFINE_MANY || specPolicy === SpecPolicy.DEFINE_MANY_MERGED) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactClassInterface: You are attempting to define ' + '`%s` on your component more than once. This conflict may be due ' + 'to a mixin.', name) : invariant(false) : undefined;
	  }
	}

	/**
	 * Mixin helper which handles policy validation and reserved
	 * specification keys when building React classses.
	 */
	function mixSpecIntoComponent(Constructor, spec) {
	  if (!spec) {
	    return;
	  }

	  !(typeof spec !== 'function') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactClass: You\'re attempting to ' + 'use a component class as a mixin. Instead, just use a regular object.') : invariant(false) : undefined;
	  !!ReactElement.isValidElement(spec) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactClass: You\'re attempting to ' + 'use a component as a mixin. Instead, just use a regular object.') : invariant(false) : undefined;

	  var proto = Constructor.prototype;

	  // By handling mixins before any other properties, we ensure the same
	  // chaining order is applied to methods with DEFINE_MANY policy, whether
	  // mixins are listed before or after these methods in the spec.
	  if (spec.hasOwnProperty(MIXINS_KEY)) {
	    RESERVED_SPEC_KEYS.mixins(Constructor, spec.mixins);
	  }

	  for (var name in spec) {
	    if (!spec.hasOwnProperty(name)) {
	      continue;
	    }

	    if (name === MIXINS_KEY) {
	      // We have already handled mixins in a special case above.
	      continue;
	    }

	    var property = spec[name];
	    validateMethodOverride(proto, name);

	    if (RESERVED_SPEC_KEYS.hasOwnProperty(name)) {
	      RESERVED_SPEC_KEYS[name](Constructor, property);
	    } else {
	      // Setup methods on prototype:
	      // The following member methods should not be automatically bound:
	      // 1. Expected ReactClass methods (in the "interface").
	      // 2. Overridden methods (that were mixed in).
	      var isReactClassMethod = ReactClassInterface.hasOwnProperty(name);
	      var isAlreadyDefined = proto.hasOwnProperty(name);
	      var isFunction = typeof property === 'function';
	      var shouldAutoBind = isFunction && !isReactClassMethod && !isAlreadyDefined && spec.autobind !== false;

	      if (shouldAutoBind) {
	        if (!proto.__reactAutoBindMap) {
	          proto.__reactAutoBindMap = {};
	        }
	        proto.__reactAutoBindMap[name] = property;
	        proto[name] = property;
	      } else {
	        if (isAlreadyDefined) {
	          var specPolicy = ReactClassInterface[name];

	          // These cases should already be caught by validateMethodOverride.
	          !(isReactClassMethod && (specPolicy === SpecPolicy.DEFINE_MANY_MERGED || specPolicy === SpecPolicy.DEFINE_MANY)) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactClass: Unexpected spec policy %s for key %s ' + 'when mixing in component specs.', specPolicy, name) : invariant(false) : undefined;

	          // For methods which are defined more than once, call the existing
	          // methods before calling the new property, merging if appropriate.
	          if (specPolicy === SpecPolicy.DEFINE_MANY_MERGED) {
	            proto[name] = createMergedResultFunction(proto[name], property);
	          } else if (specPolicy === SpecPolicy.DEFINE_MANY) {
	            proto[name] = createChainedFunction(proto[name], property);
	          }
	        } else {
	          proto[name] = property;
	          if (process.env.NODE_ENV !== 'production') {
	            // Add verbose displayName to the function, which helps when looking
	            // at profiling tools.
	            if (typeof property === 'function' && spec.displayName) {
	              proto[name].displayName = spec.displayName + '_' + name;
	            }
	          }
	        }
	      }
	    }
	  }
	}

	function mixStaticSpecIntoComponent(Constructor, statics) {
	  if (!statics) {
	    return;
	  }
	  for (var name in statics) {
	    var property = statics[name];
	    if (!statics.hasOwnProperty(name)) {
	      continue;
	    }

	    var isReserved = (name in RESERVED_SPEC_KEYS);
	    !!isReserved ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactClass: You are attempting to define a reserved ' + 'property, `%s`, that shouldn\'t be on the "statics" key. Define it ' + 'as an instance property instead; it will still be accessible on the ' + 'constructor.', name) : invariant(false) : undefined;

	    var isInherited = (name in Constructor);
	    !!isInherited ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactClass: You are attempting to define ' + '`%s` on your component more than once. This conflict may be ' + 'due to a mixin.', name) : invariant(false) : undefined;
	    Constructor[name] = property;
	  }
	}

	/**
	 * Merge two objects, but throw if both contain the same key.
	 *
	 * @param {object} one The first object, which is mutated.
	 * @param {object} two The second object
	 * @return {object} one after it has been mutated to contain everything in two.
	 */
	function mergeIntoWithNoDuplicateKeys(one, two) {
	  !(one && two && typeof one === 'object' && typeof two === 'object') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'mergeIntoWithNoDuplicateKeys(): Cannot merge non-objects.') : invariant(false) : undefined;

	  for (var key in two) {
	    if (two.hasOwnProperty(key)) {
	      !(one[key] === undefined) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'mergeIntoWithNoDuplicateKeys(): ' + 'Tried to merge two objects with the same key: `%s`. This conflict ' + 'may be due to a mixin; in particular, this may be caused by two ' + 'getInitialState() or getDefaultProps() methods returning objects ' + 'with clashing keys.', key) : invariant(false) : undefined;
	      one[key] = two[key];
	    }
	  }
	  return one;
	}

	/**
	 * Creates a function that invokes two functions and merges their return values.
	 *
	 * @param {function} one Function to invoke first.
	 * @param {function} two Function to invoke second.
	 * @return {function} Function that invokes the two argument functions.
	 * @private
	 */
	function createMergedResultFunction(one, two) {
	  return function mergedResult() {
	    var a = one.apply(this, arguments);
	    var b = two.apply(this, arguments);
	    if (a == null) {
	      return b;
	    } else if (b == null) {
	      return a;
	    }
	    var c = {};
	    mergeIntoWithNoDuplicateKeys(c, a);
	    mergeIntoWithNoDuplicateKeys(c, b);
	    return c;
	  };
	}

	/**
	 * Creates a function that invokes two functions and ignores their return vales.
	 *
	 * @param {function} one Function to invoke first.
	 * @param {function} two Function to invoke second.
	 * @return {function} Function that invokes the two argument functions.
	 * @private
	 */
	function createChainedFunction(one, two) {
	  return function chainedFunction() {
	    one.apply(this, arguments);
	    two.apply(this, arguments);
	  };
	}

	/**
	 * Binds a method to the component.
	 *
	 * @param {object} component Component whose method is going to be bound.
	 * @param {function} method Method to be bound.
	 * @return {function} The bound method.
	 */
	function bindAutoBindMethod(component, method) {
	  var boundMethod = method.bind(component);
	  if (process.env.NODE_ENV !== 'production') {
	    boundMethod.__reactBoundContext = component;
	    boundMethod.__reactBoundMethod = method;
	    boundMethod.__reactBoundArguments = null;
	    var componentName = component.constructor.displayName;
	    var _bind = boundMethod.bind;
	    /* eslint-disable block-scoped-var, no-undef */
	    boundMethod.bind = function (newThis) {
	      for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
	        args[_key - 1] = arguments[_key];
	      }

	      // User is trying to bind() an autobound method; we effectively will
	      // ignore the value of "this" that the user is trying to use, so
	      // let's warn.
	      if (newThis !== component && newThis !== null) {
	        process.env.NODE_ENV !== 'production' ? warning(false, 'bind(): React component methods may only be bound to the ' + 'component instance. See %s', componentName) : undefined;
	      } else if (!args.length) {
	        process.env.NODE_ENV !== 'production' ? warning(false, 'bind(): You are binding a component method to the component. ' + 'React does this for you automatically in a high-performance ' + 'way, so you can safely remove this call. See %s', componentName) : undefined;
	        return boundMethod;
	      }
	      var reboundMethod = _bind.apply(boundMethod, arguments);
	      reboundMethod.__reactBoundContext = component;
	      reboundMethod.__reactBoundMethod = method;
	      reboundMethod.__reactBoundArguments = args;
	      return reboundMethod;
	      /* eslint-enable */
	    };
	  }
	  return boundMethod;
	}

	/**
	 * Binds all auto-bound methods in a component.
	 *
	 * @param {object} component Component whose method is going to be bound.
	 */
	function bindAutoBindMethods(component) {
	  for (var autoBindKey in component.__reactAutoBindMap) {
	    if (component.__reactAutoBindMap.hasOwnProperty(autoBindKey)) {
	      var method = component.__reactAutoBindMap[autoBindKey];
	      component[autoBindKey] = bindAutoBindMethod(component, method);
	    }
	  }
	}

	/**
	 * Add more to the ReactClass base class. These are all legacy features and
	 * therefore not already part of the modern ReactComponent.
	 */
	var ReactClassMixin = {

	  /**
	   * TODO: This will be deprecated because state should always keep a consistent
	   * type signature and the only use case for this, is to avoid that.
	   */
	  replaceState: function (newState, callback) {
	    this.updater.enqueueReplaceState(this, newState);
	    if (callback) {
	      this.updater.enqueueCallback(this, callback);
	    }
	  },

	  /**
	   * Checks whether or not this composite component is mounted.
	   * @return {boolean} True if mounted, false otherwise.
	   * @protected
	   * @final
	   */
	  isMounted: function () {
	    return this.updater.isMounted(this);
	  },

	  /**
	   * Sets a subset of the props.
	   *
	   * @param {object} partialProps Subset of the next props.
	   * @param {?function} callback Called after props are updated.
	   * @final
	   * @public
	   * @deprecated
	   */
	  setProps: function (partialProps, callback) {
	    if (process.env.NODE_ENV !== 'production') {
	      warnSetProps();
	    }
	    this.updater.enqueueSetProps(this, partialProps);
	    if (callback) {
	      this.updater.enqueueCallback(this, callback);
	    }
	  },

	  /**
	   * Replace all the props.
	   *
	   * @param {object} newProps Subset of the next props.
	   * @param {?function} callback Called after props are updated.
	   * @final
	   * @public
	   * @deprecated
	   */
	  replaceProps: function (newProps, callback) {
	    if (process.env.NODE_ENV !== 'production') {
	      warnSetProps();
	    }
	    this.updater.enqueueReplaceProps(this, newProps);
	    if (callback) {
	      this.updater.enqueueCallback(this, callback);
	    }
	  }
	};

	var ReactClassComponent = function () {};
	assign(ReactClassComponent.prototype, ReactComponent.prototype, ReactClassMixin);

	/**
	 * Module for creating composite components.
	 *
	 * @class ReactClass
	 */
	var ReactClass = {

	  /**
	   * Creates a composite component class given a class specification.
	   *
	   * @param {object} spec Class specification (which must define `render`).
	   * @return {function} Component constructor function.
	   * @public
	   */
	  createClass: function (spec) {
	    var Constructor = function (props, context, updater) {
	      // This constructor is overridden by mocks. The argument is used
	      // by mocks to assert on what gets mounted.

	      if (process.env.NODE_ENV !== 'production') {
	        process.env.NODE_ENV !== 'production' ? warning(this instanceof Constructor, 'Something is calling a React component directly. Use a factory or ' + 'JSX instead. See: https://fb.me/react-legacyfactory') : undefined;
	      }

	      // Wire up auto-binding
	      if (this.__reactAutoBindMap) {
	        bindAutoBindMethods(this);
	      }

	      this.props = props;
	      this.context = context;
	      this.refs = emptyObject;
	      this.updater = updater || ReactNoopUpdateQueue;

	      this.state = null;

	      // ReactClasses doesn't have constructors. Instead, they use the
	      // getInitialState and componentWillMount methods for initialization.

	      var initialState = this.getInitialState ? this.getInitialState() : null;
	      if (process.env.NODE_ENV !== 'production') {
	        // We allow auto-mocks to proceed as if they're returning null.
	        if (typeof initialState === 'undefined' && this.getInitialState._isMockFunction) {
	          // This is probably bad practice. Consider warning here and
	          // deprecating this convenience.
	          initialState = null;
	        }
	      }
	      !(typeof initialState === 'object' && !Array.isArray(initialState)) ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s.getInitialState(): must return an object or null', Constructor.displayName || 'ReactCompositeComponent') : invariant(false) : undefined;

	      this.state = initialState;
	    };
	    Constructor.prototype = new ReactClassComponent();
	    Constructor.prototype.constructor = Constructor;

	    injectedMixins.forEach(mixSpecIntoComponent.bind(null, Constructor));

	    mixSpecIntoComponent(Constructor, spec);

	    // Initialize the defaultProps property after all mixins have been merged.
	    if (Constructor.getDefaultProps) {
	      Constructor.defaultProps = Constructor.getDefaultProps();
	    }

	    if (process.env.NODE_ENV !== 'production') {
	      // This is a tag to indicate that the use of these method names is ok,
	      // since it's used with createClass. If it's not, then it's likely a
	      // mistake so we'll warn you to use the static property, property
	      // initializer or constructor respectively.
	      if (Constructor.getDefaultProps) {
	        Constructor.getDefaultProps.isReactClassApproved = {};
	      }
	      if (Constructor.prototype.getInitialState) {
	        Constructor.prototype.getInitialState.isReactClassApproved = {};
	      }
	    }

	    !Constructor.prototype.render ? process.env.NODE_ENV !== 'production' ? invariant(false, 'createClass(...): Class specification must implement a `render` method.') : invariant(false) : undefined;

	    if (process.env.NODE_ENV !== 'production') {
	      process.env.NODE_ENV !== 'production' ? warning(!Constructor.prototype.componentShouldUpdate, '%s has a method called ' + 'componentShouldUpdate(). Did you mean shouldComponentUpdate()? ' + 'The name is phrased as a question because the function is ' + 'expected to return a value.', spec.displayName || 'A component') : undefined;
	      process.env.NODE_ENV !== 'production' ? warning(!Constructor.prototype.componentWillRecieveProps, '%s has a method called ' + 'componentWillRecieveProps(). Did you mean componentWillReceiveProps()?', spec.displayName || 'A component') : undefined;
	    }

	    // Reduce time spent doing lookups by setting these on the prototype.
	    for (var methodName in ReactClassInterface) {
	      if (!Constructor.prototype[methodName]) {
	        Constructor.prototype[methodName] = null;
	      }
	    }

	    return Constructor;
	  },

	  injection: {
	    injectMixin: function (mixin) {
	      injectedMixins.push(mixin);
	    }
	  }

	};

	module.exports = ReactClass;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(8)))

/***/ },
/* 126 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactComponent
	 */

	'use strict';

	var ReactNoopUpdateQueue = __webpack_require__(127);

	var emptyObject = __webpack_require__(61);
	var invariant = __webpack_require__(17);
	var warning = __webpack_require__(29);

	/**
	 * Base class helpers for the updating state of a component.
	 */
	function ReactComponent(props, context, updater) {
	  this.props = props;
	  this.context = context;
	  this.refs = emptyObject;
	  // We initialize the default updater but the real one gets injected by the
	  // renderer.
	  this.updater = updater || ReactNoopUpdateQueue;
	}

	ReactComponent.prototype.isReactComponent = {};

	/**
	 * Sets a subset of the state. Always use this to mutate
	 * state. You should treat `this.state` as immutable.
	 *
	 * There is no guarantee that `this.state` will be immediately updated, so
	 * accessing `this.state` after calling this method may return the old value.
	 *
	 * There is no guarantee that calls to `setState` will run synchronously,
	 * as they may eventually be batched together.  You can provide an optional
	 * callback that will be executed when the call to setState is actually
	 * completed.
	 *
	 * When a function is provided to setState, it will be called at some point in
	 * the future (not synchronously). It will be called with the up to date
	 * component arguments (state, props, context). These values can be different
	 * from this.* because your function may be called after receiveProps but before
	 * shouldComponentUpdate, and this new state, props, and context will not yet be
	 * assigned to this.
	 *
	 * @param {object|function} partialState Next partial state or function to
	 *        produce next partial state to be merged with current state.
	 * @param {?function} callback Called after state is updated.
	 * @final
	 * @protected
	 */
	ReactComponent.prototype.setState = function (partialState, callback) {
	  !(typeof partialState === 'object' || typeof partialState === 'function' || partialState == null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'setState(...): takes an object of state variables to update or a ' + 'function which returns an object of state variables.') : invariant(false) : undefined;
	  if (process.env.NODE_ENV !== 'production') {
	    process.env.NODE_ENV !== 'production' ? warning(partialState != null, 'setState(...): You passed an undefined or null state object; ' + 'instead, use forceUpdate().') : undefined;
	  }
	  this.updater.enqueueSetState(this, partialState);
	  if (callback) {
	    this.updater.enqueueCallback(this, callback);
	  }
	};

	/**
	 * Forces an update. This should only be invoked when it is known with
	 * certainty that we are **not** in a DOM transaction.
	 *
	 * You may want to call this when you know that some deeper aspect of the
	 * component's state has changed but `setState` was not called.
	 *
	 * This will not invoke `shouldComponentUpdate`, but it will invoke
	 * `componentWillUpdate` and `componentDidUpdate`.
	 *
	 * @param {?function} callback Called after update is complete.
	 * @final
	 * @protected
	 */
	ReactComponent.prototype.forceUpdate = function (callback) {
	  this.updater.enqueueForceUpdate(this);
	  if (callback) {
	    this.updater.enqueueCallback(this, callback);
	  }
	};

	/**
	 * Deprecated APIs. These APIs used to exist on classic React classes but since
	 * we would like to deprecate them, we're not going to move them over to this
	 * modern base class. Instead, we define a getter that warns if it's accessed.
	 */
	if (process.env.NODE_ENV !== 'production') {
	  var deprecatedAPIs = {
	    getDOMNode: ['getDOMNode', 'Use ReactDOM.findDOMNode(component) instead.'],
	    isMounted: ['isMounted', 'Instead, make sure to clean up subscriptions and pending requests in ' + 'componentWillUnmount to prevent memory leaks.'],
	    replaceProps: ['replaceProps', 'Instead, call render again at the top level.'],
	    replaceState: ['replaceState', 'Refactor your code to use setState instead (see ' + 'https://github.com/facebook/react/issues/3236).'],
	    setProps: ['setProps', 'Instead, call render again at the top level.']
	  };
	  var defineDeprecationWarning = function (methodName, info) {
	    try {
	      Object.defineProperty(ReactComponent.prototype, methodName, {
	        get: function () {
	          process.env.NODE_ENV !== 'production' ? warning(false, '%s(...) is deprecated in plain JavaScript React classes. %s', info[0], info[1]) : undefined;
	          return undefined;
	        }
	      });
	    } catch (x) {
	      // IE will fail on defineProperty (es5-shim/sham too)
	    }
	  };
	  for (var fnName in deprecatedAPIs) {
	    if (deprecatedAPIs.hasOwnProperty(fnName)) {
	      defineDeprecationWarning(fnName, deprecatedAPIs[fnName]);
	    }
	  }
	}

	module.exports = ReactComponent;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(8)))

/***/ },
/* 127 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactNoopUpdateQueue
	 */

	'use strict';

	var warning = __webpack_require__(29);

	function warnTDZ(publicInstance, callerName) {
	  if (process.env.NODE_ENV !== 'production') {
	    process.env.NODE_ENV !== 'production' ? warning(false, '%s(...): Can only update a mounted or mounting component. ' + 'This usually means you called %s() on an unmounted component. ' + 'This is a no-op. Please check the code for the %s component.', callerName, callerName, publicInstance.constructor && publicInstance.constructor.displayName || '') : undefined;
	  }
	}

	/**
	 * This is the abstract API for an update queue.
	 */
	var ReactNoopUpdateQueue = {

	  /**
	   * Checks whether or not this composite component is mounted.
	   * @param {ReactClass} publicInstance The instance we want to test.
	   * @return {boolean} True if mounted, false otherwise.
	   * @protected
	   * @final
	   */
	  isMounted: function (publicInstance) {
	    return false;
	  },

	  /**
	   * Enqueue a callback that will be executed after all the pending updates
	   * have processed.
	   *
	   * @param {ReactClass} publicInstance The instance to use as `this` context.
	   * @param {?function} callback Called after state is updated.
	   * @internal
	   */
	  enqueueCallback: function (publicInstance, callback) {},

	  /**
	   * Forces an update. This should only be invoked when it is known with
	   * certainty that we are **not** in a DOM transaction.
	   *
	   * You may want to call this when you know that some deeper aspect of the
	   * component's state has changed but `setState` was not called.
	   *
	   * This will not invoke `shouldComponentUpdate`, but it will invoke
	   * `componentWillUpdate` and `componentDidUpdate`.
	   *
	   * @param {ReactClass} publicInstance The instance that should rerender.
	   * @internal
	   */
	  enqueueForceUpdate: function (publicInstance) {
	    warnTDZ(publicInstance, 'forceUpdate');
	  },

	  /**
	   * Replaces all of the state. Always use this or `setState` to mutate state.
	   * You should treat `this.state` as immutable.
	   *
	   * There is no guarantee that `this.state` will be immediately updated, so
	   * accessing `this.state` after calling this method may return the old value.
	   *
	   * @param {ReactClass} publicInstance The instance that should rerender.
	   * @param {object} completeState Next state.
	   * @internal
	   */
	  enqueueReplaceState: function (publicInstance, completeState) {
	    warnTDZ(publicInstance, 'replaceState');
	  },

	  /**
	   * Sets a subset of the state. This only exists because _pendingState is
	   * internal. This provides a merging strategy that is not available to deep
	   * properties which is confusing. TODO: Expose pendingState or don't use it
	   * during the merge.
	   *
	   * @param {ReactClass} publicInstance The instance that should rerender.
	   * @param {object} partialState Next partial state to be merged with state.
	   * @internal
	   */
	  enqueueSetState: function (publicInstance, partialState) {
	    warnTDZ(publicInstance, 'setState');
	  },

	  /**
	   * Sets a subset of the props.
	   *
	   * @param {ReactClass} publicInstance The instance that should rerender.
	   * @param {object} partialProps Subset of the next props.
	   * @internal
	   */
	  enqueueSetProps: function (publicInstance, partialProps) {
	    warnTDZ(publicInstance, 'setProps');
	  },

	  /**
	   * Replaces all of the props.
	   *
	   * @param {ReactClass} publicInstance The instance that should rerender.
	   * @param {object} props New props.
	   * @internal
	   */
	  enqueueReplaceProps: function (publicInstance, props) {
	    warnTDZ(publicInstance, 'replaceProps');
	  }

	};

	module.exports = ReactNoopUpdateQueue;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(8)))

/***/ },
/* 128 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactReconcileTransaction
	 * @typechecks static-only
	 */

	'use strict';

	var CallbackQueue = __webpack_require__(58);
	var PooledClass = __webpack_require__(59);
	var ReactBrowserEventEmitter = __webpack_require__(33);
	var ReactDOMFeatureFlags = __webpack_require__(45);
	var ReactInputSelection = __webpack_require__(129);
	var Transaction = __webpack_require__(60);

	var assign = __webpack_require__(43);

	/**
	 * Ensures that, when possible, the selection range (currently selected text
	 * input) is not disturbed by performing the transaction.
	 */
	var SELECTION_RESTORATION = {
	  /**
	   * @return {Selection} Selection information.
	   */
	  initialize: ReactInputSelection.getSelectionInformation,
	  /**
	   * @param {Selection} sel Selection information returned from `initialize`.
	   */
	  close: ReactInputSelection.restoreSelection
	};

	/**
	 * Suppresses events (blur/focus) that could be inadvertently dispatched due to
	 * high level DOM manipulations (like temporarily removing a text input from the
	 * DOM).
	 */
	var EVENT_SUPPRESSION = {
	  /**
	   * @return {boolean} The enabled status of `ReactBrowserEventEmitter` before
	   * the reconciliation.
	   */
	  initialize: function () {
	    var currentlyEnabled = ReactBrowserEventEmitter.isEnabled();
	    ReactBrowserEventEmitter.setEnabled(false);
	    return currentlyEnabled;
	  },

	  /**
	   * @param {boolean} previouslyEnabled Enabled status of
	   *   `ReactBrowserEventEmitter` before the reconciliation occurred. `close`
	   *   restores the previous value.
	   */
	  close: function (previouslyEnabled) {
	    ReactBrowserEventEmitter.setEnabled(previouslyEnabled);
	  }
	};

	/**
	 * Provides a queue for collecting `componentDidMount` and
	 * `componentDidUpdate` callbacks during the the transaction.
	 */
	var ON_DOM_READY_QUEUEING = {
	  /**
	   * Initializes the internal `onDOMReady` queue.
	   */
	  initialize: function () {
	    this.reactMountReady.reset();
	  },

	  /**
	   * After DOM is flushed, invoke all registered `onDOMReady` callbacks.
	   */
	  close: function () {
	    this.reactMountReady.notifyAll();
	  }
	};

	/**
	 * Executed within the scope of the `Transaction` instance. Consider these as
	 * being member methods, but with an implied ordering while being isolated from
	 * each other.
	 */
	var TRANSACTION_WRAPPERS = [SELECTION_RESTORATION, EVENT_SUPPRESSION, ON_DOM_READY_QUEUEING];

	/**
	 * Currently:
	 * - The order that these are listed in the transaction is critical:
	 * - Suppresses events.
	 * - Restores selection range.
	 *
	 * Future:
	 * - Restore document/overflow scroll positions that were unintentionally
	 *   modified via DOM insertions above the top viewport boundary.
	 * - Implement/integrate with customized constraint based layout system and keep
	 *   track of which dimensions must be remeasured.
	 *
	 * @class ReactReconcileTransaction
	 */
	function ReactReconcileTransaction(forceHTML) {
	  this.reinitializeTransaction();
	  // Only server-side rendering really needs this option (see
	  // `ReactServerRendering`), but server-side uses
	  // `ReactServerRenderingTransaction` instead. This option is here so that it's
	  // accessible and defaults to false when `ReactDOMComponent` and
	  // `ReactTextComponent` checks it in `mountComponent`.`
	  this.renderToStaticMarkup = false;
	  this.reactMountReady = CallbackQueue.getPooled(null);
	  this.useCreateElement = !forceHTML && ReactDOMFeatureFlags.useCreateElement;
	}

	var Mixin = {
	  /**
	   * @see Transaction
	   * @abstract
	   * @final
	   * @return {array<object>} List of operation wrap procedures.
	   *   TODO: convert to array<TransactionWrapper>
	   */
	  getTransactionWrappers: function () {
	    return TRANSACTION_WRAPPERS;
	  },

	  /**
	   * @return {object} The queue to collect `onDOMReady` callbacks with.
	   */
	  getReactMountReady: function () {
	    return this.reactMountReady;
	  },

	  /**
	   * `PooledClass` looks for this, and will invoke this before allowing this
	   * instance to be reused.
	   */
	  destructor: function () {
	    CallbackQueue.release(this.reactMountReady);
	    this.reactMountReady = null;
	  }
	};

	assign(ReactReconcileTransaction.prototype, Transaction.Mixin, Mixin);

	PooledClass.addPoolingTo(ReactReconcileTransaction);

	module.exports = ReactReconcileTransaction;

/***/ },
/* 129 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactInputSelection
	 */

	'use strict';

	var ReactDOMSelection = __webpack_require__(130);

	var containsNode = __webpack_require__(62);
	var focusNode = __webpack_require__(98);
	var getActiveElement = __webpack_require__(132);

	function isInDocument(node) {
	  return containsNode(document.documentElement, node);
	}

	/**
	 * @ReactInputSelection: React input selection module. Based on Selection.js,
	 * but modified to be suitable for react and has a couple of bug fixes (doesn't
	 * assume buttons have range selections allowed).
	 * Input selection module for React.
	 */
	var ReactInputSelection = {

	  hasSelectionCapabilities: function (elem) {
	    var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();
	    return nodeName && (nodeName === 'input' && elem.type === 'text' || nodeName === 'textarea' || elem.contentEditable === 'true');
	  },

	  getSelectionInformation: function () {
	    var focusedElem = getActiveElement();
	    return {
	      focusedElem: focusedElem,
	      selectionRange: ReactInputSelection.hasSelectionCapabilities(focusedElem) ? ReactInputSelection.getSelection(focusedElem) : null
	    };
	  },

	  /**
	   * @restoreSelection: If any selection information was potentially lost,
	   * restore it. This is useful when performing operations that could remove dom
	   * nodes and place them back in, resulting in focus being lost.
	   */
	  restoreSelection: function (priorSelectionInformation) {
	    var curFocusedElem = getActiveElement();
	    var priorFocusedElem = priorSelectionInformation.focusedElem;
	    var priorSelectionRange = priorSelectionInformation.selectionRange;
	    if (curFocusedElem !== priorFocusedElem && isInDocument(priorFocusedElem)) {
	      if (ReactInputSelection.hasSelectionCapabilities(priorFocusedElem)) {
	        ReactInputSelection.setSelection(priorFocusedElem, priorSelectionRange);
	      }
	      focusNode(priorFocusedElem);
	    }
	  },

	  /**
	   * @getSelection: Gets the selection bounds of a focused textarea, input or
	   * contentEditable node.
	   * -@input: Look up selection bounds of this input
	   * -@return {start: selectionStart, end: selectionEnd}
	   */
	  getSelection: function (input) {
	    var selection;

	    if ('selectionStart' in input) {
	      // Modern browser with input or textarea.
	      selection = {
	        start: input.selectionStart,
	        end: input.selectionEnd
	      };
	    } else if (document.selection && (input.nodeName && input.nodeName.toLowerCase() === 'input')) {
	      // IE8 input.
	      var range = document.selection.createRange();
	      // There can only be one selection per document in IE, so it must
	      // be in our element.
	      if (range.parentElement() === input) {
	        selection = {
	          start: -range.moveStart('character', -input.value.length),
	          end: -range.moveEnd('character', -input.value.length)
	        };
	      }
	    } else {
	      // Content editable or old IE textarea.
	      selection = ReactDOMSelection.getOffsets(input);
	    }

	    return selection || { start: 0, end: 0 };
	  },

	  /**
	   * @setSelection: Sets the selection bounds of a textarea or input and focuses
	   * the input.
	   * -@input     Set selection bounds of this input or textarea
	   * -@offsets   Object of same form that is returned from get*
	   */
	  setSelection: function (input, offsets) {
	    var start = offsets.start;
	    var end = offsets.end;
	    if (typeof end === 'undefined') {
	      end = start;
	    }

	    if ('selectionStart' in input) {
	      input.selectionStart = start;
	      input.selectionEnd = Math.min(end, input.value.length);
	    } else if (document.selection && (input.nodeName && input.nodeName.toLowerCase() === 'input')) {
	      var range = input.createTextRange();
	      range.collapse(true);
	      range.moveStart('character', start);
	      range.moveEnd('character', end - start);
	      range.select();
	    } else {
	      ReactDOMSelection.setOffsets(input, offsets);
	    }
	  }
	};

	module.exports = ReactInputSelection;

/***/ },
/* 130 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDOMSelection
	 */

	'use strict';

	var ExecutionEnvironment = __webpack_require__(13);

	var getNodeForCharacterOffset = __webpack_require__(131);
	var getTextContentAccessor = __webpack_require__(78);

	/**
	 * While `isCollapsed` is available on the Selection object and `collapsed`
	 * is available on the Range object, IE11 sometimes gets them wrong.
	 * If the anchor/focus nodes and offsets are the same, the range is collapsed.
	 */
	function isCollapsed(anchorNode, anchorOffset, focusNode, focusOffset) {
	  return anchorNode === focusNode && anchorOffset === focusOffset;
	}

	/**
	 * Get the appropriate anchor and focus node/offset pairs for IE.
	 *
	 * The catch here is that IE's selection API doesn't provide information
	 * about whether the selection is forward or backward, so we have to
	 * behave as though it's always forward.
	 *
	 * IE text differs from modern selection in that it behaves as though
	 * block elements end with a new line. This means character offsets will
	 * differ between the two APIs.
	 *
	 * @param {DOMElement} node
	 * @return {object}
	 */
	function getIEOffsets(node) {
	  var selection = document.selection;
	  var selectedRange = selection.createRange();
	  var selectedLength = selectedRange.text.length;

	  // Duplicate selection so we can move range without breaking user selection.
	  var fromStart = selectedRange.duplicate();
	  fromStart.moveToElementText(node);
	  fromStart.setEndPoint('EndToStart', selectedRange);

	  var startOffset = fromStart.text.length;
	  var endOffset = startOffset + selectedLength;

	  return {
	    start: startOffset,
	    end: endOffset
	  };
	}

	/**
	 * @param {DOMElement} node
	 * @return {?object}
	 */
	function getModernOffsets(node) {
	  var selection = window.getSelection && window.getSelection();

	  if (!selection || selection.rangeCount === 0) {
	    return null;
	  }

	  var anchorNode = selection.anchorNode;
	  var anchorOffset = selection.anchorOffset;
	  var focusNode = selection.focusNode;
	  var focusOffset = selection.focusOffset;

	  var currentRange = selection.getRangeAt(0);

	  // In Firefox, range.startContainer and range.endContainer can be "anonymous
	  // divs", e.g. the up/down buttons on an <input type="number">. Anonymous
	  // divs do not seem to expose properties, triggering a "Permission denied
	  // error" if any of its properties are accessed. The only seemingly possible
	  // way to avoid erroring is to access a property that typically works for
	  // non-anonymous divs and catch any error that may otherwise arise. See
	  // https://bugzilla.mozilla.org/show_bug.cgi?id=208427
	  try {
	    /* eslint-disable no-unused-expressions */
	    currentRange.startContainer.nodeType;
	    currentRange.endContainer.nodeType;
	    /* eslint-enable no-unused-expressions */
	  } catch (e) {
	    return null;
	  }

	  // If the node and offset values are the same, the selection is collapsed.
	  // `Selection.isCollapsed` is available natively, but IE sometimes gets
	  // this value wrong.
	  var isSelectionCollapsed = isCollapsed(selection.anchorNode, selection.anchorOffset, selection.focusNode, selection.focusOffset);

	  var rangeLength = isSelectionCollapsed ? 0 : currentRange.toString().length;

	  var tempRange = currentRange.cloneRange();
	  tempRange.selectNodeContents(node);
	  tempRange.setEnd(currentRange.startContainer, currentRange.startOffset);

	  var isTempRangeCollapsed = isCollapsed(tempRange.startContainer, tempRange.startOffset, tempRange.endContainer, tempRange.endOffset);

	  var start = isTempRangeCollapsed ? 0 : tempRange.toString().length;
	  var end = start + rangeLength;

	  // Detect whether the selection is backward.
	  var detectionRange = document.createRange();
	  detectionRange.setStart(anchorNode, anchorOffset);
	  detectionRange.setEnd(focusNode, focusOffset);
	  var isBackward = detectionRange.collapsed;

	  return {
	    start: isBackward ? end : start,
	    end: isBackward ? start : end
	  };
	}

	/**
	 * @param {DOMElement|DOMTextNode} node
	 * @param {object} offsets
	 */
	function setIEOffsets(node, offsets) {
	  var range = document.selection.createRange().duplicate();
	  var start, end;

	  if (typeof offsets.end === 'undefined') {
	    start = offsets.start;
	    end = start;
	  } else if (offsets.start > offsets.end) {
	    start = offsets.end;
	    end = offsets.start;
	  } else {
	    start = offsets.start;
	    end = offsets.end;
	  }

	  range.moveToElementText(node);
	  range.moveStart('character', start);
	  range.setEndPoint('EndToStart', range);
	  range.moveEnd('character', end - start);
	  range.select();
	}

	/**
	 * In modern non-IE browsers, we can support both forward and backward
	 * selections.
	 *
	 * Note: IE10+ supports the Selection object, but it does not support
	 * the `extend` method, which means that even in modern IE, it's not possible
	 * to programatically create a backward selection. Thus, for all IE
	 * versions, we use the old IE API to create our selections.
	 *
	 * @param {DOMElement|DOMTextNode} node
	 * @param {object} offsets
	 */
	function setModernOffsets(node, offsets) {
	  if (!window.getSelection) {
	    return;
	  }

	  var selection = window.getSelection();
	  var length = node[getTextContentAccessor()].length;
	  var start = Math.min(offsets.start, length);
	  var end = typeof offsets.end === 'undefined' ? start : Math.min(offsets.end, length);

	  // IE 11 uses modern selection, but doesn't support the extend method.
	  // Flip backward selections, so we can set with a single range.
	  if (!selection.extend && start > end) {
	    var temp = end;
	    end = start;
	    start = temp;
	  }

	  var startMarker = getNodeForCharacterOffset(node, start);
	  var endMarker = getNodeForCharacterOffset(node, end);

	  if (startMarker && endMarker) {
	    var range = document.createRange();
	    range.setStart(startMarker.node, startMarker.offset);
	    selection.removeAllRanges();

	    if (start > end) {
	      selection.addRange(range);
	      selection.extend(endMarker.node, endMarker.offset);
	    } else {
	      range.setEnd(endMarker.node, endMarker.offset);
	      selection.addRange(range);
	    }
	  }
	}

	var useIEOffsets = ExecutionEnvironment.canUseDOM && 'selection' in document && !('getSelection' in window);

	var ReactDOMSelection = {
	  /**
	   * @param {DOMElement} node
	   */
	  getOffsets: useIEOffsets ? getIEOffsets : getModernOffsets,

	  /**
	   * @param {DOMElement|DOMTextNode} node
	   * @param {object} offsets
	   */
	  setOffsets: useIEOffsets ? setIEOffsets : setModernOffsets
	};

	module.exports = ReactDOMSelection;

/***/ },
/* 131 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule getNodeForCharacterOffset
	 */

	'use strict';

	/**
	 * Given any node return the first leaf node without children.
	 *
	 * @param {DOMElement|DOMTextNode} node
	 * @return {DOMElement|DOMTextNode}
	 */
	function getLeafNode(node) {
	  while (node && node.firstChild) {
	    node = node.firstChild;
	  }
	  return node;
	}

	/**
	 * Get the next sibling within a container. This will walk up the
	 * DOM if a node's siblings have been exhausted.
	 *
	 * @param {DOMElement|DOMTextNode} node
	 * @return {?DOMElement|DOMTextNode}
	 */
	function getSiblingNode(node) {
	  while (node) {
	    if (node.nextSibling) {
	      return node.nextSibling;
	    }
	    node = node.parentNode;
	  }
	}

	/**
	 * Get object describing the nodes which contain characters at offset.
	 *
	 * @param {DOMElement|DOMTextNode} root
	 * @param {number} offset
	 * @return {?object}
	 */
	function getNodeForCharacterOffset(root, offset) {
	  var node = getLeafNode(root);
	  var nodeStart = 0;
	  var nodeEnd = 0;

	  while (node) {
	    if (node.nodeType === 3) {
	      nodeEnd = nodeStart + node.textContent.length;

	      if (nodeStart <= offset && nodeEnd >= offset) {
	        return {
	          node: node,
	          offset: offset - nodeStart
	        };
	      }

	      nodeStart = nodeEnd;
	    }

	    node = getLeafNode(getSiblingNode(node));
	  }
	}

	module.exports = getNodeForCharacterOffset;

/***/ },
/* 132 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule getActiveElement
	 * @typechecks
	 */

	/**
	 * Same as document.activeElement but wraps in a try-catch block. In IE it is
	 * not safe to call document.activeElement if there is nothing focused.
	 *
	 * The activeElement will be null only if the document or document body is not yet defined.
	 */
	'use strict';

	function getActiveElement() /*?DOMElement*/{
	  if (typeof document === 'undefined') {
	    return null;
	  }

	  try {
	    return document.activeElement || document.body;
	  } catch (e) {
	    return document.body;
	  }
	}

	module.exports = getActiveElement;

/***/ },
/* 133 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule SelectEventPlugin
	 */

	'use strict';

	var EventConstants = __webpack_require__(34);
	var EventPropagators = __webpack_require__(76);
	var ExecutionEnvironment = __webpack_require__(13);
	var ReactInputSelection = __webpack_require__(129);
	var SyntheticEvent = __webpack_require__(80);

	var getActiveElement = __webpack_require__(132);
	var isTextInputElement = __webpack_require__(85);
	var keyOf = __webpack_require__(82);
	var shallowEqual = __webpack_require__(120);

	var topLevelTypes = EventConstants.topLevelTypes;

	var skipSelectionChangeEvent = ExecutionEnvironment.canUseDOM && 'documentMode' in document && document.documentMode <= 11;

	var eventTypes = {
	  select: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onSelect: null }),
	      captured: keyOf({ onSelectCapture: null })
	    },
	    dependencies: [topLevelTypes.topBlur, topLevelTypes.topContextMenu, topLevelTypes.topFocus, topLevelTypes.topKeyDown, topLevelTypes.topMouseDown, topLevelTypes.topMouseUp, topLevelTypes.topSelectionChange]
	  }
	};

	var activeElement = null;
	var activeElementID = null;
	var lastSelection = null;
	var mouseDown = false;

	// Track whether a listener exists for this plugin. If none exist, we do
	// not extract events.
	var hasListener = false;
	var ON_SELECT_KEY = keyOf({ onSelect: null });

	/**
	 * Get an object which is a unique representation of the current selection.
	 *
	 * The return value will not be consistent across nodes or browsers, but
	 * two identical selections on the same node will return identical objects.
	 *
	 * @param {DOMElement} node
	 * @return {object}
	 */
	function getSelection(node) {
	  if ('selectionStart' in node && ReactInputSelection.hasSelectionCapabilities(node)) {
	    return {
	      start: node.selectionStart,
	      end: node.selectionEnd
	    };
	  } else if (window.getSelection) {
	    var selection = window.getSelection();
	    return {
	      anchorNode: selection.anchorNode,
	      anchorOffset: selection.anchorOffset,
	      focusNode: selection.focusNode,
	      focusOffset: selection.focusOffset
	    };
	  } else if (document.selection) {
	    var range = document.selection.createRange();
	    return {
	      parentElement: range.parentElement(),
	      text: range.text,
	      top: range.boundingTop,
	      left: range.boundingLeft
	    };
	  }
	}

	/**
	 * Poll selection to see whether it's changed.
	 *
	 * @param {object} nativeEvent
	 * @return {?SyntheticEvent}
	 */
	function constructSelectEvent(nativeEvent, nativeEventTarget) {
	  // Ensure we have the right element, and that the user is not dragging a
	  // selection (this matches native `select` event behavior). In HTML5, select
	  // fires only on input and textarea thus if there's no focused element we
	  // won't dispatch.
	  if (mouseDown || activeElement == null || activeElement !== getActiveElement()) {
	    return null;
	  }

	  // Only fire when selection has actually changed.
	  var currentSelection = getSelection(activeElement);
	  if (!lastSelection || !shallowEqual(lastSelection, currentSelection)) {
	    lastSelection = currentSelection;

	    var syntheticEvent = SyntheticEvent.getPooled(eventTypes.select, activeElementID, nativeEvent, nativeEventTarget);

	    syntheticEvent.type = 'select';
	    syntheticEvent.target = activeElement;

	    EventPropagators.accumulateTwoPhaseDispatches(syntheticEvent);

	    return syntheticEvent;
	  }

	  return null;
	}

	/**
	 * This plugin creates an `onSelect` event that normalizes select events
	 * across form elements.
	 *
	 * Supported elements are:
	 * - input (see `isTextInputElement`)
	 * - textarea
	 * - contentEditable
	 *
	 * This differs from native browser implementations in the following ways:
	 * - Fires on contentEditable fields as well as inputs.
	 * - Fires for collapsed selection.
	 * - Fires after user input.
	 */
	var SelectEventPlugin = {

	  eventTypes: eventTypes,

	  /**
	   * @param {string} topLevelType Record from `EventConstants`.
	   * @param {DOMEventTarget} topLevelTarget The listening component root node.
	   * @param {string} topLevelTargetID ID of `topLevelTarget`.
	   * @param {object} nativeEvent Native browser event.
	   * @return {*} An accumulation of synthetic events.
	   * @see {EventPluginHub.extractEvents}
	   */
	  extractEvents: function (topLevelType, topLevelTarget, topLevelTargetID, nativeEvent, nativeEventTarget) {
	    if (!hasListener) {
	      return null;
	    }

	    switch (topLevelType) {
	      // Track the input node that has focus.
	      case topLevelTypes.topFocus:
	        if (isTextInputElement(topLevelTarget) || topLevelTarget.contentEditable === 'true') {
	          activeElement = topLevelTarget;
	          activeElementID = topLevelTargetID;
	          lastSelection = null;
	        }
	        break;
	      case topLevelTypes.topBlur:
	        activeElement = null;
	        activeElementID = null;
	        lastSelection = null;
	        break;

	      // Don't fire the event while the user is dragging. This matches the
	      // semantics of the native select event.
	      case topLevelTypes.topMouseDown:
	        mouseDown = true;
	        break;
	      case topLevelTypes.topContextMenu:
	      case topLevelTypes.topMouseUp:
	        mouseDown = false;
	        return constructSelectEvent(nativeEvent, nativeEventTarget);

	      // Chrome and IE fire non-standard event when selection is changed (and
	      // sometimes when it hasn't). IE's event fires out of order with respect
	      // to key and input events on deletion, so we discard it.
	      //
	      // Firefox doesn't support selectionchange, so check selection status
	      // after each key entry. The selection changes after keydown and before
	      // keyup, but we check on keydown as well in the case of holding down a
	      // key, when multiple keydown events are fired but only one keyup is.
	      // This is also our approach for IE handling, for the reason above.
	      case topLevelTypes.topSelectionChange:
	        if (skipSelectionChangeEvent) {
	          break;
	        }
	      // falls through
	      case topLevelTypes.topKeyDown:
	      case topLevelTypes.topKeyUp:
	        return constructSelectEvent(nativeEvent, nativeEventTarget);
	    }

	    return null;
	  },

	  didPutListener: function (id, registrationName, listener) {
	    if (registrationName === ON_SELECT_KEY) {
	      hasListener = true;
	    }
	  }
	};

	module.exports = SelectEventPlugin;

/***/ },
/* 134 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ServerReactRootIndex
	 * @typechecks
	 */

	'use strict';

	/**
	 * Size of the reactRoot ID space. We generate random numbers for React root
	 * IDs and if there's a collision the events and DOM update system will
	 * get confused. In the future we need a way to generate GUIDs but for
	 * now this will work on a smaller scale.
	 */
	var GLOBAL_MOUNT_POINT_MAX = Math.pow(2, 53);

	var ServerReactRootIndex = {
	  createReactRootIndex: function () {
	    return Math.ceil(Math.random() * GLOBAL_MOUNT_POINT_MAX);
	  }
	};

	module.exports = ServerReactRootIndex;

/***/ },
/* 135 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule SimpleEventPlugin
	 */

	'use strict';

	var EventConstants = __webpack_require__(34);
	var EventListener = __webpack_require__(122);
	var EventPropagators = __webpack_require__(76);
	var ReactMount = __webpack_require__(32);
	var SyntheticClipboardEvent = __webpack_require__(136);
	var SyntheticEvent = __webpack_require__(80);
	var SyntheticFocusEvent = __webpack_require__(137);
	var SyntheticKeyboardEvent = __webpack_require__(138);
	var SyntheticMouseEvent = __webpack_require__(89);
	var SyntheticDragEvent = __webpack_require__(141);
	var SyntheticTouchEvent = __webpack_require__(142);
	var SyntheticUIEvent = __webpack_require__(90);
	var SyntheticWheelEvent = __webpack_require__(143);

	var emptyFunction = __webpack_require__(19);
	var getEventCharCode = __webpack_require__(139);
	var invariant = __webpack_require__(17);
	var keyOf = __webpack_require__(82);

	var topLevelTypes = EventConstants.topLevelTypes;

	var eventTypes = {
	  abort: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onAbort: true }),
	      captured: keyOf({ onAbortCapture: true })
	    }
	  },
	  blur: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onBlur: true }),
	      captured: keyOf({ onBlurCapture: true })
	    }
	  },
	  canPlay: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onCanPlay: true }),
	      captured: keyOf({ onCanPlayCapture: true })
	    }
	  },
	  canPlayThrough: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onCanPlayThrough: true }),
	      captured: keyOf({ onCanPlayThroughCapture: true })
	    }
	  },
	  click: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onClick: true }),
	      captured: keyOf({ onClickCapture: true })
	    }
	  },
	  contextMenu: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onContextMenu: true }),
	      captured: keyOf({ onContextMenuCapture: true })
	    }
	  },
	  copy: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onCopy: true }),
	      captured: keyOf({ onCopyCapture: true })
	    }
	  },
	  cut: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onCut: true }),
	      captured: keyOf({ onCutCapture: true })
	    }
	  },
	  doubleClick: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onDoubleClick: true }),
	      captured: keyOf({ onDoubleClickCapture: true })
	    }
	  },
	  drag: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onDrag: true }),
	      captured: keyOf({ onDragCapture: true })
	    }
	  },
	  dragEnd: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onDragEnd: true }),
	      captured: keyOf({ onDragEndCapture: true })
	    }
	  },
	  dragEnter: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onDragEnter: true }),
	      captured: keyOf({ onDragEnterCapture: true })
	    }
	  },
	  dragExit: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onDragExit: true }),
	      captured: keyOf({ onDragExitCapture: true })
	    }
	  },
	  dragLeave: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onDragLeave: true }),
	      captured: keyOf({ onDragLeaveCapture: true })
	    }
	  },
	  dragOver: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onDragOver: true }),
	      captured: keyOf({ onDragOverCapture: true })
	    }
	  },
	  dragStart: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onDragStart: true }),
	      captured: keyOf({ onDragStartCapture: true })
	    }
	  },
	  drop: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onDrop: true }),
	      captured: keyOf({ onDropCapture: true })
	    }
	  },
	  durationChange: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onDurationChange: true }),
	      captured: keyOf({ onDurationChangeCapture: true })
	    }
	  },
	  emptied: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onEmptied: true }),
	      captured: keyOf({ onEmptiedCapture: true })
	    }
	  },
	  encrypted: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onEncrypted: true }),
	      captured: keyOf({ onEncryptedCapture: true })
	    }
	  },
	  ended: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onEnded: true }),
	      captured: keyOf({ onEndedCapture: true })
	    }
	  },
	  error: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onError: true }),
	      captured: keyOf({ onErrorCapture: true })
	    }
	  },
	  focus: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onFocus: true }),
	      captured: keyOf({ onFocusCapture: true })
	    }
	  },
	  input: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onInput: true }),
	      captured: keyOf({ onInputCapture: true })
	    }
	  },
	  keyDown: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onKeyDown: true }),
	      captured: keyOf({ onKeyDownCapture: true })
	    }
	  },
	  keyPress: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onKeyPress: true }),
	      captured: keyOf({ onKeyPressCapture: true })
	    }
	  },
	  keyUp: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onKeyUp: true }),
	      captured: keyOf({ onKeyUpCapture: true })
	    }
	  },
	  load: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onLoad: true }),
	      captured: keyOf({ onLoadCapture: true })
	    }
	  },
	  loadedData: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onLoadedData: true }),
	      captured: keyOf({ onLoadedDataCapture: true })
	    }
	  },
	  loadedMetadata: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onLoadedMetadata: true }),
	      captured: keyOf({ onLoadedMetadataCapture: true })
	    }
	  },
	  loadStart: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onLoadStart: true }),
	      captured: keyOf({ onLoadStartCapture: true })
	    }
	  },
	  // Note: We do not allow listening to mouseOver events. Instead, use the
	  // onMouseEnter/onMouseLeave created by `EnterLeaveEventPlugin`.
	  mouseDown: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onMouseDown: true }),
	      captured: keyOf({ onMouseDownCapture: true })
	    }
	  },
	  mouseMove: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onMouseMove: true }),
	      captured: keyOf({ onMouseMoveCapture: true })
	    }
	  },
	  mouseOut: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onMouseOut: true }),
	      captured: keyOf({ onMouseOutCapture: true })
	    }
	  },
	  mouseOver: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onMouseOver: true }),
	      captured: keyOf({ onMouseOverCapture: true })
	    }
	  },
	  mouseUp: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onMouseUp: true }),
	      captured: keyOf({ onMouseUpCapture: true })
	    }
	  },
	  paste: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onPaste: true }),
	      captured: keyOf({ onPasteCapture: true })
	    }
	  },
	  pause: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onPause: true }),
	      captured: keyOf({ onPauseCapture: true })
	    }
	  },
	  play: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onPlay: true }),
	      captured: keyOf({ onPlayCapture: true })
	    }
	  },
	  playing: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onPlaying: true }),
	      captured: keyOf({ onPlayingCapture: true })
	    }
	  },
	  progress: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onProgress: true }),
	      captured: keyOf({ onProgressCapture: true })
	    }
	  },
	  rateChange: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onRateChange: true }),
	      captured: keyOf({ onRateChangeCapture: true })
	    }
	  },
	  reset: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onReset: true }),
	      captured: keyOf({ onResetCapture: true })
	    }
	  },
	  scroll: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onScroll: true }),
	      captured: keyOf({ onScrollCapture: true })
	    }
	  },
	  seeked: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onSeeked: true }),
	      captured: keyOf({ onSeekedCapture: true })
	    }
	  },
	  seeking: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onSeeking: true }),
	      captured: keyOf({ onSeekingCapture: true })
	    }
	  },
	  stalled: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onStalled: true }),
	      captured: keyOf({ onStalledCapture: true })
	    }
	  },
	  submit: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onSubmit: true }),
	      captured: keyOf({ onSubmitCapture: true })
	    }
	  },
	  suspend: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onSuspend: true }),
	      captured: keyOf({ onSuspendCapture: true })
	    }
	  },
	  timeUpdate: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onTimeUpdate: true }),
	      captured: keyOf({ onTimeUpdateCapture: true })
	    }
	  },
	  touchCancel: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onTouchCancel: true }),
	      captured: keyOf({ onTouchCancelCapture: true })
	    }
	  },
	  touchEnd: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onTouchEnd: true }),
	      captured: keyOf({ onTouchEndCapture: true })
	    }
	  },
	  touchMove: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onTouchMove: true }),
	      captured: keyOf({ onTouchMoveCapture: true })
	    }
	  },
	  touchStart: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onTouchStart: true }),
	      captured: keyOf({ onTouchStartCapture: true })
	    }
	  },
	  volumeChange: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onVolumeChange: true }),
	      captured: keyOf({ onVolumeChangeCapture: true })
	    }
	  },
	  waiting: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onWaiting: true }),
	      captured: keyOf({ onWaitingCapture: true })
	    }
	  },
	  wheel: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onWheel: true }),
	      captured: keyOf({ onWheelCapture: true })
	    }
	  }
	};

	var topLevelEventsToDispatchConfig = {
	  topAbort: eventTypes.abort,
	  topBlur: eventTypes.blur,
	  topCanPlay: eventTypes.canPlay,
	  topCanPlayThrough: eventTypes.canPlayThrough,
	  topClick: eventTypes.click,
	  topContextMenu: eventTypes.contextMenu,
	  topCopy: eventTypes.copy,
	  topCut: eventTypes.cut,
	  topDoubleClick: eventTypes.doubleClick,
	  topDrag: eventTypes.drag,
	  topDragEnd: eventTypes.dragEnd,
	  topDragEnter: eventTypes.dragEnter,
	  topDragExit: eventTypes.dragExit,
	  topDragLeave: eventTypes.dragLeave,
	  topDragOver: eventTypes.dragOver,
	  topDragStart: eventTypes.dragStart,
	  topDrop: eventTypes.drop,
	  topDurationChange: eventTypes.durationChange,
	  topEmptied: eventTypes.emptied,
	  topEncrypted: eventTypes.encrypted,
	  topEnded: eventTypes.ended,
	  topError: eventTypes.error,
	  topFocus: eventTypes.focus,
	  topInput: eventTypes.input,
	  topKeyDown: eventTypes.keyDown,
	  topKeyPress: eventTypes.keyPress,
	  topKeyUp: eventTypes.keyUp,
	  topLoad: eventTypes.load,
	  topLoadedData: eventTypes.loadedData,
	  topLoadedMetadata: eventTypes.loadedMetadata,
	  topLoadStart: eventTypes.loadStart,
	  topMouseDown: eventTypes.mouseDown,
	  topMouseMove: eventTypes.mouseMove,
	  topMouseOut: eventTypes.mouseOut,
	  topMouseOver: eventTypes.mouseOver,
	  topMouseUp: eventTypes.mouseUp,
	  topPaste: eventTypes.paste,
	  topPause: eventTypes.pause,
	  topPlay: eventTypes.play,
	  topPlaying: eventTypes.playing,
	  topProgress: eventTypes.progress,
	  topRateChange: eventTypes.rateChange,
	  topReset: eventTypes.reset,
	  topScroll: eventTypes.scroll,
	  topSeeked: eventTypes.seeked,
	  topSeeking: eventTypes.seeking,
	  topStalled: eventTypes.stalled,
	  topSubmit: eventTypes.submit,
	  topSuspend: eventTypes.suspend,
	  topTimeUpdate: eventTypes.timeUpdate,
	  topTouchCancel: eventTypes.touchCancel,
	  topTouchEnd: eventTypes.touchEnd,
	  topTouchMove: eventTypes.touchMove,
	  topTouchStart: eventTypes.touchStart,
	  topVolumeChange: eventTypes.volumeChange,
	  topWaiting: eventTypes.waiting,
	  topWheel: eventTypes.wheel
	};

	for (var type in topLevelEventsToDispatchConfig) {
	  topLevelEventsToDispatchConfig[type].dependencies = [type];
	}

	var ON_CLICK_KEY = keyOf({ onClick: null });
	var onClickListeners = {};

	var SimpleEventPlugin = {

	  eventTypes: eventTypes,

	  /**
	   * @param {string} topLevelType Record from `EventConstants`.
	   * @param {DOMEventTarget} topLevelTarget The listening component root node.
	   * @param {string} topLevelTargetID ID of `topLevelTarget`.
	   * @param {object} nativeEvent Native browser event.
	   * @return {*} An accumulation of synthetic events.
	   * @see {EventPluginHub.extractEvents}
	   */
	  extractEvents: function (topLevelType, topLevelTarget, topLevelTargetID, nativeEvent, nativeEventTarget) {
	    var dispatchConfig = topLevelEventsToDispatchConfig[topLevelType];
	    if (!dispatchConfig) {
	      return null;
	    }
	    var EventConstructor;
	    switch (topLevelType) {
	      case topLevelTypes.topAbort:
	      case topLevelTypes.topCanPlay:
	      case topLevelTypes.topCanPlayThrough:
	      case topLevelTypes.topDurationChange:
	      case topLevelTypes.topEmptied:
	      case topLevelTypes.topEncrypted:
	      case topLevelTypes.topEnded:
	      case topLevelTypes.topError:
	      case topLevelTypes.topInput:
	      case topLevelTypes.topLoad:
	      case topLevelTypes.topLoadedData:
	      case topLevelTypes.topLoadedMetadata:
	      case topLevelTypes.topLoadStart:
	      case topLevelTypes.topPause:
	      case topLevelTypes.topPlay:
	      case topLevelTypes.topPlaying:
	      case topLevelTypes.topProgress:
	      case topLevelTypes.topRateChange:
	      case topLevelTypes.topReset:
	      case topLevelTypes.topSeeked:
	      case topLevelTypes.topSeeking:
	      case topLevelTypes.topStalled:
	      case topLevelTypes.topSubmit:
	      case topLevelTypes.topSuspend:
	      case topLevelTypes.topTimeUpdate:
	      case topLevelTypes.topVolumeChange:
	      case topLevelTypes.topWaiting:
	        // HTML Events
	        // @see http://www.w3.org/TR/html5/index.html#events-0
	        EventConstructor = SyntheticEvent;
	        break;
	      case topLevelTypes.topKeyPress:
	        // FireFox creates a keypress event for function keys too. This removes
	        // the unwanted keypress events. Enter is however both printable and
	        // non-printable. One would expect Tab to be as well (but it isn't).
	        if (getEventCharCode(nativeEvent) === 0) {
	          return null;
	        }
	      /* falls through */
	      case topLevelTypes.topKeyDown:
	      case topLevelTypes.topKeyUp:
	        EventConstructor = SyntheticKeyboardEvent;
	        break;
	      case topLevelTypes.topBlur:
	      case topLevelTypes.topFocus:
	        EventConstructor = SyntheticFocusEvent;
	        break;
	      case topLevelTypes.topClick:
	        // Firefox creates a click event on right mouse clicks. This removes the
	        // unwanted click events.
	        if (nativeEvent.button === 2) {
	          return null;
	        }
	      /* falls through */
	      case topLevelTypes.topContextMenu:
	      case topLevelTypes.topDoubleClick:
	      case topLevelTypes.topMouseDown:
	      case topLevelTypes.topMouseMove:
	      case topLevelTypes.topMouseOut:
	      case topLevelTypes.topMouseOver:
	      case topLevelTypes.topMouseUp:
	        EventConstructor = SyntheticMouseEvent;
	        break;
	      case topLevelTypes.topDrag:
	      case topLevelTypes.topDragEnd:
	      case topLevelTypes.topDragEnter:
	      case topLevelTypes.topDragExit:
	      case topLevelTypes.topDragLeave:
	      case topLevelTypes.topDragOver:
	      case topLevelTypes.topDragStart:
	      case topLevelTypes.topDrop:
	        EventConstructor = SyntheticDragEvent;
	        break;
	      case topLevelTypes.topTouchCancel:
	      case topLevelTypes.topTouchEnd:
	      case topLevelTypes.topTouchMove:
	      case topLevelTypes.topTouchStart:
	        EventConstructor = SyntheticTouchEvent;
	        break;
	      case topLevelTypes.topScroll:
	        EventConstructor = SyntheticUIEvent;
	        break;
	      case topLevelTypes.topWheel:
	        EventConstructor = SyntheticWheelEvent;
	        break;
	      case topLevelTypes.topCopy:
	      case topLevelTypes.topCut:
	      case topLevelTypes.topPaste:
	        EventConstructor = SyntheticClipboardEvent;
	        break;
	    }
	    !EventConstructor ? process.env.NODE_ENV !== 'production' ? invariant(false, 'SimpleEventPlugin: Unhandled event type, `%s`.', topLevelType) : invariant(false) : undefined;
	    var event = EventConstructor.getPooled(dispatchConfig, topLevelTargetID, nativeEvent, nativeEventTarget);
	    EventPropagators.accumulateTwoPhaseDispatches(event);
	    return event;
	  },

	  didPutListener: function (id, registrationName, listener) {
	    // Mobile Safari does not fire properly bubble click events on
	    // non-interactive elements, which means delegated click listeners do not
	    // fire. The workaround for this bug involves attaching an empty click
	    // listener on the target node.
	    if (registrationName === ON_CLICK_KEY) {
	      var node = ReactMount.getNode(id);
	      if (!onClickListeners[id]) {
	        onClickListeners[id] = EventListener.listen(node, 'click', emptyFunction);
	      }
	    }
	  },

	  willDeleteListener: function (id, registrationName) {
	    if (registrationName === ON_CLICK_KEY) {
	      onClickListeners[id].remove();
	      delete onClickListeners[id];
	    }
	  }

	};

	module.exports = SimpleEventPlugin;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(8)))

/***/ },
/* 136 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule SyntheticClipboardEvent
	 * @typechecks static-only
	 */

	'use strict';

	var SyntheticEvent = __webpack_require__(80);

	/**
	 * @interface Event
	 * @see http://www.w3.org/TR/clipboard-apis/
	 */
	var ClipboardEventInterface = {
	  clipboardData: function (event) {
	    return 'clipboardData' in event ? event.clipboardData : window.clipboardData;
	  }
	};

	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticUIEvent}
	 */
	function SyntheticClipboardEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
	  SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
	}

	SyntheticEvent.augmentClass(SyntheticClipboardEvent, ClipboardEventInterface);

	module.exports = SyntheticClipboardEvent;

/***/ },
/* 137 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule SyntheticFocusEvent
	 * @typechecks static-only
	 */

	'use strict';

	var SyntheticUIEvent = __webpack_require__(90);

	/**
	 * @interface FocusEvent
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/
	 */
	var FocusEventInterface = {
	  relatedTarget: null
	};

	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticUIEvent}
	 */
	function SyntheticFocusEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
	  SyntheticUIEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
	}

	SyntheticUIEvent.augmentClass(SyntheticFocusEvent, FocusEventInterface);

	module.exports = SyntheticFocusEvent;

/***/ },
/* 138 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule SyntheticKeyboardEvent
	 * @typechecks static-only
	 */

	'use strict';

	var SyntheticUIEvent = __webpack_require__(90);

	var getEventCharCode = __webpack_require__(139);
	var getEventKey = __webpack_require__(140);
	var getEventModifierState = __webpack_require__(91);

	/**
	 * @interface KeyboardEvent
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/
	 */
	var KeyboardEventInterface = {
	  key: getEventKey,
	  location: null,
	  ctrlKey: null,
	  shiftKey: null,
	  altKey: null,
	  metaKey: null,
	  repeat: null,
	  locale: null,
	  getModifierState: getEventModifierState,
	  // Legacy Interface
	  charCode: function (event) {
	    // `charCode` is the result of a KeyPress event and represents the value of
	    // the actual printable character.

	    // KeyPress is deprecated, but its replacement is not yet final and not
	    // implemented in any major browser. Only KeyPress has charCode.
	    if (event.type === 'keypress') {
	      return getEventCharCode(event);
	    }
	    return 0;
	  },
	  keyCode: function (event) {
	    // `keyCode` is the result of a KeyDown/Up event and represents the value of
	    // physical keyboard key.

	    // The actual meaning of the value depends on the users' keyboard layout
	    // which cannot be detected. Assuming that it is a US keyboard layout
	    // provides a surprisingly accurate mapping for US and European users.
	    // Due to this, it is left to the user to implement at this time.
	    if (event.type === 'keydown' || event.type === 'keyup') {
	      return event.keyCode;
	    }
	    return 0;
	  },
	  which: function (event) {
	    // `which` is an alias for either `keyCode` or `charCode` depending on the
	    // type of the event.
	    if (event.type === 'keypress') {
	      return getEventCharCode(event);
	    }
	    if (event.type === 'keydown' || event.type === 'keyup') {
	      return event.keyCode;
	    }
	    return 0;
	  }
	};

	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticUIEvent}
	 */
	function SyntheticKeyboardEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
	  SyntheticUIEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
	}

	SyntheticUIEvent.augmentClass(SyntheticKeyboardEvent, KeyboardEventInterface);

	module.exports = SyntheticKeyboardEvent;

/***/ },
/* 139 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule getEventCharCode
	 * @typechecks static-only
	 */

	'use strict';

	/**
	 * `charCode` represents the actual "character code" and is safe to use with
	 * `String.fromCharCode`. As such, only keys that correspond to printable
	 * characters produce a valid `charCode`, the only exception to this is Enter.
	 * The Tab-key is considered non-printable and does not have a `charCode`,
	 * presumably because it does not produce a tab-character in browsers.
	 *
	 * @param {object} nativeEvent Native browser event.
	 * @return {number} Normalized `charCode` property.
	 */
	function getEventCharCode(nativeEvent) {
	  var charCode;
	  var keyCode = nativeEvent.keyCode;

	  if ('charCode' in nativeEvent) {
	    charCode = nativeEvent.charCode;

	    // FF does not set `charCode` for the Enter-key, check against `keyCode`.
	    if (charCode === 0 && keyCode === 13) {
	      charCode = 13;
	    }
	  } else {
	    // IE8 does not implement `charCode`, but `keyCode` has the correct value.
	    charCode = keyCode;
	  }

	  // Some non-printable keys are reported in `charCode`/`keyCode`, discard them.
	  // Must not discard the (non-)printable Enter-key.
	  if (charCode >= 32 || charCode === 13) {
	    return charCode;
	  }

	  return 0;
	}

	module.exports = getEventCharCode;

/***/ },
/* 140 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule getEventKey
	 * @typechecks static-only
	 */

	'use strict';

	var getEventCharCode = __webpack_require__(139);

	/**
	 * Normalization of deprecated HTML5 `key` values
	 * @see https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent#Key_names
	 */
	var normalizeKey = {
	  'Esc': 'Escape',
	  'Spacebar': ' ',
	  'Left': 'ArrowLeft',
	  'Up': 'ArrowUp',
	  'Right': 'ArrowRight',
	  'Down': 'ArrowDown',
	  'Del': 'Delete',
	  'Win': 'OS',
	  'Menu': 'ContextMenu',
	  'Apps': 'ContextMenu',
	  'Scroll': 'ScrollLock',
	  'MozPrintableKey': 'Unidentified'
	};

	/**
	 * Translation from legacy `keyCode` to HTML5 `key`
	 * Only special keys supported, all others depend on keyboard layout or browser
	 * @see https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent#Key_names
	 */
	var translateToKey = {
	  8: 'Backspace',
	  9: 'Tab',
	  12: 'Clear',
	  13: 'Enter',
	  16: 'Shift',
	  17: 'Control',
	  18: 'Alt',
	  19: 'Pause',
	  20: 'CapsLock',
	  27: 'Escape',
	  32: ' ',
	  33: 'PageUp',
	  34: 'PageDown',
	  35: 'End',
	  36: 'Home',
	  37: 'ArrowLeft',
	  38: 'ArrowUp',
	  39: 'ArrowRight',
	  40: 'ArrowDown',
	  45: 'Insert',
	  46: 'Delete',
	  112: 'F1', 113: 'F2', 114: 'F3', 115: 'F4', 116: 'F5', 117: 'F6',
	  118: 'F7', 119: 'F8', 120: 'F9', 121: 'F10', 122: 'F11', 123: 'F12',
	  144: 'NumLock',
	  145: 'ScrollLock',
	  224: 'Meta'
	};

	/**
	 * @param {object} nativeEvent Native browser event.
	 * @return {string} Normalized `key` property.
	 */
	function getEventKey(nativeEvent) {
	  if (nativeEvent.key) {
	    // Normalize inconsistent values reported by browsers due to
	    // implementations of a working draft specification.

	    // FireFox implements `key` but returns `MozPrintableKey` for all
	    // printable characters (normalized to `Unidentified`), ignore it.
	    var key = normalizeKey[nativeEvent.key] || nativeEvent.key;
	    if (key !== 'Unidentified') {
	      return key;
	    }
	  }

	  // Browser does not implement `key`, polyfill as much of it as we can.
	  if (nativeEvent.type === 'keypress') {
	    var charCode = getEventCharCode(nativeEvent);

	    // The enter-key is technically both printable and non-printable and can
	    // thus be captured by `keypress`, no other non-printable key should.
	    return charCode === 13 ? 'Enter' : String.fromCharCode(charCode);
	  }
	  if (nativeEvent.type === 'keydown' || nativeEvent.type === 'keyup') {
	    // While user keyboard layout determines the actual meaning of each
	    // `keyCode` value, almost all function keys have a universal value.
	    return translateToKey[nativeEvent.keyCode] || 'Unidentified';
	  }
	  return '';
	}

	module.exports = getEventKey;

/***/ },
/* 141 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule SyntheticDragEvent
	 * @typechecks static-only
	 */

	'use strict';

	var SyntheticMouseEvent = __webpack_require__(89);

	/**
	 * @interface DragEvent
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/
	 */
	var DragEventInterface = {
	  dataTransfer: null
	};

	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticUIEvent}
	 */
	function SyntheticDragEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
	  SyntheticMouseEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
	}

	SyntheticMouseEvent.augmentClass(SyntheticDragEvent, DragEventInterface);

	module.exports = SyntheticDragEvent;

/***/ },
/* 142 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule SyntheticTouchEvent
	 * @typechecks static-only
	 */

	'use strict';

	var SyntheticUIEvent = __webpack_require__(90);

	var getEventModifierState = __webpack_require__(91);

	/**
	 * @interface TouchEvent
	 * @see http://www.w3.org/TR/touch-events/
	 */
	var TouchEventInterface = {
	  touches: null,
	  targetTouches: null,
	  changedTouches: null,
	  altKey: null,
	  metaKey: null,
	  ctrlKey: null,
	  shiftKey: null,
	  getModifierState: getEventModifierState
	};

	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticUIEvent}
	 */
	function SyntheticTouchEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
	  SyntheticUIEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
	}

	SyntheticUIEvent.augmentClass(SyntheticTouchEvent, TouchEventInterface);

	module.exports = SyntheticTouchEvent;

/***/ },
/* 143 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule SyntheticWheelEvent
	 * @typechecks static-only
	 */

	'use strict';

	var SyntheticMouseEvent = __webpack_require__(89);

	/**
	 * @interface WheelEvent
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/
	 */
	var WheelEventInterface = {
	  deltaX: function (event) {
	    return 'deltaX' in event ? event.deltaX :
	    // Fallback to `wheelDeltaX` for Webkit and normalize (right is positive).
	    'wheelDeltaX' in event ? -event.wheelDeltaX : 0;
	  },
	  deltaY: function (event) {
	    return 'deltaY' in event ? event.deltaY :
	    // Fallback to `wheelDeltaY` for Webkit and normalize (down is positive).
	    'wheelDeltaY' in event ? -event.wheelDeltaY :
	    // Fallback to `wheelDelta` for IE<9 and normalize (down is positive).
	    'wheelDelta' in event ? -event.wheelDelta : 0;
	  },
	  deltaZ: null,

	  // Browsers without "deltaMode" is reporting in raw wheel delta where one
	  // notch on the scroll is always +/- 120, roughly equivalent to pixels.
	  // A good approximation of DOM_DELTA_LINE (1) is 5% of viewport size or
	  // ~40 pixels, for DOM_DELTA_SCREEN (2) it is 87.5% of viewport size.
	  deltaMode: null
	};

	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticMouseEvent}
	 */
	function SyntheticWheelEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
	  SyntheticMouseEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
	}

	SyntheticMouseEvent.augmentClass(SyntheticWheelEvent, WheelEventInterface);

	module.exports = SyntheticWheelEvent;

/***/ },
/* 144 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule SVGDOMPropertyConfig
	 */

	'use strict';

	var DOMProperty = __webpack_require__(27);

	var MUST_USE_ATTRIBUTE = DOMProperty.injection.MUST_USE_ATTRIBUTE;

	var NS = {
	  xlink: 'http://www.w3.org/1999/xlink',
	  xml: 'http://www.w3.org/XML/1998/namespace'
	};

	var SVGDOMPropertyConfig = {
	  Properties: {
	    clipPath: MUST_USE_ATTRIBUTE,
	    cx: MUST_USE_ATTRIBUTE,
	    cy: MUST_USE_ATTRIBUTE,
	    d: MUST_USE_ATTRIBUTE,
	    dx: MUST_USE_ATTRIBUTE,
	    dy: MUST_USE_ATTRIBUTE,
	    fill: MUST_USE_ATTRIBUTE,
	    fillOpacity: MUST_USE_ATTRIBUTE,
	    fontFamily: MUST_USE_ATTRIBUTE,
	    fontSize: MUST_USE_ATTRIBUTE,
	    fx: MUST_USE_ATTRIBUTE,
	    fy: MUST_USE_ATTRIBUTE,
	    gradientTransform: MUST_USE_ATTRIBUTE,
	    gradientUnits: MUST_USE_ATTRIBUTE,
	    markerEnd: MUST_USE_ATTRIBUTE,
	    markerMid: MUST_USE_ATTRIBUTE,
	    markerStart: MUST_USE_ATTRIBUTE,
	    offset: MUST_USE_ATTRIBUTE,
	    opacity: MUST_USE_ATTRIBUTE,
	    patternContentUnits: MUST_USE_ATTRIBUTE,
	    patternUnits: MUST_USE_ATTRIBUTE,
	    points: MUST_USE_ATTRIBUTE,
	    preserveAspectRatio: MUST_USE_ATTRIBUTE,
	    r: MUST_USE_ATTRIBUTE,
	    rx: MUST_USE_ATTRIBUTE,
	    ry: MUST_USE_ATTRIBUTE,
	    spreadMethod: MUST_USE_ATTRIBUTE,
	    stopColor: MUST_USE_ATTRIBUTE,
	    stopOpacity: MUST_USE_ATTRIBUTE,
	    stroke: MUST_USE_ATTRIBUTE,
	    strokeDasharray: MUST_USE_ATTRIBUTE,
	    strokeLinecap: MUST_USE_ATTRIBUTE,
	    strokeOpacity: MUST_USE_ATTRIBUTE,
	    strokeWidth: MUST_USE_ATTRIBUTE,
	    textAnchor: MUST_USE_ATTRIBUTE,
	    transform: MUST_USE_ATTRIBUTE,
	    version: MUST_USE_ATTRIBUTE,
	    viewBox: MUST_USE_ATTRIBUTE,
	    x1: MUST_USE_ATTRIBUTE,
	    x2: MUST_USE_ATTRIBUTE,
	    x: MUST_USE_ATTRIBUTE,
	    xlinkActuate: MUST_USE_ATTRIBUTE,
	    xlinkArcrole: MUST_USE_ATTRIBUTE,
	    xlinkHref: MUST_USE_ATTRIBUTE,
	    xlinkRole: MUST_USE_ATTRIBUTE,
	    xlinkShow: MUST_USE_ATTRIBUTE,
	    xlinkTitle: MUST_USE_ATTRIBUTE,
	    xlinkType: MUST_USE_ATTRIBUTE,
	    xmlBase: MUST_USE_ATTRIBUTE,
	    xmlLang: MUST_USE_ATTRIBUTE,
	    xmlSpace: MUST_USE_ATTRIBUTE,
	    y1: MUST_USE_ATTRIBUTE,
	    y2: MUST_USE_ATTRIBUTE,
	    y: MUST_USE_ATTRIBUTE
	  },
	  DOMAttributeNamespaces: {
	    xlinkActuate: NS.xlink,
	    xlinkArcrole: NS.xlink,
	    xlinkHref: NS.xlink,
	    xlinkRole: NS.xlink,
	    xlinkShow: NS.xlink,
	    xlinkTitle: NS.xlink,
	    xlinkType: NS.xlink,
	    xmlBase: NS.xml,
	    xmlLang: NS.xml,
	    xmlSpace: NS.xml
	  },
	  DOMAttributeNames: {
	    clipPath: 'clip-path',
	    fillOpacity: 'fill-opacity',
	    fontFamily: 'font-family',
	    fontSize: 'font-size',
	    gradientTransform: 'gradientTransform',
	    gradientUnits: 'gradientUnits',
	    markerEnd: 'marker-end',
	    markerMid: 'marker-mid',
	    markerStart: 'marker-start',
	    patternContentUnits: 'patternContentUnits',
	    patternUnits: 'patternUnits',
	    preserveAspectRatio: 'preserveAspectRatio',
	    spreadMethod: 'spreadMethod',
	    stopColor: 'stop-color',
	    stopOpacity: 'stop-opacity',
	    strokeDasharray: 'stroke-dasharray',
	    strokeLinecap: 'stroke-linecap',
	    strokeOpacity: 'stroke-opacity',
	    strokeWidth: 'stroke-width',
	    textAnchor: 'text-anchor',
	    viewBox: 'viewBox',
	    xlinkActuate: 'xlink:actuate',
	    xlinkArcrole: 'xlink:arcrole',
	    xlinkHref: 'xlink:href',
	    xlinkRole: 'xlink:role',
	    xlinkShow: 'xlink:show',
	    xlinkTitle: 'xlink:title',
	    xlinkType: 'xlink:type',
	    xmlBase: 'xml:base',
	    xmlLang: 'xml:lang',
	    xmlSpace: 'xml:space'
	  }
	};

	module.exports = SVGDOMPropertyConfig;

/***/ },
/* 145 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDefaultPerf
	 * @typechecks static-only
	 */

	'use strict';

	var DOMProperty = __webpack_require__(27);
	var ReactDefaultPerfAnalysis = __webpack_require__(146);
	var ReactMount = __webpack_require__(32);
	var ReactPerf = __webpack_require__(22);

	var performanceNow = __webpack_require__(147);

	function roundFloat(val) {
	  return Math.floor(val * 100) / 100;
	}

	function addValue(obj, key, val) {
	  obj[key] = (obj[key] || 0) + val;
	}

	var ReactDefaultPerf = {
	  _allMeasurements: [], // last item in the list is the current one
	  _mountStack: [0],
	  _injected: false,

	  start: function () {
	    if (!ReactDefaultPerf._injected) {
	      ReactPerf.injection.injectMeasure(ReactDefaultPerf.measure);
	    }

	    ReactDefaultPerf._allMeasurements.length = 0;
	    ReactPerf.enableMeasure = true;
	  },

	  stop: function () {
	    ReactPerf.enableMeasure = false;
	  },

	  getLastMeasurements: function () {
	    return ReactDefaultPerf._allMeasurements;
	  },

	  printExclusive: function (measurements) {
	    measurements = measurements || ReactDefaultPerf._allMeasurements;
	    var summary = ReactDefaultPerfAnalysis.getExclusiveSummary(measurements);
	    console.table(summary.map(function (item) {
	      return {
	        'Component class name': item.componentName,
	        'Total inclusive time (ms)': roundFloat(item.inclusive),
	        'Exclusive mount time (ms)': roundFloat(item.exclusive),
	        'Exclusive render time (ms)': roundFloat(item.render),
	        'Mount time per instance (ms)': roundFloat(item.exclusive / item.count),
	        'Render time per instance (ms)': roundFloat(item.render / item.count),
	        'Instances': item.count
	      };
	    }));
	    // TODO: ReactDefaultPerfAnalysis.getTotalTime() does not return the correct
	    // number.
	  },

	  printInclusive: function (measurements) {
	    measurements = measurements || ReactDefaultPerf._allMeasurements;
	    var summary = ReactDefaultPerfAnalysis.getInclusiveSummary(measurements);
	    console.table(summary.map(function (item) {
	      return {
	        'Owner > component': item.componentName,
	        'Inclusive time (ms)': roundFloat(item.time),
	        'Instances': item.count
	      };
	    }));
	    console.log('Total time:', ReactDefaultPerfAnalysis.getTotalTime(measurements).toFixed(2) + ' ms');
	  },

	  getMeasurementsSummaryMap: function (measurements) {
	    var summary = ReactDefaultPerfAnalysis.getInclusiveSummary(measurements, true);
	    return summary.map(function (item) {
	      return {
	        'Owner > component': item.componentName,
	        'Wasted time (ms)': item.time,
	        'Instances': item.count
	      };
	    });
	  },

	  printWasted: function (measurements) {
	    measurements = measurements || ReactDefaultPerf._allMeasurements;
	    console.table(ReactDefaultPerf.getMeasurementsSummaryMap(measurements));
	    console.log('Total time:', ReactDefaultPerfAnalysis.getTotalTime(measurements).toFixed(2) + ' ms');
	  },

	  printDOM: function (measurements) {
	    measurements = measurements || ReactDefaultPerf._allMeasurements;
	    var summary = ReactDefaultPerfAnalysis.getDOMSummary(measurements);
	    console.table(summary.map(function (item) {
	      var result = {};
	      result[DOMProperty.ID_ATTRIBUTE_NAME] = item.id;
	      result.type = item.type;
	      result.args = JSON.stringify(item.args);
	      return result;
	    }));
	    console.log('Total time:', ReactDefaultPerfAnalysis.getTotalTime(measurements).toFixed(2) + ' ms');
	  },

	  _recordWrite: function (id, fnName, totalTime, args) {
	    // TODO: totalTime isn't that useful since it doesn't count paints/reflows
	    var writes = ReactDefaultPerf._allMeasurements[ReactDefaultPerf._allMeasurements.length - 1].writes;
	    writes[id] = writes[id] || [];
	    writes[id].push({
	      type: fnName,
	      time: totalTime,
	      args: args
	    });
	  },

	  measure: function (moduleName, fnName, func) {
	    return function () {
	      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
	        args[_key] = arguments[_key];
	      }

	      var totalTime;
	      var rv;
	      var start;

	      if (fnName === '_renderNewRootComponent' || fnName === 'flushBatchedUpdates') {
	        // A "measurement" is a set of metrics recorded for each flush. We want
	        // to group the metrics for a given flush together so we can look at the
	        // components that rendered and the DOM operations that actually
	        // happened to determine the amount of "wasted work" performed.
	        ReactDefaultPerf._allMeasurements.push({
	          exclusive: {},
	          inclusive: {},
	          render: {},
	          counts: {},
	          writes: {},
	          displayNames: {},
	          totalTime: 0,
	          created: {}
	        });
	        start = performanceNow();
	        rv = func.apply(this, args);
	        ReactDefaultPerf._allMeasurements[ReactDefaultPerf._allMeasurements.length - 1].totalTime = performanceNow() - start;
	        return rv;
	      } else if (fnName === '_mountImageIntoNode' || moduleName === 'ReactBrowserEventEmitter' || moduleName === 'ReactDOMIDOperations' || moduleName === 'CSSPropertyOperations' || moduleName === 'DOMChildrenOperations' || moduleName === 'DOMPropertyOperations') {
	        start = performanceNow();
	        rv = func.apply(this, args);
	        totalTime = performanceNow() - start;

	        if (fnName === '_mountImageIntoNode') {
	          var mountID = ReactMount.getID(args[1]);
	          ReactDefaultPerf._recordWrite(mountID, fnName, totalTime, args[0]);
	        } else if (fnName === 'dangerouslyProcessChildrenUpdates') {
	          // special format
	          args[0].forEach(function (update) {
	            var writeArgs = {};
	            if (update.fromIndex !== null) {
	              writeArgs.fromIndex = update.fromIndex;
	            }
	            if (update.toIndex !== null) {
	              writeArgs.toIndex = update.toIndex;
	            }
	            if (update.textContent !== null) {
	              writeArgs.textContent = update.textContent;
	            }
	            if (update.markupIndex !== null) {
	              writeArgs.markup = args[1][update.markupIndex];
	            }
	            ReactDefaultPerf._recordWrite(update.parentID, update.type, totalTime, writeArgs);
	          });
	        } else {
	          // basic format
	          var id = args[0];
	          if (typeof id === 'object') {
	            id = ReactMount.getID(args[0]);
	          }
	          ReactDefaultPerf._recordWrite(id, fnName, totalTime, Array.prototype.slice.call(args, 1));
	        }
	        return rv;
	      } else if (moduleName === 'ReactCompositeComponent' && (fnName === 'mountComponent' || fnName === 'updateComponent' || // TODO: receiveComponent()?
	      fnName === '_renderValidatedComponent')) {

	        if (this._currentElement.type === ReactMount.TopLevelWrapper) {
	          return func.apply(this, args);
	        }

	        var rootNodeID = fnName === 'mountComponent' ? args[0] : this._rootNodeID;
	        var isRender = fnName === '_renderValidatedComponent';
	        var isMount = fnName === 'mountComponent';

	        var mountStack = ReactDefaultPerf._mountStack;
	        var entry = ReactDefaultPerf._allMeasurements[ReactDefaultPerf._allMeasurements.length - 1];

	        if (isRender) {
	          addValue(entry.counts, rootNodeID, 1);
	        } else if (isMount) {
	          entry.created[rootNodeID] = true;
	          mountStack.push(0);
	        }

	        start = performanceNow();
	        rv = func.apply(this, args);
	        totalTime = performanceNow() - start;

	        if (isRender) {
	          addValue(entry.render, rootNodeID, totalTime);
	        } else if (isMount) {
	          var subMountTime = mountStack.pop();
	          mountStack[mountStack.length - 1] += totalTime;
	          addValue(entry.exclusive, rootNodeID, totalTime - subMountTime);
	          addValue(entry.inclusive, rootNodeID, totalTime);
	        } else {
	          addValue(entry.inclusive, rootNodeID, totalTime);
	        }

	        entry.displayNames[rootNodeID] = {
	          current: this.getName(),
	          owner: this._currentElement._owner ? this._currentElement._owner.getName() : '<root>'
	        };

	        return rv;
	      } else {
	        return func.apply(this, args);
	      }
	    };
	  }
	};

	module.exports = ReactDefaultPerf;

/***/ },
/* 146 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDefaultPerfAnalysis
	 */

	'use strict';

	var assign = __webpack_require__(43);

	// Don't try to save users less than 1.2ms (a number I made up)
	var DONT_CARE_THRESHOLD = 1.2;
	var DOM_OPERATION_TYPES = {
	  '_mountImageIntoNode': 'set innerHTML',
	  INSERT_MARKUP: 'set innerHTML',
	  MOVE_EXISTING: 'move',
	  REMOVE_NODE: 'remove',
	  SET_MARKUP: 'set innerHTML',
	  TEXT_CONTENT: 'set textContent',
	  'setValueForProperty': 'update attribute',
	  'setValueForAttribute': 'update attribute',
	  'deleteValueForProperty': 'remove attribute',
	  'dangerouslyReplaceNodeWithMarkupByID': 'replace'
	};

	function getTotalTime(measurements) {
	  // TODO: return number of DOM ops? could be misleading.
	  // TODO: measure dropped frames after reconcile?
	  // TODO: log total time of each reconcile and the top-level component
	  // class that triggered it.
	  var totalTime = 0;
	  for (var i = 0; i < measurements.length; i++) {
	    var measurement = measurements[i];
	    totalTime += measurement.totalTime;
	  }
	  return totalTime;
	}

	function getDOMSummary(measurements) {
	  var items = [];
	  measurements.forEach(function (measurement) {
	    Object.keys(measurement.writes).forEach(function (id) {
	      measurement.writes[id].forEach(function (write) {
	        items.push({
	          id: id,
	          type: DOM_OPERATION_TYPES[write.type] || write.type,
	          args: write.args
	        });
	      });
	    });
	  });
	  return items;
	}

	function getExclusiveSummary(measurements) {
	  var candidates = {};
	  var displayName;

	  for (var i = 0; i < measurements.length; i++) {
	    var measurement = measurements[i];
	    var allIDs = assign({}, measurement.exclusive, measurement.inclusive);

	    for (var id in allIDs) {
	      displayName = measurement.displayNames[id].current;

	      candidates[displayName] = candidates[displayName] || {
	        componentName: displayName,
	        inclusive: 0,
	        exclusive: 0,
	        render: 0,
	        count: 0
	      };
	      if (measurement.render[id]) {
	        candidates[displayName].render += measurement.render[id];
	      }
	      if (measurement.exclusive[id]) {
	        candidates[displayName].exclusive += measurement.exclusive[id];
	      }
	      if (measurement.inclusive[id]) {
	        candidates[displayName].inclusive += measurement.inclusive[id];
	      }
	      if (measurement.counts[id]) {
	        candidates[displayName].count += measurement.counts[id];
	      }
	    }
	  }

	  // Now make a sorted array with the results.
	  var arr = [];
	  for (displayName in candidates) {
	    if (candidates[displayName].exclusive >= DONT_CARE_THRESHOLD) {
	      arr.push(candidates[displayName]);
	    }
	  }

	  arr.sort(function (a, b) {
	    return b.exclusive - a.exclusive;
	  });

	  return arr;
	}

	function getInclusiveSummary(measurements, onlyClean) {
	  var candidates = {};
	  var inclusiveKey;

	  for (var i = 0; i < measurements.length; i++) {
	    var measurement = measurements[i];
	    var allIDs = assign({}, measurement.exclusive, measurement.inclusive);
	    var cleanComponents;

	    if (onlyClean) {
	      cleanComponents = getUnchangedComponents(measurement);
	    }

	    for (var id in allIDs) {
	      if (onlyClean && !cleanComponents[id]) {
	        continue;
	      }

	      var displayName = measurement.displayNames[id];

	      // Inclusive time is not useful for many components without knowing where
	      // they are instantiated. So we aggregate inclusive time with both the
	      // owner and current displayName as the key.
	      inclusiveKey = displayName.owner + ' > ' + displayName.current;

	      candidates[inclusiveKey] = candidates[inclusiveKey] || {
	        componentName: inclusiveKey,
	        time: 0,
	        count: 0
	      };

	      if (measurement.inclusive[id]) {
	        candidates[inclusiveKey].time += measurement.inclusive[id];
	      }
	      if (measurement.counts[id]) {
	        candidates[inclusiveKey].count += measurement.counts[id];
	      }
	    }
	  }

	  // Now make a sorted array with the results.
	  var arr = [];
	  for (inclusiveKey in candidates) {
	    if (candidates[inclusiveKey].time >= DONT_CARE_THRESHOLD) {
	      arr.push(candidates[inclusiveKey]);
	    }
	  }

	  arr.sort(function (a, b) {
	    return b.time - a.time;
	  });

	  return arr;
	}

	function getUnchangedComponents(measurement) {
	  // For a given reconcile, look at which components did not actually
	  // render anything to the DOM and return a mapping of their ID to
	  // the amount of time it took to render the entire subtree.
	  var cleanComponents = {};
	  var dirtyLeafIDs = Object.keys(measurement.writes);
	  var allIDs = assign({}, measurement.exclusive, measurement.inclusive);

	  for (var id in allIDs) {
	    var isDirty = false;
	    // For each component that rendered, see if a component that triggered
	    // a DOM op is in its subtree.
	    for (var i = 0; i < dirtyLeafIDs.length; i++) {
	      if (dirtyLeafIDs[i].indexOf(id) === 0) {
	        isDirty = true;
	        break;
	      }
	    }
	    // check if component newly created
	    if (measurement.created[id]) {
	      isDirty = true;
	    }
	    if (!isDirty && measurement.counts[id] > 0) {
	      cleanComponents[id] = true;
	    }
	  }
	  return cleanComponents;
	}

	var ReactDefaultPerfAnalysis = {
	  getExclusiveSummary: getExclusiveSummary,
	  getInclusiveSummary: getInclusiveSummary,
	  getDOMSummary: getDOMSummary,
	  getTotalTime: getTotalTime
	};

	module.exports = ReactDefaultPerfAnalysis;

/***/ },
/* 147 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule performanceNow
	 * @typechecks
	 */

	'use strict';

	var performance = __webpack_require__(148);
	var curPerformance = performance;

	/**
	 * Detect if we can use `window.performance.now()` and gracefully fallback to
	 * `Date.now()` if it doesn't exist. We need to support Firefox < 15 for now
	 * because of Facebook's testing infrastructure.
	 */
	if (!curPerformance || !curPerformance.now) {
	  curPerformance = Date;
	}

	var performanceNow = curPerformance.now.bind(curPerformance);

	module.exports = performanceNow;

/***/ },
/* 148 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule performance
	 * @typechecks
	 */

	'use strict';

	var ExecutionEnvironment = __webpack_require__(13);

	var performance;

	if (ExecutionEnvironment.canUseDOM) {
	  performance = window.performance || window.msPerformance || window.webkitPerformance;
	}

	module.exports = performance || {};

/***/ },
/* 149 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactVersion
	 */

	'use strict';

	module.exports = '0.14.0';

/***/ },
/* 150 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	* @providesModule renderSubtreeIntoContainer
	*/

	'use strict';

	var ReactMount = __webpack_require__(32);

	module.exports = ReactMount.renderSubtreeIntoContainer;

/***/ },
/* 151 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDOMServer
	 */

	'use strict';

	var ReactDefaultInjection = __webpack_require__(74);
	var ReactServerRendering = __webpack_require__(152);
	var ReactVersion = __webpack_require__(149);

	ReactDefaultInjection.inject();

	var ReactDOMServer = {
	  renderToString: ReactServerRendering.renderToString,
	  renderToStaticMarkup: ReactServerRendering.renderToStaticMarkup,
	  version: ReactVersion
	};

	module.exports = ReactDOMServer;

/***/ },
/* 152 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @typechecks static-only
	 * @providesModule ReactServerRendering
	 */
	'use strict';

	var ReactDefaultBatchingStrategy = __webpack_require__(95);
	var ReactElement = __webpack_require__(46);
	var ReactInstanceHandles = __webpack_require__(48);
	var ReactMarkupChecksum = __webpack_require__(51);
	var ReactServerBatchingStrategy = __webpack_require__(153);
	var ReactServerRenderingTransaction = __webpack_require__(154);
	var ReactUpdates = __webpack_require__(57);

	var emptyObject = __webpack_require__(61);
	var instantiateReactComponent = __webpack_require__(65);
	var invariant = __webpack_require__(17);

	/**
	 * @param {ReactElement} element
	 * @return {string} the HTML markup
	 */
	function renderToString(element) {
	  !ReactElement.isValidElement(element) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'renderToString(): You must pass a valid ReactElement.') : invariant(false) : undefined;

	  var transaction;
	  try {
	    ReactUpdates.injection.injectBatchingStrategy(ReactServerBatchingStrategy);

	    var id = ReactInstanceHandles.createReactRootID();
	    transaction = ReactServerRenderingTransaction.getPooled(false);

	    return transaction.perform(function () {
	      var componentInstance = instantiateReactComponent(element, null);
	      var markup = componentInstance.mountComponent(id, transaction, emptyObject);
	      return ReactMarkupChecksum.addChecksumToMarkup(markup);
	    }, null);
	  } finally {
	    ReactServerRenderingTransaction.release(transaction);
	    // Revert to the DOM batching strategy since these two renderers
	    // currently share these stateful modules.
	    ReactUpdates.injection.injectBatchingStrategy(ReactDefaultBatchingStrategy);
	  }
	}

	/**
	 * @param {ReactElement} element
	 * @return {string} the HTML markup, without the extra React ID and checksum
	 * (for generating static pages)
	 */
	function renderToStaticMarkup(element) {
	  !ReactElement.isValidElement(element) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'renderToStaticMarkup(): You must pass a valid ReactElement.') : invariant(false) : undefined;

	  var transaction;
	  try {
	    ReactUpdates.injection.injectBatchingStrategy(ReactServerBatchingStrategy);

	    var id = ReactInstanceHandles.createReactRootID();
	    transaction = ReactServerRenderingTransaction.getPooled(true);

	    return transaction.perform(function () {
	      var componentInstance = instantiateReactComponent(element, null);
	      return componentInstance.mountComponent(id, transaction, emptyObject);
	    }, null);
	  } finally {
	    ReactServerRenderingTransaction.release(transaction);
	    // Revert to the DOM batching strategy since these two renderers
	    // currently share these stateful modules.
	    ReactUpdates.injection.injectBatchingStrategy(ReactDefaultBatchingStrategy);
	  }
	}

	module.exports = {
	  renderToString: renderToString,
	  renderToStaticMarkup: renderToStaticMarkup
	};
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(8)))

/***/ },
/* 153 */
/***/ function(module, exports) {

	/**
	 * Copyright 2014-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactServerBatchingStrategy
	 * @typechecks
	 */

	'use strict';

	var ReactServerBatchingStrategy = {
	  isBatchingUpdates: false,
	  batchedUpdates: function (callback) {
	    // Don't do anything here. During the server rendering we don't want to
	    // schedule any updates. We will simply ignore them.
	  }
	};

	module.exports = ReactServerBatchingStrategy;

/***/ },
/* 154 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2014-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactServerRenderingTransaction
	 * @typechecks
	 */

	'use strict';

	var PooledClass = __webpack_require__(59);
	var CallbackQueue = __webpack_require__(58);
	var Transaction = __webpack_require__(60);

	var assign = __webpack_require__(43);
	var emptyFunction = __webpack_require__(19);

	/**
	 * Provides a `CallbackQueue` queue for collecting `onDOMReady` callbacks
	 * during the performing of the transaction.
	 */
	var ON_DOM_READY_QUEUEING = {
	  /**
	   * Initializes the internal `onDOMReady` queue.
	   */
	  initialize: function () {
	    this.reactMountReady.reset();
	  },

	  close: emptyFunction
	};

	/**
	 * Executed within the scope of the `Transaction` instance. Consider these as
	 * being member methods, but with an implied ordering while being isolated from
	 * each other.
	 */
	var TRANSACTION_WRAPPERS = [ON_DOM_READY_QUEUEING];

	/**
	 * @class ReactServerRenderingTransaction
	 * @param {boolean} renderToStaticMarkup
	 */
	function ReactServerRenderingTransaction(renderToStaticMarkup) {
	  this.reinitializeTransaction();
	  this.renderToStaticMarkup = renderToStaticMarkup;
	  this.reactMountReady = CallbackQueue.getPooled(null);
	  this.useCreateElement = false;
	}

	var Mixin = {
	  /**
	   * @see Transaction
	   * @abstract
	   * @final
	   * @return {array} Empty list of operation wrap procedures.
	   */
	  getTransactionWrappers: function () {
	    return TRANSACTION_WRAPPERS;
	  },

	  /**
	   * @return {object} The queue to collect `onDOMReady` callbacks with.
	   */
	  getReactMountReady: function () {
	    return this.reactMountReady;
	  },

	  /**
	   * `PooledClass` looks for this, and will invoke this before allowing this
	   * instance to be reused.
	   */
	  destructor: function () {
	    CallbackQueue.release(this.reactMountReady);
	    this.reactMountReady = null;
	  }
	};

	assign(ReactServerRenderingTransaction.prototype, Transaction.Mixin, Mixin);

	PooledClass.addPoolingTo(ReactServerRenderingTransaction);

	module.exports = ReactServerRenderingTransaction;

/***/ },
/* 155 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactIsomorphic
	 */

	'use strict';

	var ReactChildren = __webpack_require__(113);
	var ReactComponent = __webpack_require__(126);
	var ReactClass = __webpack_require__(125);
	var ReactDOMFactories = __webpack_require__(156);
	var ReactElement = __webpack_require__(46);
	var ReactElementValidator = __webpack_require__(157);
	var ReactPropTypes = __webpack_require__(110);
	var ReactVersion = __webpack_require__(149);

	var assign = __webpack_require__(43);
	var onlyChild = __webpack_require__(159);

	var createElement = ReactElement.createElement;
	var createFactory = ReactElement.createFactory;
	var cloneElement = ReactElement.cloneElement;

	if (process.env.NODE_ENV !== 'production') {
	  createElement = ReactElementValidator.createElement;
	  createFactory = ReactElementValidator.createFactory;
	  cloneElement = ReactElementValidator.cloneElement;
	}

	var React = {

	  // Modern

	  Children: {
	    map: ReactChildren.map,
	    forEach: ReactChildren.forEach,
	    count: ReactChildren.count,
	    toArray: ReactChildren.toArray,
	    only: onlyChild
	  },

	  Component: ReactComponent,

	  createElement: createElement,
	  cloneElement: cloneElement,
	  isValidElement: ReactElement.isValidElement,

	  // Classic

	  PropTypes: ReactPropTypes,
	  createClass: ReactClass.createClass,
	  createFactory: createFactory,
	  createMixin: function (mixin) {
	    // Currently a noop. Will be used to validate and trace mixins.
	    return mixin;
	  },

	  // This looks DOM specific but these are actually isomorphic helpers
	  // since they are just generating DOM strings.
	  DOM: ReactDOMFactories,

	  version: ReactVersion,

	  // Hook for JSX spread, don't use this for anything else.
	  __spread: assign
	};

	module.exports = React;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(8)))

/***/ },
/* 156 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDOMFactories
	 * @typechecks static-only
	 */

	'use strict';

	var ReactElement = __webpack_require__(46);
	var ReactElementValidator = __webpack_require__(157);

	var mapObject = __webpack_require__(158);

	/**
	 * Create a factory that creates HTML tag elements.
	 *
	 * @param {string} tag Tag name (e.g. `div`).
	 * @private
	 */
	function createDOMFactory(tag) {
	  if (process.env.NODE_ENV !== 'production') {
	    return ReactElementValidator.createFactory(tag);
	  }
	  return ReactElement.createFactory(tag);
	}

	/**
	 * Creates a mapping from supported HTML tags to `ReactDOMComponent` classes.
	 * This is also accessible via `React.DOM`.
	 *
	 * @public
	 */
	var ReactDOMFactories = mapObject({
	  a: 'a',
	  abbr: 'abbr',
	  address: 'address',
	  area: 'area',
	  article: 'article',
	  aside: 'aside',
	  audio: 'audio',
	  b: 'b',
	  base: 'base',
	  bdi: 'bdi',
	  bdo: 'bdo',
	  big: 'big',
	  blockquote: 'blockquote',
	  body: 'body',
	  br: 'br',
	  button: 'button',
	  canvas: 'canvas',
	  caption: 'caption',
	  cite: 'cite',
	  code: 'code',
	  col: 'col',
	  colgroup: 'colgroup',
	  data: 'data',
	  datalist: 'datalist',
	  dd: 'dd',
	  del: 'del',
	  details: 'details',
	  dfn: 'dfn',
	  dialog: 'dialog',
	  div: 'div',
	  dl: 'dl',
	  dt: 'dt',
	  em: 'em',
	  embed: 'embed',
	  fieldset: 'fieldset',
	  figcaption: 'figcaption',
	  figure: 'figure',
	  footer: 'footer',
	  form: 'form',
	  h1: 'h1',
	  h2: 'h2',
	  h3: 'h3',
	  h4: 'h4',
	  h5: 'h5',
	  h6: 'h6',
	  head: 'head',
	  header: 'header',
	  hgroup: 'hgroup',
	  hr: 'hr',
	  html: 'html',
	  i: 'i',
	  iframe: 'iframe',
	  img: 'img',
	  input: 'input',
	  ins: 'ins',
	  kbd: 'kbd',
	  keygen: 'keygen',
	  label: 'label',
	  legend: 'legend',
	  li: 'li',
	  link: 'link',
	  main: 'main',
	  map: 'map',
	  mark: 'mark',
	  menu: 'menu',
	  menuitem: 'menuitem',
	  meta: 'meta',
	  meter: 'meter',
	  nav: 'nav',
	  noscript: 'noscript',
	  object: 'object',
	  ol: 'ol',
	  optgroup: 'optgroup',
	  option: 'option',
	  output: 'output',
	  p: 'p',
	  param: 'param',
	  picture: 'picture',
	  pre: 'pre',
	  progress: 'progress',
	  q: 'q',
	  rp: 'rp',
	  rt: 'rt',
	  ruby: 'ruby',
	  s: 's',
	  samp: 'samp',
	  script: 'script',
	  section: 'section',
	  select: 'select',
	  small: 'small',
	  source: 'source',
	  span: 'span',
	  strong: 'strong',
	  style: 'style',
	  sub: 'sub',
	  summary: 'summary',
	  sup: 'sup',
	  table: 'table',
	  tbody: 'tbody',
	  td: 'td',
	  textarea: 'textarea',
	  tfoot: 'tfoot',
	  th: 'th',
	  thead: 'thead',
	  time: 'time',
	  title: 'title',
	  tr: 'tr',
	  track: 'track',
	  u: 'u',
	  ul: 'ul',
	  'var': 'var',
	  video: 'video',
	  wbr: 'wbr',

	  // SVG
	  circle: 'circle',
	  clipPath: 'clipPath',
	  defs: 'defs',
	  ellipse: 'ellipse',
	  g: 'g',
	  image: 'image',
	  line: 'line',
	  linearGradient: 'linearGradient',
	  mask: 'mask',
	  path: 'path',
	  pattern: 'pattern',
	  polygon: 'polygon',
	  polyline: 'polyline',
	  radialGradient: 'radialGradient',
	  rect: 'rect',
	  stop: 'stop',
	  svg: 'svg',
	  text: 'text',
	  tspan: 'tspan'

	}, createDOMFactory);

	module.exports = ReactDOMFactories;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(8)))

/***/ },
/* 157 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2014-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactElementValidator
	 */

	/**
	 * ReactElementValidator provides a wrapper around a element factory
	 * which validates the props passed to the element. This is intended to be
	 * used only in DEV and could be replaced by a static type checker for languages
	 * that support it.
	 */

	'use strict';

	var ReactElement = __webpack_require__(46);
	var ReactPropTypeLocations = __webpack_require__(68);
	var ReactPropTypeLocationNames = __webpack_require__(69);
	var ReactCurrentOwner = __webpack_require__(9);

	var getIteratorFn = __webpack_require__(111);
	var invariant = __webpack_require__(17);
	var warning = __webpack_require__(29);

	function getDeclarationErrorAddendum() {
	  if (ReactCurrentOwner.current) {
	    var name = ReactCurrentOwner.current.getName();
	    if (name) {
	      return ' Check the render method of `' + name + '`.';
	    }
	  }
	  return '';
	}

	/**
	 * Warn if there's no key explicitly set on dynamic arrays of children or
	 * object keys are not valid. This allows us to keep track of children between
	 * updates.
	 */
	var ownerHasKeyUseWarning = {};

	var loggedTypeFailures = {};

	/**
	 * Warn if the element doesn't have an explicit key assigned to it.
	 * This element is in an array. The array could grow and shrink or be
	 * reordered. All children that haven't already been validated are required to
	 * have a "key" property assigned to it.
	 *
	 * @internal
	 * @param {ReactElement} element Element that requires a key.
	 * @param {*} parentType element's parent's type.
	 */
	function validateExplicitKey(element, parentType) {
	  if (!element._store || element._store.validated || element.key != null) {
	    return;
	  }
	  element._store.validated = true;

	  var addenda = getAddendaForKeyUse('uniqueKey', element, parentType);
	  if (addenda === null) {
	    // we already showed the warning
	    return;
	  }
	  process.env.NODE_ENV !== 'production' ? warning(false, 'Each child in an array or iterator should have a unique "key" prop.' + '%s%s%s', addenda.parentOrOwner || '', addenda.childOwner || '', addenda.url || '') : undefined;
	}

	/**
	 * Shared warning and monitoring code for the key warnings.
	 *
	 * @internal
	 * @param {string} messageType A key used for de-duping warnings.
	 * @param {ReactElement} element Component that requires a key.
	 * @param {*} parentType element's parent's type.
	 * @returns {?object} A set of addenda to use in the warning message, or null
	 * if the warning has already been shown before (and shouldn't be shown again).
	 */
	function getAddendaForKeyUse(messageType, element, parentType) {
	  var addendum = getDeclarationErrorAddendum();
	  if (!addendum) {
	    var parentName = typeof parentType === 'string' ? parentType : parentType.displayName || parentType.name;
	    if (parentName) {
	      addendum = ' Check the top-level render call using <' + parentName + '>.';
	    }
	  }

	  var memoizer = ownerHasKeyUseWarning[messageType] || (ownerHasKeyUseWarning[messageType] = {});
	  if (memoizer[addendum]) {
	    return null;
	  }
	  memoizer[addendum] = true;

	  var addenda = {
	    parentOrOwner: addendum,
	    url: ' See https://fb.me/react-warning-keys for more information.',
	    childOwner: null
	  };

	  // Usually the current owner is the offender, but if it accepts children as a
	  // property, it may be the creator of the child that's responsible for
	  // assigning it a key.
	  if (element && element._owner && element._owner !== ReactCurrentOwner.current) {
	    // Give the component that originally created this child.
	    addenda.childOwner = ' It was passed a child from ' + element._owner.getName() + '.';
	  }

	  return addenda;
	}

	/**
	 * Ensure that every element either is passed in a static location, in an
	 * array with an explicit keys property defined, or in an object literal
	 * with valid key property.
	 *
	 * @internal
	 * @param {ReactNode} node Statically passed child of any type.
	 * @param {*} parentType node's parent's type.
	 */
	function validateChildKeys(node, parentType) {
	  if (typeof node !== 'object') {
	    return;
	  }
	  if (Array.isArray(node)) {
	    for (var i = 0; i < node.length; i++) {
	      var child = node[i];
	      if (ReactElement.isValidElement(child)) {
	        validateExplicitKey(child, parentType);
	      }
	    }
	  } else if (ReactElement.isValidElement(node)) {
	    // This element was passed in a valid location.
	    if (node._store) {
	      node._store.validated = true;
	    }
	  } else if (node) {
	    var iteratorFn = getIteratorFn(node);
	    // Entry iterators provide implicit keys.
	    if (iteratorFn) {
	      if (iteratorFn !== node.entries) {
	        var iterator = iteratorFn.call(node);
	        var step;
	        while (!(step = iterator.next()).done) {
	          if (ReactElement.isValidElement(step.value)) {
	            validateExplicitKey(step.value, parentType);
	          }
	        }
	      }
	    }
	  }
	}

	/**
	 * Assert that the props are valid
	 *
	 * @param {string} componentName Name of the component for error messages.
	 * @param {object} propTypes Map of prop name to a ReactPropType
	 * @param {object} props
	 * @param {string} location e.g. "prop", "context", "child context"
	 * @private
	 */
	function checkPropTypes(componentName, propTypes, props, location) {
	  for (var propName in propTypes) {
	    if (propTypes.hasOwnProperty(propName)) {
	      var error;
	      // Prop type validation may throw. In case they do, we don't want to
	      // fail the render phase where it didn't fail before. So we log it.
	      // After these have been cleaned up, we'll let them throw.
	      try {
	        // This is intentionally an invariant that gets caught. It's the same
	        // behavior as without this statement except with a better message.
	        !(typeof propTypes[propName] === 'function') ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s: %s type `%s` is invalid; it must be a function, usually from ' + 'React.PropTypes.', componentName || 'React class', ReactPropTypeLocationNames[location], propName) : invariant(false) : undefined;
	        error = propTypes[propName](props, propName, componentName, location);
	      } catch (ex) {
	        error = ex;
	      }
	      process.env.NODE_ENV !== 'production' ? warning(!error || error instanceof Error, '%s: type specification of %s `%s` is invalid; the type checker ' + 'function must return `null` or an `Error` but returned a %s. ' + 'You may have forgotten to pass an argument to the type checker ' + 'creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and ' + 'shape all require an argument).', componentName || 'React class', ReactPropTypeLocationNames[location], propName, typeof error) : undefined;
	      if (error instanceof Error && !(error.message in loggedTypeFailures)) {
	        // Only monitor this failure once because there tends to be a lot of the
	        // same error.
	        loggedTypeFailures[error.message] = true;

	        var addendum = getDeclarationErrorAddendum();
	        process.env.NODE_ENV !== 'production' ? warning(false, 'Failed propType: %s%s', error.message, addendum) : undefined;
	      }
	    }
	  }
	}

	/**
	 * Given an element, validate that its props follow the propTypes definition,
	 * provided by the type.
	 *
	 * @param {ReactElement} element
	 */
	function validatePropTypes(element) {
	  var componentClass = element.type;
	  if (typeof componentClass !== 'function') {
	    return;
	  }
	  var name = componentClass.displayName || componentClass.name;
	  if (componentClass.propTypes) {
	    checkPropTypes(name, componentClass.propTypes, element.props, ReactPropTypeLocations.prop);
	  }
	  if (typeof componentClass.getDefaultProps === 'function') {
	    process.env.NODE_ENV !== 'production' ? warning(componentClass.getDefaultProps.isReactClassApproved, 'getDefaultProps is only used on classic React.createClass ' + 'definitions. Use a static property named `defaultProps` instead.') : undefined;
	  }
	}

	var ReactElementValidator = {

	  createElement: function (type, props, children) {
	    var validType = typeof type === 'string' || typeof type === 'function';
	    // We warn in this case but don't throw. We expect the element creation to
	    // succeed and there will likely be errors in render.
	    process.env.NODE_ENV !== 'production' ? warning(validType, 'React.createElement: type should not be null, undefined, boolean, or ' + 'number. It should be a string (for DOM elements) or a ReactClass ' + '(for composite components).%s', getDeclarationErrorAddendum()) : undefined;

	    var element = ReactElement.createElement.apply(this, arguments);

	    // The result can be nullish if a mock or a custom function is used.
	    // TODO: Drop this when these are no longer allowed as the type argument.
	    if (element == null) {
	      return element;
	    }

	    // Skip key warning if the type isn't valid since our key validation logic
	    // doesn't expect a non-string/function type and can throw confusing errors.
	    // We don't want exception behavior to differ between dev and prod.
	    // (Rendering will throw with a helpful message and as soon as the type is
	    // fixed, the key warnings will appear.)
	    if (validType) {
	      for (var i = 2; i < arguments.length; i++) {
	        validateChildKeys(arguments[i], type);
	      }
	    }

	    validatePropTypes(element);

	    return element;
	  },

	  createFactory: function (type) {
	    var validatedFactory = ReactElementValidator.createElement.bind(null, type);
	    // Legacy hook TODO: Warn if this is accessed
	    validatedFactory.type = type;

	    if (process.env.NODE_ENV !== 'production') {
	      try {
	        Object.defineProperty(validatedFactory, 'type', {
	          enumerable: false,
	          get: function () {
	            process.env.NODE_ENV !== 'production' ? warning(false, 'Factory.type is deprecated. Access the class directly ' + 'before passing it to createFactory.') : undefined;
	            Object.defineProperty(this, 'type', {
	              value: type
	            });
	            return type;
	          }
	        });
	      } catch (x) {
	        // IE will fail on defineProperty (es5-shim/sham too)
	      }
	    }

	    return validatedFactory;
	  },

	  cloneElement: function (element, props, children) {
	    var newElement = ReactElement.cloneElement.apply(this, arguments);
	    for (var i = 2; i < arguments.length; i++) {
	      validateChildKeys(arguments[i], newElement.type);
	    }
	    validatePropTypes(newElement);
	    return newElement;
	  }

	};

	module.exports = ReactElementValidator;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(8)))

/***/ },
/* 158 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule mapObject
	 */

	'use strict';

	var hasOwnProperty = Object.prototype.hasOwnProperty;

	/**
	 * Executes the provided `callback` once for each enumerable own property in the
	 * object and constructs a new object from the results. The `callback` is
	 * invoked with three arguments:
	 *
	 *  - the property value
	 *  - the property name
	 *  - the object being traversed
	 *
	 * Properties that are added after the call to `mapObject` will not be visited
	 * by `callback`. If the values of existing properties are changed, the value
	 * passed to `callback` will be the value at the time `mapObject` visits them.
	 * Properties that are deleted before being visited are not visited.
	 *
	 * @grep function objectMap()
	 * @grep function objMap()
	 *
	 * @param {?object} object
	 * @param {function} callback
	 * @param {*} context
	 * @return {?object}
	 */
	function mapObject(object, callback, context) {
	  if (!object) {
	    return null;
	  }
	  var result = {};
	  for (var name in object) {
	    if (hasOwnProperty.call(object, name)) {
	      result[name] = callback.call(context, object[name], name, object);
	    }
	  }
	  return result;
	}

	module.exports = mapObject;

/***/ },
/* 159 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule onlyChild
	 */
	'use strict';

	var ReactElement = __webpack_require__(46);

	var invariant = __webpack_require__(17);

	/**
	 * Returns the first child in a collection of children and verifies that there
	 * is only one child in the collection. The current implementation of this
	 * function assumes that a single child gets passed without a wrapper, but the
	 * purpose of this helper function is to abstract away the particular structure
	 * of children.
	 *
	 * @param {?object} children Child collection structure.
	 * @return {ReactComponent} The first and only `ReactComponent` contained in the
	 * structure.
	 */
	function onlyChild(children) {
	  !ReactElement.isValidElement(children) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'onlyChild must be passed a children with exactly one child.') : invariant(false) : undefined;
	  return children;
	}

	module.exports = onlyChild;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(8)))

/***/ },
/* 160 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule deprecated
	 */

	'use strict';

	var assign = __webpack_require__(43);
	var warning = __webpack_require__(29);

	/**
	 * This will log a single deprecation notice per function and forward the call
	 * on to the new API.
	 *
	 * @param {string} fnName The name of the function
	 * @param {string} newModule The module that fn will exist in
	 * @param {string} newPackage The module that fn will exist in
	 * @param {*} ctx The context this forwarded call should run in
	 * @param {function} fn The function to forward on to
	 * @return {function} The function that will warn once and then call fn
	 */
	function deprecated(fnName, newModule, newPackage, ctx, fn) {
	  var warned = false;
	  if (process.env.NODE_ENV !== 'production') {
	    var newFn = function () {
	      process.env.NODE_ENV !== 'production' ? warning(warned,
	      // Require examples in this string must be split to prevent React's
	      // build tools from mistaking them for real requires.
	      // Otherwise the build tools will attempt to build a '%s' module.
	      'React.%s is deprecated. Please use %s.%s from require' + '(\'%s\') ' + 'instead.', fnName, newModule, fnName, newPackage) : undefined;
	      warned = true;
	      return fn.apply(ctx, arguments);
	    };
	    // We need to make sure all properties of the original fn are copied over.
	    // In particular, this is needed to support PropTypes
	    return assign(newFn, fn);
	  }

	  return fn;
	}

	module.exports = deprecated;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(8)))

/***/ },
/* 161 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	module.exports = __webpack_require__(7);


/***/ },
/* 162 */
/***/ function(module, exports, __webpack_require__) {

	var React, VisualizationGraphComponent, VisualizationGraphNodeComponent;

	React = __webpack_require__(5);

	VisualizationGraphNodeComponent = React.createClass({
	  componentDidMount: function() {
	    return this.props.model.on('change', (function(_this) {
	      return function(e) {
	        return _this.forceUpdate();
	      };
	    })(this), this);
	  },
	  render: function() {
	    var style;
	    style = {
	      display: this.props.model.get('visible') ? 'list-item' : 'none'
	    };
	    return React.createElement("li", {
	      "style": style
	    }, this.props.model.get('name') + ' ' + this.props.model.get('description'));
	  }
	});

	VisualizationGraphComponent = React.createClass({
	  render: function() {
	    var item;
	    return React.createElement("ul", null, (function() {
	      var i, len, ref, results;
	      ref = this.props.data;
	      results = [];
	      for (i = 0, len = ref.length; i < len; i++) {
	        item = ref[i];
	        results.push(React.createElement(VisualizationGraphNodeComponent, {
	          "key": item.id,
	          "model": item
	        }));
	      }
	      return results;
	    }).call(this));
	  }
	});

	module.exports = VisualizationGraphComponent;


/***/ },
/* 163 */
/***/ function(module, exports, __webpack_require__) {

	var Handsontable, VisualizationTableView,
	  bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
	  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
	  hasProp = {}.hasOwnProperty;

	Handsontable = __webpack_require__(164);

	VisualizationTableView = (function(superClass) {
	  var nodes_type, table, table_options;

	  extend(VisualizationTableView, superClass);

	  function VisualizationTableView() {
	    this.render = bind(this.render, this);
	    this.onTableCreateRow = bind(this.onTableCreateRow, this);
	    this.onTableRemoveRow = bind(this.onTableRemoveRow, this);
	    this.onTableChange = bind(this.onTableChange, this);
	    this.onNodesTypesSucess = bind(this.onNodesTypesSucess, this);
	    this.onCollectionSync = bind(this.onCollectionSync, this);
	    return VisualizationTableView.__super__.constructor.apply(this, arguments);
	  }

	  table = null;

	  nodes_type = null;

	  table_options = {
	    contextMenu: ['row_below', 'remove_row', 'undo', 'redo'],
	    height: 360,
	    stretchH: 'all',
	    columnSorting: true,
	    colHeaders: ['', 'Name', 'Description', 'Type', 'Visible'],
	    columns: [
	      {
	        data: 'id',
	        type: 'numeric'
	      }, {
	        data: 'name'
	      }, {
	        data: 'description'
	      }, {
	        data: 'node_type',
	        type: 'autocomplete',
	        strict: false
	      }, {
	        data: 'visible',
	        type: 'checkbox'
	      }
	    ]
	  };

	  VisualizationTableView.prototype.initialize = function() {
	    console.log('initialize TableView');
	    return this.collection.once('sync', this.onCollectionSync, this);
	  };

	  VisualizationTableView.prototype.onCollectionSync = function() {
	    table_options.data = this.collection.toJSON();
	    return this.getNodeTypes();
	  };

	  VisualizationTableView.prototype.getNodeTypes = function() {
	    console.log('getNodeTypes');
	    return $.ajax({
	      url: '/api/nodes-types.json',
	      dataType: 'json',
	      success: this.onNodesTypesSucess
	    });
	  };

	  VisualizationTableView.prototype.onNodesTypesSucess = function(response) {
	    nodes_type = response;
	    table_options.columns[3].source = nodes_type;
	    table_options.afterChange = this.onTableChange;
	    table_options.afterRemoveRow = this.onTableRemoveRow;
	    table_options.afterCreateRow = this.onTableCreateRow;
	    return table = new Handsontable(this.$el.get(0), table_options);
	  };

	  VisualizationTableView.prototype.onTableChange = function(changes, source) {
	    var change, i, key, len, model, obj, results, value;
	    if (source !== 'loadData') {
	      results = [];
	      for (i = 0, len = changes.length; i < len; i++) {
	        change = changes[i];
	        if (change[2] !== change[3]) {
	          console.log('change', change);
	          key = change[1];
	          value = change[3];
	          if (key === 'node_type' && !_.contains(nodes_type, value)) {
	            this.addNodeType(value);
	          }
	          obj = {};
	          obj[key] = value;
	          model = this.collection.at(change[0]);
	          results.push(model.save(obj));
	        } else {
	          results.push(void 0);
	        }
	      }
	      return results;
	    }
	  };

	  VisualizationTableView.prototype.onTableRemoveRow = function(index, amount) {
	    var model, results;
	    console.log(index, amount);
	    results = [];
	    while (amount > 0) {
	      model = this.collection.at(index);
	      model.destroy();
	      results.push(amount--);
	    }
	    return results;
	  };

	  VisualizationTableView.prototype.onTableCreateRow = function(index, amount) {
	    var model;
	    console.log(index, amount);
	    model = this.collection.create({});
	    return console.log(model, model.get('id'));
	  };

	  VisualizationTableView.prototype.addNodeType = function(type) {
	    nodes_type.push(type);
	    return table_options.columns[3].source = nodes_type;
	  };

	  VisualizationTableView.prototype.render = function() {
	    return this;
	  };

	  return VisualizationTableView;

	})(Backbone.View);

	module.exports = VisualizationTableView;


/***/ },
/* 164 */
/***/ function(module, exports, __webpack_require__) {

	var require;var require;/* WEBPACK VAR INJECTION */(function(process, global) {/*!
	 * Handsontable 0.19.0
	 * Handsontable is a JavaScript library for editable tables with basic copy-paste compatibility with Excel and Google Docs
	 *
	 * Copyright (c) 2012-2014 Marcin Warpechowski
	 * Copyright 2015 Handsoncode sp. z o.o. <hello@handsontable.com>
	 * Licensed under the MIT license.
	 * http://handsontable.com/
	 *
	 * Date: Fri Oct 02 2015 12:37:12 GMT+0200 (CEST)
	 */
	/*jslint white: true, browser: true, plusplus: true, indent: 4, maxerr: 50 */

	window.Handsontable = {
	  version: '0.19.0',
	  buildDate: 'Fri Oct 02 2015 12:37:12 GMT+0200 (CEST)',
	};
	(function(f){if(true){module.exports=f()}else if(typeof define==="function"&&define.amd){define([],f)}else{var g;if(typeof window!=="undefined"){g=window}else if(typeof global!=="undefined"){g=global}else if(typeof self!=="undefined"){g=self}else{g=this}g.Handsontable = f()}})(function(){var define,module,exports;return (function init(modules, cache, entry) {
	  (function outer (modules, cache, entry) {
	    // Save the require from previous bundle to this closure if any
	    var previousRequire = typeof require == "function" && require;
	    var globalNS = JSON.parse('{"zeroclipboard":"ZeroClipboard","moment":"moment","pikaday":"Pikaday"}') || {};

	    function newRequire(name, jumped){
	      if(!cache[name]) {

	        if(!modules[name]) {
	          // if we cannot find the the module within our internal map or
	          // cache jump to the current global require ie. the last bundle
	          // that was added to the page.
	          var currentRequire = typeof require == "function" && require;
	          if (!jumped && currentRequire) return require(name, true);

	          // If there are other bundles on this page the require from the
	          // previous one is saved to 'previousRequire'. Repeat this as
	          // many times as there are bundles until the module is found or
	          // we exhaust the require chain.
	          if (previousRequire) return require(name, true);

	          // Try find module from global scope
	          if (globalNS[name] && typeof window[globalNS[name]] !== 'undefined') {
	            return window[globalNS[name]];
	          }

	          var err = new Error('Cannot find module \'' + name + '\'');
	          err.code = 'MODULE_NOT_FOUND';
	          throw err;
	        }
	        var m = cache[name] = {exports:{}};
	        modules[name][0].call(m.exports, function(x){
	          var id = modules[name][1][x];
	          return newRequire(id ? id : x);
	        },m,m.exports,outer,modules,cache,entry);
	      }

	      return cache[name].exports;
	    }
	    for(var i=0;i<entry.length;i++) newRequire(entry[i]);

	    // Override the current require with this new one
	    return newRequire;
	  })(modules, cache, entry);

	  return function() {
	    return Handsontable;
	  };
	})
	({1:[function(require,module,exports){
	"use strict";
	if (window.jQuery) {
	  (function(window, $, Handsontable) {
	    $.fn.handsontable = function(action) {
	      var i,
	          ilen,
	          args,
	          output,
	          userSettings,
	          $this = this.first(),
	          instance = $this.data('handsontable');
	      if (typeof action !== 'string') {
	        userSettings = action || {};
	        if (instance) {
	          instance.updateSettings(userSettings);
	        } else {
	          instance = new Handsontable.Core($this[0], userSettings);
	          $this.data('handsontable', instance);
	          instance.init();
	        }
	        return $this;
	      } else {
	        args = [];
	        if (arguments.length > 1) {
	          for (i = 1, ilen = arguments.length; i < ilen; i++) {
	            args.push(arguments[i]);
	          }
	        }
	        if (instance) {
	          if (typeof instance[action] !== 'undefined') {
	            output = instance[action].apply(instance, args);
	            if (action === 'destroy') {
	              $this.removeData();
	            }
	          } else {
	            throw new Error('Handsontable do not provide action: ' + action);
	          }
	        }
	        return output;
	      }
	    };
	  })(window, jQuery, Handsontable);
	}

	//# 
	},{}],2:[function(require,module,exports){
	"use strict";
	Object.defineProperties(exports, {
	  WalkontableBorder: {get: function() {
	      return WalkontableBorder;
	    }},
	  __esModule: {value: true}
	});
	var $___46__46__47__46__46__47__46__46__47_helpers_47_dom_47_element__,
	    $___46__46__47__46__46__47__46__46__47_helpers_47_dom_47_event__,
	    $___46__46__47__46__46__47__46__46__47_eventManager__,
	    $__cell_47_coords__,
	    $__overlay_47__95_base_46_js__;
	var $__0 = ($___46__46__47__46__46__47__46__46__47_helpers_47_dom_47_element__ = require("helpers/dom/element"), $___46__46__47__46__46__47__46__46__47_helpers_47_dom_47_element__ && $___46__46__47__46__46__47__46__46__47_helpers_47_dom_47_element__.__esModule && $___46__46__47__46__46__47__46__46__47_helpers_47_dom_47_element__ || {default: $___46__46__47__46__46__47__46__46__47_helpers_47_dom_47_element__}),
	    getComputedStyle = $__0.getComputedStyle,
	    getTrimmingContainer = $__0.getTrimmingContainer,
	    innerWidth = $__0.innerWidth,
	    innerHeight = $__0.innerHeight,
	    offset = $__0.offset,
	    outerHeight = $__0.outerHeight,
	    outerWidth = $__0.outerWidth;
	var stopImmediatePropagation = ($___46__46__47__46__46__47__46__46__47_helpers_47_dom_47_event__ = require("helpers/dom/event"), $___46__46__47__46__46__47__46__46__47_helpers_47_dom_47_event__ && $___46__46__47__46__46__47__46__46__47_helpers_47_dom_47_event__.__esModule && $___46__46__47__46__46__47__46__46__47_helpers_47_dom_47_event__ || {default: $___46__46__47__46__46__47__46__46__47_helpers_47_dom_47_event__}).stopImmediatePropagation;
	var EventManager = ($___46__46__47__46__46__47__46__46__47_eventManager__ = require("eventManager"), $___46__46__47__46__46__47__46__46__47_eventManager__ && $___46__46__47__46__46__47__46__46__47_eventManager__.__esModule && $___46__46__47__46__46__47__46__46__47_eventManager__ || {default: $___46__46__47__46__46__47__46__46__47_eventManager__}).EventManager;
	var WalkontableCellCoords = ($__cell_47_coords__ = require("cell/coords"), $__cell_47_coords__ && $__cell_47_coords__.__esModule && $__cell_47_coords__ || {default: $__cell_47_coords__}).WalkontableCellCoords;
	var WalkontableOverlay = ($__overlay_47__95_base_46_js__ = require("overlay/_base.js"), $__overlay_47__95_base_46_js__ && $__overlay_47__95_base_46_js__.__esModule && $__overlay_47__95_base_46_js__ || {default: $__overlay_47__95_base_46_js__}).WalkontableOverlay;
	var WalkontableBorder = function WalkontableBorder(wotInstance, settings) {
	  if (!settings) {
	    return;
	  }
	  this.eventManager = new EventManager(wotInstance);
	  this.instance = wotInstance;
	  this.wot = wotInstance;
	  this.settings = settings;
	  this.mouseDown = false;
	  this.main = null;
	  this.top = null;
	  this.left = null;
	  this.bottom = null;
	  this.right = null;
	  this.topStyle = null;
	  this.leftStyle = null;
	  this.bottomStyle = null;
	  this.rightStyle = null;
	  this.cornerDefaultStyle = {
	    width: '5px',
	    height: '5px',
	    borderWidth: '2px',
	    borderStyle: 'solid',
	    borderColor: '#FFF'
	  };
	  this.corner = null;
	  this.cornerStyle = null;
	  this.createBorders(settings);
	  this.registerListeners();
	};
	($traceurRuntime.createClass)(WalkontableBorder, {
	  registerListeners: function() {
	    var $__5 = this;
	    this.eventManager.addEventListener(document.body, 'mousedown', (function() {
	      return $__5.onMouseDown();
	    }));
	    this.eventManager.addEventListener(document.body, 'mouseup', (function() {
	      return $__5.onMouseUp();
	    }));
	    for (var c = 0,
	        len = this.main.childNodes.length; c < len; c++) {
	      this.eventManager.addEventListener(this.main.childNodes[c], 'mouseenter', (function(event) {
	        return $__5.onMouseEnter(event);
	      }));
	    }
	  },
	  onMouseDown: function() {
	    this.mouseDown = true;
	  },
	  onMouseUp: function() {
	    this.mouseDown = false;
	  },
	  onMouseEnter: function(event) {
	    if (!this.mouseDown || !this.wot.getSetting('hideBorderOnMouseDownOver')) {
	      return;
	    }
	    event.preventDefault();
	    stopImmediatePropagation(event);
	    var _this = this;
	    var bounds = this.getBoundingClientRect();
	    this.style.display = 'none';
	    function isOutside(event) {
	      if (event.clientY < Math.floor(bounds.top)) {
	        return true;
	      }
	      if (event.clientY > Math.ceil(bounds.top + bounds.height)) {
	        return true;
	      }
	      if (event.clientX < Math.floor(bounds.left)) {
	        return true;
	      }
	      if (event.clientX > Math.ceil(bounds.left + bounds.width)) {
	        return true;
	      }
	    }
	    function handler(event) {
	      if (isOutside(event)) {
	        _this.eventManager.removeEventListener(document.body, 'mousemove', handler);
	        _this.style.display = 'block';
	      }
	    }
	    this.eventManager.addEventListener(document.body, 'mousemove', handler);
	  },
	  createBorders: function(settings) {
	    this.main = document.createElement('div');
	    var borderDivs = ['top', 'left', 'bottom', 'right', 'corner'];
	    var style = this.main.style;
	    style.position = 'absolute';
	    style.top = 0;
	    style.left = 0;
	    for (var i = 0; i < 5; i++) {
	      var position = borderDivs[i];
	      var div = document.createElement('div');
	      div.className = 'wtBorder ' + (this.settings.className || '');
	      if (this.settings[position] && this.settings[position].hide) {
	        div.className += ' hidden';
	      }
	      style = div.style;
	      style.backgroundColor = (this.settings[position] && this.settings[position].color) ? this.settings[position].color : settings.border.color;
	      style.height = (this.settings[position] && this.settings[position].width) ? this.settings[position].width + 'px' : settings.border.width + 'px';
	      style.width = (this.settings[position] && this.settings[position].width) ? this.settings[position].width + 'px' : settings.border.width + 'px';
	      this.main.appendChild(div);
	    }
	    this.top = this.main.childNodes[0];
	    this.left = this.main.childNodes[1];
	    this.bottom = this.main.childNodes[2];
	    this.right = this.main.childNodes[3];
	    this.topStyle = this.top.style;
	    this.leftStyle = this.left.style;
	    this.bottomStyle = this.bottom.style;
	    this.rightStyle = this.right.style;
	    this.corner = this.main.childNodes[4];
	    this.corner.className += ' corner';
	    this.cornerStyle = this.corner.style;
	    this.cornerStyle.width = this.cornerDefaultStyle.width;
	    this.cornerStyle.height = this.cornerDefaultStyle.height;
	    this.cornerStyle.border = [this.cornerDefaultStyle.borderWidth, this.cornerDefaultStyle.borderStyle, this.cornerDefaultStyle.borderColor].join(' ');
	    if (Handsontable.mobileBrowser) {
	      this.createMultipleSelectorHandles();
	    }
	    this.disappear();
	    if (!this.wot.wtTable.bordersHolder) {
	      this.wot.wtTable.bordersHolder = document.createElement('div');
	      this.wot.wtTable.bordersHolder.className = 'htBorders';
	      this.wot.wtTable.spreader.appendChild(this.wot.wtTable.bordersHolder);
	    }
	    this.wot.wtTable.bordersHolder.insertBefore(this.main, this.wot.wtTable.bordersHolder.firstChild);
	  },
	  createMultipleSelectorHandles: function() {
	    this.selectionHandles = {
	      topLeft: document.createElement('DIV'),
	      topLeftHitArea: document.createElement('DIV'),
	      bottomRight: document.createElement('DIV'),
	      bottomRightHitArea: document.createElement('DIV')
	    };
	    var width = 10;
	    var hitAreaWidth = 40;
	    this.selectionHandles.topLeft.className = 'topLeftSelectionHandle';
	    this.selectionHandles.topLeftHitArea.className = 'topLeftSelectionHandle-HitArea';
	    this.selectionHandles.bottomRight.className = 'bottomRightSelectionHandle';
	    this.selectionHandles.bottomRightHitArea.className = 'bottomRightSelectionHandle-HitArea';
	    this.selectionHandles.styles = {
	      topLeft: this.selectionHandles.topLeft.style,
	      topLeftHitArea: this.selectionHandles.topLeftHitArea.style,
	      bottomRight: this.selectionHandles.bottomRight.style,
	      bottomRightHitArea: this.selectionHandles.bottomRightHitArea.style
	    };
	    var hitAreaStyle = {
	      position: 'absolute',
	      height: hitAreaWidth + 'px',
	      width: hitAreaWidth + 'px',
	      'border-radius': parseInt(hitAreaWidth / 1.5, 10) + 'px'
	    };
	    for (var prop in hitAreaStyle) {
	      if (hitAreaStyle.hasOwnProperty(prop)) {
	        this.selectionHandles.styles.bottomRightHitArea[prop] = hitAreaStyle[prop];
	        this.selectionHandles.styles.topLeftHitArea[prop] = hitAreaStyle[prop];
	      }
	    }
	    var handleStyle = {
	      position: 'absolute',
	      height: width + 'px',
	      width: width + 'px',
	      'border-radius': parseInt(width / 1.5, 10) + 'px',
	      background: '#F5F5FF',
	      border: '1px solid #4285c8'
	    };
	    for (var prop$__7 in handleStyle) {
	      if (handleStyle.hasOwnProperty(prop$__7)) {
	        this.selectionHandles.styles.bottomRight[prop$__7] = handleStyle[prop$__7];
	        this.selectionHandles.styles.topLeft[prop$__7] = handleStyle[prop$__7];
	      }
	    }
	    this.main.appendChild(this.selectionHandles.topLeft);
	    this.main.appendChild(this.selectionHandles.bottomRight);
	    this.main.appendChild(this.selectionHandles.topLeftHitArea);
	    this.main.appendChild(this.selectionHandles.bottomRightHitArea);
	  },
	  isPartRange: function(row, col) {
	    if (this.wot.selections.area.cellRange) {
	      if (row != this.wot.selections.area.cellRange.to.row || col != this.wot.selections.area.cellRange.to.col) {
	        return true;
	      }
	    }
	    return false;
	  },
	  updateMultipleSelectionHandlesPosition: function(row, col, top, left, width, height) {
	    var handleWidth = parseInt(this.selectionHandles.styles.topLeft.width, 10);
	    var hitAreaWidth = parseInt(this.selectionHandles.styles.topLeftHitArea.width, 10);
	    this.selectionHandles.styles.topLeft.top = parseInt(top - handleWidth, 10) + 'px';
	    this.selectionHandles.styles.topLeft.left = parseInt(left - handleWidth, 10) + 'px';
	    this.selectionHandles.styles.topLeftHitArea.top = parseInt(top - (hitAreaWidth / 4) * 3, 10) + 'px';
	    this.selectionHandles.styles.topLeftHitArea.left = parseInt(left - (hitAreaWidth / 4) * 3, 10) + 'px';
	    this.selectionHandles.styles.bottomRight.top = parseInt(top + height, 10) + 'px';
	    this.selectionHandles.styles.bottomRight.left = parseInt(left + width, 10) + 'px';
	    this.selectionHandles.styles.bottomRightHitArea.top = parseInt(top + height - hitAreaWidth / 4, 10) + 'px';
	    this.selectionHandles.styles.bottomRightHitArea.left = parseInt(left + width - hitAreaWidth / 4, 10) + 'px';
	    if (this.settings.border.multipleSelectionHandlesVisible && this.settings.border.multipleSelectionHandlesVisible()) {
	      this.selectionHandles.styles.topLeft.display = 'block';
	      this.selectionHandles.styles.topLeftHitArea.display = 'block';
	      if (this.isPartRange(row, col)) {
	        this.selectionHandles.styles.bottomRight.display = 'none';
	        this.selectionHandles.styles.bottomRightHitArea.display = 'none';
	      } else {
	        this.selectionHandles.styles.bottomRight.display = 'block';
	        this.selectionHandles.styles.bottomRightHitArea.display = 'block';
	      }
	    } else {
	      this.selectionHandles.styles.topLeft.display = 'none';
	      this.selectionHandles.styles.bottomRight.display = 'none';
	      this.selectionHandles.styles.topLeftHitArea.display = 'none';
	      this.selectionHandles.styles.bottomRightHitArea.display = 'none';
	    }
	    if (row == this.wot.wtSettings.getSetting('fixedRowsTop') || col == this.wot.wtSettings.getSetting('fixedColumnsLeft')) {
	      this.selectionHandles.styles.topLeft.zIndex = '9999';
	      this.selectionHandles.styles.topLeftHitArea.zIndex = '9999';
	    } else {
	      this.selectionHandles.styles.topLeft.zIndex = '';
	      this.selectionHandles.styles.topLeftHitArea.zIndex = '';
	    }
	  },
	  appear: function(corners) {
	    if (this.disabled) {
	      return;
	    }
	    var isMultiple,
	        fromTD,
	        toTD,
	        fromOffset,
	        toOffset,
	        containerOffset,
	        top,
	        minTop,
	        left,
	        minLeft,
	        height,
	        width,
	        fromRow,
	        fromColumn,
	        toRow,
	        toColumn,
	        trimmingContainer,
	        cornerOverlappingContainer,
	        ilen;
	    if (WalkontableOverlay.isOverlayTypeOf(this.wot.cloneOverlay, WalkontableOverlay.CLONE_TOP) || WalkontableOverlay.isOverlayTypeOf(this.wot.cloneOverlay, WalkontableOverlay.CLONE_TOP_LEFT_CORNER)) {
	      ilen = this.wot.getSetting('fixedRowsTop');
	    } else if (WalkontableOverlay.isOverlayTypeOf(this.wot.cloneOverlay, WalkontableOverlay.CLONE_BOTTOM) || WalkontableOverlay.isOverlayTypeOf(this.wot.cloneOverlay, WalkontableOverlay.CLONE_BOTTOM_LEFT_CORNER)) {
	      ilen = this.wot.getSetting('fixedRowsBottom');
	    } else {
	      ilen = this.wot.wtTable.getRenderedRowsCount();
	    }
	    for (var i = 0; i < ilen; i++) {
	      var s = this.wot.wtTable.rowFilter.renderedToSource(i);
	      if (s >= corners[0] && s <= corners[2]) {
	        fromRow = s;
	        break;
	      }
	    }
	    for (var i$__8 = ilen - 1; i$__8 >= 0; i$__8--) {
	      var s$__9 = this.wot.wtTable.rowFilter.renderedToSource(i$__8);
	      if (s$__9 >= corners[0] && s$__9 <= corners[2]) {
	        toRow = s$__9;
	        break;
	      }
	    }
	    ilen = this.wot.wtTable.getRenderedColumnsCount();
	    for (var i$__10 = 0; i$__10 < ilen; i$__10++) {
	      var s$__11 = this.wot.wtTable.columnFilter.renderedToSource(i$__10);
	      if (s$__11 >= corners[1] && s$__11 <= corners[3]) {
	        fromColumn = s$__11;
	        break;
	      }
	    }
	    for (var i$__12 = ilen - 1; i$__12 >= 0; i$__12--) {
	      var s$__13 = this.wot.wtTable.columnFilter.renderedToSource(i$__12);
	      if (s$__13 >= corners[1] && s$__13 <= corners[3]) {
	        toColumn = s$__13;
	        break;
	      }
	    }
	    if (fromRow === void 0 || fromColumn === void 0) {
	      this.disappear();
	      return;
	    }
	    isMultiple = (fromRow !== toRow || fromColumn !== toColumn);
	    fromTD = this.wot.wtTable.getCell(new WalkontableCellCoords(fromRow, fromColumn));
	    toTD = isMultiple ? this.wot.wtTable.getCell(new WalkontableCellCoords(toRow, toColumn)) : fromTD;
	    fromOffset = offset(fromTD);
	    toOffset = isMultiple ? offset(toTD) : fromOffset;
	    containerOffset = offset(this.wot.wtTable.TABLE);
	    minTop = fromOffset.top;
	    height = toOffset.top + outerHeight(toTD) - minTop;
	    minLeft = fromOffset.left;
	    width = toOffset.left + outerWidth(toTD) - minLeft;
	    top = minTop - containerOffset.top - 1;
	    left = minLeft - containerOffset.left - 1;
	    var style = getComputedStyle(fromTD);
	    if (parseInt(style.borderTopWidth, 10) > 0) {
	      top += 1;
	      height = height > 0 ? height - 1 : 0;
	    }
	    if (parseInt(style.borderLeftWidth, 10) > 0) {
	      left += 1;
	      width = width > 0 ? width - 1 : 0;
	    }
	    this.topStyle.top = top + 'px';
	    this.topStyle.left = left + 'px';
	    this.topStyle.width = width + 'px';
	    this.topStyle.display = 'block';
	    this.leftStyle.top = top + 'px';
	    this.leftStyle.left = left + 'px';
	    this.leftStyle.height = height + 'px';
	    this.leftStyle.display = 'block';
	    var delta = Math.floor(this.settings.border.width / 2);
	    this.bottomStyle.top = top + height - delta + 'px';
	    this.bottomStyle.left = left + 'px';
	    this.bottomStyle.width = width + 'px';
	    this.bottomStyle.display = 'block';
	    this.rightStyle.top = top + 'px';
	    this.rightStyle.left = left + width - delta + 'px';
	    this.rightStyle.height = height + 1 + 'px';
	    this.rightStyle.display = 'block';
	    if (Handsontable.mobileBrowser || (!this.hasSetting(this.settings.border.cornerVisible) || this.isPartRange(toRow, toColumn))) {
	      this.cornerStyle.display = 'none';
	    } else {
	      this.cornerStyle.top = top + height - 4 + 'px';
	      this.cornerStyle.left = left + width - 4 + 'px';
	      this.cornerStyle.borderRightWidth = this.cornerDefaultStyle.borderWidth;
	      this.cornerStyle.width = this.cornerDefaultStyle.width;
	      this.cornerStyle.display = 'block';
	      trimmingContainer = getTrimmingContainer(this.wot.wtTable.TABLE);
	      if (toColumn === this.wot.getSetting('totalColumns') - 1) {
	        cornerOverlappingContainer = toTD.offsetLeft + outerWidth(toTD) >= innerWidth(trimmingContainer);
	        if (cornerOverlappingContainer) {
	          this.cornerStyle.left = Math.floor(left + width - 3 - parseInt(this.cornerDefaultStyle.width) / 2) + 'px';
	          this.cornerStyle.borderRightWidth = 0;
	        }
	      }
	      if (toRow === this.wot.getSetting('totalRows') - 1) {
	        cornerOverlappingContainer = toTD.offsetTop + outerHeight(toTD) >= innerHeight(trimmingContainer);
	        if (cornerOverlappingContainer) {
	          this.cornerStyle.top = Math.floor(top + height - 3 - parseInt(this.cornerDefaultStyle.height) / 2) + 'px';
	          this.cornerStyle.borderBottomWidth = 0;
	        }
	      }
	    }
	    if (Handsontable.mobileBrowser) {
	      this.updateMultipleSelectionHandlesPosition(fromRow, fromColumn, top, left, width, height);
	    }
	  },
	  disappear: function() {
	    this.topStyle.display = 'none';
	    this.leftStyle.display = 'none';
	    this.bottomStyle.display = 'none';
	    this.rightStyle.display = 'none';
	    this.cornerStyle.display = 'none';
	    if (Handsontable.mobileBrowser) {
	      this.selectionHandles.styles.topLeft.display = 'none';
	      this.selectionHandles.styles.bottomRight.display = 'none';
	    }
	  },
	  hasSetting: function(setting) {
	    if (typeof setting === 'function') {
	      return setting();
	    }
	    return !!setting;
	  }
	}, {});
	;
	window.WalkontableBorder = WalkontableBorder;

	//# 
	},{"cell/coords":5,"eventManager":40,"helpers/dom/element":44,"helpers/dom/event":45,"overlay/_base.js":11}],3:[function(require,module,exports){
	"use strict";
	Object.defineProperties(exports, {
	  WalkontableViewportColumnsCalculator: {get: function() {
	      return WalkontableViewportColumnsCalculator;
	    }},
	  __esModule: {value: true}
	});
	var privatePool = new WeakMap();
	var WalkontableViewportColumnsCalculator = function WalkontableViewportColumnsCalculator(viewportWidth, scrollOffset, totalColumns, columnWidthFn, overrideFn, onlyFullyVisible, stretchH) {
	  privatePool.set(this, {
	    viewportWidth: viewportWidth,
	    scrollOffset: scrollOffset,
	    totalColumns: totalColumns,
	    columnWidthFn: columnWidthFn,
	    overrideFn: overrideFn,
	    onlyFullyVisible: onlyFullyVisible
	  });
	  this.count = 0;
	  this.startColumn = null;
	  this.endColumn = null;
	  this.startPosition = null;
	  this.stretchAllRatio = 0;
	  this.stretchLastWidth = 0;
	  this.stretch = stretchH;
	  this.totalTargetWidth = 0;
	  this.needVerifyLastColumnWidth = true;
	  this.stretchAllColumnsWidth = [];
	  this.calculate();
	};
	var $WalkontableViewportColumnsCalculator = WalkontableViewportColumnsCalculator;
	($traceurRuntime.createClass)(WalkontableViewportColumnsCalculator, {
	  calculate: function() {
	    var sum = 0;
	    var needReverse = true;
	    var startPositions = [];
	    var columnWidth;
	    var priv = privatePool.get(this);
	    var onlyFullyVisible = priv.onlyFullyVisible;
	    var overrideFn = priv.overrideFn;
	    var scrollOffset = priv.scrollOffset;
	    var totalColumns = priv.totalColumns;
	    var viewportWidth = priv.viewportWidth;
	    for (var i = 0; i < totalColumns; i++) {
	      columnWidth = this._getColumnWidth(i);
	      if (sum <= scrollOffset && !onlyFullyVisible) {
	        this.startColumn = i;
	      }
	      if (sum >= scrollOffset && sum + columnWidth <= scrollOffset + viewportWidth) {
	        if (this.startColumn == null) {
	          this.startColumn = i;
	        }
	        this.endColumn = i;
	      }
	      startPositions.push(sum);
	      sum += columnWidth;
	      if (!onlyFullyVisible) {
	        this.endColumn = i;
	      }
	      if (sum >= scrollOffset + viewportWidth) {
	        needReverse = false;
	        break;
	      }
	    }
	    if (this.endColumn === totalColumns - 1 && needReverse) {
	      this.startColumn = this.endColumn;
	      while (this.startColumn > 0) {
	        var viewportSum = startPositions[this.endColumn] + columnWidth - startPositions[this.startColumn - 1];
	        if (viewportSum <= viewportWidth || !onlyFullyVisible) {
	          this.startColumn--;
	        }
	        if (viewportSum > viewportWidth) {
	          break;
	        }
	      }
	    }
	    if (this.startColumn !== null && overrideFn) {
	      overrideFn(this);
	    }
	    this.startPosition = startPositions[this.startColumn];
	    if (this.startPosition == void 0) {
	      this.startPosition = null;
	    }
	    if (this.startColumn !== null) {
	      this.count = this.endColumn - this.startColumn + 1;
	    }
	  },
	  refreshStretching: function(totalWidth) {
	    if (this.stretch === 'none') {
	      return;
	    }
	    var sumAll = 0;
	    var columnWidth;
	    var remainingSize;
	    var priv = privatePool.get(this);
	    var totalColumns = priv.totalColumns;
	    for (var i = 0; i < totalColumns; i++) {
	      columnWidth = this._getColumnWidth(i);
	      sumAll += columnWidth;
	    }
	    this.totalTargetWidth = totalWidth;
	    remainingSize = sumAll - totalWidth;
	    if (this.stretch === 'all' && remainingSize < 0) {
	      this.stretchAllRatio = totalWidth / sumAll;
	      this.stretchAllColumnsWidth = [];
	      this.needVerifyLastColumnWidth = true;
	    } else if (this.stretch === 'last' && totalWidth !== Infinity) {
	      this.stretchLastWidth = -remainingSize + this._getColumnWidth(totalColumns - 1);
	    }
	  },
	  getStretchedColumnWidth: function(column, baseWidth) {
	    var result = null;
	    if (this.stretch === 'all' && this.stretchAllRatio !== 0) {
	      result = this._getStretchedAllColumnWidth(column, baseWidth);
	    } else if (this.stretch === 'last' && this.stretchLastWidth !== 0) {
	      result = this._getStretchedLastColumnWidth(column);
	    }
	    return result;
	  },
	  _getStretchedAllColumnWidth: function(column, baseWidth) {
	    var sumRatioWidth = 0;
	    var priv = privatePool.get(this);
	    var totalColumns = priv.totalColumns;
	    if (!this.stretchAllColumnsWidth[column]) {
	      this.stretchAllColumnsWidth[column] = Math.round(baseWidth * this.stretchAllRatio);
	    }
	    if (this.stretchAllColumnsWidth.length === totalColumns && this.needVerifyLastColumnWidth) {
	      this.needVerifyLastColumnWidth = false;
	      for (var i = 0; i < this.stretchAllColumnsWidth.length; i++) {
	        sumRatioWidth += this.stretchAllColumnsWidth[i];
	      }
	      if (sumRatioWidth !== this.totalTargetWidth) {
	        this.stretchAllColumnsWidth[this.stretchAllColumnsWidth.length - 1] += this.totalTargetWidth - sumRatioWidth;
	      }
	    }
	    return this.stretchAllColumnsWidth[column];
	  },
	  _getStretchedLastColumnWidth: function(column) {
	    var priv = privatePool.get(this);
	    var totalColumns = priv.totalColumns;
	    if (column === totalColumns - 1) {
	      return this.stretchLastWidth;
	    }
	    return null;
	  },
	  _getColumnWidth: function(column) {
	    var width = privatePool.get(this).columnWidthFn(column);
	    if (width === undefined) {
	      width = $WalkontableViewportColumnsCalculator.DEFAULT_WIDTH;
	    }
	    return width;
	  }
	}, {get DEFAULT_WIDTH() {
	    return 50;
	  }});
	;
	window.WalkontableViewportColumnsCalculator = WalkontableViewportColumnsCalculator;

	//# 
	},{}],4:[function(require,module,exports){
	"use strict";
	Object.defineProperties(exports, {
	  WalkontableViewportRowsCalculator: {get: function() {
	      return WalkontableViewportRowsCalculator;
	    }},
	  __esModule: {value: true}
	});
	var privatePool = new WeakMap();
	var WalkontableViewportRowsCalculator = function WalkontableViewportRowsCalculator(viewportHeight, scrollOffset, totalRows, rowHeightFn, overrideFn, onlyFullyVisible, horizontalScrollbarHeight) {
	  privatePool.set(this, {
	    viewportHeight: viewportHeight,
	    scrollOffset: scrollOffset,
	    totalRows: totalRows,
	    rowHeightFn: rowHeightFn,
	    overrideFn: overrideFn,
	    onlyFullyVisible: onlyFullyVisible,
	    horizontalScrollbarHeight: horizontalScrollbarHeight
	  });
	  this.count = 0;
	  this.startRow = null;
	  this.endRow = null;
	  this.startPosition = null;
	  this.calculate();
	};
	var $WalkontableViewportRowsCalculator = WalkontableViewportRowsCalculator;
	($traceurRuntime.createClass)(WalkontableViewportRowsCalculator, {calculate: function() {
	    var sum = 0;
	    var needReverse = true;
	    var startPositions = [];
	    var priv = privatePool.get(this);
	    var onlyFullyVisible = priv.onlyFullyVisible;
	    var overrideFn = priv.overrideFn;
	    var rowHeightFn = priv.rowHeightFn;
	    var scrollOffset = priv.scrollOffset;
	    var totalRows = priv.totalRows;
	    var viewportHeight = priv.viewportHeight;
	    var horizontalScrollbarHeight = priv.horizontalScrollbarHeight || 0;
	    for (var i = 0; i < totalRows; i++) {
	      var rowHeight = rowHeightFn(i);
	      if (rowHeight === undefined) {
	        rowHeight = $WalkontableViewportRowsCalculator.DEFAULT_HEIGHT;
	      }
	      if (sum <= scrollOffset && !onlyFullyVisible) {
	        this.startRow = i;
	      }
	      if (sum >= scrollOffset && sum + rowHeight <= scrollOffset + viewportHeight - horizontalScrollbarHeight) {
	        if (this.startRow === null) {
	          this.startRow = i;
	        }
	        this.endRow = i;
	      }
	      startPositions.push(sum);
	      sum += rowHeight;
	      if (!onlyFullyVisible) {
	        this.endRow = i;
	      }
	      if (sum >= scrollOffset + viewportHeight - horizontalScrollbarHeight) {
	        needReverse = false;
	        break;
	      }
	    }
	    if (this.endRow === totalRows - 1 && needReverse) {
	      this.startRow = this.endRow;
	      while (this.startRow > 0) {
	        var viewportSum = startPositions[this.endRow] + rowHeight - startPositions[this.startRow - 1];
	        if (viewportSum <= viewportHeight - horizontalScrollbarHeight || !onlyFullyVisible) {
	          this.startRow--;
	        }
	        if (viewportSum >= viewportHeight - horizontalScrollbarHeight) {
	          break;
	        }
	      }
	    }
	    if (this.startRow !== null && overrideFn) {
	      overrideFn(this);
	    }
	    this.startPosition = startPositions[this.startRow];
	    if (this.startPosition == void 0) {
	      this.startPosition = null;
	    }
	    if (this.startRow !== null) {
	      this.count = this.endRow - this.startRow + 1;
	    }
	  }}, {get DEFAULT_HEIGHT() {
	    return 23;
	  }});
	;
	window.WalkontableViewportRowsCalculator = WalkontableViewportRowsCalculator;

	//# 
	},{}],5:[function(require,module,exports){
	"use strict";
	Object.defineProperties(exports, {
	  WalkontableCellCoords: {get: function() {
	      return WalkontableCellCoords;
	    }},
	  __esModule: {value: true}
	});
	var WalkontableCellCoords = function WalkontableCellCoords(row, col) {
	  if (typeof row !== 'undefined' && typeof col !== 'undefined') {
	    this.row = row;
	    this.col = col;
	  } else {
	    this.row = null;
	    this.col = null;
	  }
	};
	($traceurRuntime.createClass)(WalkontableCellCoords, {
	  isValid: function(wotInstance) {
	    if (this.row < 0 || this.col < 0) {
	      return false;
	    }
	    if (this.row >= wotInstance.getSetting('totalRows') || this.col >= wotInstance.getSetting('totalColumns')) {
	      return false;
	    }
	    return true;
	  },
	  isEqual: function(cellCoords) {
	    if (cellCoords === this) {
	      return true;
	    }
	    return this.row === cellCoords.row && this.col === cellCoords.col;
	  },
	  isSouthEastOf: function(testedCoords) {
	    return this.row >= testedCoords.row && this.col >= testedCoords.col;
	  },
	  isNorthWestOf: function(testedCoords) {
	    return this.row <= testedCoords.row && this.col <= testedCoords.col;
	  },
	  isSouthWestOf: function(testedCoords) {
	    return this.row >= testedCoords.row && this.col <= testedCoords.col;
	  },
	  isNorthEastOf: function(testedCoords) {
	    return this.row <= testedCoords.row && this.col >= testedCoords.col;
	  }
	}, {});
	;
	window.WalkontableCellCoords = WalkontableCellCoords;

	//# 
	},{}],6:[function(require,module,exports){
	"use strict";
	Object.defineProperties(exports, {
	  WalkontableCellRange: {get: function() {
	      return WalkontableCellRange;
	    }},
	  __esModule: {value: true}
	});
	var $___46__46__47_cell_47_coords__;
	var WalkontableCellCoords = ($___46__46__47_cell_47_coords__ = require("cell/coords"), $___46__46__47_cell_47_coords__ && $___46__46__47_cell_47_coords__.__esModule && $___46__46__47_cell_47_coords__ || {default: $___46__46__47_cell_47_coords__}).WalkontableCellCoords;
	var WalkontableCellRange = function WalkontableCellRange(highlight, from, to) {
	  this.highlight = highlight;
	  this.from = from;
	  this.to = to;
	};
	var $WalkontableCellRange = WalkontableCellRange;
	($traceurRuntime.createClass)(WalkontableCellRange, {
	  isValid: function(wotInstance) {
	    return this.from.isValid(wotInstance) && this.to.isValid(wotInstance);
	  },
	  isSingle: function() {
	    return this.from.row === this.to.row && this.from.col === this.to.col;
	  },
	  getHeight: function() {
	    return Math.max(this.from.row, this.to.row) - Math.min(this.from.row, this.to.row) + 1;
	  },
	  getWidth: function() {
	    return Math.max(this.from.col, this.to.col) - Math.min(this.from.col, this.to.col) + 1;
	  },
	  includes: function(cellCoords) {
	    var topLeft = this.getTopLeftCorner();
	    var bottomRight = this.getBottomRightCorner();
	    if (cellCoords.row < 0) {
	      cellCoords.row = 0;
	    }
	    if (cellCoords.col < 0) {
	      cellCoords.col = 0;
	    }
	    return topLeft.row <= cellCoords.row && bottomRight.row >= cellCoords.row && topLeft.col <= cellCoords.col && bottomRight.col >= cellCoords.col;
	  },
	  includesRange: function(testedRange) {
	    return this.includes(testedRange.getTopLeftCorner()) && this.includes(testedRange.getBottomRightCorner());
	  },
	  isEqual: function(testedRange) {
	    return (Math.min(this.from.row, this.to.row) == Math.min(testedRange.from.row, testedRange.to.row)) && (Math.max(this.from.row, this.to.row) == Math.max(testedRange.from.row, testedRange.to.row)) && (Math.min(this.from.col, this.to.col) == Math.min(testedRange.from.col, testedRange.to.col)) && (Math.max(this.from.col, this.to.col) == Math.max(testedRange.from.col, testedRange.to.col));
	  },
	  overlaps: function(testedRange) {
	    return testedRange.isSouthEastOf(this.getTopLeftCorner()) && testedRange.isNorthWestOf(this.getBottomRightCorner());
	  },
	  isSouthEastOf: function(testedCoords) {
	    return this.getTopLeftCorner().isSouthEastOf(testedCoords) || this.getBottomRightCorner().isSouthEastOf(testedCoords);
	  },
	  isNorthWestOf: function(testedCoords) {
	    return this.getTopLeftCorner().isNorthWestOf(testedCoords) || this.getBottomRightCorner().isNorthWestOf(testedCoords);
	  },
	  expand: function(cellCoords) {
	    var topLeft = this.getTopLeftCorner();
	    var bottomRight = this.getBottomRightCorner();
	    if (cellCoords.row < topLeft.row || cellCoords.col < topLeft.col || cellCoords.row > bottomRight.row || cellCoords.col > bottomRight.col) {
	      this.from = new WalkontableCellCoords(Math.min(topLeft.row, cellCoords.row), Math.min(topLeft.col, cellCoords.col));
	      this.to = new WalkontableCellCoords(Math.max(bottomRight.row, cellCoords.row), Math.max(bottomRight.col, cellCoords.col));
	      return true;
	    }
	    return false;
	  },
	  expandByRange: function(expandingRange) {
	    if (this.includesRange(expandingRange) || !this.overlaps(expandingRange)) {
	      return false;
	    }
	    var topLeft = this.getTopLeftCorner();
	    var bottomRight = this.getBottomRightCorner();
	    var topRight = this.getTopRightCorner();
	    var bottomLeft = this.getBottomLeftCorner();
	    var expandingTopLeft = expandingRange.getTopLeftCorner();
	    var expandingBottomRight = expandingRange.getBottomRightCorner();
	    var resultTopRow = Math.min(topLeft.row, expandingTopLeft.row);
	    var resultTopCol = Math.min(topLeft.col, expandingTopLeft.col);
	    var resultBottomRow = Math.max(bottomRight.row, expandingBottomRight.row);
	    var resultBottomCol = Math.max(bottomRight.col, expandingBottomRight.col);
	    var finalFrom = new WalkontableCellCoords(resultTopRow, resultTopCol),
	        finalTo = new WalkontableCellCoords(resultBottomRow, resultBottomCol);
	    var isCorner = new $WalkontableCellRange(finalFrom, finalFrom, finalTo).isCorner(this.from, expandingRange),
	        onlyMerge = expandingRange.isEqual(new $WalkontableCellRange(finalFrom, finalFrom, finalTo));
	    if (isCorner && !onlyMerge) {
	      if (this.from.col > finalFrom.col) {
	        finalFrom.col = resultBottomCol;
	        finalTo.col = resultTopCol;
	      }
	      if (this.from.row > finalFrom.row) {
	        finalFrom.row = resultBottomRow;
	        finalTo.row = resultTopRow;
	      }
	    }
	    this.from = finalFrom;
	    this.to = finalTo;
	    return true;
	  },
	  getDirection: function() {
	    if (this.from.isNorthWestOf(this.to)) {
	      return 'NW-SE';
	    } else if (this.from.isNorthEastOf(this.to)) {
	      return 'NE-SW';
	    } else if (this.from.isSouthEastOf(this.to)) {
	      return 'SE-NW';
	    } else if (this.from.isSouthWestOf(this.to)) {
	      return 'SW-NE';
	    }
	  },
	  setDirection: function(direction) {
	    switch (direction) {
	      case 'NW-SE':
	        this.from = this.getTopLeftCorner();
	        this.to = this.getBottomRightCorner();
	        break;
	      case 'NE-SW':
	        this.from = this.getTopRightCorner();
	        this.to = this.getBottomLeftCorner();
	        break;
	      case 'SE-NW':
	        this.from = this.getBottomRightCorner();
	        this.to = this.getTopLeftCorner();
	        break;
	      case 'SW-NE':
	        this.from = this.getBottomLeftCorner();
	        this.to = this.getTopRightCorner();
	        break;
	    }
	  },
	  getTopLeftCorner: function() {
	    return new WalkontableCellCoords(Math.min(this.from.row, this.to.row), Math.min(this.from.col, this.to.col));
	  },
	  getBottomRightCorner: function() {
	    return new WalkontableCellCoords(Math.max(this.from.row, this.to.row), Math.max(this.from.col, this.to.col));
	  },
	  getTopRightCorner: function() {
	    return new WalkontableCellCoords(Math.min(this.from.row, this.to.row), Math.max(this.from.col, this.to.col));
	  },
	  getBottomLeftCorner: function() {
	    return new WalkontableCellCoords(Math.max(this.from.row, this.to.row), Math.min(this.from.col, this.to.col));
	  },
	  isCorner: function(coords, expandedRange) {
	    if (expandedRange) {
	      if (expandedRange.includes(coords)) {
	        if (this.getTopLeftCorner().isEqual(new WalkontableCellCoords(expandedRange.from.row, expandedRange.from.col)) || this.getTopRightCorner().isEqual(new WalkontableCellCoords(expandedRange.from.row, expandedRange.to.col)) || this.getBottomLeftCorner().isEqual(new WalkontableCellCoords(expandedRange.to.row, expandedRange.from.col)) || this.getBottomRightCorner().isEqual(new WalkontableCellCoords(expandedRange.to.row, expandedRange.to.col))) {
	          return true;
	        }
	      }
	    }
	    return coords.isEqual(this.getTopLeftCorner()) || coords.isEqual(this.getTopRightCorner()) || coords.isEqual(this.getBottomLeftCorner()) || coords.isEqual(this.getBottomRightCorner());
	  },
	  getOppositeCorner: function(coords, expandedRange) {
	    if (!(coords instanceof WalkontableCellCoords)) {
	      return false;
	    }
	    if (expandedRange) {
	      if (expandedRange.includes(coords)) {
	        if (this.getTopLeftCorner().isEqual(new WalkontableCellCoords(expandedRange.from.row, expandedRange.from.col))) {
	          return this.getBottomRightCorner();
	        }
	        if (this.getTopRightCorner().isEqual(new WalkontableCellCoords(expandedRange.from.row, expandedRange.to.col))) {
	          return this.getBottomLeftCorner();
	        }
	        if (this.getBottomLeftCorner().isEqual(new WalkontableCellCoords(expandedRange.to.row, expandedRange.from.col))) {
	          return this.getTopRightCorner();
	        }
	        if (this.getBottomRightCorner().isEqual(new WalkontableCellCoords(expandedRange.to.row, expandedRange.to.col))) {
	          return this.getTopLeftCorner();
	        }
	      }
	    }
	    if (coords.isEqual(this.getBottomRightCorner())) {
	      return this.getTopLeftCorner();
	    } else if (coords.isEqual(this.getTopLeftCorner())) {
	      return this.getBottomRightCorner();
	    } else if (coords.isEqual(this.getTopRightCorner())) {
	      return this.getBottomLeftCorner();
	    } else if (coords.isEqual(this.getBottomLeftCorner())) {
	      return this.getTopRightCorner();
	    }
	  },
	  getBordersSharedWith: function(range) {
	    if (!this.includesRange(range)) {
	      return [];
	    }
	    var thisBorders = {
	      top: Math.min(this.from.row, this.to.row),
	      bottom: Math.max(this.from.row, this.to.row),
	      left: Math.min(this.from.col, this.to.col),
	      right: Math.max(this.from.col, this.to.col)
	    };
	    var rangeBorders = {
	      top: Math.min(range.from.row, range.to.row),
	      bottom: Math.max(range.from.row, range.to.row),
	      left: Math.min(range.from.col, range.to.col),
	      right: Math.max(range.from.col, range.to.col)
	    };
	    var result = [];
	    if (thisBorders.top == rangeBorders.top) {
	      result.push('top');
	    }
	    if (thisBorders.right == rangeBorders.right) {
	      result.push('right');
	    }
	    if (thisBorders.bottom == rangeBorders.bottom) {
	      result.push('bottom');
	    }
	    if (thisBorders.left == rangeBorders.left) {
	      result.push('left');
	    }
	    return result;
	  },
	  getInner: function() {
	    var topLeft = this.getTopLeftCorner();
	    var bottomRight = this.getBottomRightCorner();
	    var out = [];
	    for (var r = topLeft.row; r <= bottomRight.row; r++) {
	      for (var c = topLeft.col; c <= bottomRight.col; c++) {
	        if (!(this.from.row === r && this.from.col === c) && !(this.to.row === r && this.to.col === c)) {
	          out.push(new WalkontableCellCoords(r, c));
	        }
	      }
	    }
	    return out;
	  },
	  getAll: function() {
	    var topLeft = this.getTopLeftCorner();
	    var bottomRight = this.getBottomRightCorner();
	    var out = [];
	    for (var r = topLeft.row; r <= bottomRight.row; r++) {
	      for (var c = topLeft.col; c <= bottomRight.col; c++) {
	        if (topLeft.row === r && topLeft.col === c) {
	          out.push(topLeft);
	        } else if (bottomRight.row === r && bottomRight.col === c) {
	          out.push(bottomRight);
	        } else {
	          out.push(new WalkontableCellCoords(r, c));
	        }
	      }
	    }
	    return out;
	  },
	  forAll: function(callback) {
	    var topLeft = this.getTopLeftCorner();
	    var bottomRight = this.getBottomRightCorner();
	    for (var r = topLeft.row; r <= bottomRight.row; r++) {
	      for (var c = topLeft.col; c <= bottomRight.col; c++) {
	        var breakIteration = callback(r, c);
	        if (breakIteration === false) {
	          return;
	        }
	      }
	    }
	  }
	}, {});
	;
	window.WalkontableCellRange = WalkontableCellRange;

	//# 
	},{"cell/coords":5}],7:[function(require,module,exports){
	"use strict";
	Object.defineProperties(exports, {
	  Walkontable: {get: function() {
	      return Walkontable;
	    }},
	  __esModule: {value: true}
	});
	var $___46__46__47__46__46__47__46__46__47_helpers_47_dom_47_element__,
	    $___46__46__47__46__46__47__46__46__47_helpers_47_object__,
	    $___46__46__47__46__46__47__46__46__47_helpers_47_string__,
	    $__event__,
	    $__overlays__,
	    $__scroll__,
	    $__settings__,
	    $__table__,
	    $__viewport__,
	    $__overlay_47__95_base_46_js__,
	    $__overlay_47_top_46_js__,
	    $__overlay_47_left_46_js__,
	    $__overlay_47_debug_46_js__,
	    $__overlay_47_topLeftCorner_46_js__;
	var $__0 = ($___46__46__47__46__46__47__46__46__47_helpers_47_dom_47_element__ = require("helpers/dom/element"), $___46__46__47__46__46__47__46__46__47_helpers_47_dom_47_element__ && $___46__46__47__46__46__47__46__46__47_helpers_47_dom_47_element__.__esModule && $___46__46__47__46__46__47__46__46__47_helpers_47_dom_47_element__ || {default: $___46__46__47__46__46__47__46__46__47_helpers_47_dom_47_element__}),
	    addClass = $__0.addClass,
	    fastInnerText = $__0.fastInnerText,
	    isVisible = $__0.isVisible,
	    removeClass = $__0.removeClass;
	var objectEach = ($___46__46__47__46__46__47__46__46__47_helpers_47_object__ = require("helpers/object"), $___46__46__47__46__46__47__46__46__47_helpers_47_object__ && $___46__46__47__46__46__47__46__46__47_helpers_47_object__.__esModule && $___46__46__47__46__46__47__46__46__47_helpers_47_object__ || {default: $___46__46__47__46__46__47__46__46__47_helpers_47_object__}).objectEach;
	var $__2 = ($___46__46__47__46__46__47__46__46__47_helpers_47_string__ = require("helpers/string"), $___46__46__47__46__46__47__46__46__47_helpers_47_string__ && $___46__46__47__46__46__47__46__46__47_helpers_47_string__.__esModule && $___46__46__47__46__46__47__46__46__47_helpers_47_string__ || {default: $___46__46__47__46__46__47__46__46__47_helpers_47_string__}),
	    toUpperCaseFirst = $__2.toUpperCaseFirst,
	    randomString = $__2.randomString;
	var WalkontableEvent = ($__event__ = require("event"), $__event__ && $__event__.__esModule && $__event__ || {default: $__event__}).WalkontableEvent;
	var WalkontableOverlays = ($__overlays__ = require("overlays"), $__overlays__ && $__overlays__.__esModule && $__overlays__ || {default: $__overlays__}).WalkontableOverlays;
	var WalkontableScroll = ($__scroll__ = require("scroll"), $__scroll__ && $__scroll__.__esModule && $__scroll__ || {default: $__scroll__}).WalkontableScroll;
	var WalkontableSettings = ($__settings__ = require("settings"), $__settings__ && $__settings__.__esModule && $__settings__ || {default: $__settings__}).WalkontableSettings;
	var WalkontableTable = ($__table__ = require("table"), $__table__ && $__table__.__esModule && $__table__ || {default: $__table__}).WalkontableTable;
	var WalkontableViewport = ($__viewport__ = require("viewport"), $__viewport__ && $__viewport__.__esModule && $__viewport__ || {default: $__viewport__}).WalkontableViewport;
	var WalkontableOverlay = ($__overlay_47__95_base_46_js__ = require("overlay/_base.js"), $__overlay_47__95_base_46_js__ && $__overlay_47__95_base_46_js__.__esModule && $__overlay_47__95_base_46_js__ || {default: $__overlay_47__95_base_46_js__}).WalkontableOverlay;
	var WalkontableTopOverlay = ($__overlay_47_top_46_js__ = require("overlay/top.js"), $__overlay_47_top_46_js__ && $__overlay_47_top_46_js__.__esModule && $__overlay_47_top_46_js__ || {default: $__overlay_47_top_46_js__}).WalkontableTopOverlay;
	var WalkontableLeftOverlay = ($__overlay_47_left_46_js__ = require("overlay/left.js"), $__overlay_47_left_46_js__ && $__overlay_47_left_46_js__.__esModule && $__overlay_47_left_46_js__ || {default: $__overlay_47_left_46_js__}).WalkontableLeftOverlay;
	var WalkontableDebugOverlay = ($__overlay_47_debug_46_js__ = require("overlay/debug.js"), $__overlay_47_debug_46_js__ && $__overlay_47_debug_46_js__.__esModule && $__overlay_47_debug_46_js__ || {default: $__overlay_47_debug_46_js__}).WalkontableDebugOverlay;
	var WalkontableTopLeftCornerOverlay = ($__overlay_47_topLeftCorner_46_js__ = require("overlay/topLeftCorner.js"), $__overlay_47_topLeftCorner_46_js__ && $__overlay_47_topLeftCorner_46_js__.__esModule && $__overlay_47_topLeftCorner_46_js__ || {default: $__overlay_47_topLeftCorner_46_js__}).WalkontableTopLeftCornerOverlay;
	var Walkontable = function Walkontable(settings) {
	  var originalHeaders = [];
	  this.guid = 'wt_' + randomString();
	  if (settings.cloneSource) {
	    this.cloneSource = settings.cloneSource;
	    this.cloneOverlay = settings.cloneOverlay;
	    this.wtSettings = settings.cloneSource.wtSettings;
	    this.wtTable = new WalkontableTable(this, settings.table, settings.wtRootElement);
	    this.wtScroll = new WalkontableScroll(this);
	    this.wtViewport = settings.cloneSource.wtViewport;
	    this.wtEvent = new WalkontableEvent(this);
	    this.selections = this.cloneSource.selections;
	  } else {
	    this.wtSettings = new WalkontableSettings(this, settings);
	    this.wtTable = new WalkontableTable(this, settings.table);
	    this.wtScroll = new WalkontableScroll(this);
	    this.wtViewport = new WalkontableViewport(this);
	    this.wtEvent = new WalkontableEvent(this);
	    this.selections = this.getSetting('selections');
	    this.wtOverlays = new WalkontableOverlays(this);
	    this.exportSettingsAsClassNames();
	  }
	  if (this.wtTable.THEAD.childNodes.length && this.wtTable.THEAD.childNodes[0].childNodes.length) {
	    for (var c = 0,
	        clen = this.wtTable.THEAD.childNodes[0].childNodes.length; c < clen; c++) {
	      originalHeaders.push(this.wtTable.THEAD.childNodes[0].childNodes[c].innerHTML);
	    }
	    if (!this.getSetting('columnHeaders').length) {
	      this.update('columnHeaders', [function(column, TH) {
	        fastInnerText(TH, originalHeaders[column]);
	      }]);
	    }
	  }
	  this.drawn = false;
	  this.drawInterrupted = false;
	};
	($traceurRuntime.createClass)(Walkontable, {
	  draw: function() {
	    var fastDraw = arguments[0] !== (void 0) ? arguments[0] : false;
	    this.drawInterrupted = false;
	    if (!fastDraw && !isVisible(this.wtTable.TABLE)) {
	      this.drawInterrupted = true;
	    } else {
	      this.wtTable.draw(fastDraw);
	    }
	    return this;
	  },
	  getCell: function(coords) {
	    var topmost = arguments[1] !== (void 0) ? arguments[1] : false;
	    if (!topmost) {
	      return this.wtTable.getCell(coords);
	    }
	    var totalRows = this.wtSettings.getSetting('totalRows');
	    var fixedRowsTop = this.wtSettings.getSetting('fixedRowsTop');
	    var fixedRowsBottom = this.wtSettings.getSetting('fixedRowsBottom');
	    var fixedColumns = this.wtSettings.getSetting('fixedColumnsLeft');
	    if (coords.row < fixedRowsTop && coords.col < fixedColumns) {
	      return this.wtOverlays.topLeftCornerOverlay.clone.wtTable.getCell(coords);
	    } else if (coords.row < fixedRowsTop) {
	      return this.wtOverlays.topOverlay.clone.wtTable.getCell(coords);
	    } else if (coords.col < fixedColumns && coords.row >= totalRows - fixedRowsBottom) {
	      if (this.wtOverlays.bottomLeftCornerOverlay.clone) {
	        return this.wtOverlays.bottomLeftCornerOverlay.clone.wtTable.getCell(coords);
	      }
	    } else if (coords.col < fixedColumns) {
	      return this.wtOverlays.leftOverlay.clone.wtTable.getCell(coords);
	    } else if (coords.row >= totalRows - fixedRowsBottom) {
	      if (this.wtOverlays.bottomOverlay.clone) {
	        return this.wtOverlays.bottomOverlay.clone.wtTable.getCell(coords);
	      }
	    }
	    return this.wtTable.getCell(coords);
	  },
	  update: function(settings, value) {
	    return this.wtSettings.update(settings, value);
	  },
	  scrollVertical: function(row) {
	    this.wtOverlays.topOverlay.scrollTo(row);
	    this.getSetting('onScrollVertically');
	    return this;
	  },
	  scrollHorizontal: function(column) {
	    this.wtOverlays.leftOverlay.scrollTo(column);
	    this.getSetting('onScrollHorizontally');
	    return this;
	  },
	  scrollViewport: function(coords) {
	    this.wtScroll.scrollViewport(coords);
	    return this;
	  },
	  getViewport: function() {
	    return [this.wtTable.getFirstVisibleRow(), this.wtTable.getFirstVisibleColumn(), this.wtTable.getLastVisibleRow(), this.wtTable.getLastVisibleColumn()];
	  },
	  getOverlayName: function() {
	    return this.cloneOverlay ? this.cloneOverlay.type : 'master';
	  },
	  exportSettingsAsClassNames: function() {
	    var $__14 = this;
	    var toExport = {
	      rowHeaders: ['array'],
	      columnHeaders: ['array']
	    };
	    var allClassNames = [];
	    var newClassNames = [];
	    objectEach(toExport, (function(optionType, key) {
	      if (optionType.indexOf('array') > -1 && $__14.getSetting(key).length) {
	        newClassNames.push('ht' + toUpperCaseFirst(key));
	      }
	      allClassNames.push('ht' + toUpperCaseFirst(key));
	    }));
	    removeClass(this.wtTable.wtRootElement.parentNode, allClassNames);
	    addClass(this.wtTable.wtRootElement.parentNode, newClassNames);
	  },
	  getSetting: function(key, param1, param2, param3, param4) {
	    return this.wtSettings.getSetting(key, param1, param2, param3, param4);
	  },
	  hasSetting: function(key) {
	    return this.wtSettings.has(key);
	  },
	  destroy: function() {
	    this.wtOverlays.destroy();
	    this.wtEvent.destroy();
	  }
	}, {});
	;
	window.Walkontable = Walkontable;

	//# 
	},{"event":8,"helpers/dom/element":44,"helpers/object":49,"helpers/string":51,"overlay/_base.js":11,"overlay/debug.js":12,"overlay/left.js":13,"overlay/top.js":14,"overlay/topLeftCorner.js":15,"overlays":16,"scroll":17,"settings":19,"table":20,"viewport":22}],8:[function(require,module,exports){
	"use strict";
	Object.defineProperties(exports, {
	  WalkontableEvent: {get: function() {
	      return WalkontableEvent;
	    }},
	  __esModule: {value: true}
	});
	var $___46__46__47__46__46__47__46__46__47_helpers_47_dom_47_element__,
	    $___46__46__47__46__46__47__46__46__47_eventManager__;
	var $__0 = ($___46__46__47__46__46__47__46__46__47_helpers_47_dom_47_element__ = require("helpers/dom/element"), $___46__46__47__46__46__47__46__46__47_helpers_47_dom_47_element__ && $___46__46__47__46__46__47__46__46__47_helpers_47_dom_47_element__.__esModule && $___46__46__47__46__46__47__46__46__47_helpers_47_dom_47_element__ || {default: $___46__46__47__46__46__47__46__46__47_helpers_47_dom_47_element__}),
	    closest = $__0.closest,
	    hasClass = $__0.hasClass,
	    isChildOf = $__0.isChildOf;
	var eventManagerObject = ($___46__46__47__46__46__47__46__46__47_eventManager__ = require("eventManager"), $___46__46__47__46__46__47__46__46__47_eventManager__ && $___46__46__47__46__46__47__46__46__47_eventManager__.__esModule && $___46__46__47__46__46__47__46__46__47_eventManager__ || {default: $___46__46__47__46__46__47__46__46__47_eventManager__}).eventManager;
	function WalkontableEvent(instance) {
	  var that = this;
	  var eventManager = eventManagerObject(instance);
	  this.instance = instance;
	  var dblClickOrigin = [null, null];
	  this.dblClickTimeout = [null, null];
	  var onMouseDown = function(event) {
	    var cell = that.parentCell(event.realTarget);
	    if (hasClass(event.realTarget, 'corner')) {
	      that.instance.getSetting('onCellCornerMouseDown', event, event.realTarget);
	    } else if (cell.TD) {
	      if (that.instance.hasSetting('onCellMouseDown')) {
	        that.instance.getSetting('onCellMouseDown', event, cell.coords, cell.TD, that.instance);
	      }
	    }
	    if (event.button !== 2) {
	      if (cell.TD) {
	        dblClickOrigin[0] = cell.TD;
	        clearTimeout(that.dblClickTimeout[0]);
	        that.dblClickTimeout[0] = setTimeout(function() {
	          dblClickOrigin[0] = null;
	        }, 1000);
	      }
	    }
	  };
	  var onTouchMove = function(event) {
	    that.instance.touchMoving = true;
	  };
	  var longTouchTimeout;
	  var onTouchStart = function(event) {
	    var container = this;
	    eventManager.addEventListener(this, 'touchmove', onTouchMove);
	    that.checkIfTouchMove = setTimeout(function() {
	      if (that.instance.touchMoving === true) {
	        that.instance.touchMoving = void 0;
	        eventManager.removeEventListener('touchmove', onTouchMove, false);
	        return;
	      } else {
	        onMouseDown(event);
	      }
	    }, 30);
	  };
	  var lastMouseOver;
	  var onMouseOver = function(event) {
	    var table,
	        td;
	    if (that.instance.hasSetting('onCellMouseOver')) {
	      table = that.instance.wtTable.TABLE;
	      td = closest(event.realTarget, ['TD', 'TH'], table);
	      if (td && td !== lastMouseOver && isChildOf(td, table)) {
	        lastMouseOver = td;
	        that.instance.getSetting('onCellMouseOver', event, that.instance.wtTable.getCoords(td), td, that.instance);
	      }
	    }
	  };
	  var onMouseUp = function(event) {
	    if (event.button !== 2) {
	      var cell = that.parentCell(event.realTarget);
	      if (cell.TD === dblClickOrigin[0] && cell.TD === dblClickOrigin[1]) {
	        if (hasClass(event.realTarget, 'corner')) {
	          that.instance.getSetting('onCellCornerDblClick', event, cell.coords, cell.TD, that.instance);
	        } else {
	          that.instance.getSetting('onCellDblClick', event, cell.coords, cell.TD, that.instance);
	        }
	        dblClickOrigin[0] = null;
	        dblClickOrigin[1] = null;
	      } else if (cell.TD === dblClickOrigin[0]) {
	        dblClickOrigin[1] = cell.TD;
	        clearTimeout(that.dblClickTimeout[1]);
	        that.dblClickTimeout[1] = setTimeout(function() {
	          dblClickOrigin[1] = null;
	        }, 500);
	      }
	    }
	  };
	  var onTouchEnd = function(event) {
	    clearTimeout(longTouchTimeout);
	    event.preventDefault();
	    onMouseUp(event);
	  };
	  eventManager.addEventListener(this.instance.wtTable.holder, 'mousedown', onMouseDown);
	  eventManager.addEventListener(this.instance.wtTable.TABLE, 'mouseover', onMouseOver);
	  eventManager.addEventListener(this.instance.wtTable.holder, 'mouseup', onMouseUp);
	  if (this.instance.wtTable.holder.parentNode.parentNode && Handsontable.mobileBrowser && !that.instance.wtTable.isWorkingOnClone()) {
	    var classSelector = '.' + this.instance.wtTable.holder.parentNode.className.split(' ').join('.');
	    eventManager.addEventListener(this.instance.wtTable.holder, 'touchstart', function(event) {
	      that.instance.touchApplied = true;
	      if (isChildOf(event.target, classSelector)) {
	        onTouchStart.call(event.target, event);
	      }
	    });
	    eventManager.addEventListener(this.instance.wtTable.holder, 'touchend', function(event) {
	      that.instance.touchApplied = false;
	      if (isChildOf(event.target, classSelector)) {
	        onTouchEnd.call(event.target, event);
	      }
	    });
	    if (!that.instance.momentumScrolling) {
	      that.instance.momentumScrolling = {};
	    }
	    eventManager.addEventListener(this.instance.wtTable.holder, 'scroll', function(event) {
	      clearTimeout(that.instance.momentumScrolling._timeout);
	      if (!that.instance.momentumScrolling.ongoing) {
	        that.instance.getSetting('onBeforeTouchScroll');
	      }
	      that.instance.momentumScrolling.ongoing = true;
	      that.instance.momentumScrolling._timeout = setTimeout(function() {
	        if (!that.instance.touchApplied) {
	          that.instance.momentumScrolling.ongoing = false;
	          that.instance.getSetting('onAfterMomentumScroll');
	        }
	      }, 200);
	    });
	  }
	  eventManager.addEventListener(window, 'resize', function() {
	    if (that.instance.getSetting('stretchH') !== 'none') {
	      that.instance.draw();
	    }
	  });
	  this.destroy = function() {
	    clearTimeout(this.dblClickTimeout[0]);
	    clearTimeout(this.dblClickTimeout[1]);
	    eventManager.destroy();
	  };
	}
	WalkontableEvent.prototype.parentCell = function(elem) {
	  var cell = {};
	  var TABLE = this.instance.wtTable.TABLE;
	  var TD = closest(elem, ['TD', 'TH'], TABLE);
	  if (TD && isChildOf(TD, TABLE)) {
	    cell.coords = this.instance.wtTable.getCoords(TD);
	    cell.TD = TD;
	  } else if (hasClass(elem, 'wtBorder') && hasClass(elem, 'current')) {
	    cell.coords = this.instance.selections.current.cellRange.highlight;
	    cell.TD = this.instance.wtTable.getCell(cell.coords);
	  } else if (hasClass(elem, 'wtBorder') && hasClass(elem, 'area')) {
	    if (this.instance.selections.area.cellRange) {
	      cell.coords = this.instance.selections.area.cellRange.to;
	      cell.TD = this.instance.wtTable.getCell(cell.coords);
	    }
	  }
	  return cell;
	};
	;
	window.WalkontableEvent = WalkontableEvent;

	//# 
	},{"eventManager":40,"helpers/dom/element":44}],9:[function(require,module,exports){
	"use strict";
	Object.defineProperties(exports, {
	  WalkontableColumnFilter: {get: function() {
	      return WalkontableColumnFilter;
	    }},
	  __esModule: {value: true}
	});
	var WalkontableColumnFilter = function WalkontableColumnFilter(offset, total, countTH) {
	  this.offset = offset;
	  this.total = total;
	  this.countTH = countTH;
	};
	($traceurRuntime.createClass)(WalkontableColumnFilter, {
	  offsetted: function(index) {
	    return index + this.offset;
	  },
	  unOffsetted: function(index) {
	    return index - this.offset;
	  },
	  renderedToSource: function(index) {
	    return this.offsetted(index);
	  },
	  sourceToRendered: function(index) {
	    return this.unOffsetted(index);
	  },
	  offsettedTH: function(index) {
	    return index - this.countTH;
	  },
	  unOffsettedTH: function(index) {
	    return index + this.countTH;
	  },
	  visibleRowHeadedColumnToSourceColumn: function(index) {
	    return this.renderedToSource(this.offsettedTH(index));
	  },
	  sourceColumnToVisibleRowHeadedColumn: function(index) {
	    return this.unOffsettedTH(this.sourceToRendered(index));
	  }
	}, {});
	;
	window.WalkontableColumnFilter = WalkontableColumnFilter;

	//# 
	},{}],10:[function(require,module,exports){
	"use strict";
	Object.defineProperties(exports, {
	  WalkontableRowFilter: {get: function() {
	      return WalkontableRowFilter;
	    }},
	  __esModule: {value: true}
	});
	var WalkontableRowFilter = function WalkontableRowFilter(offset, total, countTH) {
	  this.offset = offset;
	  this.total = total;
	  this.countTH = countTH;
	};
	($traceurRuntime.createClass)(WalkontableRowFilter, {
	  offsetted: function(index) {
	    return index + this.offset;
	  },
	  unOffsetted: function(index) {
	    return index - this.offset;
	  },
	  renderedToSource: function(index) {
	    return this.offsetted(index);
	  },
	  sourceToRendered: function(index) {
	    return this.unOffsetted(index);
	  },
	  offsettedTH: function(index) {
	    return index - this.countTH;
	  },
	  unOffsettedTH: function(index) {
	    return index + this.countTH;
	  },
	  visibleColHeadedRowToSourceRow: function(index) {
	    return this.renderedToSource(this.offsettedTH(index));
	  },
	  sourceRowToVisibleColHeadedRow: function(index) {
	    return this.unOffsettedTH(this.sourceToRendered(index));
	  }
	}, {});
	;
	window.WalkontableRowFilter = WalkontableRowFilter;

	//# 
	},{}],11:[function(require,module,exports){
	"use strict";
	Object.defineProperties(exports, {
	  WalkontableOverlay: {get: function() {
	      return WalkontableOverlay;
	    }},
	  __esModule: {value: true}
	});
	var $___46__46__47__46__46__47__46__46__47__46__46__47_helpers_47_dom_47_element__,
	    $___46__46__47__46__46__47__46__46__47__46__46__47_helpers_47_object__,
	    $___46__46__47__46__46__47__46__46__47__46__46__47_eventManager__;
	var $__0 = ($___46__46__47__46__46__47__46__46__47__46__46__47_helpers_47_dom_47_element__ = require("helpers/dom/element"), $___46__46__47__46__46__47__46__46__47__46__46__47_helpers_47_dom_47_element__ && $___46__46__47__46__46__47__46__46__47__46__46__47_helpers_47_dom_47_element__.__esModule && $___46__46__47__46__46__47__46__46__47__46__46__47_helpers_47_dom_47_element__ || {default: $___46__46__47__46__46__47__46__46__47__46__46__47_helpers_47_dom_47_element__}),
	    getScrollableElement = $__0.getScrollableElement,
	    getTrimmingContainer = $__0.getTrimmingContainer;
	var defineGetter = ($___46__46__47__46__46__47__46__46__47__46__46__47_helpers_47_object__ = require("helpers/object"), $___46__46__47__46__46__47__46__46__47__46__46__47_helpers_47_object__ && $___46__46__47__46__46__47__46__46__47__46__46__47_helpers_47_object__.__esModule && $___46__46__47__46__46__47__46__46__47__46__46__47_helpers_47_object__ || {default: $___46__46__47__46__46__47__46__46__47__46__46__47_helpers_47_object__}).defineGetter;
	var eventManagerObject = ($___46__46__47__46__46__47__46__46__47__46__46__47_eventManager__ = require("eventManager"), $___46__46__47__46__46__47__46__46__47__46__46__47_eventManager__ && $___46__46__47__46__46__47__46__46__47__46__46__47_eventManager__.__esModule && $___46__46__47__46__46__47__46__46__47__46__46__47_eventManager__ || {default: $___46__46__47__46__46__47__46__46__47__46__46__47_eventManager__}).eventManager;
	var registeredOverlays = {};
	var WalkontableOverlay = function WalkontableOverlay(wotInstance) {
	  defineGetter(this, 'wot', wotInstance, {writable: false});
	  this.instance = this.wot;
	  this.type = '';
	  this.TABLE = this.wot.wtTable.TABLE;
	  this.hider = this.wot.wtTable.hider;
	  this.spreader = this.wot.wtTable.spreader;
	  this.holder = this.wot.wtTable.holder;
	  this.wtRootElement = this.wot.wtTable.wtRootElement;
	  this.trimmingContainer = getTrimmingContainer(this.hider.parentNode.parentNode);
	  this.mainTableScrollableElement = getScrollableElement(this.wot.wtTable.TABLE);
	  this.needFullRender = this.shouldBeRendered();
	  this.areElementSizesAdjusted = false;
	};
	var $WalkontableOverlay = WalkontableOverlay;
	($traceurRuntime.createClass)(WalkontableOverlay, {
	  shouldBeRendered: function() {
	    return true;
	  },
	  makeClone: function(direction) {
	    if ($WalkontableOverlay.CLONE_TYPES.indexOf(direction) === -1) {
	      throw new Error('Clone type "' + direction + '" is not supported.');
	    }
	    var clone = document.createElement('DIV');
	    var clonedTable = document.createElement('TABLE');
	    clone.className = 'ht_clone_' + direction + ' handsontable';
	    clone.style.position = 'absolute';
	    clone.style.top = 0;
	    clone.style.left = 0;
	    clone.style.overflow = 'hidden';
	    clonedTable.className = this.wot.wtTable.TABLE.className;
	    clone.appendChild(clonedTable);
	    this.type = direction;
	    this.wot.wtTable.wtRootElement.parentNode.appendChild(clone);
	    return new Walkontable({
	      cloneSource: this.wot,
	      cloneOverlay: this,
	      table: clonedTable
	    });
	  },
	  refresh: function() {
	    var fastDraw = arguments[0] !== (void 0) ? arguments[0] : false;
	    var nextCycleRenderFlag = this.shouldBeRendered();
	    if (this.clone && (this.needFullRender || nextCycleRenderFlag)) {
	      this.clone.draw(fastDraw);
	    }
	    this.needFullRender = nextCycleRenderFlag;
	  },
	  destroy: function() {
	    eventManagerObject(this.clone).destroy();
	  }
	}, {
	  get CLONE_TOP() {
	    return 'top';
	  },
	  get CLONE_BOTTOM() {
	    return 'bottom';
	  },
	  get CLONE_LEFT() {
	    return 'left';
	  },
	  get CLONE_TOP_LEFT_CORNER() {
	    return 'top_left_corner';
	  },
	  get CLONE_BOTTOM_LEFT_CORNER() {
	    return 'bottom_left_corner';
	  },
	  get CLONE_DEBUG() {
	    return 'debug';
	  },
	  get CLONE_TYPES() {
	    return [$WalkontableOverlay.CLONE_TOP, $WalkontableOverlay.CLONE_BOTTOM, $WalkontableOverlay.CLONE_LEFT, $WalkontableOverlay.CLONE_TOP_LEFT_CORNER, $WalkontableOverlay.CLONE_BOTTOM_LEFT_CORNER, $WalkontableOverlay.CLONE_DEBUG];
	  },
	  registerOverlay: function(type, overlayClass) {
	    if ($WalkontableOverlay.CLONE_TYPES.indexOf(type) === -1) {
	      throw new Error(("Unsupported overlay (" + type + ")."));
	    }
	    registeredOverlays[type] = overlayClass;
	  },
	  createOverlay: function(type, wot) {
	    return new registeredOverlays[type](wot);
	  },
	  isOverlayTypeOf: function(overlay, type) {
	    if (!overlay || !registeredOverlays[type]) {
	      return false;
	    }
	    return overlay instanceof registeredOverlays[type];
	  }
	});
	;
	window.WalkontableOverlay = WalkontableOverlay;

	//# 
	},{"eventManager":40,"helpers/dom/element":44,"helpers/object":49}],12:[function(require,module,exports){
	"use strict";
	Object.defineProperties(exports, {
	  WalkontableDebugOverlay: {get: function() {
	      return WalkontableDebugOverlay;
	    }},
	  __esModule: {value: true}
	});
	var $___46__46__47__46__46__47__46__46__47__46__46__47_helpers_47_dom_47_element__,
	    $___95_base__;
	var addClass = ($___46__46__47__46__46__47__46__46__47__46__46__47_helpers_47_dom_47_element__ = require("helpers/dom/element"), $___46__46__47__46__46__47__46__46__47__46__46__47_helpers_47_dom_47_element__ && $___46__46__47__46__46__47__46__46__47__46__46__47_helpers_47_dom_47_element__.__esModule && $___46__46__47__46__46__47__46__46__47__46__46__47_helpers_47_dom_47_element__ || {default: $___46__46__47__46__46__47__46__46__47__46__46__47_helpers_47_dom_47_element__}).addClass;
	var WalkontableOverlay = ($___95_base__ = require("_base"), $___95_base__ && $___95_base__.__esModule && $___95_base__ || {default: $___95_base__}).WalkontableOverlay;
	var WalkontableDebugOverlay = function WalkontableDebugOverlay(wotInstance) {
	  $traceurRuntime.superConstructor($WalkontableDebugOverlay).call(this, wotInstance);
	  this.clone = this.makeClone(WalkontableOverlay.CLONE_DEBUG);
	  this.clone.wtTable.holder.style.opacity = 0.4;
	  this.clone.wtTable.holder.style.textShadow = '0 0 2px #ff0000';
	  addClass(this.clone.wtTable.holder.parentNode, 'wtDebugVisible');
	};
	var $WalkontableDebugOverlay = WalkontableDebugOverlay;
	($traceurRuntime.createClass)(WalkontableDebugOverlay, {}, {}, WalkontableOverlay);
	;
	window.WalkontableDebugOverlay = WalkontableDebugOverlay;
	WalkontableOverlay.registerOverlay(WalkontableOverlay.CLONE_DEBUG, WalkontableDebugOverlay);

	//# 
	},{"_base":11,"helpers/dom/element":44}],13:[function(require,module,exports){
	"use strict";
	Object.defineProperties(exports, {
	  WalkontableLeftOverlay: {get: function() {
	      return WalkontableLeftOverlay;
	    }},
	  __esModule: {value: true}
	});
	var $___46__46__47__46__46__47__46__46__47__46__46__47_helpers_47_dom_47_element__,
	    $___95_base__;
	var $__0 = ($___46__46__47__46__46__47__46__46__47__46__46__47_helpers_47_dom_47_element__ = require("helpers/dom/element"), $___46__46__47__46__46__47__46__46__47__46__46__47_helpers_47_dom_47_element__ && $___46__46__47__46__46__47__46__46__47__46__46__47_helpers_47_dom_47_element__.__esModule && $___46__46__47__46__46__47__46__46__47__46__46__47_helpers_47_dom_47_element__ || {default: $___46__46__47__46__46__47__46__46__47__46__46__47_helpers_47_dom_47_element__}),
	    addClass = $__0.addClass,
	    getScrollbarWidth = $__0.getScrollbarWidth,
	    getScrollLeft = $__0.getScrollLeft,
	    getWindowScrollTop = $__0.getWindowScrollTop,
	    hasClass = $__0.hasClass,
	    outerWidth = $__0.outerWidth,
	    removeClass = $__0.removeClass,
	    setOverlayPosition = $__0.setOverlayPosition;
	var WalkontableOverlay = ($___95_base__ = require("_base"), $___95_base__ && $___95_base__.__esModule && $___95_base__ || {default: $___95_base__}).WalkontableOverlay;
	var WalkontableLeftOverlay = function WalkontableLeftOverlay(wotInstance) {
	  $traceurRuntime.superConstructor($WalkontableLeftOverlay).call(this, wotInstance);
	  this.clone = this.makeClone(WalkontableOverlay.CLONE_LEFT);
	};
	var $WalkontableLeftOverlay = WalkontableLeftOverlay;
	($traceurRuntime.createClass)(WalkontableLeftOverlay, {
	  shouldBeRendered: function() {
	    return this.wot.getSetting('fixedColumnsLeft') || this.wot.getSetting('rowHeaders').length ? true : false;
	  },
	  resetFixedPosition: function() {
	    if (!this.needFullRender || !this.wot.wtTable.holder.parentNode) {
	      return;
	    }
	    var overlayRoot = this.clone.wtTable.holder.parentNode;
	    var headerPosition = 0;
	    if (this.trimmingContainer === window) {
	      var box = this.wot.wtTable.hider.getBoundingClientRect();
	      var left = Math.ceil(box.left);
	      var right = Math.ceil(box.right);
	      var finalLeft;
	      var finalTop;
	      finalTop = this.wot.wtTable.hider.style.top;
	      finalTop = finalTop === '' ? 0 : finalTop;
	      if (left < 0 && (right - overlayRoot.offsetWidth) > 0) {
	        finalLeft = -left;
	      } else {
	        finalLeft = 0;
	      }
	      headerPosition = finalLeft;
	      finalLeft = finalLeft + 'px';
	      setOverlayPosition(overlayRoot, finalLeft, finalTop);
	    } else {
	      headerPosition = this.getScrollPosition();
	    }
	    this.adjustHeaderBordersPosition(headerPosition);
	    this.adjustElementsSize();
	  },
	  setScrollPosition: function(pos) {
	    if (this.mainTableScrollableElement === window) {
	      window.scrollTo(pos, getWindowScrollTop());
	    } else {
	      this.mainTableScrollableElement.scrollLeft = pos;
	    }
	  },
	  onScroll: function() {
	    this.wot.getSetting('onScrollHorizontally');
	  },
	  sumCellSizes: function(from, to) {
	    var sum = 0;
	    var defaultColumnWidth = this.wot.wtSettings.defaultColumnWidth;
	    while (from < to) {
	      sum += this.wot.wtTable.getStretchedColumnWidth(from) || defaultColumnWidth;
	      from++;
	    }
	    return sum;
	  },
	  adjustElementsSize: function() {
	    var force = arguments[0] !== (void 0) ? arguments[0] : false;
	    if (this.needFullRender || force) {
	      this.adjustRootElementSize();
	      this.adjustRootChildrenSize();
	      if (!force) {
	        this.areElementSizesAdjusted = true;
	      }
	    }
	  },
	  adjustRootElementSize: function() {
	    var masterHolder = this.wot.wtTable.holder;
	    var scrollbarHeight = masterHolder.clientHeight === masterHolder.offsetHeight ? 0 : getScrollbarWidth();
	    var overlayRoot = this.clone.wtTable.holder.parentNode;
	    var overlayRootStyle = overlayRoot.style;
	    var tableWidth;
	    if (this.trimmingContainer !== window) {
	      overlayRootStyle.height = this.wot.wtViewport.getWorkspaceHeight() - scrollbarHeight + 'px';
	    }
	    this.clone.wtTable.holder.style.height = overlayRootStyle.height;
	    tableWidth = outerWidth(this.clone.wtTable.TABLE);
	    overlayRootStyle.width = (tableWidth === 0 ? tableWidth : tableWidth + 4) + 'px';
	  },
	  adjustRootChildrenSize: function() {
	    var scrollbarWidth = getScrollbarWidth();
	    this.clone.wtTable.hider.style.height = this.hider.style.height;
	    this.clone.wtTable.holder.style.height = this.clone.wtTable.holder.parentNode.style.height;
	    if (scrollbarWidth === 0) {
	      scrollbarWidth = 30;
	    }
	    this.clone.wtTable.holder.style.width = parseInt(this.clone.wtTable.holder.parentNode.style.width, 10) + scrollbarWidth + 'px';
	  },
	  applyToDOM: function() {
	    var total = this.wot.getSetting('totalColumns');
	    if (!this.areElementSizesAdjusted) {
	      this.adjustElementsSize();
	    }
	    if (typeof this.wot.wtViewport.columnsRenderCalculator.startPosition === 'number') {
	      this.spreader.style.left = this.wot.wtViewport.columnsRenderCalculator.startPosition + 'px';
	    } else if (total === 0) {
	      this.spreader.style.left = '0';
	    } else {
	      throw new Error('Incorrect value of the columnsRenderCalculator');
	    }
	    this.spreader.style.right = '';
	    if (this.needFullRender) {
	      this.syncOverlayOffset();
	    }
	  },
	  syncOverlayOffset: function() {
	    if (typeof this.wot.wtViewport.rowsRenderCalculator.startPosition === 'number') {
	      this.clone.wtTable.spreader.style.top = this.wot.wtViewport.rowsRenderCalculator.startPosition + 'px';
	    } else {
	      this.clone.wtTable.spreader.style.top = '';
	    }
	  },
	  scrollTo: function(sourceCol, beyondRendered) {
	    var newX = this.getTableParentOffset();
	    var sourceInstance = this.wot.cloneSource ? this.wot.cloneSource : this.wot;
	    var mainHolder = sourceInstance.wtTable.holder;
	    var scrollbarCompensation = 0;
	    if (beyondRendered && mainHolder.offsetWidth !== mainHolder.clientWidth) {
	      scrollbarCompensation = getScrollbarWidth();
	    }
	    if (beyondRendered) {
	      newX += this.sumCellSizes(0, sourceCol + 1);
	      newX -= this.wot.wtViewport.getViewportWidth();
	    } else {
	      newX += this.sumCellSizes(this.wot.getSetting('fixedColumnsLeft'), sourceCol);
	    }
	    newX += scrollbarCompensation;
	    this.setScrollPosition(newX);
	  },
	  getTableParentOffset: function() {
	    if (this.trimmingContainer === window) {
	      return this.wot.wtTable.holderOffset.left;
	    } else {
	      return 0;
	    }
	  },
	  getScrollPosition: function() {
	    return getScrollLeft(this.mainTableScrollableElement);
	  },
	  adjustHeaderBordersPosition: function(position) {
	    var masterParent = this.wot.wtTable.holder.parentNode;
	    var rowHeaders = this.wot.getSetting('rowHeaders');
	    var fixedColumnsLeft = this.wot.getSetting('fixedColumnsLeft');
	    if (fixedColumnsLeft && !rowHeaders.length) {
	      addClass(masterParent, 'innerBorderLeft');
	    } else if (!fixedColumnsLeft && rowHeaders.length) {
	      var previousState = hasClass(masterParent, 'innerBorderLeft');
	      if (position) {
	        addClass(masterParent, 'innerBorderLeft');
	      } else {
	        removeClass(masterParent, 'innerBorderLeft');
	      }
	      if (!previousState && position || previousState && !position) {
	        this.wot.wtOverlays.adjustElementsSize();
	      }
	    }
	  }
	}, {}, WalkontableOverlay);
	;
	window.WalkontableLeftOverlay = WalkontableLeftOverlay;
	WalkontableOverlay.registerOverlay(WalkontableOverlay.CLONE_LEFT, WalkontableLeftOverlay);

	//# 
	},{"_base":11,"helpers/dom/element":44}],14:[function(require,module,exports){
	"use strict";
	Object.defineProperties(exports, {
	  WalkontableTopOverlay: {get: function() {
	      return WalkontableTopOverlay;
	    }},
	  __esModule: {value: true}
	});
	var $___46__46__47__46__46__47__46__46__47__46__46__47_helpers_47_dom_47_element__,
	    $___95_base__;
	var $__0 = ($___46__46__47__46__46__47__46__46__47__46__46__47_helpers_47_dom_47_element__ = require("helpers/dom/element"), $___46__46__47__46__46__47__46__46__47__46__46__47_helpers_47_dom_47_element__ && $___46__46__47__46__46__47__46__46__47__46__46__47_helpers_47_dom_47_element__.__esModule && $___46__46__47__46__46__47__46__46__47__46__46__47_helpers_47_dom_47_element__ || {default: $___46__46__47__46__46__47__46__46__47__46__46__47_helpers_47_dom_47_element__}),
	    addClass = $__0.addClass,
	    getScrollbarWidth = $__0.getScrollbarWidth,
	    getScrollTop = $__0.getScrollTop,
	    getWindowScrollLeft = $__0.getWindowScrollLeft,
	    hasClass = $__0.hasClass,
	    outerHeight = $__0.outerHeight,
	    removeClass = $__0.removeClass,
	    setOverlayPosition = $__0.setOverlayPosition;
	var WalkontableOverlay = ($___95_base__ = require("_base"), $___95_base__ && $___95_base__.__esModule && $___95_base__ || {default: $___95_base__}).WalkontableOverlay;
	var WalkontableTopOverlay = function WalkontableTopOverlay(wotInstance) {
	  $traceurRuntime.superConstructor($WalkontableTopOverlay).call(this, wotInstance);
	  this.clone = this.makeClone(WalkontableOverlay.CLONE_TOP);
	};
	var $WalkontableTopOverlay = WalkontableTopOverlay;
	($traceurRuntime.createClass)(WalkontableTopOverlay, {
	  shouldBeRendered: function() {
	    return this.wot.getSetting('fixedRowsTop') || this.wot.getSetting('columnHeaders').length ? true : false;
	  },
	  resetFixedPosition: function() {
	    if (!this.needFullRender || !this.wot.wtTable.holder.parentNode) {
	      return;
	    }
	    var overlayRoot = this.clone.wtTable.holder.parentNode;
	    var headerPosition = 0;
	    if (this.wot.wtOverlays.leftOverlay.trimmingContainer === window) {
	      var box = this.wot.wtTable.hider.getBoundingClientRect();
	      var top = Math.ceil(box.top);
	      var bottom = Math.ceil(box.bottom);
	      var finalLeft;
	      var finalTop;
	      finalLeft = this.wot.wtTable.hider.style.left;
	      finalLeft = finalLeft === '' ? 0 : finalLeft;
	      if (top < 0 && (bottom - overlayRoot.offsetHeight) > 0) {
	        finalTop = -top;
	      } else {
	        finalTop = 0;
	      }
	      headerPosition = finalTop;
	      finalTop = finalTop + 'px';
	      setOverlayPosition(overlayRoot, finalLeft, finalTop);
	    } else {
	      headerPosition = this.getScrollPosition();
	    }
	    this.adjustHeaderBordersPosition(headerPosition);
	    this.adjustElementsSize();
	  },
	  setScrollPosition: function(pos) {
	    if (this.mainTableScrollableElement === window) {
	      window.scrollTo(getWindowScrollLeft(), pos);
	    } else {
	      this.mainTableScrollableElement.scrollTop = pos;
	    }
	  },
	  onScroll: function() {
	    this.wot.getSetting('onScrollVertically');
	  },
	  sumCellSizes: function(from, to) {
	    var sum = 0;
	    var defaultRowHeight = this.wot.wtSettings.settings.defaultRowHeight;
	    while (from < to) {
	      sum += this.wot.wtTable.getRowHeight(from) || defaultRowHeight;
	      from++;
	    }
	    return sum;
	  },
	  adjustElementsSize: function() {
	    var force = arguments[0] !== (void 0) ? arguments[0] : false;
	    if (this.needFullRender || force) {
	      this.adjustRootElementSize();
	      this.adjustRootChildrenSize();
	      if (!force) {
	        this.areElementSizesAdjusted = true;
	      }
	    }
	  },
	  adjustRootElementSize: function() {
	    var masterHolder = this.wot.wtTable.holder;
	    var scrollbarWidth = masterHolder.clientWidth === masterHolder.offsetWidth ? 0 : getScrollbarWidth();
	    var overlayRoot = this.clone.wtTable.holder.parentNode;
	    var overlayRootStyle = overlayRoot.style;
	    var tableHeight;
	    if (this.trimmingContainer !== window) {
	      overlayRootStyle.width = this.wot.wtViewport.getWorkspaceWidth() - scrollbarWidth + 'px';
	    }
	    this.clone.wtTable.holder.style.width = overlayRootStyle.width;
	    tableHeight = outerHeight(this.clone.wtTable.TABLE);
	    overlayRootStyle.height = (tableHeight === 0 ? tableHeight : tableHeight + 4) + 'px';
	  },
	  adjustRootChildrenSize: function() {
	    var scrollbarWidth = getScrollbarWidth();
	    this.clone.wtTable.hider.style.width = this.hider.style.width;
	    this.clone.wtTable.holder.style.width = this.clone.wtTable.holder.parentNode.style.width;
	    if (scrollbarWidth === 0) {
	      scrollbarWidth = 30;
	    }
	    this.clone.wtTable.holder.style.height = parseInt(this.clone.wtTable.holder.parentNode.style.height, 10) + scrollbarWidth + 'px';
	  },
	  applyToDOM: function() {
	    var total = this.wot.getSetting('totalRows');
	    if (!this.areElementSizesAdjusted) {
	      this.adjustElementsSize();
	    }
	    if (typeof this.wot.wtViewport.rowsRenderCalculator.startPosition === 'number') {
	      this.spreader.style.top = this.wot.wtViewport.rowsRenderCalculator.startPosition + 'px';
	    } else if (total === 0) {
	      this.spreader.style.top = '0';
	    } else {
	      throw new Error('Incorrect value of the rowsRenderCalculator');
	    }
	    this.spreader.style.bottom = '';
	    if (this.needFullRender) {
	      this.syncOverlayOffset();
	    }
	  },
	  syncOverlayOffset: function() {
	    if (typeof this.wot.wtViewport.columnsRenderCalculator.startPosition === 'number') {
	      this.clone.wtTable.spreader.style.left = this.wot.wtViewport.columnsRenderCalculator.startPosition + 'px';
	    } else {
	      this.clone.wtTable.spreader.style.left = '';
	    }
	  },
	  scrollTo: function(sourceRow, bottomEdge) {
	    var newY = this.getTableParentOffset();
	    var sourceInstance = this.wot.cloneSource ? this.wot.cloneSource : this.wot;
	    var mainHolder = sourceInstance.wtTable.holder;
	    var scrollbarCompensation = 0;
	    if (bottomEdge && mainHolder.offsetHeight !== mainHolder.clientHeight) {
	      scrollbarCompensation = getScrollbarWidth();
	    }
	    if (bottomEdge) {
	      var fixedRowsBottom = this.wot.getSetting('fixedRowsBottom');
	      var fixedRowsTop = this.wot.getSetting('fixedRowsTop');
	      var totalRows = this.wot.getSetting('totalRows');
	      newY += this.sumCellSizes(0, sourceRow + 1);
	      newY -= this.wot.wtViewport.getViewportHeight() - this.sumCellSizes(totalRows - fixedRowsBottom, totalRows);
	      newY += 1;
	    } else {
	      newY += this.sumCellSizes(this.wot.getSetting('fixedRowsTop'), sourceRow);
	    }
	    newY += scrollbarCompensation;
	    this.setScrollPosition(newY);
	  },
	  getTableParentOffset: function() {
	    if (this.mainTableScrollableElement === window) {
	      return this.wot.wtTable.holderOffset.top;
	    } else {
	      return 0;
	    }
	  },
	  getScrollPosition: function() {
	    return getScrollTop(this.mainTableScrollableElement);
	  },
	  adjustHeaderBordersPosition: function(position) {
	    if (this.wot.getSetting('fixedRowsTop') === 0 && this.wot.getSetting('columnHeaders').length > 0) {
	      var masterParent = this.wot.wtTable.holder.parentNode;
	      var previousState = hasClass(masterParent, 'innerBorderTop');
	      if (position) {
	        addClass(masterParent, 'innerBorderTop');
	      } else {
	        removeClass(masterParent, 'innerBorderTop');
	      }
	      if (!previousState && position || previousState && !position) {
	        this.wot.wtOverlays.adjustElementsSize();
	      }
	    }
	    if (this.wot.getSetting('rowHeaders').length === 0) {
	      var secondHeaderCell = this.clone.wtTable.THEAD.querySelectorAll('th:nth-of-type(2)');
	      if (secondHeaderCell) {
	        for (var i = 0; i < secondHeaderCell.length; i++) {
	          secondHeaderCell[i].style['border-left-width'] = 0;
	        }
	      }
	    }
	  }
	}, {}, WalkontableOverlay);
	;
	window.WalkontableTopOverlay = WalkontableTopOverlay;
	WalkontableOverlay.registerOverlay(WalkontableOverlay.CLONE_TOP, WalkontableTopOverlay);

	//# 
	},{"_base":11,"helpers/dom/element":44}],15:[function(require,module,exports){
	"use strict";
	Object.defineProperties(exports, {
	  WalkontableTopLeftCornerOverlay: {get: function() {
	      return WalkontableTopLeftCornerOverlay;
	    }},
	  __esModule: {value: true}
	});
	var $___46__46__47__46__46__47__46__46__47__46__46__47_helpers_47_dom_47_element__,
	    $___95_base__;
	var $__0 = ($___46__46__47__46__46__47__46__46__47__46__46__47_helpers_47_dom_47_element__ = require("helpers/dom/element"), $___46__46__47__46__46__47__46__46__47__46__46__47_helpers_47_dom_47_element__ && $___46__46__47__46__46__47__46__46__47__46__46__47_helpers_47_dom_47_element__.__esModule && $___46__46__47__46__46__47__46__46__47__46__46__47_helpers_47_dom_47_element__ || {default: $___46__46__47__46__46__47__46__46__47__46__46__47_helpers_47_dom_47_element__}),
	    outerHeight = $__0.outerHeight,
	    outerWidth = $__0.outerWidth,
	    setOverlayPosition = $__0.setOverlayPosition;
	var WalkontableOverlay = ($___95_base__ = require("_base"), $___95_base__ && $___95_base__.__esModule && $___95_base__ || {default: $___95_base__}).WalkontableOverlay;
	var WalkontableTopLeftCornerOverlay = function WalkontableTopLeftCornerOverlay(wotInstance) {
	  $traceurRuntime.superConstructor($WalkontableTopLeftCornerOverlay).call(this, wotInstance);
	  this.clone = this.makeClone(WalkontableOverlay.CLONE_TOP_LEFT_CORNER);
	};
	var $WalkontableTopLeftCornerOverlay = WalkontableTopLeftCornerOverlay;
	($traceurRuntime.createClass)(WalkontableTopLeftCornerOverlay, {
	  shouldBeRendered: function() {
	    return (this.wot.getSetting('fixedRowsTop') || this.wot.getSetting('columnHeaders').length) && (this.wot.getSetting('fixedColumnsLeft') || this.wot.getSetting('rowHeaders').length) ? true : false;
	  },
	  resetFixedPosition: function() {
	    if (!this.wot.wtTable.holder.parentNode) {
	      return;
	    }
	    var overlayRoot = this.clone.wtTable.holder.parentNode;
	    var tableHeight = outerHeight(this.clone.wtTable.TABLE);
	    var tableWidth = outerWidth(this.clone.wtTable.TABLE);
	    if (this.trimmingContainer === window) {
	      var box = this.wot.wtTable.hider.getBoundingClientRect();
	      var top = Math.ceil(box.top);
	      var left = Math.ceil(box.left);
	      var bottom = Math.ceil(box.bottom);
	      var right = Math.ceil(box.right);
	      var finalLeft;
	      var finalTop;
	      if (left < 0 && (right - overlayRoot.offsetWidth) > 0) {
	        finalLeft = -left + 'px';
	      } else {
	        finalLeft = '0';
	      }
	      if (top < 0 && (bottom - overlayRoot.offsetHeight) > 0) {
	        finalTop = -top + 'px';
	      } else {
	        finalTop = '0';
	      }
	      setOverlayPosition(overlayRoot, finalLeft, finalTop);
	    }
	    overlayRoot.style.height = (tableHeight === 0 ? tableHeight : tableHeight + 4) + 'px';
	    overlayRoot.style.width = (tableWidth === 0 ? tableWidth : tableWidth + 4) + 'px';
	  }
	}, {}, WalkontableOverlay);
	;
	window.WalkontableTopLeftCornerOverlay = WalkontableTopLeftCornerOverlay;
	WalkontableOverlay.registerOverlay(WalkontableOverlay.CLONE_TOP_LEFT_CORNER, WalkontableTopLeftCornerOverlay);

	//# 
	},{"_base":11,"helpers/dom/element":44}],16:[function(require,module,exports){
	"use strict";
	Object.defineProperties(exports, {
	  WalkontableOverlays: {get: function() {
	      return WalkontableOverlays;
	    }},
	  __esModule: {value: true}
	});
	var $___46__46__47__46__46__47__46__46__47_helpers_47_dom_47_element__,
	    $___46__46__47__46__46__47__46__46__47_helpers_47_unicode__,
	    $___46__46__47__46__46__47__46__46__47_eventManager__;
	var $__0 = ($___46__46__47__46__46__47__46__46__47_helpers_47_dom_47_element__ = require("helpers/dom/element"), $___46__46__47__46__46__47__46__46__47_helpers_47_dom_47_element__ && $___46__46__47__46__46__47__46__46__47_helpers_47_dom_47_element__.__esModule && $___46__46__47__46__46__47__46__46__47_helpers_47_dom_47_element__ || {default: $___46__46__47__46__46__47__46__46__47_helpers_47_dom_47_element__}),
	    getScrollableElement = $__0.getScrollableElement,
	    getScrollbarWidth = $__0.getScrollbarWidth,
	    getScrollLeft = $__0.getScrollLeft,
	    getScrollTop = $__0.getScrollTop;
	var isKey = ($___46__46__47__46__46__47__46__46__47_helpers_47_unicode__ = require("helpers/unicode"), $___46__46__47__46__46__47__46__46__47_helpers_47_unicode__ && $___46__46__47__46__46__47__46__46__47_helpers_47_unicode__.__esModule && $___46__46__47__46__46__47__46__46__47_helpers_47_unicode__ || {default: $___46__46__47__46__46__47__46__46__47_helpers_47_unicode__}).isKey;
	var EventManager = ($___46__46__47__46__46__47__46__46__47_eventManager__ = require("eventManager"), $___46__46__47__46__46__47__46__46__47_eventManager__ && $___46__46__47__46__46__47__46__46__47_eventManager__.__esModule && $___46__46__47__46__46__47__46__46__47_eventManager__ || {default: $___46__46__47__46__46__47__46__46__47_eventManager__}).EventManager;
	var WalkontableOverlays = function WalkontableOverlays(wotInstance) {
	  this.wot = wotInstance;
	  this.instance = this.wot;
	  this.eventManager = new EventManager(this.wot);
	  this.wot.update('scrollbarWidth', getScrollbarWidth());
	  this.wot.update('scrollbarHeight', getScrollbarWidth());
	  this.mainTableScrollableElement = getScrollableElement(this.wot.wtTable.TABLE);
	  this.topOverlay = WalkontableOverlay.createOverlay(WalkontableOverlay.CLONE_TOP, this.wot);
	  if (typeof WalkontableBottomOverlay === 'undefined') {
	    this.bottomOverlay = {needFullRender: false};
	  } else {
	    this.bottomOverlay = WalkontableOverlay.createOverlay(WalkontableOverlay.CLONE_BOTTOM, this.wot);
	  }
	  this.leftOverlay = WalkontableOverlay.createOverlay(WalkontableOverlay.CLONE_LEFT, this.wot);
	  if (this.topOverlay.needFullRender && this.leftOverlay.needFullRender) {
	    this.topLeftCornerOverlay = WalkontableOverlay.createOverlay(WalkontableOverlay.CLONE_TOP_LEFT_CORNER, this.wot);
	  }
	  if (this.bottomOverlay.needFullRender && this.leftOverlay.needFullRender && typeof WalkontableBottomLeftCornerOverlay !== 'undefined') {
	    this.bottomLeftCornerOverlay = WalkontableOverlay.createOverlay(WalkontableOverlay.CLONE_BOTTOM_LEFT_CORNER, this.wot);
	  } else {
	    this.bottomLeftCornerOverlay = {needFullRender: false};
	  }
	  if (this.wot.getSetting('debug')) {
	    this.debug = WalkontableOverlay.createOverlay(WalkontableOverlay.CLONE_DEBUG, this.wot);
	  }
	  this.destroyed = false;
	  this.keyPressed = false;
	  this.spreaderLastSize = {
	    width: null,
	    height: null
	  };
	  this.overlayScrollPositions = {
	    master: {
	      top: 0,
	      left: 0
	    },
	    top: {
	      top: null,
	      left: 0
	    },
	    bottom: {
	      top: null,
	      left: 0
	    },
	    left: {
	      top: 0,
	      left: null
	    }
	  };
	  this.registerListeners();
	};
	($traceurRuntime.createClass)(WalkontableOverlays, {
	  refreshAll: function() {
	    if (!this.wot.drawn) {
	      return;
	    }
	    if (!this.wot.wtTable.holder.parentNode) {
	      this.destroy();
	      return;
	    }
	    this.wot.draw(true);
	    this.topOverlay.onScroll();
	    this.leftOverlay.onScroll();
	  },
	  registerListeners: function() {
	    var $__3 = this;
	    this.eventManager.addEventListener(document.documentElement, 'keydown', (function(event) {
	      return $__3.onKeyDown(event);
	    }));
	    this.eventManager.addEventListener(document.documentElement, 'keyup', (function() {
	      return $__3.onKeyUp();
	    }));
	    this.eventManager.addEventListener(document, 'visibilitychange', (function() {
	      return $__3.onKeyUp();
	    }));
	    this.eventManager.addEventListener(this.mainTableScrollableElement, 'scroll', (function(event) {
	      return $__3.onTableScroll(event);
	    }));
	    if (this.topOverlay.needFullRender) {
	      this.eventManager.addEventListener(this.topOverlay.clone.wtTable.holder, 'scroll', (function(event) {
	        return $__3.onTableScroll(event);
	      }));
	      this.eventManager.addEventListener(this.topOverlay.clone.wtTable.holder, 'wheel', (function(event) {
	        return $__3.onTableScroll(event);
	      }));
	    }
	    if (this.bottomOverlay.needFullRender) {
	      this.eventManager.addEventListener(this.bottomOverlay.clone.wtTable.holder, 'scroll', (function(event) {
	        return $__3.onTableScroll(event);
	      }));
	      this.eventManager.addEventListener(this.bottomOverlay.clone.wtTable.holder, 'wheel', (function(event) {
	        return $__3.onTableScroll(event);
	      }));
	    }
	    if (this.leftOverlay.needFullRender) {
	      this.eventManager.addEventListener(this.leftOverlay.clone.wtTable.holder, 'scroll', (function(event) {
	        return $__3.onTableScroll(event);
	      }));
	      this.eventManager.addEventListener(this.leftOverlay.clone.wtTable.holder, 'wheel', (function(event) {
	        return $__3.onTableScroll(event);
	      }));
	    }
	    if (this.topOverlay.trimmingContainer !== window && this.leftOverlay.trimmingContainer !== window) {
	      this.eventManager.addEventListener(window, 'wheel', (function(event) {
	        var overlay;
	        var deltaY = event.wheelDeltaY || event.deltaY;
	        var deltaX = event.wheelDeltaX || event.deltaX;
	        if ($__3.topOverlay.clone.wtTable.holder.contains(event.realTarget)) {
	          overlay = 'top';
	        } else if ($__3.bottomOverlay.clone && $__3.bottomOverlay.clone.wtTable.holder.contains(event.realTarget)) {
	          overlay = 'bottom';
	        } else if ($__3.leftOverlay.clone.wtTable.holder.contains(event.realTarget)) {
	          overlay = 'left';
	        }
	        if (overlay == 'top' && deltaY !== 0) {
	          event.preventDefault();
	        } else if (overlay == 'left' && deltaX !== 0) {
	          event.preventDefault();
	        } else if (overlay == 'bottom' && deltaY !== 0) {
	          event.preventDefault();
	        }
	      }));
	    }
	  },
	  onTableScroll: function(event) {
	    if (Handsontable.mobileBrowser) {
	      return;
	    }
	    if (this.keyPressed && this.mainTableScrollableElement !== window && !event.target.contains(this.mainTableScrollableElement)) {
	      return;
	    }
	    if (event.type === 'scroll') {
	      this.syncScrollPositions(event);
	    } else {
	      this.translateMouseWheelToScroll(event);
	    }
	  },
	  onKeyDown: function(event) {
	    this.keyPressed = isKey(event.keyCode, 'ARROW_UP|ARROW_RIGHT|ARROW_DOWN|ARROW_LEFT');
	  },
	  onKeyUp: function() {
	    this.keyPressed = false;
	  },
	  translateMouseWheelToScroll: function(event) {
	    var topOverlay = this.topOverlay.clone.wtTable.holder;
	    var bottomOverlay = this.bottomOverlay.clone ? this.bottomOverlay.clone.wtTable.holder : null;
	    var leftOverlay = this.leftOverlay.clone.wtTable.holder;
	    var eventMockup = {type: 'wheel'};
	    var tempElem = event.target;
	    var deltaY = event.wheelDeltaY || (-1) * event.deltaY;
	    var deltaX = event.wheelDeltaX || (-1) * event.deltaX;
	    var parentHolder;
	    while (tempElem != document && tempElem != null) {
	      if (tempElem.className.indexOf('wtHolder') > -1) {
	        parentHolder = tempElem;
	        break;
	      }
	      tempElem = tempElem.parentNode;
	    }
	    eventMockup.target = parentHolder;
	    if (parentHolder == topOverlay) {
	      this.syncScrollPositions(eventMockup, (-0.2) * deltaY);
	    } else if (parentHolder == bottomOverlay) {
	      this.syncScrollPositions(eventMockup, (-0.2) * deltaY);
	    } else if (parentHolder == leftOverlay) {
	      this.syncScrollPositions(eventMockup, (-0.2) * deltaX);
	    }
	    return false;
	  },
	  syncScrollPositions: function(event) {
	    var fakeScrollValue = arguments[1] !== (void 0) ? arguments[1] : null;
	    if (this.destroyed) {
	      return;
	    }
	    if (arguments.length === 0) {
	      this.syncScrollWithMaster();
	      return;
	    }
	    var master = this.mainTableScrollableElement;
	    var target = event.target;
	    var tempScrollValue = 0;
	    var scrollValueChanged = false;
	    var topOverlay;
	    var leftOverlay;
	    var bottomOverlay;
	    if (this.topOverlay.needFullRender) {
	      topOverlay = this.topOverlay.clone.wtTable.holder;
	    }
	    if (this.bottomOverlay.needFullRender) {
	      bottomOverlay = this.bottomOverlay.clone.wtTable.holder;
	    }
	    if (this.leftOverlay.needFullRender) {
	      leftOverlay = this.leftOverlay.clone.wtTable.holder;
	    }
	    if (target === document) {
	      target = window;
	    }
	    if (target === master) {
	      tempScrollValue = getScrollLeft(target);
	      if (this.overlayScrollPositions.master.left !== tempScrollValue) {
	        this.overlayScrollPositions.master.left = tempScrollValue;
	        scrollValueChanged = true;
	        if (topOverlay) {
	          topOverlay.scrollLeft = tempScrollValue;
	        }
	        if (bottomOverlay) {
	          bottomOverlay.scrollLeft = tempScrollValue;
	        }
	      }
	      tempScrollValue = getScrollTop(target);
	      if (this.overlayScrollPositions.master.top !== tempScrollValue) {
	        this.overlayScrollPositions.master.top = tempScrollValue;
	        scrollValueChanged = true;
	        if (leftOverlay) {
	          leftOverlay.scrollTop = tempScrollValue;
	        }
	      }
	    } else if (target === bottomOverlay) {
	      tempScrollValue = getScrollLeft(target);
	      if (this.overlayScrollPositions.bottom.left !== tempScrollValue) {
	        this.overlayScrollPositions.bottom.left = tempScrollValue;
	        scrollValueChanged = true;
	        master.scrollLeft = tempScrollValue;
	      }
	      if (fakeScrollValue !== null) {
	        scrollValueChanged = true;
	        master.scrollTop += fakeScrollValue;
	      }
	    } else if (target === topOverlay) {
	      tempScrollValue = getScrollLeft(target);
	      if (this.overlayScrollPositions.top.left !== tempScrollValue) {
	        this.overlayScrollPositions.top.left = tempScrollValue;
	        scrollValueChanged = true;
	        master.scrollLeft = tempScrollValue;
	      }
	      if (fakeScrollValue !== null) {
	        scrollValueChanged = true;
	        master.scrollTop += fakeScrollValue;
	      }
	    } else if (target === leftOverlay) {
	      tempScrollValue = getScrollTop(target);
	      if (this.overlayScrollPositions.left.top !== tempScrollValue) {
	        this.overlayScrollPositions.left.top = tempScrollValue;
	        scrollValueChanged = true;
	        master.scrollTop = tempScrollValue;
	      }
	      if (fakeScrollValue !== null) {
	        scrollValueChanged = true;
	        master.scrollLeft += fakeScrollValue;
	      }
	    }
	    if (!this.keyPressed && scrollValueChanged && event.type === 'scroll') {
	      this.refreshAll();
	    }
	  },
	  syncScrollWithMaster: function() {
	    var master = this.topOverlay.mainTableScrollableElement;
	    if (this.topOverlay.needFullRender) {
	      this.topOverlay.clone.wtTable.holder.scrollLeft = master.scrollLeft;
	    }
	    if (this.leftOverlay.needFullRender) {
	      this.leftOverlay.clone.wtTable.holder.scrollTop = master.scrollTop;
	    }
	  },
	  destroy: function() {
	    this.eventManager.destroy();
	    this.topOverlay.destroy();
	    if (this.bottomOverlay.clone) {
	      this.bottomOverlay.destroy();
	    }
	    this.leftOverlay.destroy();
	    if (this.topLeftCornerOverlay) {
	      this.topLeftCornerOverlay.destroy();
	    }
	    if (this.bottomLeftCornerOverlay && this.bottomLeftCornerOverlay.clone) {
	      this.bottomLeftCornerOverlay.destroy();
	    }
	    if (this.debug) {
	      this.debug.destroy();
	    }
	    this.destroyed = true;
	  },
	  refresh: function() {
	    var fastDraw = arguments[0] !== (void 0) ? arguments[0] : false;
	    if (this.topOverlay.areElementSizesAdjusted && this.leftOverlay.areElementSizesAdjusted) {
	      var container = this.wot.wtTable.wtRootElement.parentNode || this.wot.wtTable.wtRootElement;
	      var width = container.clientWidth;
	      var height = container.clientHeight;
	      if (width !== this.spreaderLastSize.width || height !== this.spreaderLastSize.height) {
	        this.spreaderLastSize.width = width;
	        this.spreaderLastSize.height = height;
	        this.adjustElementsSize();
	      }
	    }
	    if (this.bottomOverlay.clone) {
	      this.bottomOverlay.refresh(fastDraw);
	    }
	    this.leftOverlay.refresh(fastDraw);
	    this.topOverlay.refresh(fastDraw);
	    if (this.topLeftCornerOverlay) {
	      this.topLeftCornerOverlay.refresh(fastDraw);
	    }
	    if (this.bottomLeftCornerOverlay && this.bottomLeftCornerOverlay.clone) {
	      this.bottomLeftCornerOverlay.refresh(fastDraw);
	    }
	    if (this.debug) {
	      this.debug.refresh(fastDraw);
	    }
	  },
	  adjustElementsSize: function() {
	    var force = arguments[0] !== (void 0) ? arguments[0] : false;
	    var totalColumns = this.wot.getSetting('totalColumns');
	    var totalRows = this.wot.getSetting('totalRows');
	    var headerRowSize = this.wot.wtViewport.getRowHeaderWidth();
	    var headerColumnSize = this.wot.wtViewport.getColumnHeaderHeight();
	    var hiderStyle = this.wot.wtTable.hider.style;
	    hiderStyle.width = (headerRowSize + this.leftOverlay.sumCellSizes(0, totalColumns)) + 'px';
	    hiderStyle.height = (headerColumnSize + this.topOverlay.sumCellSizes(0, totalRows) + 1) + 'px';
	    this.topOverlay.adjustElementsSize(force);
	    this.leftOverlay.adjustElementsSize(force);
	    if (this.bottomOverlay.clone) {
	      this.bottomOverlay.adjustElementsSize(force);
	    }
	  },
	  applyToDOM: function() {
	    if (!this.topOverlay.areElementSizesAdjusted || !this.leftOverlay.areElementSizesAdjusted) {
	      this.adjustElementsSize();
	    }
	    this.topOverlay.applyToDOM();
	    if (this.bottomOverlay.clone) {
	      this.bottomOverlay.applyToDOM();
	    }
	    this.leftOverlay.applyToDOM();
	  }
	}, {});
	;
	window.WalkontableOverlays = WalkontableOverlays;

	//# 
	},{"eventManager":40,"helpers/dom/element":44,"helpers/unicode":52}],17:[function(require,module,exports){
	"use strict";
	Object.defineProperties(exports, {
	  WalkontableScroll: {get: function() {
	      return WalkontableScroll;
	    }},
	  __esModule: {value: true}
	});
	var WalkontableScroll = function WalkontableScroll(wotInstance) {
	  this.wot = wotInstance;
	  this.instance = wotInstance;
	};
	($traceurRuntime.createClass)(WalkontableScroll, {scrollViewport: function(coords) {
	    if (!this.wot.drawn) {
	      return;
	    }
	    var totalRows = this.wot.getSetting('totalRows');
	    var totalColumns = this.wot.getSetting('totalColumns');
	    var fixedRowsTop = this.instance.getSetting('fixedRowsTop');
	    var fixedRowsBottom = this.instance.getSetting('fixedRowsBottom');
	    var fixedColumnsLeft = this.instance.getSetting('fixedColumnsLeft');
	    if (coords.row < 0 || coords.row > totalRows - 1) {
	      throw new Error('row ' + coords.row + ' does not exist');
	    }
	    if (coords.col < 0 || coords.col > totalColumns - 1) {
	      throw new Error('column ' + coords.col + ' does not exist');
	    }
	    if (coords.row > this.instance.wtTable.getLastVisibleRow() && coords.row < totalRows - fixedRowsBottom) {
	      this.wot.wtOverlays.topOverlay.scrollTo(coords.row, true);
	    } else if (coords.row >= fixedRowsTop && coords.row < this.instance.wtTable.getFirstVisibleRow()) {
	      this.wot.wtOverlays.topOverlay.scrollTo(coords.row);
	    }
	    if (coords.col > this.instance.wtTable.getLastVisibleColumn()) {
	      this.wot.wtOverlays.leftOverlay.scrollTo(coords.col, true);
	    } else if (coords.col >= fixedColumnsLeft && coords.col < this.instance.wtTable.getFirstVisibleColumn()) {
	      this.wot.wtOverlays.leftOverlay.scrollTo(coords.col);
	    }
	  }}, {});
	;
	window.WalkontableScroll = WalkontableScroll;

	//# 
	},{}],18:[function(require,module,exports){
	"use strict";
	Object.defineProperties(exports, {
	  WalkontableSelection: {get: function() {
	      return WalkontableSelection;
	    }},
	  __esModule: {value: true}
	});
	var $___46__46__47__46__46__47__46__46__47_helpers_47_dom_47_element__,
	    $__border__,
	    $__cell_47_coords__,
	    $__cell_47_range__;
	var addClass = ($___46__46__47__46__46__47__46__46__47_helpers_47_dom_47_element__ = require("helpers/dom/element"), $___46__46__47__46__46__47__46__46__47_helpers_47_dom_47_element__ && $___46__46__47__46__46__47__46__46__47_helpers_47_dom_47_element__.__esModule && $___46__46__47__46__46__47__46__46__47_helpers_47_dom_47_element__ || {default: $___46__46__47__46__46__47__46__46__47_helpers_47_dom_47_element__}).addClass;
	var WalkontableBorder = ($__border__ = require("border"), $__border__ && $__border__.__esModule && $__border__ || {default: $__border__}).WalkontableBorder;
	var WalkontableCellCoords = ($__cell_47_coords__ = require("cell/coords"), $__cell_47_coords__ && $__cell_47_coords__.__esModule && $__cell_47_coords__ || {default: $__cell_47_coords__}).WalkontableCellCoords;
	var WalkontableCellRange = ($__cell_47_range__ = require("cell/range"), $__cell_47_range__ && $__cell_47_range__.__esModule && $__cell_47_range__ || {default: $__cell_47_range__}).WalkontableCellRange;
	var WalkontableSelection = function WalkontableSelection(settings, cellRange) {
	  this.settings = settings;
	  this.cellRange = cellRange || null;
	  this.instanceBorders = {};
	};
	($traceurRuntime.createClass)(WalkontableSelection, {
	  getBorder: function(wotInstance) {
	    if (this.instanceBorders[wotInstance.guid]) {
	      return this.instanceBorders[wotInstance.guid];
	    }
	    this.instanceBorders[wotInstance.guid] = new WalkontableBorder(wotInstance, this.settings);
	  },
	  isEmpty: function() {
	    return this.cellRange === null;
	  },
	  add: function(coords) {
	    if (this.isEmpty()) {
	      this.cellRange = new WalkontableCellRange(coords, coords, coords);
	    } else {
	      this.cellRange.expand(coords);
	    }
	  },
	  replace: function(oldCoords, newCoords) {
	    if (!this.isEmpty()) {
	      if (this.cellRange.from.isEqual(oldCoords)) {
	        this.cellRange.from = newCoords;
	        return true;
	      }
	      if (this.cellRange.to.isEqual(oldCoords)) {
	        this.cellRange.to = newCoords;
	        return true;
	      }
	    }
	    return false;
	  },
	  clear: function() {
	    this.cellRange = null;
	  },
	  getCorners: function() {
	    var topLeft = this.cellRange.getTopLeftCorner();
	    var bottomRight = this.cellRange.getBottomRightCorner();
	    return [topLeft.row, topLeft.col, bottomRight.row, bottomRight.col];
	  },
	  addClassAtCoords: function(wotInstance, sourceRow, sourceColumn, className) {
	    var TD = wotInstance.wtTable.getCell(new WalkontableCellCoords(sourceRow, sourceColumn));
	    if (typeof TD === 'object') {
	      addClass(TD, className);
	    }
	  },
	  draw: function(wotInstance) {
	    if (this.isEmpty()) {
	      if (this.settings.border) {
	        var border = this.getBorder(wotInstance);
	        if (border) {
	          border.disappear();
	        }
	      }
	      return;
	    }
	    var renderedRows = wotInstance.wtTable.getRenderedRowsCount();
	    var renderedColumns = wotInstance.wtTable.getRenderedColumnsCount();
	    var corners = this.getCorners();
	    var sourceRow,
	        sourceCol,
	        TH;
	    for (var column = 0; column < renderedColumns; column++) {
	      sourceCol = wotInstance.wtTable.columnFilter.renderedToSource(column);
	      if (sourceCol >= corners[1] && sourceCol <= corners[3]) {
	        TH = wotInstance.wtTable.getColumnHeader(sourceCol);
	        if (TH && this.settings.highlightColumnClassName) {
	          addClass(TH, this.settings.highlightColumnClassName);
	        }
	      }
	    }
	    for (var row = 0; row < renderedRows; row++) {
	      sourceRow = wotInstance.wtTable.rowFilter.renderedToSource(row);
	      if (sourceRow >= corners[0] && sourceRow <= corners[2]) {
	        TH = wotInstance.wtTable.getRowHeader(sourceRow);
	        if (TH && this.settings.highlightRowClassName) {
	          addClass(TH, this.settings.highlightRowClassName);
	        }
	      }
	      for (var column$__5 = 0; column$__5 < renderedColumns; column$__5++) {
	        sourceCol = wotInstance.wtTable.columnFilter.renderedToSource(column$__5);
	        if (sourceRow >= corners[0] && sourceRow <= corners[2] && sourceCol >= corners[1] && sourceCol <= corners[3]) {
	          if (this.settings.className) {
	            this.addClassAtCoords(wotInstance, sourceRow, sourceCol, this.settings.className);
	          }
	        } else if (sourceRow >= corners[0] && sourceRow <= corners[2]) {
	          if (this.settings.highlightRowClassName) {
	            this.addClassAtCoords(wotInstance, sourceRow, sourceCol, this.settings.highlightRowClassName);
	          }
	        } else if (sourceCol >= corners[1] && sourceCol <= corners[3]) {
	          if (this.settings.highlightColumnClassName) {
	            this.addClassAtCoords(wotInstance, sourceRow, sourceCol, this.settings.highlightColumnClassName);
	          }
	        }
	      }
	    }
	    wotInstance.getSetting('onBeforeDrawBorders', corners, this.settings.className);
	    if (this.settings.border) {
	      var border$__6 = this.getBorder(wotInstance);
	      if (border$__6) {
	        border$__6.appear(corners);
	      }
	    }
	  }
	}, {});
	;
	window.WalkontableSelection = WalkontableSelection;

	//# 
	},{"border":2,"cell/coords":5,"cell/range":6,"helpers/dom/element":44}],19:[function(require,module,exports){
	"use strict";
	Object.defineProperties(exports, {
	  WalkontableSettings: {get: function() {
	      return WalkontableSettings;
	    }},
	  __esModule: {value: true}
	});
	var $___46__46__47__46__46__47__46__46__47_helpers_47_dom_47_element__;
	var fastInnerText = ($___46__46__47__46__46__47__46__46__47_helpers_47_dom_47_element__ = require("helpers/dom/element"), $___46__46__47__46__46__47__46__46__47_helpers_47_dom_47_element__ && $___46__46__47__46__46__47__46__46__47_helpers_47_dom_47_element__.__esModule && $___46__46__47__46__46__47__46__46__47_helpers_47_dom_47_element__ || {default: $___46__46__47__46__46__47__46__46__47_helpers_47_dom_47_element__}).fastInnerText;
	var WalkontableSettings = function WalkontableSettings(wotInstance, settings) {
	  var $__1 = this;
	  this.wot = wotInstance;
	  this.instance = wotInstance;
	  this.defaults = {
	    table: void 0,
	    debug: false,
	    externalRowCalculator: false,
	    stretchH: 'none',
	    currentRowClassName: null,
	    currentColumnClassName: null,
	    data: void 0,
	    fixedColumnsLeft: 0,
	    fixedRowsTop: 0,
	    fixedRowsBottom: 0,
	    minSpareRows: 0,
	    rowHeaders: function() {
	      return [];
	    },
	    columnHeaders: function() {
	      return [];
	    },
	    totalRows: void 0,
	    totalColumns: void 0,
	    cellRenderer: (function(row, column, TD) {
	      var cellData = $__1.getSetting('data', row, column);
	      fastInnerText(TD, cellData === void 0 || cellData === null ? '' : cellData);
	    }),
	    columnWidth: function(col) {
	      return;
	    },
	    rowHeight: function(row) {
	      return;
	    },
	    defaultRowHeight: 23,
	    defaultColumnWidth: 50,
	    selections: null,
	    hideBorderOnMouseDownOver: false,
	    viewportRowCalculatorOverride: null,
	    viewportColumnCalculatorOverride: null,
	    onCellMouseDown: null,
	    onCellMouseOver: null,
	    onCellDblClick: null,
	    onCellCornerMouseDown: null,
	    onCellCornerDblClick: null,
	    beforeDraw: null,
	    onDraw: null,
	    onBeforeDrawBorders: null,
	    onScrollVertically: null,
	    onScrollHorizontally: null,
	    onBeforeTouchScroll: null,
	    onAfterMomentumScroll: null,
	    scrollbarWidth: 10,
	    scrollbarHeight: 10,
	    renderAllRows: false,
	    groups: false
	  };
	  this.settings = {};
	  for (var i in this.defaults) {
	    if (this.defaults.hasOwnProperty(i)) {
	      if (settings[i] !== void 0) {
	        this.settings[i] = settings[i];
	      } else if (this.defaults[i] === void 0) {
	        throw new Error('A required setting "' + i + '" was not provided');
	      } else {
	        this.settings[i] = this.defaults[i];
	      }
	    }
	  }
	};
	($traceurRuntime.createClass)(WalkontableSettings, {
	  update: function(settings, value) {
	    if (value === void 0) {
	      for (var i in settings) {
	        if (settings.hasOwnProperty(i)) {
	          this.settings[i] = settings[i];
	        }
	      }
	    } else {
	      this.settings[settings] = value;
	    }
	    return this.wot;
	  },
	  getSetting: function(key, param1, param2, param3, param4) {
	    if (typeof this.settings[key] === 'function') {
	      return this.settings[key](param1, param2, param3, param4);
	    } else if (param1 !== void 0 && Array.isArray(this.settings[key])) {
	      return this.settings[key][param1];
	    } else {
	      return this.settings[key];
	    }
	  },
	  has: function(key) {
	    return !!this.settings[key];
	  }
	}, {});
	;
	window.WalkontableSettings = WalkontableSettings;

	//# 
	},{"helpers/dom/element":44}],20:[function(require,module,exports){
	"use strict";
	Object.defineProperties(exports, {
	  WalkontableTable: {get: function() {
	      return WalkontableTable;
	    }},
	  __esModule: {value: true}
	});
	var $___46__46__47__46__46__47__46__46__47_helpers_47_dom_47_element__,
	    $__cell_47_coords__,
	    $__cell_47_range__,
	    $__filter_47_column__,
	    $__filter_47_row__,
	    $__tableRenderer__;
	var $__0 = ($___46__46__47__46__46__47__46__46__47_helpers_47_dom_47_element__ = require("helpers/dom/element"), $___46__46__47__46__46__47__46__46__47_helpers_47_dom_47_element__ && $___46__46__47__46__46__47__46__46__47_helpers_47_dom_47_element__.__esModule && $___46__46__47__46__46__47__46__46__47_helpers_47_dom_47_element__ || {default: $___46__46__47__46__46__47__46__46__47_helpers_47_dom_47_element__}),
	    getStyle = $__0.getStyle,
	    getTrimmingContainer = $__0.getTrimmingContainer,
	    hasClass = $__0.hasClass,
	    index = $__0.index,
	    offset = $__0.offset,
	    removeClass = $__0.removeClass,
	    removeTextNodes = $__0.removeTextNodes,
	    overlayContainsElement = $__0.overlayContainsElement;
	var WalkontableCellCoords = ($__cell_47_coords__ = require("cell/coords"), $__cell_47_coords__ && $__cell_47_coords__.__esModule && $__cell_47_coords__ || {default: $__cell_47_coords__}).WalkontableCellCoords;
	var WalkontableCellRange = ($__cell_47_range__ = require("cell/range"), $__cell_47_range__ && $__cell_47_range__.__esModule && $__cell_47_range__ || {default: $__cell_47_range__}).WalkontableCellRange;
	var WalkontableColumnFilter = ($__filter_47_column__ = require("filter/column"), $__filter_47_column__ && $__filter_47_column__.__esModule && $__filter_47_column__ || {default: $__filter_47_column__}).WalkontableColumnFilter;
	var WalkontableRowFilter = ($__filter_47_row__ = require("filter/row"), $__filter_47_row__ && $__filter_47_row__.__esModule && $__filter_47_row__ || {default: $__filter_47_row__}).WalkontableRowFilter;
	var WalkontableTableRenderer = ($__tableRenderer__ = require("tableRenderer"), $__tableRenderer__ && $__tableRenderer__.__esModule && $__tableRenderer__ || {default: $__tableRenderer__}).WalkontableTableRenderer;
	var WalkontableTable = function WalkontableTable(wotInstance, table) {
	  this.wot = wotInstance;
	  this.instance = this.wot;
	  this.TABLE = table;
	  this.TBODY = null;
	  this.THEAD = null;
	  this.COLGROUP = null;
	  this.tableOffset = 0;
	  this.holderOffset = 0;
	  removeTextNodes(this.TABLE);
	  this.spreader = this.createSpreader(this.TABLE);
	  this.hider = this.createHider(this.spreader);
	  this.holder = this.createHolder(this.hider);
	  this.wtRootElement = this.holder.parentNode;
	  this.alignOverlaysWithTrimmingContainer();
	  this.fixTableDomTree();
	  this.colgroupChildrenLength = this.COLGROUP.childNodes.length;
	  this.theadChildrenLength = this.THEAD.firstChild ? this.THEAD.firstChild.childNodes.length : 0;
	  this.tbodyChildrenLength = this.TBODY.childNodes.length;
	  this.rowFilter = null;
	  this.columnFilter = null;
	};
	($traceurRuntime.createClass)(WalkontableTable, {
	  fixTableDomTree: function() {
	    this.TBODY = this.TABLE.querySelector('tbody');
	    if (!this.TBODY) {
	      this.TBODY = document.createElement('tbody');
	      this.TABLE.appendChild(this.TBODY);
	    }
	    this.THEAD = this.TABLE.querySelector('thead');
	    if (!this.THEAD) {
	      this.THEAD = document.createElement('thead');
	      this.TABLE.insertBefore(this.THEAD, this.TBODY);
	    }
	    this.COLGROUP = this.TABLE.querySelector('colgroup');
	    if (!this.COLGROUP) {
	      this.COLGROUP = document.createElement('colgroup');
	      this.TABLE.insertBefore(this.COLGROUP, this.THEAD);
	    }
	    if (this.wot.getSetting('columnHeaders').length && !this.THEAD.childNodes.length) {
	      this.THEAD.appendChild(document.createElement('TR'));
	    }
	  },
	  createSpreader: function(table) {
	    var parent = table.parentNode;
	    var spreader;
	    if (!parent || parent.nodeType !== 1 || !hasClass(parent, 'wtHolder')) {
	      spreader = document.createElement('div');
	      spreader.className = 'wtSpreader';
	      if (parent) {
	        parent.insertBefore(spreader, table);
	      }
	      spreader.appendChild(table);
	    }
	    spreader.style.position = 'relative';
	    return spreader;
	  },
	  createHider: function(spreader) {
	    var parent = spreader.parentNode;
	    var hider;
	    if (!parent || parent.nodeType !== 1 || !hasClass(parent, 'wtHolder')) {
	      hider = document.createElement('div');
	      hider.className = 'wtHider';
	      if (parent) {
	        parent.insertBefore(hider, spreader);
	      }
	      hider.appendChild(spreader);
	    }
	    return hider;
	  },
	  createHolder: function(hider) {
	    var parent = hider.parentNode;
	    var holder;
	    if (!parent || parent.nodeType !== 1 || !hasClass(parent, 'wtHolder')) {
	      holder = document.createElement('div');
	      holder.style.position = 'relative';
	      holder.className = 'wtHolder';
	      if (parent) {
	        parent.insertBefore(holder, hider);
	      }
	      if (!this.isWorkingOnClone()) {
	        holder.parentNode.className += 'ht_master handsontable';
	      }
	      holder.appendChild(hider);
	    }
	    return holder;
	  },
	  alignOverlaysWithTrimmingContainer: function() {
	    var trimmingElement = getTrimmingContainer(this.wtRootElement);
	    if (!this.isWorkingOnClone()) {
	      this.holder.parentNode.style.position = 'relative';
	      if (trimmingElement === window) {
	        this.holder.style.overflow = 'visible';
	        this.wtRootElement.style.overflow = 'visible';
	      } else {
	        this.holder.style.width = getStyle(trimmingElement, 'width');
	        this.holder.style.height = getStyle(trimmingElement, 'height');
	        this.holder.style.overflow = '';
	      }
	    }
	  },
	  isWorkingOnClone: function() {
	    return !!this.wot.cloneSource;
	  },
	  draw: function(fastDraw) {
	    var totalRows = this.instance.getSetting('totalRows');
	    if (!this.isWorkingOnClone()) {
	      this.holderOffset = offset(this.holder);
	      fastDraw = this.wot.wtViewport.createRenderCalculators(fastDraw);
	    }
	    if (fastDraw) {
	      if (!this.isWorkingOnClone()) {
	        this.wot.wtViewport.createVisibleCalculators();
	      }
	      if (this.wot.wtOverlays) {
	        this.wot.wtOverlays.refresh(true);
	      }
	    } else {
	      if (this.isWorkingOnClone()) {
	        this.tableOffset = this.wot.cloneSource.wtTable.tableOffset;
	      } else {
	        this.tableOffset = offset(this.TABLE);
	      }
	      var startRow;
	      if (WalkontableOverlay.isOverlayTypeOf(this.wot.cloneOverlay, WalkontableOverlay.CLONE_DEBUG) || WalkontableOverlay.isOverlayTypeOf(this.wot.cloneOverlay, WalkontableOverlay.CLONE_TOP) || WalkontableOverlay.isOverlayTypeOf(this.wot.cloneOverlay, WalkontableOverlay.CLONE_TOP_LEFT_CORNER)) {
	        startRow = 0;
	      } else if (WalkontableOverlay.isOverlayTypeOf(this.instance.cloneOverlay, WalkontableOverlay.CLONE_BOTTOM) || WalkontableOverlay.isOverlayTypeOf(this.instance.cloneOverlay, WalkontableOverlay.CLONE_BOTTOM_LEFT_CORNER)) {
	        startRow = totalRows - this.wot.getSetting('fixedRowsBottom');
	      } else {
	        startRow = this.wot.wtViewport.rowsRenderCalculator.startRow;
	      }
	      var startColumn;
	      if (WalkontableOverlay.isOverlayTypeOf(this.wot.cloneOverlay, WalkontableOverlay.CLONE_DEBUG) || WalkontableOverlay.isOverlayTypeOf(this.wot.cloneOverlay, WalkontableOverlay.CLONE_LEFT) || WalkontableOverlay.isOverlayTypeOf(this.wot.cloneOverlay, WalkontableOverlay.CLONE_TOP_LEFT_CORNER) || WalkontableOverlay.isOverlayTypeOf(this.wot.cloneOverlay, WalkontableOverlay.CLONE_BOTTOM_LEFT_CORNER)) {
	        startColumn = 0;
	      } else {
	        startColumn = this.wot.wtViewport.columnsRenderCalculator.startColumn;
	      }
	      this.rowFilter = new WalkontableRowFilter(startRow, totalRows, this.wot.getSetting('columnHeaders').length);
	      this.columnFilter = new WalkontableColumnFilter(startColumn, this.wot.getSetting('totalColumns'), this.wot.getSetting('rowHeaders').length);
	      this._doDraw();
	      this.alignOverlaysWithTrimmingContainer();
	    }
	    this.refreshSelections(fastDraw);
	    if (!this.isWorkingOnClone()) {
	      this.wot.wtOverlays.topOverlay.resetFixedPosition();
	      if (this.wot.wtOverlays.bottomOverlay.clone) {
	        this.wot.wtOverlays.bottomOverlay.resetFixedPosition();
	      }
	      this.wot.wtOverlays.leftOverlay.resetFixedPosition();
	      if (this.wot.wtOverlays.topLeftCornerOverlay) {
	        this.wot.wtOverlays.topLeftCornerOverlay.resetFixedPosition();
	      }
	      if (this.instance.wtOverlays.bottomLeftCornerOverlay && this.instance.wtOverlays.bottomLeftCornerOverlay.clone) {
	        this.wot.wtOverlays.bottomLeftCornerOverlay.resetFixedPosition();
	      }
	    }
	    this.wot.drawn = true;
	    return this;
	  },
	  _doDraw: function() {
	    var wtRenderer = new WalkontableTableRenderer(this);
	    wtRenderer.render();
	  },
	  removeClassFromCells: function(className) {
	    var nodes = this.TABLE.querySelectorAll('.' + className);
	    for (var i = 0,
	        len = nodes.length; i < len; i++) {
	      removeClass(nodes[i], className);
	    }
	  },
	  refreshSelections: function(fastDraw) {
	    if (!this.wot.selections) {
	      return;
	    }
	    var len = this.wot.selections.length;
	    if (fastDraw) {
	      for (var i = 0; i < len; i++) {
	        if (this.wot.selections[i].settings.className) {
	          this.removeClassFromCells(this.wot.selections[i].settings.className);
	        }
	        if (this.wot.selections[i].settings.highlightRowClassName) {
	          this.removeClassFromCells(this.wot.selections[i].settings.highlightRowClassName);
	        }
	        if (this.wot.selections[i].settings.highlightColumnClassName) {
	          this.removeClassFromCells(this.wot.selections[i].settings.highlightColumnClassName);
	        }
	      }
	    }
	    for (var i$__7 = 0; i$__7 < len; i$__7++) {
	      this.wot.selections[i$__7].draw(this.wot, fastDraw);
	    }
	  },
	  getCell: function(coords) {
	    if (this.isRowBeforeRenderedRows(coords.row)) {
	      return -1;
	    } else if (this.isRowAfterRenderedRows(coords.row)) {
	      return -2;
	    }
	    var TR = this.TBODY.childNodes[this.rowFilter.sourceToRendered(coords.row)];
	    if (TR) {
	      return TR.childNodes[this.columnFilter.sourceColumnToVisibleRowHeadedColumn(coords.col)];
	    }
	  },
	  getColumnHeader: function(col) {
	    var level = arguments[1] !== (void 0) ? arguments[1] : 0;
	    var TR = this.THEAD.childNodes[level];
	    if (TR) {
	      return TR.childNodes[this.columnFilter.sourceColumnToVisibleRowHeadedColumn(col)];
	    }
	  },
	  getRowHeader: function(row) {
	    if (this.columnFilter.sourceColumnToVisibleRowHeadedColumn(0) === 0) {
	      return null;
	    }
	    var TR = this.TBODY.childNodes[this.rowFilter.sourceToRendered(row)];
	    if (TR) {
	      return TR.childNodes[0];
	    }
	  },
	  getCoords: function(TD) {
	    var TR = TD.parentNode;
	    var row = index(TR);
	    if (TR.parentNode === this.THEAD) {
	      row = this.rowFilter.visibleColHeadedRowToSourceRow(row);
	    } else {
	      row = this.rowFilter.renderedToSource(row);
	    }
	    var col = this.columnFilter.visibleRowHeadedColumnToSourceColumn(TD.cellIndex);
	    return new WalkontableCellCoords(row, col);
	  },
	  getTrForRow: function(row) {
	    return this.TBODY.childNodes[this.rowFilter.sourceToRendered(row)];
	  },
	  getFirstRenderedRow: function() {
	    return this.wot.wtViewport.rowsRenderCalculator.startRow;
	  },
	  getFirstVisibleRow: function() {
	    return this.wot.wtViewport.rowsVisibleCalculator.startRow;
	  },
	  getFirstRenderedColumn: function() {
	    return this.wot.wtViewport.columnsRenderCalculator.startColumn;
	  },
	  getFirstVisibleColumn: function() {
	    return this.wot.wtViewport.columnsVisibleCalculator.startColumn;
	  },
	  getLastRenderedRow: function() {
	    return this.wot.wtViewport.rowsRenderCalculator.endRow;
	  },
	  getLastVisibleRow: function() {
	    return this.wot.wtViewport.rowsVisibleCalculator.endRow;
	  },
	  getLastRenderedColumn: function() {
	    return this.wot.wtViewport.columnsRenderCalculator.endColumn;
	  },
	  getLastVisibleColumn: function() {
	    return this.wot.wtViewport.columnsVisibleCalculator.endColumn;
	  },
	  isRowBeforeRenderedRows: function(row) {
	    return (this.rowFilter.sourceToRendered(row) < 0 && row >= 0);
	  },
	  isRowAfterViewport: function(row) {
	    return (this.rowFilter.sourceToRendered(row) > this.getLastVisibleRow());
	  },
	  isRowAfterRenderedRows: function(row) {
	    return (this.rowFilter.sourceToRendered(row) > this.getLastRenderedRow());
	  },
	  isColumnBeforeViewport: function(column) {
	    return this.columnFilter.sourceToRendered(column) < 0 && column >= 0;
	  },
	  isColumnAfterViewport: function(column) {
	    return (this.columnFilter.sourceToRendered(column) > this.getLastVisibleColumn());
	  },
	  isLastRowFullyVisible: function() {
	    return this.getLastVisibleRow() === this.getLastRenderedRow();
	  },
	  isLastColumnFullyVisible: function() {
	    return this.getLastVisibleColumn() === this.getLastRenderedColumn();
	  },
	  getRenderedColumnsCount: function() {
	    if (WalkontableOverlay.isOverlayTypeOf(this.wot.cloneOverlay, WalkontableOverlay.CLONE_DEBUG)) {
	      return this.wot.getSetting('totalColumns');
	    } else if (WalkontableOverlay.isOverlayTypeOf(this.wot.cloneOverlay, WalkontableOverlay.CLONE_LEFT) || WalkontableOverlay.isOverlayTypeOf(this.wot.cloneOverlay, WalkontableOverlay.CLONE_TOP_LEFT_CORNER) || WalkontableOverlay.isOverlayTypeOf(this.wot.cloneOverlay, WalkontableOverlay.CLONE_BOTTOM_LEFT_CORNER)) {
	      return this.wot.getSetting('fixedColumnsLeft');
	    } else {
	      return this.wot.wtViewport.columnsRenderCalculator.count;
	    }
	  },
	  getRenderedRowsCount: function() {
	    if (WalkontableOverlay.isOverlayTypeOf(this.wot.cloneOverlay, WalkontableOverlay.CLONE_DEBUG)) {
	      return this.wot.getSetting('totalRows');
	    } else if (WalkontableOverlay.isOverlayTypeOf(this.wot.cloneOverlay, WalkontableOverlay.CLONE_TOP) || WalkontableOverlay.isOverlayTypeOf(this.wot.cloneOverlay, WalkontableOverlay.CLONE_TOP_LEFT_CORNER)) {
	      return this.wot.getSetting('fixedRowsTop');
	    } else if (WalkontableOverlay.isOverlayTypeOf(this.wot.cloneOverlay, WalkontableOverlay.CLONE_BOTTOM) || WalkontableOverlay.isOverlayTypeOf(this.wot.cloneOverlay, WalkontableOverlay.CLONE_BOTTOM_LEFT_CORNER)) {
	      return this.instance.getSetting('fixedRowsBottom');
	    }
	    return this.wot.wtViewport.rowsRenderCalculator.count;
	  },
	  getVisibleRowsCount: function() {
	    return this.wot.wtViewport.rowsVisibleCalculator.count;
	  },
	  allRowsInViewport: function() {
	    return this.wot.getSetting('totalRows') == this.getVisibleRowsCount();
	  },
	  getRowHeight: function(sourceRow) {
	    var height = this.wot.wtSettings.settings.rowHeight(sourceRow);
	    var oversizedHeight = this.wot.wtViewport.oversizedRows[sourceRow];
	    if (oversizedHeight !== void 0) {
	      height = height ? Math.max(height, oversizedHeight) : oversizedHeight;
	    }
	    return height;
	  },
	  getColumnHeaderHeight: function(level) {
	    var height = this.wot.wtSettings.settings.defaultRowHeight;
	    var oversizedHeight = this.wot.wtViewport.oversizedColumnHeaders[level];
	    if (oversizedHeight !== void 0) {
	      height = height ? Math.max(height, oversizedHeight) : oversizedHeight;
	    }
	    return height;
	  },
	  getVisibleColumnsCount: function() {
	    return this.wot.wtViewport.columnsVisibleCalculator.count;
	  },
	  allColumnsInViewport: function() {
	    return this.wot.getSetting('totalColumns') == this.getVisibleColumnsCount();
	  },
	  getColumnWidth: function(sourceColumn) {
	    var width = this.wot.wtSettings.settings.columnWidth;
	    if (typeof width === 'function') {
	      width = width(sourceColumn);
	    } else if (typeof width === 'object') {
	      width = width[sourceColumn];
	    }
	    return width || this.wot.wtSettings.settings.defaultColumnWidth;
	  },
	  getStretchedColumnWidth: function(sourceColumn) {
	    var columnWidth = this.getColumnWidth(sourceColumn);
	    var width = [void 0, null].indexOf(columnWidth) === -1 ? columnWidth : this.instance.wtSettings.settings.defaultColumnWidth;
	    var calculator = this.wot.wtViewport.columnsRenderCalculator;
	    if (calculator) {
	      var stretchedWidth = calculator.getStretchedColumnWidth(sourceColumn, width);
	      if (stretchedWidth) {
	        width = stretchedWidth;
	      }
	    }
	    return width;
	  }
	}, {});
	;
	window.WalkontableTable = WalkontableTable;

	//# 
	},{"cell/coords":5,"cell/range":6,"filter/column":9,"filter/row":10,"helpers/dom/element":44,"tableRenderer":21}],21:[function(require,module,exports){
	"use strict";
	Object.defineProperties(exports, {
	  WalkontableTableRenderer: {get: function() {
	      return WalkontableTableRenderer;
	    }},
	  __esModule: {value: true}
	});
	var $___46__46__47__46__46__47__46__46__47_helpers_47_dom_47_element__;
	var $__0 = ($___46__46__47__46__46__47__46__46__47_helpers_47_dom_47_element__ = require("helpers/dom/element"), $___46__46__47__46__46__47__46__46__47_helpers_47_dom_47_element__ && $___46__46__47__46__46__47__46__46__47_helpers_47_dom_47_element__.__esModule && $___46__46__47__46__46__47__46__46__47_helpers_47_dom_47_element__ || {default: $___46__46__47__46__46__47__46__46__47_helpers_47_dom_47_element__}),
	    addClass = $__0.addClass,
	    empty = $__0.empty,
	    getScrollbarWidth = $__0.getScrollbarWidth,
	    hasClass = $__0.hasClass,
	    innerHeight = $__0.innerHeight;
	var WalkontableTableRenderer = function WalkontableTableRenderer(wtTable) {
	  this.wtTable = wtTable;
	  this.wot = wtTable.instance;
	  this.instance = wtTable.instance;
	  this.rowFilter = wtTable.rowFilter;
	  this.columnFilter = wtTable.columnFilter;
	  this.TABLE = wtTable.TABLE;
	  this.THEAD = wtTable.THEAD;
	  this.TBODY = wtTable.TBODY;
	  this.COLGROUP = wtTable.COLGROUP;
	  this.rowHeaders = [];
	  this.rowHeaderCount = 0;
	  this.columnHeaders = [];
	  this.columnHeaderCount = 0;
	  this.fixedRowsTop = 0;
	  this.fixedRowsBottom = 0;
	};
	($traceurRuntime.createClass)(WalkontableTableRenderer, {
	  render: function() {
	    if (!this.wtTable.isWorkingOnClone()) {
	      this.wot.getSetting('beforeDraw', true);
	    }
	    this.rowHeaders = this.wot.getSetting('rowHeaders');
	    this.rowHeaderCount = this.rowHeaders.length;
	    this.fixedRowsTop = this.wot.getSetting('fixedRowsTop');
	    this.fixedRowsBottom = this.wot.getSetting('fixedRowsBottom');
	    this.columnHeaders = this.wot.getSetting('columnHeaders');
	    this.columnHeaderCount = this.columnHeaders.length;
	    var columnsToRender = this.wtTable.getRenderedColumnsCount();
	    var rowsToRender = this.wtTable.getRenderedRowsCount();
	    var totalColumns = this.wot.getSetting('totalColumns');
	    var totalRows = this.wot.getSetting('totalRows');
	    var workspaceWidth;
	    var adjusted = false;
	    if (WalkontableOverlay.isOverlayTypeOf(this.wot.cloneOverlay, WalkontableOverlay.CLONE_BOTTOM) || WalkontableOverlay.isOverlayTypeOf(this.wot.cloneOverlay, WalkontableOverlay.CLONE_BOTTOM_LEFT_CORNER)) {
	      this.columnHeaders = [];
	      this.columnHeaderCount = 0;
	    }
	    if (totalColumns > 0) {
	      this.adjustAvailableNodes();
	      adjusted = true;
	      this.renderColumnHeaders();
	      this.renderRows(totalRows, rowsToRender, columnsToRender);
	      if (!this.wtTable.isWorkingOnClone()) {
	        workspaceWidth = this.wot.wtViewport.getWorkspaceWidth();
	        this.wot.wtViewport.containerWidth = null;
	      }
	      this.adjustColumnHeaderHeights();
	      this.adjustColumnWidths(columnsToRender);
	      this.markOversizedColumns();
	    }
	    if (!adjusted) {
	      this.adjustAvailableNodes();
	    }
	    this.removeRedundantRows(rowsToRender);
	    if (!this.wtTable.isWorkingOnClone()) {
	      this.markOversizedRows();
	      this.wot.wtViewport.createVisibleCalculators();
	      this.wot.wtOverlays.refresh(false);
	      this.wot.wtOverlays.applyToDOM();
	      if (workspaceWidth !== this.wot.wtViewport.getWorkspaceWidth()) {
	        this.wot.wtViewport.containerWidth = null;
	        var firstRendered = this.wtTable.getFirstRenderedColumn();
	        var lastRendered = this.wtTable.getLastRenderedColumn();
	        for (var i = firstRendered; i < lastRendered; i++) {
	          var width = this.wtTable.getStretchedColumnWidth(i);
	          var renderedIndex = this.columnFilter.sourceToRendered(i);
	          this.COLGROUP.childNodes[renderedIndex + this.rowHeaderCount].style.width = width + 'px';
	        }
	      }
	      this.wot.getSetting('onDraw', true);
	    } else if (WalkontableOverlay.isOverlayTypeOf(this.wot.cloneOverlay, WalkontableOverlay.CLONE_BOTTOM)) {
	      var masterOverlay = this.wot.cloneOverlay.instance;
	      this.wot.cloneOverlay.markOversizedFixedBottomRows();
	      masterOverlay.wtOverlays.adjustElementsSize();
	    }
	  },
	  removeRedundantRows: function(renderedRowsCount) {
	    while (this.wtTable.tbodyChildrenLength > renderedRowsCount) {
	      this.TBODY.removeChild(this.TBODY.lastChild);
	      this.wtTable.tbodyChildrenLength--;
	    }
	  },
	  renderRows: function(totalRows, rowsToRender, columnsToRender) {
	    var lastTD,
	        TR;
	    var visibleRowIndex = 0;
	    var sourceRowIndex = this.rowFilter.renderedToSource(visibleRowIndex);
	    var isWorkingOnClone = this.wtTable.isWorkingOnClone();
	    while (sourceRowIndex < totalRows && sourceRowIndex >= 0) {
	      if (visibleRowIndex > 1000) {
	        throw new Error('Security brake: Too much TRs. Please define height for your table, which will enforce scrollbars.');
	      }
	      if (rowsToRender !== void 0 && visibleRowIndex === rowsToRender) {
	        break;
	      }
	      TR = this.getOrCreateTrForRow(visibleRowIndex, TR);
	      this.renderRowHeaders(sourceRowIndex, TR);
	      this.adjustColumns(TR, columnsToRender + this.rowHeaderCount);
	      lastTD = this.renderCells(sourceRowIndex, TR, columnsToRender);
	      if (!isWorkingOnClone || WalkontableOverlay.isOverlayTypeOf(this.wot.cloneOverlay, WalkontableOverlay.CLONE_BOTTOM)) {
	        this.resetOversizedRow(sourceRowIndex);
	      }
	      if (TR.firstChild) {
	        var height = this.wot.wtTable.getRowHeight(sourceRowIndex);
	        if (height) {
	          height--;
	          TR.firstChild.style.height = height + 'px';
	        } else {
	          TR.firstChild.style.height = '';
	        }
	      }
	      visibleRowIndex++;
	      sourceRowIndex = this.rowFilter.renderedToSource(visibleRowIndex);
	    }
	  },
	  resetOversizedRow: function(sourceRow) {
	    if (this.wot.getSetting('externalRowCalculator')) {
	      return;
	    }
	    if (this.wot.wtViewport.oversizedRows && this.wot.wtViewport.oversizedRows[sourceRow]) {
	      this.wot.wtViewport.oversizedRows[sourceRow] = void 0;
	    }
	  },
	  markOversizedRows: function() {
	    if (this.wot.getSetting('externalRowCalculator')) {
	      return;
	    }
	    var rowCount = this.instance.wtTable.TBODY.childNodes.length;
	    var expectedTableHeight = rowCount * this.instance.wtSettings.settings.defaultRowHeight;
	    var actualTableHeight = innerHeight(this.instance.wtTable.TBODY) - 1;
	    var previousRowHeight;
	    var rowInnerHeight;
	    var sourceRowIndex;
	    var currentTr;
	    var rowHeader;
	    var totalRows = this.instance.getSetting('totalRows');
	    if (expectedTableHeight === actualTableHeight && !this.instance.getSetting('fixedRowsBottom')) {
	      return;
	    }
	    while (rowCount) {
	      rowCount--;
	      sourceRowIndex = this.instance.wtTable.rowFilter.renderedToSource(rowCount);
	      previousRowHeight = this.instance.wtTable.getRowHeight(sourceRowIndex);
	      currentTr = this.instance.wtTable.getTrForRow(sourceRowIndex);
	      rowHeader = currentTr.querySelector('th');
	      if (rowHeader) {
	        rowInnerHeight = innerHeight(rowHeader);
	      } else {
	        rowInnerHeight = innerHeight(currentTr) - 1;
	      }
	      if ((!previousRowHeight && this.instance.wtSettings.settings.defaultRowHeight < rowInnerHeight || previousRowHeight < rowInnerHeight)) {
	        this.instance.wtViewport.oversizedRows[sourceRowIndex] = ++rowInnerHeight;
	      }
	    }
	  },
	  markOversizedColumns: function() {
	    var overlayName = this.wot.getOverlayName();
	    if (!this.columnHeaderCount || this.wot.wtViewport.isMarkedOversizedColumn[overlayName] || this.wtTable.isWorkingOnClone()) {
	      return;
	    }
	    var columnCount = this.wtTable.getRenderedColumnsCount();
	    for (var i = 0; i < this.columnHeaderCount; i++) {
	      for (var renderedColumnIndex = (-1) * this.rowHeaderCount; renderedColumnIndex < columnCount; renderedColumnIndex++) {
	        this.markIfOversizedColumnHeader(renderedColumnIndex);
	      }
	    }
	    this.wot.wtViewport.isMarkedOversizedColumn[overlayName] = true;
	  },
	  adjustColumnHeaderHeights: function() {
	    var columnHeaders = this.wot.getSetting('columnHeaders');
	    var childs = this.wot.wtTable.THEAD.childNodes;
	    var oversizedCols = this.wot.wtViewport.oversizedColumnHeaders;
	    for (var i = 0,
	        len = columnHeaders.length; i < len; i++) {
	      if (oversizedCols[i]) {
	        if (childs[i].childNodes.length === 0) {
	          return;
	        }
	        childs[i].childNodes[0].style.height = oversizedCols[i] + 'px';
	      }
	    }
	  },
	  markIfOversizedColumnHeader: function(col) {
	    var sourceColIndex = this.wot.wtTable.columnFilter.renderedToSource(col);
	    var level = this.columnHeaderCount;
	    var defaultRowHeight = this.wot.wtSettings.settings.defaultRowHeight;
	    var previousColHeaderHeight;
	    var currentHeader;
	    var currentHeaderHeight;
	    while (level) {
	      level--;
	      previousColHeaderHeight = this.wot.wtTable.getColumnHeaderHeight(level);
	      currentHeader = this.wot.wtTable.getColumnHeader(sourceColIndex, level);
	      if (!currentHeader) {
	        continue;
	      }
	      currentHeaderHeight = innerHeight(currentHeader);
	      if (!previousColHeaderHeight && defaultRowHeight < currentHeaderHeight || previousColHeaderHeight < currentHeaderHeight) {
	        this.wot.wtViewport.oversizedColumnHeaders[level] = currentHeaderHeight;
	      }
	    }
	  },
	  renderCells: function(sourceRowIndex, TR, columnsToRender) {
	    var TD;
	    var sourceColIndex;
	    for (var visibleColIndex = 0; visibleColIndex < columnsToRender; visibleColIndex++) {
	      sourceColIndex = this.columnFilter.renderedToSource(visibleColIndex);
	      if (visibleColIndex === 0) {
	        TD = TR.childNodes[this.columnFilter.sourceColumnToVisibleRowHeadedColumn(sourceColIndex)];
	      } else {
	        TD = TD.nextSibling;
	      }
	      if (TD.nodeName == 'TH') {
	        TD = replaceThWithTd(TD, TR);
	      }
	      if (!hasClass(TD, 'hide')) {
	        TD.className = '';
	      }
	      TD.removeAttribute('style');
	      this.wot.wtSettings.settings.cellRenderer(sourceRowIndex, sourceColIndex, TD);
	    }
	    return TD;
	  },
	  adjustColumnWidths: function(columnsToRender) {
	    var scrollbarCompensation = 0;
	    var sourceInstance = this.wot.cloneSource ? this.wot.cloneSource : this.wot;
	    var mainHolder = sourceInstance.wtTable.holder;
	    if (mainHolder.offsetHeight < mainHolder.scrollHeight) {
	      scrollbarCompensation = getScrollbarWidth();
	    }
	    this.wot.wtViewport.columnsRenderCalculator.refreshStretching(this.wot.wtViewport.getViewportWidth() - scrollbarCompensation);
	    for (var renderedColIndex = 0; renderedColIndex < columnsToRender; renderedColIndex++) {
	      var width = this.wtTable.getStretchedColumnWidth(this.columnFilter.renderedToSource(renderedColIndex));
	      this.COLGROUP.childNodes[renderedColIndex + this.rowHeaderCount].style.width = width + 'px';
	    }
	  },
	  appendToTbody: function(TR) {
	    this.TBODY.appendChild(TR);
	    this.wtTable.tbodyChildrenLength++;
	  },
	  getOrCreateTrForRow: function(rowIndex, currentTr) {
	    var TR;
	    if (rowIndex >= this.wtTable.tbodyChildrenLength) {
	      TR = this.createRow();
	      this.appendToTbody(TR);
	    } else if (rowIndex === 0) {
	      TR = this.TBODY.firstChild;
	    } else {
	      TR = currentTr.nextSibling;
	    }
	    if (TR.className) {
	      TR.removeAttribute('class');
	    }
	    return TR;
	  },
	  createRow: function() {
	    var TR = document.createElement('TR');
	    for (var visibleColIndex = 0; visibleColIndex < this.rowHeaderCount; visibleColIndex++) {
	      TR.appendChild(document.createElement('TH'));
	    }
	    return TR;
	  },
	  renderRowHeader: function(row, col, TH) {
	    TH.className = '';
	    TH.removeAttribute('style');
	    this.rowHeaders[col](row, TH, col);
	  },
	  renderRowHeaders: function(row, TR) {
	    for (var TH = TR.firstChild,
	        visibleColIndex = 0; visibleColIndex < this.rowHeaderCount; visibleColIndex++) {
	      if (!TH) {
	        TH = document.createElement('TH');
	        TR.appendChild(TH);
	      } else if (TH.nodeName == 'TD') {
	        TH = replaceTdWithTh(TH, TR);
	      }
	      this.renderRowHeader(row, visibleColIndex, TH);
	      TH = TH.nextSibling;
	    }
	  },
	  adjustAvailableNodes: function() {
	    this.adjustColGroups();
	    this.adjustThead();
	  },
	  renderColumnHeaders: function() {
	    var overlayName = this.wot.getOverlayName();
	    if (!this.columnHeaderCount) {
	      return;
	    }
	    var columnCount = this.wtTable.getRenderedColumnsCount();
	    for (var i = 0; i < this.columnHeaderCount; i++) {
	      var TR = this.getTrForColumnHeaders(i);
	      for (var renderedColumnIndex = (-1) * this.rowHeaderCount; renderedColumnIndex < columnCount; renderedColumnIndex++) {
	        var sourceCol = this.columnFilter.renderedToSource(renderedColumnIndex);
	        this.renderColumnHeader(i, sourceCol, TR.childNodes[renderedColumnIndex + this.rowHeaderCount]);
	      }
	    }
	  },
	  adjustColGroups: function() {
	    var columnCount = this.wtTable.getRenderedColumnsCount();
	    while (this.wtTable.colgroupChildrenLength < columnCount + this.rowHeaderCount) {
	      this.COLGROUP.appendChild(document.createElement('COL'));
	      this.wtTable.colgroupChildrenLength++;
	    }
	    while (this.wtTable.colgroupChildrenLength > columnCount + this.rowHeaderCount) {
	      this.COLGROUP.removeChild(this.COLGROUP.lastChild);
	      this.wtTable.colgroupChildrenLength--;
	    }
	    if (this.rowHeaderCount) {
	      addClass(this.COLGROUP.childNodes[0], 'rowHeader');
	    }
	  },
	  adjustThead: function() {
	    var columnCount = this.wtTable.getRenderedColumnsCount();
	    var TR = this.THEAD.firstChild;
	    if (this.columnHeaders.length) {
	      for (var i = 0,
	          len = this.columnHeaders.length; i < len; i++) {
	        TR = this.THEAD.childNodes[i];
	        if (!TR) {
	          TR = document.createElement('TR');
	          this.THEAD.appendChild(TR);
	        }
	        this.theadChildrenLength = TR.childNodes.length;
	        while (this.theadChildrenLength < columnCount + this.rowHeaderCount) {
	          TR.appendChild(document.createElement('TH'));
	          this.theadChildrenLength++;
	        }
	        while (this.theadChildrenLength > columnCount + this.rowHeaderCount) {
	          TR.removeChild(TR.lastChild);
	          this.theadChildrenLength--;
	        }
	      }
	      var theadChildrenLength = this.THEAD.childNodes.length;
	      if (theadChildrenLength > this.columnHeaders.length) {
	        for (var i$__2 = this.columnHeaders.length; i$__2 < theadChildrenLength; i$__2++) {
	          this.THEAD.removeChild(this.THEAD.lastChild);
	        }
	      }
	    } else if (TR) {
	      empty(TR);
	    }
	  },
	  getTrForColumnHeaders: function(index) {
	    return this.THEAD.childNodes[index];
	  },
	  renderColumnHeader: function(row, col, TH) {
	    TH.className = '';
	    TH.removeAttribute('style');
	    return this.columnHeaders[row](col, TH, row);
	  },
	  adjustColumns: function(TR, desiredCount) {
	    var count = TR.childNodes.length;
	    while (count < desiredCount) {
	      var TD = document.createElement('TD');
	      TR.appendChild(TD);
	      count++;
	    }
	    while (count > desiredCount) {
	      TR.removeChild(TR.lastChild);
	      count--;
	    }
	  },
	  removeRedundantColumns: function(columnsToRender) {
	    while (this.wtTable.tbodyChildrenLength > columnsToRender) {
	      this.TBODY.removeChild(this.TBODY.lastChild);
	      this.wtTable.tbodyChildrenLength--;
	    }
	  }
	}, {});
	function replaceTdWithTh(TD, TR) {
	  var TH = document.createElement('TH');
	  TR.insertBefore(TH, TD);
	  TR.removeChild(TD);
	  return TH;
	}
	function replaceThWithTd(TH, TR) {
	  var TD = document.createElement('TD');
	  TR.insertBefore(TD, TH);
	  TR.removeChild(TH);
	  return TD;
	}
	;
	window.WalkontableTableRenderer = WalkontableTableRenderer;

	//# 
	},{"helpers/dom/element":44}],22:[function(require,module,exports){
	"use strict";
	Object.defineProperties(exports, {
	  WalkontableViewport: {get: function() {
	      return WalkontableViewport;
	    }},
	  __esModule: {value: true}
	});
	var $___46__46__47__46__46__47__46__46__47_helpers_47_dom_47_element__,
	    $___46__46__47__46__46__47__46__46__47_eventManager__,
	    $__calculator_47_viewportColumns__,
	    $__calculator_47_viewportRows__;
	var $__0 = ($___46__46__47__46__46__47__46__46__47_helpers_47_dom_47_element__ = require("helpers/dom/element"), $___46__46__47__46__46__47__46__46__47_helpers_47_dom_47_element__ && $___46__46__47__46__46__47__46__46__47_helpers_47_dom_47_element__.__esModule && $___46__46__47__46__46__47__46__46__47_helpers_47_dom_47_element__ || {default: $___46__46__47__46__46__47__46__46__47_helpers_47_dom_47_element__}),
	    getScrollbarWidth = $__0.getScrollbarWidth,
	    getScrollTop = $__0.getScrollTop,
	    getStyle = $__0.getStyle,
	    offset = $__0.offset,
	    outerHeight = $__0.outerHeight,
	    outerWidth = $__0.outerWidth;
	var EventManager = ($___46__46__47__46__46__47__46__46__47_eventManager__ = require("eventManager"), $___46__46__47__46__46__47__46__46__47_eventManager__ && $___46__46__47__46__46__47__46__46__47_eventManager__.__esModule && $___46__46__47__46__46__47__46__46__47_eventManager__ || {default: $___46__46__47__46__46__47__46__46__47_eventManager__}).EventManager;
	var WalkontableViewportColumnsCalculator = ($__calculator_47_viewportColumns__ = require("calculator/viewportColumns"), $__calculator_47_viewportColumns__ && $__calculator_47_viewportColumns__.__esModule && $__calculator_47_viewportColumns__ || {default: $__calculator_47_viewportColumns__}).WalkontableViewportColumnsCalculator;
	var WalkontableViewportRowsCalculator = ($__calculator_47_viewportRows__ = require("calculator/viewportRows"), $__calculator_47_viewportRows__ && $__calculator_47_viewportRows__.__esModule && $__calculator_47_viewportRows__ || {default: $__calculator_47_viewportRows__}).WalkontableViewportRowsCalculator;
	var WalkontableViewport = function WalkontableViewport(wotInstance) {
	  var $__4 = this;
	  this.wot = wotInstance;
	  this.instance = this.wot;
	  this.oversizedRows = [];
	  this.oversizedColumnHeaders = [];
	  this.isMarkedOversizedColumn = {};
	  this.clientHeight = 0;
	  this.containerWidth = NaN;
	  this.rowHeaderWidth = NaN;
	  this.rowsVisibleCalculator = null;
	  this.columnsVisibleCalculator = null;
	  this.eventManager = new EventManager(this.wot);
	  this.eventManager.addEventListener(window, 'resize', (function() {
	    $__4.clientHeight = $__4.getWorkspaceHeight();
	  }));
	};
	($traceurRuntime.createClass)(WalkontableViewport, {
	  getWorkspaceHeight: function() {
	    var trimmingContainer = this.instance.wtOverlays.topOverlay.trimmingContainer;
	    var elemHeight;
	    var height = 0;
	    if (trimmingContainer === window) {
	      height = document.documentElement.clientHeight;
	    } else {
	      elemHeight = outerHeight(trimmingContainer);
	      height = (elemHeight > 0 && trimmingContainer.clientHeight > 0) ? trimmingContainer.clientHeight : Infinity;
	    }
	    return height;
	  },
	  getWorkspaceWidth: function() {
	    var width;
	    var totalColumns = this.instance.getSetting('totalColumns');
	    var trimmingContainer = this.instance.wtOverlays.leftOverlay.trimmingContainer;
	    var overflow;
	    var stretchSetting = this.instance.getSetting('stretchH');
	    var docOffsetWidth = document.documentElement.offsetWidth;
	    if (Handsontable.freezeOverlays) {
	      width = Math.min(docOffsetWidth - this.getWorkspaceOffset().left, docOffsetWidth);
	    } else {
	      width = Math.min(this.getContainerFillWidth(), docOffsetWidth - this.getWorkspaceOffset().left, docOffsetWidth);
	    }
	    if (trimmingContainer === window && totalColumns > 0 && this.sumColumnWidths(0, totalColumns - 1) > width) {
	      return document.documentElement.clientWidth;
	    }
	    if (trimmingContainer !== window) {
	      overflow = getStyle(this.instance.wtOverlays.leftOverlay.trimmingContainer, 'overflow');
	      if (overflow == 'scroll' || overflow == 'hidden' || overflow == 'auto') {
	        return Math.max(width, trimmingContainer.clientWidth);
	      }
	    }
	    if (stretchSetting === 'none' || !stretchSetting) {
	      return Math.max(width, outerWidth(this.instance.wtTable.TABLE));
	    } else {
	      return width;
	    }
	  },
	  hasVerticalScroll: function() {
	    return this.getWorkspaceActualHeight() > this.getWorkspaceHeight();
	  },
	  hasHorizontalScroll: function() {
	    return this.getWorkspaceActualWidth() > this.getWorkspaceWidth();
	  },
	  sumColumnWidths: function(from, length) {
	    var sum = 0;
	    while (from < length) {
	      sum += this.wot.wtTable.getColumnWidth(from);
	      from++;
	    }
	    return sum;
	  },
	  getContainerFillWidth: function() {
	    if (this.containerWidth) {
	      return this.containerWidth;
	    }
	    var mainContainer = this.instance.wtTable.holder;
	    var fillWidth;
	    var dummyElement;
	    dummyElement = document.createElement('div');
	    dummyElement.style.width = '100%';
	    dummyElement.style.height = '1px';
	    mainContainer.appendChild(dummyElement);
	    fillWidth = dummyElement.offsetWidth;
	    this.containerWidth = fillWidth;
	    mainContainer.removeChild(dummyElement);
	    return fillWidth;
	  },
	  getWorkspaceOffset: function() {
	    return offset(this.wot.wtTable.TABLE);
	  },
	  getWorkspaceActualHeight: function() {
	    return outerHeight(this.wot.wtTable.TABLE);
	  },
	  getWorkspaceActualWidth: function() {
	    return outerWidth(this.wot.wtTable.TABLE) || outerWidth(this.wot.wtTable.TBODY) || outerWidth(this.wot.wtTable.THEAD);
	  },
	  getColumnHeaderHeight: function() {
	    if (isNaN(this.columnHeaderHeight)) {
	      this.columnHeaderHeight = outerHeight(this.wot.wtTable.THEAD);
	    }
	    return this.columnHeaderHeight;
	  },
	  getViewportHeight: function() {
	    var containerHeight = this.getWorkspaceHeight();
	    var columnHeaderHeight;
	    if (containerHeight === Infinity) {
	      return containerHeight;
	    }
	    columnHeaderHeight = this.getColumnHeaderHeight();
	    if (columnHeaderHeight > 0) {
	      containerHeight -= columnHeaderHeight;
	    }
	    return containerHeight;
	  },
	  getRowHeaderWidth: function() {
	    if (this.wot.cloneSource) {
	      return this.wot.cloneSource.wtViewport.getRowHeaderWidth();
	    }
	    if (isNaN(this.rowHeaderWidth)) {
	      var rowHeaders = this.instance.getSetting('rowHeaders');
	      if (rowHeaders.length) {
	        var TH = this.instance.wtTable.TABLE.querySelector('TH');
	        this.rowHeaderWidth = 0;
	        for (var i = 0,
	            len = rowHeaders.length; i < len; i++) {
	          if (TH) {
	            this.rowHeaderWidth += outerWidth(TH);
	            TH = TH.nextSibling;
	          } else {
	            this.rowHeaderWidth += 50;
	          }
	        }
	      } else {
	        this.rowHeaderWidth = 0;
	      }
	    }
	    return this.rowHeaderWidth;
	  },
	  getViewportWidth: function() {
	    var containerWidth = this.getWorkspaceWidth();
	    var rowHeaderWidth;
	    if (containerWidth === Infinity) {
	      return containerWidth;
	    }
	    rowHeaderWidth = this.getRowHeaderWidth();
	    if (rowHeaderWidth > 0) {
	      return containerWidth - rowHeaderWidth;
	    }
	    return containerWidth;
	  },
	  createRowsCalculator: function() {
	    var visible = arguments[0] !== (void 0) ? arguments[0] : false;
	    var $__4 = this;
	    var height;
	    var pos;
	    var fixedRowsTop;
	    var scrollbarHeight;
	    var fixedRowsBottom;
	    var fixedRowsHeight;
	    var totalRows;
	    this.rowHeaderWidth = NaN;
	    if (this.wot.wtSettings.settings.renderAllRows) {
	      height = Infinity;
	    } else {
	      height = this.getViewportHeight();
	    }
	    pos = getScrollTop(this.wot.wtOverlays.mainTableScrollableElement) - this.wot.wtOverlays.topOverlay.getTableParentOffset();
	    if (pos < 0) {
	      pos = 0;
	    }
	    fixedRowsTop = this.wot.getSetting('fixedRowsTop');
	    fixedRowsBottom = this.wot.getSetting('fixedRowsBottom');
	    totalRows = this.wot.getSetting('totalRows');
	    if (fixedRowsTop) {
	      fixedRowsHeight = this.wot.wtOverlays.topOverlay.sumCellSizes(0, fixedRowsTop);
	      pos += fixedRowsHeight;
	      height -= fixedRowsHeight;
	    }
	    if (fixedRowsBottom && this.wot.wtOverlays.bottomOverlay.clone) {
	      fixedRowsHeight = this.wot.wtOverlays.bottomOverlay.sumCellSizes(totalRows - fixedRowsBottom, totalRows);
	      height -= fixedRowsHeight;
	    }
	    if (this.wot.wtTable.holder.clientHeight === this.wot.wtTable.holder.offsetHeight) {
	      scrollbarHeight = 0;
	    } else {
	      scrollbarHeight = getScrollbarWidth();
	    }
	    return new WalkontableViewportRowsCalculator(height, pos, this.wot.getSetting('totalRows'), (function(sourceRow) {
	      return $__4.wot.wtTable.getRowHeight(sourceRow);
	    }), visible ? null : this.wot.wtSettings.settings.viewportRowCalculatorOverride, visible, scrollbarHeight);
	  },
	  createColumnsCalculator: function() {
	    var visible = arguments[0] !== (void 0) ? arguments[0] : false;
	    var $__4 = this;
	    var width = this.getViewportWidth();
	    var pos;
	    var fixedColumnsLeft;
	    this.columnHeaderHeight = NaN;
	    pos = this.wot.wtOverlays.leftOverlay.getScrollPosition() - this.wot.wtOverlays.leftOverlay.getTableParentOffset();
	    if (pos < 0) {
	      pos = 0;
	    }
	    fixedColumnsLeft = this.wot.getSetting('fixedColumnsLeft');
	    if (fixedColumnsLeft) {
	      var fixedColumnsWidth = this.wot.wtOverlays.leftOverlay.sumCellSizes(0, fixedColumnsLeft);
	      pos += fixedColumnsWidth;
	      width -= fixedColumnsWidth;
	    }
	    if (this.wot.wtTable.holder.clientWidth !== this.wot.wtTable.holder.offsetWidth) {
	      width -= getScrollbarWidth();
	    }
	    return new WalkontableViewportColumnsCalculator(width, pos, this.wot.getSetting('totalColumns'), (function(sourceCol) {
	      return $__4.wot.wtTable.getColumnWidth(sourceCol);
	    }), visible ? null : this.wot.wtSettings.settings.viewportColumnCalculatorOverride, visible, this.wot.getSetting('stretchH'));
	  },
	  createRenderCalculators: function() {
	    var fastDraw = arguments[0] !== (void 0) ? arguments[0] : false;
	    if (fastDraw) {
	      var proposedRowsVisibleCalculator = this.createRowsCalculator(true);
	      var proposedColumnsVisibleCalculator = this.createColumnsCalculator(true);
	      if (!(this.areAllProposedVisibleRowsAlreadyRendered(proposedRowsVisibleCalculator) && this.areAllProposedVisibleColumnsAlreadyRendered(proposedColumnsVisibleCalculator))) {
	        fastDraw = false;
	      }
	    }
	    if (!fastDraw) {
	      this.rowsRenderCalculator = this.createRowsCalculator();
	      this.columnsRenderCalculator = this.createColumnsCalculator();
	    }
	    this.rowsVisibleCalculator = null;
	    this.columnsVisibleCalculator = null;
	    return fastDraw;
	  },
	  createVisibleCalculators: function() {
	    this.rowsVisibleCalculator = this.createRowsCalculator(true);
	    this.columnsVisibleCalculator = this.createColumnsCalculator(true);
	  },
	  areAllProposedVisibleRowsAlreadyRendered: function(proposedRowsVisibleCalculator) {
	    if (this.rowsVisibleCalculator) {
	      if (proposedRowsVisibleCalculator.startRow < this.rowsRenderCalculator.startRow || (proposedRowsVisibleCalculator.startRow === this.rowsRenderCalculator.startRow && proposedRowsVisibleCalculator.startRow > 0)) {
	        return false;
	      } else if (proposedRowsVisibleCalculator.endRow > this.rowsRenderCalculator.endRow || (proposedRowsVisibleCalculator.endRow === this.rowsRenderCalculator.endRow && proposedRowsVisibleCalculator.endRow < this.wot.getSetting('totalRows') - 1)) {
	        return false;
	      } else {
	        return true;
	      }
	    }
	    return false;
	  },
	  areAllProposedVisibleColumnsAlreadyRendered: function(proposedColumnsVisibleCalculator) {
	    if (this.columnsVisibleCalculator) {
	      if (proposedColumnsVisibleCalculator.startColumn < this.columnsRenderCalculator.startColumn || (proposedColumnsVisibleCalculator.startColumn === this.columnsRenderCalculator.startColumn && proposedColumnsVisibleCalculator.startColumn > 0)) {
	        return false;
	      } else if (proposedColumnsVisibleCalculator.endColumn > this.columnsRenderCalculator.endColumn || (proposedColumnsVisibleCalculator.endColumn === this.columnsRenderCalculator.endColumn && proposedColumnsVisibleCalculator.endColumn < this.wot.getSetting('totalColumns') - 1)) {
	        return false;
	      } else {
	        return true;
	      }
	    }
	    return false;
	  }
	}, {});
	;
	window.WalkontableViewport = WalkontableViewport;

	//# 
	},{"calculator/viewportColumns":3,"calculator/viewportRows":4,"eventManager":40,"helpers/dom/element":44}],23:[function(require,module,exports){
	"use strict";
	var $__shims_47_classes__,
	    $__es6collections__,
	    $__pluginHooks__,
	    $__core__,
	    $__renderers_47__95_cellDecorator__,
	    $__cellTypes__,
	    $___46__46__47_plugins_47_jqueryHandsontable__,
	    $__helpers_47_array__,
	    $__helpers_47_browser__,
	    $__helpers_47_data__,
	    $__helpers_47_function__,
	    $__helpers_47_mixed__,
	    $__helpers_47_number__,
	    $__helpers_47_object__,
	    $__helpers_47_setting__,
	    $__helpers_47_string__,
	    $__helpers_47_unicode__,
	    $__helpers_47_dom_47_element__,
	    $__helpers_47_dom_47_event__;
	var version = Handsontable.version;
	var buildDate = Handsontable.buildDate;
	window.Handsontable = function Handsontable(rootElement, userSettings) {
	  var instance = new Handsontable.Core(rootElement, userSettings || {});
	  instance.init();
	  return instance;
	};
	Handsontable.version = version;
	Handsontable.buildDate = buildDate;
	($__shims_47_classes__ = require("shims/classes"), $__shims_47_classes__ && $__shims_47_classes__.__esModule && $__shims_47_classes__ || {default: $__shims_47_classes__});
	($__es6collections__ = require("es6collections"), $__es6collections__ && $__es6collections__.__esModule && $__es6collections__ || {default: $__es6collections__});
	Handsontable.plugins = {};
	var Hooks = ($__pluginHooks__ = require("pluginHooks"), $__pluginHooks__ && $__pluginHooks__.__esModule && $__pluginHooks__ || {default: $__pluginHooks__}).Hooks;
	if (!Handsontable.hooks) {
	  Handsontable.hooks = new Hooks();
	}
	($__core__ = require("core"), $__core__ && $__core__.__esModule && $__core__ || {default: $__core__});
	($__renderers_47__95_cellDecorator__ = require("renderers/_cellDecorator"), $__renderers_47__95_cellDecorator__ && $__renderers_47__95_cellDecorator__.__esModule && $__renderers_47__95_cellDecorator__ || {default: $__renderers_47__95_cellDecorator__});
	($__cellTypes__ = require("cellTypes"), $__cellTypes__ && $__cellTypes__.__esModule && $__cellTypes__ || {default: $__cellTypes__});
	($___46__46__47_plugins_47_jqueryHandsontable__ = require("plugins/jqueryHandsontable"), $___46__46__47_plugins_47_jqueryHandsontable__ && $___46__46__47_plugins_47_jqueryHandsontable__.__esModule && $___46__46__47_plugins_47_jqueryHandsontable__ || {default: $___46__46__47_plugins_47_jqueryHandsontable__});
	var arrayHelpers = ($__helpers_47_array__ = require("helpers/array"), $__helpers_47_array__ && $__helpers_47_array__.__esModule && $__helpers_47_array__ || {default: $__helpers_47_array__});
	var browserHelpers = ($__helpers_47_browser__ = require("helpers/browser"), $__helpers_47_browser__ && $__helpers_47_browser__.__esModule && $__helpers_47_browser__ || {default: $__helpers_47_browser__});
	var dataHelpers = ($__helpers_47_data__ = require("helpers/data"), $__helpers_47_data__ && $__helpers_47_data__.__esModule && $__helpers_47_data__ || {default: $__helpers_47_data__});
	var functionHelpers = ($__helpers_47_function__ = require("helpers/function"), $__helpers_47_function__ && $__helpers_47_function__.__esModule && $__helpers_47_function__ || {default: $__helpers_47_function__});
	var mixedHelpers = ($__helpers_47_mixed__ = require("helpers/mixed"), $__helpers_47_mixed__ && $__helpers_47_mixed__.__esModule && $__helpers_47_mixed__ || {default: $__helpers_47_mixed__});
	var numberHelpers = ($__helpers_47_number__ = require("helpers/number"), $__helpers_47_number__ && $__helpers_47_number__.__esModule && $__helpers_47_number__ || {default: $__helpers_47_number__});
	var objectHelpers = ($__helpers_47_object__ = require("helpers/object"), $__helpers_47_object__ && $__helpers_47_object__.__esModule && $__helpers_47_object__ || {default: $__helpers_47_object__});
	var settingHelpers = ($__helpers_47_setting__ = require("helpers/setting"), $__helpers_47_setting__ && $__helpers_47_setting__.__esModule && $__helpers_47_setting__ || {default: $__helpers_47_setting__});
	var stringHelpers = ($__helpers_47_string__ = require("helpers/string"), $__helpers_47_string__ && $__helpers_47_string__.__esModule && $__helpers_47_string__ || {default: $__helpers_47_string__});
	var unicodeHelpers = ($__helpers_47_unicode__ = require("helpers/unicode"), $__helpers_47_unicode__ && $__helpers_47_unicode__.__esModule && $__helpers_47_unicode__ || {default: $__helpers_47_unicode__});
	var helpers = [arrayHelpers, browserHelpers, dataHelpers, functionHelpers, mixedHelpers, numberHelpers, objectHelpers, settingHelpers, stringHelpers, unicodeHelpers];
	Handsontable.helper = {};
	arrayHelpers.arrayEach(helpers, (function(helper) {
	  arrayHelpers.arrayEach(Object.getOwnPropertyNames(helper), (function(key) {
	    if (key.charAt(0) !== '_') {
	      Handsontable.helper[key] = helper[key];
	    }
	  }));
	}));
	var domHelpers = ($__helpers_47_dom_47_element__ = require("helpers/dom/element"), $__helpers_47_dom_47_element__ && $__helpers_47_dom_47_element__.__esModule && $__helpers_47_dom_47_element__ || {default: $__helpers_47_dom_47_element__});
	var domEventHelpers = ($__helpers_47_dom_47_event__ = require("helpers/dom/event"), $__helpers_47_dom_47_event__ && $__helpers_47_dom_47_event__.__esModule && $__helpers_47_dom_47_event__ || {default: $__helpers_47_dom_47_event__});
	Handsontable.dom = {};
	Handsontable.Dom = Handsontable.dom;
	arrayHelpers.arrayEach([domHelpers, domEventHelpers], (function(helper) {
	  arrayHelpers.arrayEach(Object.getOwnPropertyNames(helper), (function(key) {
	    if (key.charAt(0) !== '_') {
	      Handsontable.dom[key] = helper[key];
	    }
	  }));
	}));

	//# 
	},{"cellTypes":24,"core":25,"es6collections":"es6collections","helpers/array":41,"helpers/browser":42,"helpers/data":43,"helpers/dom/element":44,"helpers/dom/event":45,"helpers/function":46,"helpers/mixed":47,"helpers/number":48,"helpers/object":49,"helpers/setting":50,"helpers/string":51,"helpers/unicode":52,"pluginHooks":54,"plugins/jqueryHandsontable":1,"renderers/_cellDecorator":87,"shims/classes":94}],24:[function(require,module,exports){
	"use strict";
	var $__helpers_47_browser__,
	    $__editors__,
	    $__renderers__,
	    $__editors_47_autocompleteEditor__,
	    $__editors_47_checkboxEditor__,
	    $__editors_47_dateEditor__,
	    $__editors_47_dropdownEditor__,
	    $__editors_47_handsontableEditor__,
	    $__editors_47_mobileTextEditor__,
	    $__editors_47_numericEditor__,
	    $__editors_47_passwordEditor__,
	    $__editors_47_selectEditor__,
	    $__editors_47_textEditor__,
	    $__renderers_47_autocompleteRenderer__,
	    $__renderers_47_checkboxRenderer__,
	    $__renderers_47_htmlRenderer__,
	    $__renderers_47_numericRenderer__,
	    $__renderers_47_passwordRenderer__,
	    $__renderers_47_textRenderer__,
	    $__validators_47_autocompleteValidator__,
	    $__validators_47_dateValidator__,
	    $__validators_47_numericValidator__;
	var isMobileBrowser = ($__helpers_47_browser__ = require("helpers/browser"), $__helpers_47_browser__ && $__helpers_47_browser__.__esModule && $__helpers_47_browser__ || {default: $__helpers_47_browser__}).isMobileBrowser;
	var getEditorConstructor = ($__editors__ = require("editors"), $__editors__ && $__editors__.__esModule && $__editors__ || {default: $__editors__}).getEditorConstructor;
	var getRenderer = ($__renderers__ = require("renderers"), $__renderers__ && $__renderers__.__esModule && $__renderers__ || {default: $__renderers__}).getRenderer;
	var AutocompleteEditor = ($__editors_47_autocompleteEditor__ = require("editors/autocompleteEditor"), $__editors_47_autocompleteEditor__ && $__editors_47_autocompleteEditor__.__esModule && $__editors_47_autocompleteEditor__ || {default: $__editors_47_autocompleteEditor__}).AutocompleteEditor;
	var CheckboxEditor = ($__editors_47_checkboxEditor__ = require("editors/checkboxEditor"), $__editors_47_checkboxEditor__ && $__editors_47_checkboxEditor__.__esModule && $__editors_47_checkboxEditor__ || {default: $__editors_47_checkboxEditor__}).CheckboxEditor;
	var DateEditor = ($__editors_47_dateEditor__ = require("editors/dateEditor"), $__editors_47_dateEditor__ && $__editors_47_dateEditor__.__esModule && $__editors_47_dateEditor__ || {default: $__editors_47_dateEditor__}).DateEditor;
	var DropdownEditor = ($__editors_47_dropdownEditor__ = require("editors/dropdownEditor"), $__editors_47_dropdownEditor__ && $__editors_47_dropdownEditor__.__esModule && $__editors_47_dropdownEditor__ || {default: $__editors_47_dropdownEditor__}).DropdownEditor;
	var HandsontableEditor = ($__editors_47_handsontableEditor__ = require("editors/handsontableEditor"), $__editors_47_handsontableEditor__ && $__editors_47_handsontableEditor__.__esModule && $__editors_47_handsontableEditor__ || {default: $__editors_47_handsontableEditor__}).HandsontableEditor;
	var MobileTextEditor = ($__editors_47_mobileTextEditor__ = require("editors/mobileTextEditor"), $__editors_47_mobileTextEditor__ && $__editors_47_mobileTextEditor__.__esModule && $__editors_47_mobileTextEditor__ || {default: $__editors_47_mobileTextEditor__}).MobileTextEditor;
	var NumericEditor = ($__editors_47_numericEditor__ = require("editors/numericEditor"), $__editors_47_numericEditor__ && $__editors_47_numericEditor__.__esModule && $__editors_47_numericEditor__ || {default: $__editors_47_numericEditor__}).NumericEditor;
	var PasswordEditor = ($__editors_47_passwordEditor__ = require("editors/passwordEditor"), $__editors_47_passwordEditor__ && $__editors_47_passwordEditor__.__esModule && $__editors_47_passwordEditor__ || {default: $__editors_47_passwordEditor__}).PasswordEditor;
	var SelectEditor = ($__editors_47_selectEditor__ = require("editors/selectEditor"), $__editors_47_selectEditor__ && $__editors_47_selectEditor__.__esModule && $__editors_47_selectEditor__ || {default: $__editors_47_selectEditor__}).SelectEditor;
	var TextEditor = ($__editors_47_textEditor__ = require("editors/textEditor"), $__editors_47_textEditor__ && $__editors_47_textEditor__.__esModule && $__editors_47_textEditor__ || {default: $__editors_47_textEditor__}).TextEditor;
	var AutocompleteRenderer = ($__renderers_47_autocompleteRenderer__ = require("renderers/autocompleteRenderer"), $__renderers_47_autocompleteRenderer__ && $__renderers_47_autocompleteRenderer__.__esModule && $__renderers_47_autocompleteRenderer__ || {default: $__renderers_47_autocompleteRenderer__}).AutocompleteRenderer;
	var CheckboxRenderer = ($__renderers_47_checkboxRenderer__ = require("renderers/checkboxRenderer"), $__renderers_47_checkboxRenderer__ && $__renderers_47_checkboxRenderer__.__esModule && $__renderers_47_checkboxRenderer__ || {default: $__renderers_47_checkboxRenderer__}).CheckboxRenderer;
	var HtmlRenderer = ($__renderers_47_htmlRenderer__ = require("renderers/htmlRenderer"), $__renderers_47_htmlRenderer__ && $__renderers_47_htmlRenderer__.__esModule && $__renderers_47_htmlRenderer__ || {default: $__renderers_47_htmlRenderer__}).HtmlRenderer;
	var NumericRenderer = ($__renderers_47_numericRenderer__ = require("renderers/numericRenderer"), $__renderers_47_numericRenderer__ && $__renderers_47_numericRenderer__.__esModule && $__renderers_47_numericRenderer__ || {default: $__renderers_47_numericRenderer__}).NumericRenderer;
	var PasswordRenderer = ($__renderers_47_passwordRenderer__ = require("renderers/passwordRenderer"), $__renderers_47_passwordRenderer__ && $__renderers_47_passwordRenderer__.__esModule && $__renderers_47_passwordRenderer__ || {default: $__renderers_47_passwordRenderer__}).PasswordRenderer;
	var TextRenderer = ($__renderers_47_textRenderer__ = require("renderers/textRenderer"), $__renderers_47_textRenderer__ && $__renderers_47_textRenderer__.__esModule && $__renderers_47_textRenderer__ || {default: $__renderers_47_textRenderer__}).TextRenderer;
	var AutocompleteValidator = ($__validators_47_autocompleteValidator__ = require("validators/autocompleteValidator"), $__validators_47_autocompleteValidator__ && $__validators_47_autocompleteValidator__.__esModule && $__validators_47_autocompleteValidator__ || {default: $__validators_47_autocompleteValidator__}).AutocompleteValidator;
	var DateValidator = ($__validators_47_dateValidator__ = require("validators/dateValidator"), $__validators_47_dateValidator__ && $__validators_47_dateValidator__.__esModule && $__validators_47_dateValidator__ || {default: $__validators_47_dateValidator__}).DateValidator;
	var NumericValidator = ($__validators_47_numericValidator__ = require("validators/numericValidator"), $__validators_47_numericValidator__ && $__validators_47_numericValidator__.__esModule && $__validators_47_numericValidator__ || {default: $__validators_47_numericValidator__}).NumericValidator;
	Handsontable.mobileBrowser = isMobileBrowser();
	Handsontable.AutocompleteCell = {
	  editor: getEditorConstructor('autocomplete'),
	  renderer: getRenderer('autocomplete'),
	  validator: Handsontable.AutocompleteValidator
	};
	Handsontable.CheckboxCell = {
	  editor: getEditorConstructor('checkbox'),
	  renderer: getRenderer('checkbox')
	};
	Handsontable.TextCell = {
	  editor: Handsontable.mobileBrowser ? getEditorConstructor('mobile') : getEditorConstructor('text'),
	  renderer: getRenderer('text')
	};
	Handsontable.NumericCell = {
	  editor: getEditorConstructor('numeric'),
	  renderer: getRenderer('numeric'),
	  validator: Handsontable.NumericValidator,
	  dataType: 'number'
	};
	Handsontable.DateCell = {
	  editor: getEditorConstructor('date'),
	  validator: Handsontable.DateValidator,
	  renderer: getRenderer('autocomplete')
	};
	Handsontable.HandsontableCell = {
	  editor: getEditorConstructor('handsontable'),
	  renderer: getRenderer('autocomplete')
	};
	Handsontable.PasswordCell = {
	  editor: getEditorConstructor('password'),
	  renderer: getRenderer('password'),
	  copyable: false
	};
	Handsontable.DropdownCell = {
	  editor: getEditorConstructor('dropdown'),
	  renderer: getRenderer('autocomplete'),
	  validator: Handsontable.AutocompleteValidator
	};
	Handsontable.cellTypes = {
	  text: Handsontable.TextCell,
	  date: Handsontable.DateCell,
	  numeric: Handsontable.NumericCell,
	  checkbox: Handsontable.CheckboxCell,
	  autocomplete: Handsontable.AutocompleteCell,
	  handsontable: Handsontable.HandsontableCell,
	  password: Handsontable.PasswordCell,
	  dropdown: Handsontable.DropdownCell
	};
	Handsontable.cellLookup = {validator: {
	    numeric: Handsontable.NumericValidator,
	    autocomplete: Handsontable.AutocompleteValidator
	  }};

	//# 
	},{"editors":28,"editors/autocompleteEditor":30,"editors/checkboxEditor":31,"editors/dateEditor":32,"editors/dropdownEditor":33,"editors/handsontableEditor":34,"editors/mobileTextEditor":35,"editors/numericEditor":36,"editors/passwordEditor":37,"editors/selectEditor":38,"editors/textEditor":39,"helpers/browser":42,"renderers":86,"renderers/autocompleteRenderer":88,"renderers/checkboxRenderer":89,"renderers/htmlRenderer":90,"renderers/numericRenderer":91,"renderers/passwordRenderer":92,"renderers/textRenderer":93,"validators/autocompleteValidator":98,"validators/dateValidator":99,"validators/numericValidator":100}],25:[function(require,module,exports){
	"use strict";
	var $__numeral__,
	    $__helpers_47_dom_47_element__,
	    $__helpers_47_setting__,
	    $__dataMap__,
	    $__editorManager__,
	    $__eventManager__,
	    $__helpers_47_object__,
	    $__helpers_47_array__,
	    $__plugins__,
	    $__renderers__,
	    $__helpers_47_string__,
	    $__helpers_47_number__,
	    $__tableView__,
	    $__helpers_47_data__,
	    $__3rdparty_47_walkontable_47_src_47_cell_47_coords__,
	    $__3rdparty_47_walkontable_47_src_47_cell_47_range__,
	    $__3rdparty_47_walkontable_47_src_47_selection__,
	    $__3rdparty_47_walkontable_47_src_47_calculator_47_viewportColumns__;
	var numeral = ($__numeral__ = require("numeral"), $__numeral__ && $__numeral__.__esModule && $__numeral__ || {default: $__numeral__}).default;
	var $__1 = ($__helpers_47_dom_47_element__ = require("helpers/dom/element"), $__helpers_47_dom_47_element__ && $__helpers_47_dom_47_element__.__esModule && $__helpers_47_dom_47_element__ || {default: $__helpers_47_dom_47_element__}),
	    addClass = $__1.addClass,
	    empty = $__1.empty,
	    isChildOfWebComponentTable = $__1.isChildOfWebComponentTable,
	    removeClass = $__1.removeClass;
	var columnFactory = ($__helpers_47_setting__ = require("helpers/setting"), $__helpers_47_setting__ && $__helpers_47_setting__.__esModule && $__helpers_47_setting__ || {default: $__helpers_47_setting__}).columnFactory;
	var DataMap = ($__dataMap__ = require("dataMap"), $__dataMap__ && $__dataMap__.__esModule && $__dataMap__ || {default: $__dataMap__}).DataMap;
	var EditorManager = ($__editorManager__ = require("editorManager"), $__editorManager__ && $__editorManager__.__esModule && $__editorManager__ || {default: $__editorManager__}).EditorManager;
	var eventManagerObject = ($__eventManager__ = require("eventManager"), $__eventManager__ && $__eventManager__.__esModule && $__eventManager__ || {default: $__eventManager__}).eventManager;
	var $__6 = ($__helpers_47_object__ = require("helpers/object"), $__helpers_47_object__ && $__helpers_47_object__.__esModule && $__helpers_47_object__ || {default: $__helpers_47_object__}),
	    extend = $__6.extend,
	    duckSchema = $__6.duckSchema,
	    isObjectEquals = $__6.isObjectEquals,
	    deepClone = $__6.deepClone;
	var arrayFlatten = ($__helpers_47_array__ = require("helpers/array"), $__helpers_47_array__ && $__helpers_47_array__.__esModule && $__helpers_47_array__ || {default: $__helpers_47_array__}).arrayFlatten;
	var getPlugin = ($__plugins__ = require("plugins"), $__plugins__ && $__plugins__.__esModule && $__plugins__ || {default: $__plugins__}).getPlugin;
	var getRenderer = ($__renderers__ = require("renderers"), $__renderers__ && $__renderers__.__esModule && $__renderers__ || {default: $__renderers__}).getRenderer;
	var randomString = ($__helpers_47_string__ = require("helpers/string"), $__helpers_47_string__ && $__helpers_47_string__.__esModule && $__helpers_47_string__ || {default: $__helpers_47_string__}).randomString;
	var rangeEach = ($__helpers_47_number__ = require("helpers/number"), $__helpers_47_number__ && $__helpers_47_number__.__esModule && $__helpers_47_number__ || {default: $__helpers_47_number__}).rangeEach;
	var TableView = ($__tableView__ = require("tableView"), $__tableView__ && $__tableView__.__esModule && $__tableView__ || {default: $__tableView__}).TableView;
	var $__13 = ($__helpers_47_data__ = require("helpers/data"), $__helpers_47_data__ && $__helpers_47_data__.__esModule && $__helpers_47_data__ || {default: $__helpers_47_data__}),
	    translateRowsToColumns = $__13.translateRowsToColumns,
	    cellMethodLookupFactory = $__13.cellMethodLookupFactory,
	    spreadsheetColumnLabel = $__13.spreadsheetColumnLabel;
	var WalkontableCellCoords = ($__3rdparty_47_walkontable_47_src_47_cell_47_coords__ = require("3rdparty/walkontable/src/cell/coords"), $__3rdparty_47_walkontable_47_src_47_cell_47_coords__ && $__3rdparty_47_walkontable_47_src_47_cell_47_coords__.__esModule && $__3rdparty_47_walkontable_47_src_47_cell_47_coords__ || {default: $__3rdparty_47_walkontable_47_src_47_cell_47_coords__}).WalkontableCellCoords;
	var WalkontableCellRange = ($__3rdparty_47_walkontable_47_src_47_cell_47_range__ = require("3rdparty/walkontable/src/cell/range"), $__3rdparty_47_walkontable_47_src_47_cell_47_range__ && $__3rdparty_47_walkontable_47_src_47_cell_47_range__.__esModule && $__3rdparty_47_walkontable_47_src_47_cell_47_range__ || {default: $__3rdparty_47_walkontable_47_src_47_cell_47_range__}).WalkontableCellRange;
	var WalkontableSelection = ($__3rdparty_47_walkontable_47_src_47_selection__ = require("3rdparty/walkontable/src/selection"), $__3rdparty_47_walkontable_47_src_47_selection__ && $__3rdparty_47_walkontable_47_src_47_selection__.__esModule && $__3rdparty_47_walkontable_47_src_47_selection__ || {default: $__3rdparty_47_walkontable_47_src_47_selection__}).WalkontableSelection;
	var WalkontableViewportColumnsCalculator = ($__3rdparty_47_walkontable_47_src_47_calculator_47_viewportColumns__ = require("3rdparty/walkontable/src/calculator/viewportColumns"), $__3rdparty_47_walkontable_47_src_47_calculator_47_viewportColumns__ && $__3rdparty_47_walkontable_47_src_47_calculator_47_viewportColumns__.__esModule && $__3rdparty_47_walkontable_47_src_47_calculator_47_viewportColumns__ || {default: $__3rdparty_47_walkontable_47_src_47_calculator_47_viewportColumns__}).WalkontableViewportColumnsCalculator;
	Handsontable.activeGuid = null;
	Handsontable.Core = function Core(rootElement, userSettings) {
	  var priv,
	      datamap,
	      grid,
	      selection,
	      editorManager,
	      instance = this,
	      GridSettings = function() {},
	      eventManager = eventManagerObject(instance);
	  extend(GridSettings.prototype, DefaultSettings.prototype);
	  extend(GridSettings.prototype, userSettings);
	  extend(GridSettings.prototype, expandType(userSettings));
	  this.rootElement = rootElement;
	  this.isHotTableEnv = isChildOfWebComponentTable(this.rootElement);
	  Handsontable.eventManager.isHotTableEnv = this.isHotTableEnv;
	  this.container = document.createElement('DIV');
	  this.renderCall = false;
	  rootElement.insertBefore(this.container, rootElement.firstChild);
	  this.guid = 'ht_' + randomString();
	  if (!this.rootElement.id || this.rootElement.id.substring(0, 3) === 'ht_') {
	    this.rootElement.id = this.guid;
	  }
	  priv = {
	    cellSettings: [],
	    columnSettings: [],
	    columnsSettingConflicts: ['data', 'width'],
	    settings: new GridSettings(),
	    selRange: null,
	    isPopulated: null,
	    scrollable: null,
	    firstRun: true
	  };
	  grid = {
	    alter: function(action, index, amount, source, keepEmptyRows) {
	      var delta;
	      amount = amount || 1;
	      switch (action) {
	        case 'insert_row':
	          if (instance.getSettings().maxRows === instance.countRows()) {
	            return;
	          }
	          delta = datamap.createRow(index, amount);
	          if (delta) {
	            if (selection.isSelected() && priv.selRange.from.row >= index) {
	              priv.selRange.from.row = priv.selRange.from.row + delta;
	              selection.transformEnd(delta, 0);
	            } else {
	              selection.refreshBorders();
	            }
	          }
	          break;
	        case 'insert_col':
	          delta = datamap.createCol(index, amount);
	          if (delta) {
	            if (Array.isArray(instance.getSettings().colHeaders)) {
	              var spliceArray = [index, 0];
	              spliceArray.length += delta;
	              Array.prototype.splice.apply(instance.getSettings().colHeaders, spliceArray);
	            }
	            if (selection.isSelected() && priv.selRange.from.col >= index) {
	              priv.selRange.from.col = priv.selRange.from.col + delta;
	              selection.transformEnd(0, delta);
	            } else {
	              selection.refreshBorders();
	            }
	          }
	          break;
	        case 'remove_row':
	          index = instance.runHooks('modifyCol', index);
	          datamap.removeRow(index, amount);
	          priv.cellSettings.splice(index, amount);
	          var totalRows = instance.countRows();
	          var fixedRowsTop = instance.getSettings().fixedRowsTop;
	          if (fixedRowsTop >= index + 1) {
	            instance.getSettings().fixedRowsTop -= Math.min(amount, fixedRowsTop - index);
	          }
	          var fixedRowsBottom = instance.getSettings().fixedRowsBottom;
	          if (fixedRowsBottom && totalRows - fixedRowsBottom <= index + 1) {
	            instance.getSettings().fixedRowsBottom -= Math.min(amount, fixedRowsBottom - index);
	          }
	          grid.adjustRowsAndCols();
	          selection.refreshBorders();
	          break;
	        case 'remove_col':
	          datamap.removeCol(index, amount);
	          for (var row = 0,
	              len = datamap.getAll().length; row < len; row++) {
	            if (row in priv.cellSettings) {
	              priv.cellSettings[row].splice(index, amount);
	            }
	          }
	          var fixedColumnsLeft = instance.getSettings().fixedColumnsLeft;
	          if (fixedColumnsLeft >= index + 1) {
	            instance.getSettings().fixedColumnsLeft -= Math.min(amount, fixedColumnsLeft - index);
	          }
	          if (Array.isArray(instance.getSettings().colHeaders)) {
	            if (typeof index == 'undefined') {
	              index = -1;
	            }
	            instance.getSettings().colHeaders.splice(index, amount);
	          }
	          grid.adjustRowsAndCols();
	          selection.refreshBorders();
	          break;
	        default:
	          throw new Error('There is no such action "' + action + '"');
	          break;
	      }
	      if (!keepEmptyRows) {
	        grid.adjustRowsAndCols();
	      }
	    },
	    adjustRowsAndCols: function() {
	      if (priv.settings.minRows) {
	        var rows = instance.countRows();
	        if (rows < priv.settings.minRows) {
	          for (var r = 0,
	              minRows = priv.settings.minRows; r < minRows - rows; r++) {
	            datamap.createRow(instance.countRows(), 1, true);
	          }
	        }
	      }
	      if (priv.settings.minSpareRows) {
	        var emptyRows = instance.countEmptyRows(true);
	        if (emptyRows < priv.settings.minSpareRows) {
	          for (; emptyRows < priv.settings.minSpareRows && instance.countRows() < priv.settings.maxRows; emptyRows++) {
	            datamap.createRow(instance.countRows(), 1, true);
	          }
	        }
	      }
	      {
	        var emptyCols;
	        if (priv.settings.minCols || priv.settings.minSpareCols) {
	          emptyCols = instance.countEmptyCols(true);
	        }
	        if (priv.settings.minCols && !priv.settings.columns && instance.countCols() < priv.settings.minCols) {
	          for (; instance.countCols() < priv.settings.minCols; emptyCols++) {
	            datamap.createCol(instance.countCols(), 1, true);
	          }
	        }
	        if (priv.settings.minSpareCols && !priv.settings.columns && instance.dataType === 'array' && emptyCols < priv.settings.minSpareCols) {
	          for (; emptyCols < priv.settings.minSpareCols && instance.countCols() < priv.settings.maxCols; emptyCols++) {
	            datamap.createCol(instance.countCols(), 1, true);
	          }
	        }
	      }
	      var rowCount = instance.countRows();
	      var colCount = instance.countCols();
	      if (rowCount === 0 || colCount === 0) {
	        selection.deselect();
	      }
	      if (selection.isSelected()) {
	        var selectionChanged = false;
	        var fromRow = priv.selRange.from.row;
	        var fromCol = priv.selRange.from.col;
	        var toRow = priv.selRange.to.row;
	        var toCol = priv.selRange.to.col;
	        if (fromRow > rowCount - 1) {
	          fromRow = rowCount - 1;
	          selectionChanged = true;
	          if (toRow > fromRow) {
	            toRow = fromRow;
	          }
	        } else if (toRow > rowCount - 1) {
	          toRow = rowCount - 1;
	          selectionChanged = true;
	          if (fromRow > toRow) {
	            fromRow = toRow;
	          }
	        }
	        if (fromCol > colCount - 1) {
	          fromCol = colCount - 1;
	          selectionChanged = true;
	          if (toCol > fromCol) {
	            toCol = fromCol;
	          }
	        } else if (toCol > colCount - 1) {
	          toCol = colCount - 1;
	          selectionChanged = true;
	          if (fromCol > toCol) {
	            fromCol = toCol;
	          }
	        }
	        if (selectionChanged) {
	          instance.selectCell(fromRow, fromCol, toRow, toCol);
	        }
	      }
	      if (instance.view) {
	        instance.view.wt.wtOverlays.adjustElementsSize();
	      }
	    },
	    populateFromArray: function(start, input, end, source, method, direction, deltas) {
	      var r,
	          rlen,
	          c,
	          clen,
	          setData = [],
	          current = {};
	      rlen = input.length;
	      if (rlen === 0) {
	        return false;
	      }
	      var repeatCol,
	          repeatRow,
	          cmax,
	          rmax,
	          baseEnd = {
	            row: end === null ? null : end.row,
	            col: end === null ? null : end.col
	          };
	      switch (method) {
	        case 'shift_down':
	          repeatCol = end ? end.col - start.col + 1 : 0;
	          repeatRow = end ? end.row - start.row + 1 : 0;
	          input = translateRowsToColumns(input);
	          for (c = 0, clen = input.length, cmax = Math.max(clen, repeatCol); c < cmax; c++) {
	            if (c < clen) {
	              for (r = 0, rlen = input[c].length; r < repeatRow - rlen; r++) {
	                input[c].push(input[c][r % rlen]);
	              }
	              input[c].unshift(start.col + c, start.row, 0);
	              instance.spliceCol.apply(instance, input[c]);
	            } else {
	              input[c % clen][0] = start.col + c;
	              instance.spliceCol.apply(instance, input[c % clen]);
	            }
	          }
	          break;
	        case 'shift_right':
	          repeatCol = end ? end.col - start.col + 1 : 0;
	          repeatRow = end ? end.row - start.row + 1 : 0;
	          for (r = 0, rlen = input.length, rmax = Math.max(rlen, repeatRow); r < rmax; r++) {
	            if (r < rlen) {
	              for (c = 0, clen = input[r].length; c < repeatCol - clen; c++) {
	                input[r].push(input[r][c % clen]);
	              }
	              input[r].unshift(start.row + r, start.col, 0);
	              instance.spliceRow.apply(instance, input[r]);
	            } else {
	              input[r % rlen][0] = start.row + r;
	              instance.spliceRow.apply(instance, input[r % rlen]);
	            }
	          }
	          break;
	        case 'overwrite':
	        default:
	          current.row = start.row;
	          current.col = start.col;
	          var selected = {
	            row: (end && start) ? (end.row - start.row + 1) : 1,
	            col: (end && start) ? (end.col - start.col + 1) : 1
	          };
	          var skippedRow = 0;
	          var skippedColumn = 0;
	          var pushData = true;
	          var cellMeta;
	          var getInputValue = function getInputValue(row) {
	            var col = arguments[1] !== (void 0) ? arguments[1] : null;
	            var rowValue = input[row % input.length];
	            if (col !== null) {
	              return rowValue[col % rowValue.length];
	            }
	            return rowValue;
	          };
	          var rowInputLength = input.length;
	          var rowSelectionLength = end ? end.row - start.row + 1 : 0;
	          if (end) {
	            rlen = rowSelectionLength;
	          } else {
	            rlen = Math.max(rowInputLength, rowSelectionLength);
	          }
	          for (r = 0; r < rlen; r++) {
	            if ((end && current.row > end.row && rowSelectionLength > rowInputLength) || (!priv.settings.allowInsertRow && current.row > instance.countRows() - 1) || (current.row >= priv.settings.maxRows)) {
	              break;
	            }
	            var logicalRow = r - skippedRow;
	            var colInputLength = getInputValue(logicalRow).length;
	            var colSelectionLength = end ? end.col - start.col + 1 : 0;
	            if (end) {
	              clen = colSelectionLength;
	            } else {
	              clen = Math.max(colInputLength, colSelectionLength);
	            }
	            current.col = start.col;
	            cellMeta = instance.getCellMeta(current.row, current.col);
	            if ((source === 'paste' || source === 'autofill') && cellMeta.skipRowOnPaste) {
	              skippedRow++;
	              current.row++;
	              rlen++;
	              continue;
	            }
	            skippedColumn = 0;
	            for (c = 0; c < clen; c++) {
	              if ((end && current.col > end.col && colSelectionLength > colInputLength) || (!priv.settings.allowInsertColumn && current.col > instance.countCols() - 1) || (current.col >= priv.settings.maxCols)) {
	                break;
	              }
	              cellMeta = instance.getCellMeta(current.row, current.col);
	              if ((source === 'paste' || source === 'autofill') && cellMeta.skipColumnOnPaste) {
	                skippedColumn++;
	                current.col++;
	                clen++;
	                continue;
	              }
	              if (cellMeta.readOnly) {
	                current.col++;
	                continue;
	              }
	              var logicalColumn = c - skippedColumn;
	              var value = getInputValue(logicalRow, logicalColumn);
	              var orgValue = instance.getDataAtCell(current.row, current.col);
	              var index = {
	                row: logicalRow,
	                col: logicalColumn
	              };
	              if (source === 'autofill') {
	                var result = instance.runHooks('beforeAutofillInsidePopulate', index, direction, input, deltas, {}, selected);
	                if (result) {
	                  value = typeof(result.value) === 'undefined' ? value : result.value;
	                }
	              }
	              if (value !== null && typeof value === 'object') {
	                if (orgValue === null || typeof orgValue !== 'object') {
	                  pushData = false;
	                } else {
	                  var orgValueSchema = duckSchema(orgValue[0] || orgValue);
	                  var valueSchema = duckSchema(value[0] || value);
	                  if (isObjectEquals(orgValueSchema, valueSchema)) {
	                    value = deepClone(value);
	                  } else {
	                    pushData = false;
	                  }
	                }
	              } else if (orgValue !== null && typeof orgValue === 'object') {
	                pushData = false;
	              }
	              if (pushData) {
	                setData.push([current.row, current.col, value]);
	              }
	              pushData = true;
	              current.col++;
	            }
	            current.row++;
	          }
	          instance.setDataAtCell(setData, null, null, source || 'populateFromArray');
	          break;
	      }
	    }
	  };
	  this.selection = selection = {
	    inProgress: false,
	    selectedHeader: {
	      cols: false,
	      rows: false
	    },
	    setSelectedHeaders: function(rows, cols) {
	      instance.selection.selectedHeader.rows = rows;
	      instance.selection.selectedHeader.cols = cols;
	    },
	    begin: function() {
	      instance.selection.inProgress = true;
	    },
	    finish: function() {
	      var sel = instance.getSelected();
	      Handsontable.hooks.run(instance, 'afterSelectionEnd', sel[0], sel[1], sel[2], sel[3]);
	      Handsontable.hooks.run(instance, 'afterSelectionEndByProp', sel[0], instance.colToProp(sel[1]), sel[2], instance.colToProp(sel[3]));
	      instance.selection.inProgress = false;
	    },
	    isInProgress: function() {
	      return instance.selection.inProgress;
	    },
	    setRangeStart: function(coords, keepEditorOpened) {
	      Handsontable.hooks.run(instance, 'beforeSetRangeStart', coords);
	      priv.selRange = new WalkontableCellRange(coords, coords, coords);
	      selection.setRangeEnd(coords, null, keepEditorOpened);
	    },
	    setRangeEnd: function(coords, scrollToCell, keepEditorOpened) {
	      if (priv.selRange === null) {
	        return;
	      }
	      var disableVisualSelection,
	          isHeaderSelected = false,
	          areCoordsPositive = true;
	      var firstVisibleRow = instance.view.wt.wtTable.getFirstVisibleRow();
	      var firstVisibleColumn = instance.view.wt.wtTable.getFirstVisibleColumn();
	      var newRangeCoords = {
	        row: null,
	        col: null
	      };
	      Handsontable.hooks.run(instance, 'beforeSetRangeEnd', coords);
	      instance.selection.begin();
	      newRangeCoords.row = coords.row < 0 ? firstVisibleRow : coords.row;
	      newRangeCoords.col = coords.col < 0 ? firstVisibleColumn : coords.col;
	      priv.selRange.to = new WalkontableCellCoords(newRangeCoords.row, newRangeCoords.col);
	      if (!priv.settings.multiSelect) {
	        priv.selRange.from = coords;
	      }
	      instance.view.wt.selections.current.clear();
	      disableVisualSelection = instance.getCellMeta(priv.selRange.highlight.row, priv.selRange.highlight.col).disableVisualSelection;
	      if (typeof disableVisualSelection === 'string') {
	        disableVisualSelection = [disableVisualSelection];
	      }
	      if (disableVisualSelection === false || Array.isArray(disableVisualSelection) && disableVisualSelection.indexOf('current') === -1) {
	        instance.view.wt.selections.current.add(priv.selRange.highlight);
	      }
	      instance.view.wt.selections.area.clear();
	      if ((disableVisualSelection === false || Array.isArray(disableVisualSelection) && disableVisualSelection.indexOf('area') === -1) && selection.isMultiple()) {
	        instance.view.wt.selections.area.add(priv.selRange.from);
	        instance.view.wt.selections.area.add(priv.selRange.to);
	      }
	      if (priv.settings.currentRowClassName || priv.settings.currentColClassName) {
	        instance.view.wt.selections.highlight.clear();
	        instance.view.wt.selections.highlight.add(priv.selRange.from);
	        instance.view.wt.selections.highlight.add(priv.selRange.to);
	      }
	      Handsontable.hooks.run(instance, 'afterSelection', priv.selRange.from.row, priv.selRange.from.col, priv.selRange.to.row, priv.selRange.to.col);
	      Handsontable.hooks.run(instance, 'afterSelectionByProp', priv.selRange.from.row, datamap.colToProp(priv.selRange.from.col), priv.selRange.to.row, datamap.colToProp(priv.selRange.to.col));
	      if ((priv.selRange.from.row === 0 && priv.selRange.to.row === instance.countRows() - 1 && instance.countRows() > 1) || (priv.selRange.from.col === 0 && priv.selRange.to.col === instance.countCols() - 1 && instance.countCols() > 1)) {
	        isHeaderSelected = true;
	      }
	      if (coords.row < 0 || coords.col < 0) {
	        areCoordsPositive = false;
	      }
	      if (scrollToCell !== false && !isHeaderSelected && areCoordsPositive) {
	        if (priv.selRange.from && !selection.isMultiple()) {
	          instance.view.scrollViewport(priv.selRange.from);
	        } else {
	          instance.view.scrollViewport(coords);
	        }
	      }
	      selection.refreshBorders(null, keepEditorOpened);
	    },
	    refreshBorders: function(revertOriginal, keepEditor) {
	      if (!keepEditor) {
	        editorManager.destroyEditor(revertOriginal);
	      }
	      instance.view.render();
	      if (selection.isSelected() && !keepEditor) {
	        editorManager.prepareEditor();
	      }
	    },
	    isMultiple: function() {
	      var isMultiple = !(priv.selRange.to.col === priv.selRange.from.col && priv.selRange.to.row === priv.selRange.from.row),
	          modifier = Handsontable.hooks.run(instance, 'afterIsMultipleSelection', isMultiple);
	      if (isMultiple) {
	        return modifier;
	      }
	    },
	    transformStart: function(rowDelta, colDelta, force, keepEditorOpened) {
	      var delta = new WalkontableCellCoords(rowDelta, colDelta),
	          rowTransformDir = 0,
	          colTransformDir = 0,
	          totalRows,
	          totalCols,
	          coords,
	          fixedRowsBottom;
	      instance.runHooks('modifyTransformStart', delta);
	      totalRows = instance.countRows();
	      totalCols = instance.countCols();
	      fixedRowsBottom = instance.getSettings().fixedRowsBottom;
	      if (priv.selRange.highlight.row + rowDelta > totalRows - 1) {
	        if (force && priv.settings.minSpareRows > 0 && !(fixedRowsBottom && priv.selRange.highlight.row >= totalRows - fixedRowsBottom - 1)) {
	          instance.alter('insert_row', totalRows);
	          totalRows = instance.countRows();
	        } else if (priv.settings.autoWrapCol) {
	          delta.row = 1 - totalRows;
	          delta.col = priv.selRange.highlight.col + delta.col == totalCols - 1 ? 1 - totalCols : 1;
	        }
	      } else if (priv.settings.autoWrapCol && priv.selRange.highlight.row + delta.row < 0 && priv.selRange.highlight.col + delta.col >= 0) {
	        delta.row = totalRows - 1;
	        delta.col = priv.selRange.highlight.col + delta.col == 0 ? totalCols - 1 : -1;
	      }
	      if (priv.selRange.highlight.col + delta.col > totalCols - 1) {
	        if (force && priv.settings.minSpareCols > 0) {
	          instance.alter('insert_col', totalCols);
	          totalCols = instance.countCols();
	        } else if (priv.settings.autoWrapRow) {
	          delta.row = priv.selRange.highlight.row + delta.row == totalRows - 1 ? 1 - totalRows : 1;
	          delta.col = 1 - totalCols;
	        }
	      } else if (priv.settings.autoWrapRow && priv.selRange.highlight.col + delta.col < 0 && priv.selRange.highlight.row + delta.row >= 0) {
	        delta.row = priv.selRange.highlight.row + delta.row == 0 ? totalRows - 1 : -1;
	        delta.col = totalCols - 1;
	      }
	      coords = new WalkontableCellCoords(priv.selRange.highlight.row + delta.row, priv.selRange.highlight.col + delta.col);
	      if (coords.row < 0) {
	        rowTransformDir = -1;
	        coords.row = 0;
	      } else if (coords.row > 0 && coords.row >= totalRows) {
	        rowTransformDir = 1;
	        coords.row = totalRows - 1;
	      }
	      if (coords.col < 0) {
	        colTransformDir = -1;
	        coords.col = 0;
	      } else if (coords.col > 0 && coords.col >= totalCols) {
	        colTransformDir = 1;
	        coords.col = totalCols - 1;
	      }
	      instance.runHooks('afterModifyTransformStart', coords, rowTransformDir, colTransformDir);
	      selection.setRangeStart(coords, keepEditorOpened);
	    },
	    transformEnd: function(rowDelta, colDelta) {
	      var delta = new WalkontableCellCoords(rowDelta, colDelta),
	          rowTransformDir = 0,
	          colTransformDir = 0,
	          totalRows,
	          totalCols,
	          coords;
	      instance.runHooks('modifyTransformEnd', delta);
	      totalRows = instance.countRows();
	      totalCols = instance.countCols();
	      coords = new WalkontableCellCoords(priv.selRange.to.row + delta.row, priv.selRange.to.col + delta.col);
	      if (coords.row < 0) {
	        rowTransformDir = -1;
	        coords.row = 0;
	      } else if (coords.row > 0 && coords.row >= totalRows) {
	        rowTransformDir = 1;
	        coords.row = totalRows - 1;
	      }
	      if (coords.col < 0) {
	        colTransformDir = -1;
	        coords.col = 0;
	      } else if (coords.col > 0 && coords.col >= totalCols) {
	        colTransformDir = 1;
	        coords.col = totalCols - 1;
	      }
	      instance.runHooks('afterModifyTransformEnd', coords, rowTransformDir, colTransformDir);
	      selection.setRangeEnd(coords, true);
	    },
	    isSelected: function() {
	      return (priv.selRange !== null);
	    },
	    inInSelection: function(coords) {
	      if (!selection.isSelected()) {
	        return false;
	      }
	      return priv.selRange.includes(coords);
	    },
	    deselect: function() {
	      if (!selection.isSelected()) {
	        return;
	      }
	      instance.selection.inProgress = false;
	      priv.selRange = null;
	      instance.view.wt.selections.current.clear();
	      instance.view.wt.selections.area.clear();
	      if (priv.settings.currentRowClassName || priv.settings.currentColClassName) {
	        instance.view.wt.selections.highlight.clear();
	      }
	      editorManager.destroyEditor();
	      selection.refreshBorders();
	      Handsontable.hooks.run(instance, 'afterDeselect');
	    },
	    selectAll: function() {
	      if (!priv.settings.multiSelect) {
	        return;
	      }
	      selection.setRangeStart(new WalkontableCellCoords(0, 0));
	      selection.setRangeEnd(new WalkontableCellCoords(instance.countRows() - 1, instance.countCols() - 1), false);
	    },
	    empty: function() {
	      if (!selection.isSelected()) {
	        return;
	      }
	      var topLeft = priv.selRange.getTopLeftCorner();
	      var bottomRight = priv.selRange.getBottomRightCorner();
	      var r,
	          c,
	          changes = [];
	      for (r = topLeft.row; r <= bottomRight.row; r++) {
	        for (c = topLeft.col; c <= bottomRight.col; c++) {
	          if (!instance.getCellMeta(r, c).readOnly) {
	            changes.push([r, c, '']);
	          }
	        }
	      }
	      instance.setDataAtCell(changes);
	    }
	  };
	  this.init = function() {
	    Handsontable.hooks.run(instance, 'beforeInit');
	    if (Handsontable.mobileBrowser) {
	      addClass(instance.rootElement, 'mobile');
	    }
	    this.updateSettings(priv.settings, true);
	    this.view = new TableView(this);
	    editorManager = new EditorManager(instance, priv, selection, datamap);
	    this.forceFullRender = true;
	    Handsontable.hooks.run(instance, 'init');
	    this.view.render();
	    if (typeof priv.firstRun === 'object') {
	      Handsontable.hooks.run(instance, 'afterChange', priv.firstRun[0], priv.firstRun[1]);
	      priv.firstRun = false;
	    }
	    Handsontable.hooks.run(instance, 'afterInit');
	  };
	  function ValidatorsQueue() {
	    var resolved = false;
	    return {
	      validatorsInQueue: 0,
	      valid: true,
	      addValidatorToQueue: function() {
	        this.validatorsInQueue++;
	        resolved = false;
	      },
	      removeValidatorFormQueue: function() {
	        this.validatorsInQueue = this.validatorsInQueue - 1 < 0 ? 0 : this.validatorsInQueue - 1;
	        this.checkIfQueueIsEmpty();
	      },
	      onQueueEmpty: function(valid) {},
	      checkIfQueueIsEmpty: function() {
	        if (this.validatorsInQueue == 0 && resolved == false) {
	          resolved = true;
	          this.onQueueEmpty(this.valid);
	        }
	      }
	    };
	  }
	  function validateChanges(changes, source, callback) {
	    var waitingForValidator = new ValidatorsQueue();
	    waitingForValidator.onQueueEmpty = resolve;
	    for (var i = changes.length - 1; i >= 0; i--) {
	      if (changes[i] === null) {
	        changes.splice(i, 1);
	      } else {
	        var row = changes[i][0];
	        var col = datamap.propToCol(changes[i][1]);
	        var logicalCol = instance.runHooks('modifyCol', col);
	        var cellProperties = instance.getCellMeta(row, logicalCol);
	        if (cellProperties.type === 'numeric' && typeof changes[i][3] === 'string') {
	          if (changes[i][3].length > 0 && (/^-?[\d\s]*(\.|\,)?\d*$/.test(changes[i][3]) || cellProperties.format)) {
	            var len = changes[i][3].length;
	            if (typeof cellProperties.language == 'undefined') {
	              numeral.language('en');
	            } else if (changes[i][3].indexOf('.') === len - 3 && changes[i][3].indexOf(',') === -1) {
	              numeral.language('en');
	            } else {
	              numeral.language(cellProperties.language);
	            }
	            if (numeral.validate(changes[i][3])) {
	              changes[i][3] = numeral().unformat(changes[i][3]);
	            }
	          }
	        }
	        if (instance.getCellValidator(cellProperties)) {
	          waitingForValidator.addValidatorToQueue();
	          instance.validateCell(changes[i][3], cellProperties, (function(i, cellProperties) {
	            return function(result) {
	              if (typeof result !== 'boolean') {
	                throw new Error('Validation error: result is not boolean');
	              }
	              if (result === false && cellProperties.allowInvalid === false) {
	                changes.splice(i, 1);
	                cellProperties.valid = true;
	                --i;
	              }
	              waitingForValidator.removeValidatorFormQueue();
	            };
	          })(i, cellProperties), source);
	        }
	      }
	    }
	    waitingForValidator.checkIfQueueIsEmpty();
	    function resolve() {
	      var beforeChangeResult;
	      if (changes.length) {
	        beforeChangeResult = Handsontable.hooks.run(instance, 'beforeChange', changes, source);
	        if (typeof beforeChangeResult === 'function') {
	          console.warn('Your beforeChange callback returns a function. It\'s not supported since Handsontable 0.12.1 (and the returned function will not be executed).');
	        } else if (beforeChangeResult === false) {
	          changes.splice(0, changes.length);
	        }
	      }
	      callback();
	    }
	  }
	  function applyChanges(changes, source) {
	    var i = changes.length - 1;
	    if (i < 0) {
	      return;
	    }
	    for (; 0 <= i; i--) {
	      if (changes[i] === null) {
	        changes.splice(i, 1);
	        continue;
	      }
	      if (changes[i][2] == null && changes[i][3] == null) {
	        continue;
	      }
	      if (priv.settings.allowInsertRow) {
	        while (changes[i][0] > instance.countRows() - 1) {
	          datamap.createRow();
	        }
	      }
	      if (instance.dataType === 'array' && priv.settings.allowInsertColumn) {
	        while (datamap.propToCol(changes[i][1]) > instance.countCols() - 1) {
	          datamap.createCol();
	        }
	      }
	      datamap.set(changes[i][0], changes[i][1], changes[i][3]);
	    }
	    instance.forceFullRender = true;
	    grid.adjustRowsAndCols();
	    Handsontable.hooks.run(instance, 'beforeChangeRender', changes, source);
	    selection.refreshBorders(null, true);
	    instance.view.wt.wtOverlays.adjustElementsSize();
	    Handsontable.hooks.run(instance, 'afterChange', changes, source || 'edit');
	  }
	  this.validateCell = function(value, cellProperties, callback, source) {
	    var validator = instance.getCellValidator(cellProperties);
	    function done(valid) {
	      var col = cellProperties.col,
	          row = cellProperties.row,
	          td = instance.getCell(row, col, true);
	      if (td) {
	        instance.view.wt.wtSettings.settings.cellRenderer(row, col, td);
	      }
	      callback(valid);
	    }
	    if (Object.prototype.toString.call(validator) === '[object RegExp]') {
	      validator = (function(validator) {
	        return function(value, callback) {
	          callback(validator.test(value));
	        };
	      })(validator);
	    }
	    if (typeof validator == 'function') {
	      value = Handsontable.hooks.run(instance, 'beforeValidate', value, cellProperties.row, cellProperties.prop, source);
	      instance._registerTimeout(setTimeout(function() {
	        validator.call(cellProperties, value, function(valid) {
	          valid = Handsontable.hooks.run(instance, 'afterValidate', valid, value, cellProperties.row, cellProperties.prop, source);
	          cellProperties.valid = valid;
	          done(valid);
	          Handsontable.hooks.run(instance, 'postAfterValidate', valid, value, cellProperties.row, cellProperties.prop, source);
	        });
	      }, 0));
	    } else {
	      cellProperties.valid = true;
	      done(cellProperties.valid);
	    }
	  };
	  function setDataInputToArray(row, propOrCol, value) {
	    if (typeof row === 'object') {
	      return row;
	    } else {
	      return [[row, propOrCol, value]];
	    }
	  }
	  this.setDataAtCell = function(row, col, value, source) {
	    var input = setDataInputToArray(row, col, value),
	        i,
	        ilen,
	        changes = [],
	        prop;
	    for (i = 0, ilen = input.length; i < ilen; i++) {
	      if (typeof input[i] !== 'object') {
	        throw new Error('Method `setDataAtCell` accepts row number or changes array of arrays as its first parameter');
	      }
	      if (typeof input[i][1] !== 'number') {
	        throw new Error('Method `setDataAtCell` accepts row and column number as its parameters. If you want to use object property name, use method `setDataAtRowProp`');
	      }
	      prop = datamap.colToProp(input[i][1]);
	      changes.push([input[i][0], prop, datamap.get(input[i][0], prop), input[i][2]]);
	    }
	    if (!source && typeof row === 'object') {
	      source = col;
	    }
	    validateChanges(changes, source, function() {
	      applyChanges(changes, source);
	    });
	  };
	  this.setDataAtRowProp = function(row, prop, value, source) {
	    var input = setDataInputToArray(row, prop, value),
	        i,
	        ilen,
	        changes = [];
	    for (i = 0, ilen = input.length; i < ilen; i++) {
	      changes.push([input[i][0], input[i][1], datamap.get(input[i][0], input[i][1]), input[i][2]]);
	    }
	    if (!source && typeof row === 'object') {
	      source = prop;
	    }
	    validateChanges(changes, source, function() {
	      applyChanges(changes, source);
	    });
	  };
	  this.listen = function() {
	    Handsontable.activeGuid = instance.guid;
	    if (document.activeElement && document.activeElement !== document.body) {
	      document.activeElement.blur();
	    } else if (!document.activeElement) {
	      document.body.focus();
	    }
	  };
	  this.unlisten = function() {
	    Handsontable.activeGuid = null;
	  };
	  this.isListening = function() {
	    return Handsontable.activeGuid === instance.guid;
	  };
	  this.destroyEditor = function(revertOriginal) {
	    selection.refreshBorders(revertOriginal);
	  };
	  this.populateFromArray = function(row, col, input, endRow, endCol, source, method, direction, deltas) {
	    var c;
	    if (!(typeof input === 'object' && typeof input[0] === 'object')) {
	      throw new Error('populateFromArray parameter `input` must be an array of arrays');
	    }
	    c = typeof endRow === 'number' ? new WalkontableCellCoords(endRow, endCol) : null;
	    return grid.populateFromArray(new WalkontableCellCoords(row, col), input, c, source, method, direction, deltas);
	  };
	  this.spliceCol = function(col, index, amount) {
	    return datamap.spliceCol.apply(datamap, arguments);
	  };
	  this.spliceRow = function(row, index, amount) {
	    return datamap.spliceRow.apply(datamap, arguments);
	  };
	  this.getSelected = function() {
	    if (selection.isSelected()) {
	      return [priv.selRange.from.row, priv.selRange.from.col, priv.selRange.to.row, priv.selRange.to.col];
	    }
	  };
	  this.getSelectedRange = function() {
	    if (selection.isSelected()) {
	      return priv.selRange;
	    }
	  };
	  this.render = function() {
	    if (instance.view) {
	      instance.renderCall = true;
	      instance.forceFullRender = true;
	      selection.refreshBorders(null, true);
	    }
	  };
	  this.loadData = function(data) {
	    if (typeof data === 'object' && data !== null) {
	      if (!(data.push && data.splice)) {
	        data = [data];
	      }
	    } else if (data === null) {
	      data = [];
	      var row;
	      for (var r = 0,
	          rlen = priv.settings.startRows; r < rlen; r++) {
	        row = [];
	        for (var c = 0,
	            clen = priv.settings.startCols; c < clen; c++) {
	          row.push(null);
	        }
	        data.push(row);
	      }
	    } else {
	      throw new Error('loadData only accepts array of objects or array of arrays (' + typeof data + ' given)');
	    }
	    priv.isPopulated = false;
	    GridSettings.prototype.data = data;
	    if (Array.isArray(priv.settings.dataSchema) || Array.isArray(data[0])) {
	      instance.dataType = 'array';
	    } else if (typeof priv.settings.dataSchema === 'function') {
	      instance.dataType = 'function';
	    } else {
	      instance.dataType = 'object';
	    }
	    datamap = new DataMap(instance, priv, GridSettings);
	    clearCellSettingCache();
	    grid.adjustRowsAndCols();
	    Handsontable.hooks.run(instance, 'afterLoadData');
	    if (priv.firstRun) {
	      priv.firstRun = [null, 'loadData'];
	    } else {
	      Handsontable.hooks.run(instance, 'afterChange', null, 'loadData');
	      instance.render();
	    }
	    priv.isPopulated = true;
	    function clearCellSettingCache() {
	      priv.cellSettings.length = 0;
	    }
	  };
	  this.getData = function(r, c, r2, c2) {
	    if (typeof r === 'undefined') {
	      return datamap.getAll();
	    } else {
	      return datamap.getRange(new WalkontableCellCoords(r, c), new WalkontableCellCoords(r2, c2), datamap.DESTINATION_RENDERER);
	    }
	  };
	  this.getCopyableText = function(startRow, startCol, endRow, endCol) {
	    return datamap.getCopyableText(new WalkontableCellCoords(startRow, startCol), new WalkontableCellCoords(endRow, endCol));
	  };
	  this.getCopyableData = function(row, column) {
	    return datamap.getCopyable(row, datamap.colToProp(column));
	  };
	  this.getSchema = function() {
	    return datamap.getSchema();
	  };
	  this.updateSettings = function(settings, init) {
	    var i,
	        clen;
	    if (typeof settings.rows !== 'undefined') {
	      throw new Error('"rows" setting is no longer supported. do you mean startRows, minRows or maxRows?');
	    }
	    if (typeof settings.cols !== 'undefined') {
	      throw new Error('"cols" setting is no longer supported. do you mean startCols, minCols or maxCols?');
	    }
	    for (i in settings) {
	      if (i === 'data') {
	        continue;
	      } else {
	        if (Handsontable.hooks.getRegistered().indexOf(i) > -1) {
	          if (typeof settings[i] === 'function' || Array.isArray(settings[i])) {
	            instance.addHook(i, settings[i]);
	          }
	        } else {
	          if (!init && settings.hasOwnProperty(i)) {
	            GridSettings.prototype[i] = settings[i];
	          }
	        }
	      }
	    }
	    if (settings.data === void 0 && priv.settings.data === void 0) {
	      instance.loadData(null);
	    } else if (settings.data !== void 0) {
	      instance.loadData(settings.data);
	    } else if (settings.columns !== void 0) {
	      datamap.createMap();
	    }
	    clen = instance.countCols();
	    priv.cellSettings.length = 0;
	    if (clen > 0) {
	      var proto,
	          column;
	      for (i = 0; i < clen; i++) {
	        priv.columnSettings[i] = columnFactory(GridSettings, priv.columnsSettingConflicts);
	        proto = priv.columnSettings[i].prototype;
	        if (GridSettings.prototype.columns) {
	          column = GridSettings.prototype.columns[i];
	          extend(proto, column);
	          extend(proto, expandType(column));
	        }
	      }
	    }
	    if (typeof settings.cell !== 'undefined') {
	      for (i in settings.cell) {
	        if (settings.cell.hasOwnProperty(i)) {
	          var cell = settings.cell[i];
	          instance.setCellMetaObject(cell.row, cell.col, cell);
	        }
	      }
	    }
	    Handsontable.hooks.run(instance, 'afterCellMetaReset');
	    if (typeof settings.className !== 'undefined') {
	      if (GridSettings.prototype.className) {
	        removeClass(instance.rootElement, GridSettings.prototype.className);
	      }
	      if (settings.className) {
	        addClass(instance.rootElement, settings.className);
	      }
	    }
	    if (typeof settings.height != 'undefined') {
	      var height = settings.height;
	      if (typeof height == 'function') {
	        height = height();
	      }
	      instance.rootElement.style.height = height + 'px';
	    }
	    if (typeof settings.width != 'undefined') {
	      var width = settings.width;
	      if (typeof width == 'function') {
	        width = width();
	      }
	      instance.rootElement.style.width = width + 'px';
	    }
	    if (height) {
	      instance.rootElement.style.overflow = 'hidden';
	    }
	    if (!init) {
	      Handsontable.hooks.run(instance, 'afterUpdateSettings');
	    }
	    grid.adjustRowsAndCols();
	    if (instance.view && !priv.firstRun) {
	      instance.forceFullRender = true;
	      selection.refreshBorders(null, true);
	    }
	  };
	  this.getValue = function() {
	    var sel = instance.getSelected();
	    if (GridSettings.prototype.getValue) {
	      if (typeof GridSettings.prototype.getValue === 'function') {
	        return GridSettings.prototype.getValue.call(instance);
	      } else if (sel) {
	        return instance.getData()[sel[0]][GridSettings.prototype.getValue];
	      }
	    } else if (sel) {
	      return instance.getDataAtCell(sel[0], sel[1]);
	    }
	  };
	  function expandType(obj) {
	    if (!obj.hasOwnProperty('type')) {
	      return;
	    }
	    var type,
	        expandedType = {};
	    if (typeof obj.type === 'object') {
	      type = obj.type;
	    } else if (typeof obj.type === 'string') {
	      type = Handsontable.cellTypes[obj.type];
	      if (type === void 0) {
	        throw new Error('You declared cell type "' + obj.type + '" as a string that is not mapped to a known object. Cell type must be an object or a string mapped to an object in Handsontable.cellTypes');
	      }
	    }
	    for (var i in type) {
	      if (type.hasOwnProperty(i) && !obj.hasOwnProperty(i)) {
	        expandedType[i] = type[i];
	      }
	    }
	    return expandedType;
	  }
	  this.getSettings = function() {
	    return priv.settings;
	  };
	  this.clear = function() {
	    selection.selectAll();
	    selection.empty();
	  };
	  this.alter = function(action, index, amount, source, keepEmptyRows) {
	    grid.alter(action, index, amount, source, keepEmptyRows);
	  };
	  this.getCell = function(row, col, topmost) {
	    return instance.view.getCellAtCoords(new WalkontableCellCoords(row, col), topmost);
	  };
	  this.getCoords = function(elem) {
	    return this.view.wt.wtTable.getCoords.call(this.view.wt.wtTable, elem);
	  };
	  this.colToProp = function(col) {
	    return datamap.colToProp(col);
	  };
	  this.propToCol = function(prop) {
	    return datamap.propToCol(prop);
	  };
	  this.getDataAtCell = function(row, col) {
	    return datamap.get(row, datamap.colToProp(col));
	  };
	  this.getDataAtRowProp = function(row, prop) {
	    return datamap.get(row, prop);
	  };
	  this.getDataAtCol = function(col) {
	    var out = [];
	    return out.concat.apply(out, datamap.getRange(new WalkontableCellCoords(0, col), new WalkontableCellCoords(priv.settings.data.length - 1, col), datamap.DESTINATION_RENDERER));
	  };
	  this.getDataAtProp = function(prop) {
	    var out = [],
	        range;
	    range = datamap.getRange(new WalkontableCellCoords(0, datamap.propToCol(prop)), new WalkontableCellCoords(priv.settings.data.length - 1, datamap.propToCol(prop)), datamap.DESTINATION_RENDERER);
	    return out.concat.apply(out, range);
	  };
	  this.getSourceDataAtCol = function(col) {
	    var out = [],
	        data = priv.settings.data;
	    for (var i = 0; i < data.length; i++) {
	      out.push(data[i][col]);
	    }
	    return out;
	  };
	  this.getSourceDataAtRow = function(row) {
	    return priv.settings.data[row];
	  };
	  this.getDataAtRow = function(row) {
	    var data = datamap.getRange(new WalkontableCellCoords(row, 0), new WalkontableCellCoords(row, this.countCols() - 1), datamap.DESTINATION_RENDERER);
	    return data[0];
	  };
	  this.getDataType = function(rowFrom, columnFrom, rowTo, columnTo) {
	    var $__18 = this;
	    var previousType = null;
	    var currentType = null;
	    if (rowFrom === void 0) {
	      rowFrom = 0;
	      rowTo = this.countRows();
	      columnFrom = 0;
	      columnTo = this.countCols();
	    }
	    if (rowTo === void 0) {
	      rowTo = rowFrom;
	    }
	    if (columnTo === void 0) {
	      columnTo = columnFrom;
	    }
	    var type = 'mixed';
	    rangeEach(Math.min(rowFrom, rowTo), Math.max(rowFrom, rowTo), (function(row) {
	      var isTypeEqual = true;
	      rangeEach(Math.min(columnFrom, columnTo), Math.max(columnFrom, columnTo), (function(column) {
	        var cellType = $__18.getCellMeta(row, column);
	        currentType = cellType.type;
	        if (previousType) {
	          isTypeEqual = previousType === currentType;
	        } else {
	          previousType = currentType;
	        }
	        return isTypeEqual;
	      }));
	      type = isTypeEqual ? currentType : 'mixed';
	      return isTypeEqual;
	    }));
	    return type;
	  };
	  this.removeCellMeta = function(row, col, key) {
	    var cellMeta = instance.getCellMeta(row, col);
	    if (cellMeta[key] != undefined) {
	      delete priv.cellSettings[row][col][key];
	    }
	  };
	  this.setCellMetaObject = function(row, col, prop) {
	    if (typeof prop === 'object') {
	      for (var key in prop) {
	        if (prop.hasOwnProperty(key)) {
	          var value = prop[key];
	          this.setCellMeta(row, col, key, value);
	        }
	      }
	    }
	  };
	  this.setCellMeta = function(row, col, key, val) {
	    if (!priv.cellSettings[row]) {
	      priv.cellSettings[row] = [];
	    }
	    if (!priv.cellSettings[row][col]) {
	      priv.cellSettings[row][col] = new priv.columnSettings[col]();
	    }
	    priv.cellSettings[row][col][key] = val;
	    Handsontable.hooks.run(instance, 'afterSetCellMeta', row, col, key, val);
	  };
	  this.getCellsMeta = function() {
	    return arrayFlatten(priv.cellSettings);
	  };
	  this.getCellMeta = function(row, col) {
	    var prop = datamap.colToProp(col),
	        cellProperties;
	    row = translateRowIndex(row);
	    col = translateColIndex(col);
	    if (!priv.columnSettings[col]) {
	      priv.columnSettings[col] = columnFactory(GridSettings, priv.columnsSettingConflicts);
	    }
	    if (!priv.cellSettings[row]) {
	      priv.cellSettings[row] = [];
	    }
	    if (!priv.cellSettings[row][col]) {
	      priv.cellSettings[row][col] = new priv.columnSettings[col]();
	    }
	    cellProperties = priv.cellSettings[row][col];
	    cellProperties.row = row;
	    cellProperties.col = col;
	    cellProperties.prop = prop;
	    cellProperties.instance = instance;
	    Handsontable.hooks.run(instance, 'beforeGetCellMeta', row, col, cellProperties);
	    extend(cellProperties, expandType(cellProperties));
	    if (cellProperties.cells) {
	      var settings = cellProperties.cells.call(cellProperties, row, col, prop);
	      if (settings) {
	        extend(cellProperties, settings);
	        extend(cellProperties, expandType(settings));
	      }
	    }
	    Handsontable.hooks.run(instance, 'afterGetCellMeta', row, col, cellProperties);
	    return cellProperties;
	  };
	  this.isColumnModificationAllowed = function() {
	    return !(instance.dataType === 'object' || instance.getSettings().columns);
	  };
	  function translateRowIndex(row) {
	    return Handsontable.hooks.run(instance, 'modifyRow', row);
	  }
	  function translateColIndex(col) {
	    return Handsontable.hooks.run(instance, 'modifyCol', col);
	  }
	  var rendererLookup = cellMethodLookupFactory('renderer');
	  this.getCellRenderer = function(row, col) {
	    var renderer = rendererLookup.call(this, row, col);
	    return getRenderer(renderer);
	  };
	  this.getCellEditor = cellMethodLookupFactory('editor');
	  this.getCellValidator = cellMethodLookupFactory('validator');
	  this.validateCells = function(callback) {
	    var waitingForValidator = new ValidatorsQueue();
	    waitingForValidator.onQueueEmpty = callback;
	    var i = instance.countRows() - 1;
	    while (i >= 0) {
	      var j = instance.countCols() - 1;
	      while (j >= 0) {
	        waitingForValidator.addValidatorToQueue();
	        instance.validateCell(instance.getDataAtCell(i, j), instance.getCellMeta(i, j), function(result) {
	          if (typeof result !== 'boolean') {
	            throw new Error('Validation error: result is not boolean');
	          }
	          if (result === false) {
	            waitingForValidator.valid = false;
	          }
	          waitingForValidator.removeValidatorFormQueue();
	        }, 'validateCells');
	        j--;
	      }
	      i--;
	    }
	    waitingForValidator.checkIfQueueIsEmpty();
	  };
	  this.getRowHeader = function(row) {
	    if (row === void 0) {
	      var out = [];
	      for (var i = 0,
	          ilen = instance.countRows(); i < ilen; i++) {
	        out.push(instance.getRowHeader(i));
	      }
	      return out;
	    } else if (Array.isArray(priv.settings.rowHeaders) && priv.settings.rowHeaders[row] !== void 0) {
	      return priv.settings.rowHeaders[row];
	    } else if (typeof priv.settings.rowHeaders === 'function') {
	      return priv.settings.rowHeaders(row);
	    } else if (priv.settings.rowHeaders && typeof priv.settings.rowHeaders !== 'string' && typeof priv.settings.rowHeaders !== 'number') {
	      return row + 1;
	    } else {
	      return priv.settings.rowHeaders;
	    }
	  };
	  this.hasRowHeaders = function() {
	    return !!priv.settings.rowHeaders;
	  };
	  this.hasColHeaders = function() {
	    if (priv.settings.colHeaders !== void 0 && priv.settings.colHeaders !== null) {
	      return !!priv.settings.colHeaders;
	    }
	    for (var i = 0,
	        ilen = instance.countCols(); i < ilen; i++) {
	      if (instance.getColHeader(i)) {
	        return true;
	      }
	    }
	    return false;
	  };
	  this.getColHeader = function(col) {
	    if (col === void 0) {
	      var out = [];
	      for (var i = 0,
	          ilen = instance.countCols(); i < ilen; i++) {
	        out.push(instance.getColHeader(i));
	      }
	      return out;
	    } else {
	      var baseCol = col;
	      col = Handsontable.hooks.run(instance, 'modifyCol', col);
	      if (priv.settings.columns && priv.settings.columns[col] && priv.settings.columns[col].title) {
	        return priv.settings.columns[col].title;
	      } else if (Array.isArray(priv.settings.colHeaders) && priv.settings.colHeaders[col] !== void 0) {
	        return priv.settings.colHeaders[col];
	      } else if (typeof priv.settings.colHeaders === 'function') {
	        return priv.settings.colHeaders(col);
	      } else if (priv.settings.colHeaders && typeof priv.settings.colHeaders !== 'string' && typeof priv.settings.colHeaders !== 'number') {
	        return spreadsheetColumnLabel(baseCol);
	      } else {
	        return priv.settings.colHeaders;
	      }
	    }
	  };
	  this._getColWidthFromSettings = function(col) {
	    var cellProperties = instance.getCellMeta(0, col);
	    var width = cellProperties.width;
	    if (width === void 0 || width === priv.settings.width) {
	      width = cellProperties.colWidths;
	    }
	    if (width !== void 0 && width !== null) {
	      switch (typeof width) {
	        case 'object':
	          width = width[col];
	          break;
	        case 'function':
	          width = width(col);
	          break;
	      }
	      if (typeof width === 'string') {
	        width = parseInt(width, 10);
	      }
	    }
	    return width;
	  };
	  this.getColWidth = function(col) {
	    var width = instance._getColWidthFromSettings(col);
	    width = Handsontable.hooks.run(instance, 'modifyColWidth', width, col);
	    if (width === void 0) {
	      width = WalkontableViewportColumnsCalculator.DEFAULT_WIDTH;
	    }
	    return width;
	  };
	  this._getRowHeightFromSettings = function(row) {
	    var height = priv.settings.rowHeights;
	    if (height !== void 0 && height !== null) {
	      switch (typeof height) {
	        case 'object':
	          height = height[row];
	          break;
	        case 'function':
	          height = height(row);
	          break;
	      }
	      if (typeof height === 'string') {
	        height = parseInt(height, 10);
	      }
	    }
	    return height;
	  };
	  this.getRowHeight = function(row) {
	    var height = instance._getRowHeightFromSettings(row);
	    height = Handsontable.hooks.run(instance, 'modifyRowHeight', height, row);
	    return height;
	  };
	  this.countRows = function() {
	    return priv.settings.data.length;
	  };
	  this.countCols = function() {
	    if (instance.dataType === 'object' || instance.dataType === 'function') {
	      if (priv.settings.columns && priv.settings.columns.length) {
	        return priv.settings.columns.length;
	      } else {
	        return datamap.colToPropCache.length;
	      }
	    } else if (instance.dataType === 'array') {
	      if (priv.settings.columns && priv.settings.columns.length) {
	        return priv.settings.columns.length;
	      } else if (priv.settings.data && priv.settings.data[0] && priv.settings.data[0].length) {
	        return priv.settings.data[0].length;
	      } else {
	        return 0;
	      }
	    }
	  };
	  this.getColspanOffset = function(col, level) {
	    var colspanSum = 0;
	    if (instance.colspanArray) {
	      for (var i = 0; i < col; i++) {
	        colspanSum += instance.colspanArray[level][i] - 1 || 0;
	      }
	      return colspanSum;
	    }
	    var colspanSum = 0;
	    var TRindex = instance.view.wt.wtTable.THEAD.childNodes.length - level - 1;
	    var TR = instance.view.wt.wtTable.THEAD.querySelector('tr:nth-child(' + parseInt(TRindex + 1, 10) + ')');
	    var rowHeadersCount = instance.view.wt.wtSettings.settings.rowHeaders().length;
	    for (var i = rowHeadersCount; i < rowHeadersCount + col; i++) {
	      if (TR.childNodes[i].hasAttribute('colspan')) {
	        colspanSum += parseInt(TR.childNodes[i].getAttribute('colspan'), 10) - 1;
	      }
	    }
	    return colspanSum;
	  };
	  this.getHeaderColspan = function(col, level) {
	    var TRindex = instance.view.wt.wtTable.THEAD.childNodes.length - level - 1;
	    var rowHeadersCount = instance.view.wt.wtSettings.settings.rowHeaders().length;
	    var TR = instance.view.wt.wtTable.THEAD.querySelector('tr:nth-child(' + parseInt(TRindex + 1, 10) + ')');
	    var offsettedColIndex = rowHeadersCount + col - instance.view.wt.wtViewport.columnsRenderCalculator.startColumn;
	    if (TR.childNodes[offsettedColIndex].hasAttribute('colspan')) {
	      return parseInt(TR.childNodes[offsettedColIndex].getAttribute('colspan'), 10);
	    }
	    return 0;
	  };
	  this.rowOffset = function() {
	    return instance.view.wt.wtTable.getFirstRenderedRow();
	  };
	  this.colOffset = function() {
	    return instance.view.wt.wtTable.getFirstRenderedColumn();
	  };
	  this.countRenderedRows = function() {
	    return instance.view.wt.drawn ? instance.view.wt.wtTable.getRenderedRowsCount() : -1;
	  };
	  this.countVisibleRows = function() {
	    return instance.view.wt.drawn ? instance.view.wt.wtTable.getVisibleRowsCount() : -1;
	  };
	  this.countRenderedCols = function() {
	    return instance.view.wt.drawn ? instance.view.wt.wtTable.getRenderedColumnsCount() : -1;
	  };
	  this.countVisibleCols = function() {
	    return instance.view.wt.drawn ? instance.view.wt.wtTable.getVisibleColumnsCount() : -1;
	  };
	  this.countEmptyRows = function(ending) {
	    var i = instance.countRows() - 1,
	        empty = 0,
	        row;
	    while (i >= 0) {
	      row = Handsontable.hooks.run(this, 'modifyRow', i);
	      if (instance.isEmptyRow(row)) {
	        empty++;
	      } else if (ending) {
	        break;
	      }
	      i--;
	    }
	    return empty;
	  };
	  this.countEmptyCols = function(ending) {
	    if (instance.countRows() < 1) {
	      return 0;
	    }
	    var i = instance.countCols() - 1,
	        empty = 0;
	    while (i >= 0) {
	      if (instance.isEmptyCol(i)) {
	        empty++;
	      } else if (ending) {
	        break;
	      }
	      i--;
	    }
	    return empty;
	  };
	  this.isEmptyRow = function(row) {
	    return priv.settings.isEmptyRow.call(instance, row);
	  };
	  this.isEmptyCol = function(col) {
	    return priv.settings.isEmptyCol.call(instance, col);
	  };
	  this.selectCell = function(row, col, endRow, endCol, scrollToCell, changeListener) {
	    var coords;
	    changeListener = typeof changeListener === 'undefined' || changeListener === true;
	    if (typeof row !== 'number' || row < 0 || row >= instance.countRows()) {
	      return false;
	    }
	    if (typeof col !== 'number' || col < 0 || col >= instance.countCols()) {
	      return false;
	    }
	    if (typeof endRow !== 'undefined') {
	      if (typeof endRow !== 'number' || endRow < 0 || endRow >= instance.countRows()) {
	        return false;
	      }
	      if (typeof endCol !== 'number' || endCol < 0 || endCol >= instance.countCols()) {
	        return false;
	      }
	    }
	    coords = new WalkontableCellCoords(row, col);
	    priv.selRange = new WalkontableCellRange(coords, coords, coords);
	    if (document.activeElement && document.activeElement !== document.documentElement && document.activeElement !== document.body) {
	      document.activeElement.blur();
	    }
	    if (changeListener) {
	      instance.listen();
	    }
	    if (typeof endRow === 'undefined') {
	      selection.setRangeEnd(priv.selRange.from, scrollToCell);
	    } else {
	      selection.setRangeEnd(new WalkontableCellCoords(endRow, endCol), scrollToCell);
	    }
	    instance.selection.finish();
	    return true;
	  };
	  this.selectCellByProp = function(row, prop, endRow, endProp, scrollToCell) {
	    arguments[1] = datamap.propToCol(arguments[1]);
	    if (typeof arguments[3] !== 'undefined') {
	      arguments[3] = datamap.propToCol(arguments[3]);
	    }
	    return instance.selectCell.apply(instance, arguments);
	  };
	  this.deselectCell = function() {
	    selection.deselect();
	  };
	  this.destroy = function() {
	    instance._clearTimeouts();
	    if (instance.view) {
	      instance.view.destroy();
	    }
	    empty(instance.rootElement);
	    eventManager.destroy();
	    Handsontable.hooks.run(instance, 'afterDestroy');
	    Handsontable.hooks.destroy(instance);
	    for (var i in instance) {
	      if (instance.hasOwnProperty(i)) {
	        if (typeof instance[i] === 'function') {
	          instance[i] = postMortem;
	        } else if (i !== 'guid') {
	          instance[i] = null;
	        }
	      }
	    }
	    priv = null;
	    datamap = null;
	    grid = null;
	    selection = null;
	    editorManager = null;
	    instance = null;
	    GridSettings = null;
	  };
	  function postMortem() {
	    throw new Error('This method cannot be called because this Handsontable instance has been destroyed');
	  }
	  this.getActiveEditor = function() {
	    return editorManager.getActiveEditor();
	  };
	  this.getPlugin = function(pluginName) {
	    return getPlugin(this, pluginName);
	  };
	  this.getInstance = function() {
	    return instance;
	  };
	  this.addHook = function(key, callback) {
	    Handsontable.hooks.add(key, callback, instance);
	  };
	  this.addHookOnce = function(key, callback) {
	    Handsontable.hooks.once(key, callback, instance);
	  };
	  this.removeHook = function(key, callback) {
	    Handsontable.hooks.remove(key, callback, instance);
	  };
	  this.runHooks = function(key, p1, p2, p3, p4, p5, p6) {
	    return Handsontable.hooks.run(instance, key, p1, p2, p3, p4, p5, p6);
	  };
	  this.timeouts = [];
	  this._registerTimeout = function(handle) {
	    this.timeouts.push(handle);
	  };
	  this._clearTimeouts = function() {
	    for (var i = 0,
	        ilen = this.timeouts.length; i < ilen; i++) {
	      clearTimeout(this.timeouts[i]);
	    }
	  };
	  this.version = Handsontable.version;
	  Handsontable.hooks.run(instance, 'construct');
	};
	var DefaultSettings = function() {};
	DefaultSettings.prototype = {
	  data: void 0,
	  dataSchema: void 0,
	  width: void 0,
	  height: void 0,
	  startRows: 5,
	  startCols: 5,
	  rowHeaders: null,
	  colHeaders: null,
	  colWidths: void 0,
	  columns: void 0,
	  cells: void 0,
	  cell: [],
	  comments: false,
	  customBorders: false,
	  minRows: 0,
	  minCols: 0,
	  maxRows: Infinity,
	  maxCols: Infinity,
	  minSpareRows: 0,
	  minSpareCols: 0,
	  allowInsertRow: true,
	  allowInsertColumn: true,
	  allowRemoveRow: true,
	  allowRemoveColumn: true,
	  multiSelect: true,
	  fillHandle: true,
	  fixedRowsTop: 0,
	  fixedRowsBottom: 0,
	  fixedColumnsLeft: 0,
	  outsideClickDeselects: true,
	  enterBeginsEditing: true,
	  enterMoves: {
	    row: 1,
	    col: 0
	  },
	  tabMoves: {
	    row: 0,
	    col: 1
	  },
	  autoWrapRow: false,
	  autoWrapCol: false,
	  copyRowsLimit: 1000,
	  copyColsLimit: 1000,
	  pasteMode: 'overwrite',
	  persistentState: false,
	  currentRowClassName: void 0,
	  currentColClassName: void 0,
	  className: void 0,
	  tableClassName: void 0,
	  stretchH: 'none',
	  isEmptyRow: function(row) {
	    var col,
	        colLen,
	        value,
	        meta;
	    for (col = 0, colLen = this.countCols(); col < colLen; col++) {
	      value = this.getDataAtCell(row, col);
	      if (value !== '' && value !== null && typeof value !== 'undefined') {
	        if (typeof value === 'object') {
	          meta = this.getCellMeta(row, col);
	          return isObjectEquals(this.getSchema()[meta.prop], value);
	        }
	        return false;
	      }
	    }
	    return true;
	  },
	  isEmptyCol: function(col) {
	    var row,
	        rowLen,
	        value;
	    for (row = 0, rowLen = this.countRows(); row < rowLen; row++) {
	      value = this.getDataAtCell(row, col);
	      if (value !== '' && value !== null && typeof value !== 'undefined') {
	        return false;
	      }
	    }
	    return true;
	  },
	  observeDOMVisibility: true,
	  allowInvalid: true,
	  invalidCellClassName: 'htInvalid',
	  placeholder: false,
	  placeholderCellClassName: 'htPlaceholder',
	  readOnlyCellClassName: 'htDimmed',
	  renderer: void 0,
	  commentedCellClassName: 'htCommentCell',
	  fragmentSelection: false,
	  readOnly: false,
	  skipColumnOnPaste: false,
	  search: false,
	  type: 'text',
	  copyable: true,
	  editor: void 0,
	  autoComplete: void 0,
	  visibleRows: 10,
	  trimDropdown: true,
	  debug: false,
	  wordWrap: true,
	  noWordWrapClassName: 'htNoWrap',
	  contextMenu: void 0,
	  contextMenuCopyPaste: void 0,
	  copyPaste: void 0,
	  undo: void 0,
	  columnSorting: void 0,
	  manualColumnMove: void 0,
	  manualColumnResize: void 0,
	  manualRowMove: void 0,
	  manualRowResize: void 0,
	  mergeCells: false,
	  viewportRowRenderingOffset: 'auto',
	  viewportColumnRenderingOffset: 'auto',
	  validator: void 0,
	  disableVisualSelection: false,
	  sortIndicator: false,
	  manualColumnFreeze: void 0,
	  trimWhitespace: true,
	  settings: void 0,
	  source: void 0,
	  title: void 0,
	  checkedTemplate: void 0,
	  uncheckedTemplate: void 0,
	  label: void 0,
	  format: void 0,
	  language: void 0,
	  selectOptions: void 0,
	  autoColumnSize: void 0,
	  autoRowSize: void 0,
	  dateFormat: void 0,
	  correctFormat: false,
	  defaultDate: void 0,
	  strict: void 0,
	  renderAllRows: void 0
	};
	Handsontable.DefaultSettings = DefaultSettings;

	//# 
	},{"3rdparty/walkontable/src/calculator/viewportColumns":3,"3rdparty/walkontable/src/cell/coords":5,"3rdparty/walkontable/src/cell/range":6,"3rdparty/walkontable/src/selection":18,"dataMap":26,"editorManager":27,"eventManager":40,"helpers/array":41,"helpers/data":43,"helpers/dom/element":44,"helpers/number":48,"helpers/object":49,"helpers/setting":50,"helpers/string":51,"numeral":"numeral","plugins":55,"renderers":86,"tableView":95}],26:[function(require,module,exports){
	"use strict";
	Object.defineProperties(exports, {
	  DataMap: {get: function() {
	      return DataMap;
	    }},
	  __esModule: {value: true}
	});
	var $__SheetClip__,
	    $__helpers_47_data__,
	    $__helpers_47_setting__,
	    $__helpers_47_object__,
	    $__helpers_47_array__,
	    $__multiMap__;
	var SheetClip = ($__SheetClip__ = require("SheetClip"), $__SheetClip__ && $__SheetClip__.__esModule && $__SheetClip__ || {default: $__SheetClip__}).default;
	var cellMethodLookupFactory = ($__helpers_47_data__ = require("helpers/data"), $__helpers_47_data__ && $__helpers_47_data__.__esModule && $__helpers_47_data__ || {default: $__helpers_47_data__}).cellMethodLookupFactory;
	var columnFactory = ($__helpers_47_setting__ = require("helpers/setting"), $__helpers_47_setting__ && $__helpers_47_setting__.__esModule && $__helpers_47_setting__ || {default: $__helpers_47_setting__}).columnFactory;
	var $__3 = ($__helpers_47_object__ = require("helpers/object"), $__helpers_47_object__ && $__helpers_47_object__.__esModule && $__helpers_47_object__ || {default: $__helpers_47_object__}),
	    duckSchema = $__3.duckSchema,
	    deepExtend = $__3.deepExtend;
	var $__4 = ($__helpers_47_array__ = require("helpers/array"), $__helpers_47_array__ && $__helpers_47_array__.__esModule && $__helpers_47_array__ || {default: $__helpers_47_array__}),
	    extendArray = $__4.extendArray,
	    to2dArray = $__4.to2dArray;
	var MultiMap = ($__multiMap__ = require("multiMap"), $__multiMap__ && $__multiMap__.__esModule && $__multiMap__ || {default: $__multiMap__}).MultiMap;
	function DataMap(instance, priv, GridSettings) {
	  this.instance = instance;
	  this.priv = priv;
	  this.GridSettings = GridSettings;
	  this.dataSource = this.instance.getSettings().data;
	  if (this.dataSource[0]) {
	    this.duckSchema = this.recursiveDuckSchema(this.dataSource[0]);
	  } else {
	    this.duckSchema = {};
	  }
	  this.createMap();
	}
	DataMap.prototype.DESTINATION_RENDERER = 1;
	DataMap.prototype.DESTINATION_CLIPBOARD_GENERATOR = 2;
	DataMap.prototype.recursiveDuckSchema = function(object) {
	  return duckSchema(object);
	};
	DataMap.prototype.recursiveDuckColumns = function(schema, lastCol, parent) {
	  var prop,
	      i;
	  if (typeof lastCol === 'undefined') {
	    lastCol = 0;
	    parent = '';
	  }
	  if (typeof schema === 'object' && !Array.isArray(schema)) {
	    for (i in schema) {
	      if (schema.hasOwnProperty(i)) {
	        if (schema[i] === null) {
	          prop = parent + i;
	          this.colToPropCache.push(prop);
	          this.propToColCache.set(prop, lastCol);
	          lastCol++;
	        } else {
	          lastCol = this.recursiveDuckColumns(schema[i], lastCol, i + '.');
	        }
	      }
	    }
	  }
	  return lastCol;
	};
	DataMap.prototype.createMap = function() {
	  var i,
	      ilen,
	      schema = this.getSchema();
	  if (typeof schema === 'undefined') {
	    throw new Error('trying to create `columns` definition but you didnt\' provide `schema` nor `data`');
	  }
	  this.colToPropCache = [];
	  this.propToColCache = new MultiMap();
	  var columns = this.instance.getSettings().columns;
	  if (columns) {
	    for (i = 0, ilen = columns.length; i < ilen; i++) {
	      if (typeof columns[i].data != 'undefined') {
	        this.colToPropCache[i] = columns[i].data;
	        this.propToColCache.set(columns[i].data, i);
	      }
	    }
	  } else {
	    this.recursiveDuckColumns(schema);
	  }
	};
	DataMap.prototype.colToProp = function(col) {
	  col = Handsontable.hooks.run(this.instance, 'modifyCol', col);
	  if (this.colToPropCache && typeof this.colToPropCache[col] !== 'undefined') {
	    return this.colToPropCache[col];
	  }
	  return col;
	};
	DataMap.prototype.propToCol = function(prop) {
	  var col;
	  if (typeof this.propToColCache.get(prop) === 'undefined') {
	    col = prop;
	  } else {
	    col = this.propToColCache.get(prop);
	  }
	  col = Handsontable.hooks.run(this.instance, 'modifyCol', col);
	  return col;
	};
	DataMap.prototype.getSchema = function() {
	  var schema = this.instance.getSettings().dataSchema;
	  if (schema) {
	    if (typeof schema === 'function') {
	      return schema();
	    }
	    return schema;
	  }
	  return this.duckSchema;
	};
	DataMap.prototype.createRow = function(index, amount, createdAutomatically) {
	  var row,
	      colCount = this.instance.countCols(),
	      numberOfCreatedRows = 0,
	      currentIndex;
	  if (!amount) {
	    amount = 1;
	  }
	  if (typeof index !== 'number' || index >= this.instance.countRows()) {
	    index = this.instance.countRows();
	  }
	  currentIndex = index;
	  var maxRows = this.instance.getSettings().maxRows;
	  while (numberOfCreatedRows < amount && this.instance.countRows() < maxRows) {
	    if (this.instance.dataType === 'array') {
	      row = [];
	      for (var c = 0; c < colCount; c++) {
	        row.push(null);
	      }
	    } else if (this.instance.dataType === 'function') {
	      row = this.instance.getSettings().dataSchema(index);
	    } else {
	      row = {};
	      deepExtend(row, this.getSchema());
	    }
	    if (index === this.instance.countRows()) {
	      this.dataSource.push(row);
	    } else {
	      this.dataSource.splice(index, 0, row);
	    }
	    numberOfCreatedRows++;
	    currentIndex++;
	  }
	  Handsontable.hooks.run(this.instance, 'afterCreateRow', index, numberOfCreatedRows, createdAutomatically);
	  this.instance.forceFullRender = true;
	  return numberOfCreatedRows;
	};
	DataMap.prototype.createCol = function(index, amount, createdAutomatically) {
	  if (!this.instance.isColumnModificationAllowed()) {
	    throw new Error('Cannot create new column. When data source in an object, ' + 'you can only have as much columns as defined in first data row, data schema or in the \'columns\' setting.' + 'If you want to be able to add new columns, you have to use array datasource.');
	  }
	  var rlen = this.instance.countRows(),
	      data = this.dataSource,
	      constructor,
	      numberOfCreatedCols = 0,
	      currentIndex;
	  if (!amount) {
	    amount = 1;
	  }
	  currentIndex = index;
	  var maxCols = this.instance.getSettings().maxCols;
	  while (numberOfCreatedCols < amount && this.instance.countCols() < maxCols) {
	    constructor = columnFactory(this.GridSettings, this.priv.columnsSettingConflicts);
	    if (typeof index !== 'number' || index >= this.instance.countCols()) {
	      for (var r = 0; r < rlen; r++) {
	        if (typeof data[r] === 'undefined') {
	          data[r] = [];
	        }
	        data[r].push(null);
	      }
	      this.priv.columnSettings.push(constructor);
	    } else {
	      for (var r = 0; r < rlen; r++) {
	        data[r].splice(currentIndex, 0, null);
	      }
	      this.priv.columnSettings.splice(currentIndex, 0, constructor);
	    }
	    numberOfCreatedCols++;
	    currentIndex++;
	  }
	  Handsontable.hooks.run(this.instance, 'afterCreateCol', index, numberOfCreatedCols, createdAutomatically);
	  this.instance.forceFullRender = true;
	  return numberOfCreatedCols;
	};
	DataMap.prototype.removeRow = function(index, amount) {
	  if (!amount) {
	    amount = 1;
	  }
	  if (typeof index !== 'number') {
	    index = -amount;
	  }
	  index = (this.instance.countRows() + index) % this.instance.countRows();
	  var logicRows = this.physicalRowsToLogical(index, amount);
	  var actionWasNotCancelled = Handsontable.hooks.run(this.instance, 'beforeRemoveRow', index, amount);
	  if (actionWasNotCancelled === false) {
	    return;
	  }
	  var data = this.dataSource;
	  var newData = data.filter(function(row, index) {
	    return logicRows.indexOf(index) == -1;
	  });
	  data.length = 0;
	  Array.prototype.push.apply(data, newData);
	  Handsontable.hooks.run(this.instance, 'afterRemoveRow', index, amount);
	  this.instance.forceFullRender = true;
	};
	DataMap.prototype.removeCol = function(index, amount) {
	  if (this.instance.dataType === 'object' || this.instance.getSettings().columns) {
	    throw new Error('cannot remove column with object data source or columns option specified');
	  }
	  if (!amount) {
	    amount = 1;
	  }
	  if (typeof index !== 'number') {
	    index = -amount;
	  }
	  index = (this.instance.countCols() + index) % this.instance.countCols();
	  var actionWasNotCancelled = Handsontable.hooks.run(this.instance, 'beforeRemoveCol', index, amount);
	  if (actionWasNotCancelled === false) {
	    return;
	  }
	  var data = this.dataSource;
	  for (var r = 0,
	      rlen = this.instance.countRows(); r < rlen; r++) {
	    data[r].splice(index, amount);
	  }
	  this.priv.columnSettings.splice(index, amount);
	  Handsontable.hooks.run(this.instance, 'afterRemoveCol', index, amount);
	  this.instance.forceFullRender = true;
	};
	DataMap.prototype.spliceCol = function(col, index, amount) {
	  var elements = 4 <= arguments.length ? [].slice.call(arguments, 3) : [];
	  var colData = this.instance.getDataAtCol(col);
	  var removed = colData.slice(index, index + amount);
	  var after = colData.slice(index + amount);
	  extendArray(elements, after);
	  var i = 0;
	  while (i < amount) {
	    elements.push(null);
	    i++;
	  }
	  to2dArray(elements);
	  this.instance.populateFromArray(index, col, elements, null, null, 'spliceCol');
	  return removed;
	};
	DataMap.prototype.spliceRow = function(row, index, amount) {
	  var elements = 4 <= arguments.length ? [].slice.call(arguments, 3) : [];
	  var rowData = this.instance.getSourceDataAtRow(row);
	  var removed = rowData.slice(index, index + amount);
	  var after = rowData.slice(index + amount);
	  extendArray(elements, after);
	  var i = 0;
	  while (i < amount) {
	    elements.push(null);
	    i++;
	  }
	  this.instance.populateFromArray(row, index, [elements], null, null, 'spliceRow');
	  return removed;
	};
	DataMap.prototype.get = function(row, prop) {
	  row = Handsontable.hooks.run(this.instance, 'modifyRow', row);
	  if (typeof prop === 'string' && prop.indexOf('.') > -1) {
	    var sliced = prop.split('.');
	    var out = this.dataSource[row];
	    if (!out) {
	      return null;
	    }
	    for (var i = 0,
	        ilen = sliced.length; i < ilen; i++) {
	      out = out[sliced[i]];
	      if (typeof out === 'undefined') {
	        return null;
	      }
	    }
	    return out;
	  } else if (typeof prop === 'function') {
	    return prop(this.dataSource.slice(row, row + 1)[0]);
	  } else {
	    return this.dataSource[row] ? this.dataSource[row][prop] : null;
	  }
	};
	var copyableLookup = cellMethodLookupFactory('copyable', false);
	DataMap.prototype.getCopyable = function(row, prop) {
	  if (copyableLookup.call(this.instance, row, this.propToCol(prop))) {
	    return this.get(row, prop);
	  }
	  return '';
	};
	DataMap.prototype.set = function(row, prop, value, source) {
	  row = Handsontable.hooks.run(this.instance, 'modifyRow', row, source || 'datamapGet');
	  if (typeof prop === 'string' && prop.indexOf('.') > -1) {
	    var sliced = prop.split('.');
	    var out = this.dataSource[row];
	    for (var i = 0,
	        ilen = sliced.length - 1; i < ilen; i++) {
	      if (typeof out[sliced[i]] === 'undefined') {
	        out[sliced[i]] = {};
	      }
	      out = out[sliced[i]];
	    }
	    out[sliced[i]] = value;
	  } else if (typeof prop === 'function') {
	    prop(this.dataSource.slice(row, row + 1)[0], value);
	  } else {
	    this.dataSource[row][prop] = value;
	  }
	};
	DataMap.prototype.physicalRowsToLogical = function(index, amount) {
	  var totalRows = this.instance.countRows();
	  var physicRow = (totalRows + index) % totalRows;
	  var logicRows = [];
	  var rowsToRemove = amount;
	  var row;
	  while (physicRow < totalRows && rowsToRemove) {
	    row = Handsontable.hooks.run(this.instance, 'modifyRow', physicRow);
	    logicRows.push(row);
	    rowsToRemove--;
	    physicRow++;
	  }
	  return logicRows;
	};
	DataMap.prototype.clear = function() {
	  for (var r = 0; r < this.instance.countRows(); r++) {
	    for (var c = 0; c < this.instance.countCols(); c++) {
	      this.set(r, this.colToProp(c), '');
	    }
	  }
	};
	DataMap.prototype.getAll = function() {
	  return this.dataSource;
	};
	DataMap.prototype.getRange = function(start, end, destination) {
	  var r,
	      rlen,
	      c,
	      clen,
	      output = [],
	      row;
	  var getFn = destination === this.DESTINATION_CLIPBOARD_GENERATOR ? this.getCopyable : this.get;
	  rlen = Math.max(start.row, end.row);
	  clen = Math.max(start.col, end.col);
	  for (r = Math.min(start.row, end.row); r <= rlen; r++) {
	    row = [];
	    for (c = Math.min(start.col, end.col); c <= clen; c++) {
	      row.push(getFn.call(this, r, this.colToProp(c)));
	    }
	    output.push(row);
	  }
	  return output;
	};
	DataMap.prototype.getText = function(start, end) {
	  return SheetClip.stringify(this.getRange(start, end, this.DESTINATION_RENDERER));
	};
	DataMap.prototype.getCopyableText = function(start, end) {
	  return SheetClip.stringify(this.getRange(start, end, this.DESTINATION_CLIPBOARD_GENERATOR));
	};
	;
	Handsontable.DataMap = DataMap;

	//# 
	},{"SheetClip":"SheetClip","helpers/array":41,"helpers/data":43,"helpers/object":49,"helpers/setting":50,"multiMap":53}],27:[function(require,module,exports){
	"use strict";
	Object.defineProperties(exports, {
	  EditorManager: {get: function() {
	      return EditorManager;
	    }},
	  __esModule: {value: true}
	});
	var $__3rdparty_47_walkontable_47_src_47_cell_47_coords__,
	    $__helpers_47_unicode__,
	    $__helpers_47_dom_47_event__,
	    $__editors__,
	    $__eventManager__;
	var WalkontableCellCoords = ($__3rdparty_47_walkontable_47_src_47_cell_47_coords__ = require("3rdparty/walkontable/src/cell/coords"), $__3rdparty_47_walkontable_47_src_47_cell_47_coords__ && $__3rdparty_47_walkontable_47_src_47_cell_47_coords__.__esModule && $__3rdparty_47_walkontable_47_src_47_cell_47_coords__ || {default: $__3rdparty_47_walkontable_47_src_47_cell_47_coords__}).WalkontableCellCoords;
	var $__1 = ($__helpers_47_unicode__ = require("helpers/unicode"), $__helpers_47_unicode__ && $__helpers_47_unicode__.__esModule && $__helpers_47_unicode__ || {default: $__helpers_47_unicode__}),
	    KEY_CODES = $__1.KEY_CODES,
	    isMetaKey = $__1.isMetaKey,
	    isCtrlKey = $__1.isCtrlKey;
	var $__2 = ($__helpers_47_dom_47_event__ = require("helpers/dom/event"), $__helpers_47_dom_47_event__ && $__helpers_47_dom_47_event__.__esModule && $__helpers_47_dom_47_event__ || {default: $__helpers_47_dom_47_event__}),
	    stopPropagation = $__2.stopPropagation,
	    stopImmediatePropagation = $__2.stopImmediatePropagation,
	    isImmediatePropagationStopped = $__2.isImmediatePropagationStopped;
	var getEditor = ($__editors__ = require("editors"), $__editors__ && $__editors__.__esModule && $__editors__ || {default: $__editors__}).getEditor;
	var eventManagerObject = ($__eventManager__ = require("eventManager"), $__eventManager__ && $__eventManager__.__esModule && $__eventManager__ || {default: $__eventManager__}).eventManager;
	;
	Handsontable.EditorManager = EditorManager;
	function EditorManager(instance, priv, selection) {
	  var _this = this,
	      destroyed = false,
	      eventManager,
	      activeEditor;
	  eventManager = eventManagerObject(instance);
	  function moveSelectionAfterEnter(shiftKey) {
	    var enterMoves = typeof priv.settings.enterMoves === 'function' ? priv.settings.enterMoves(event) : priv.settings.enterMoves;
	    if (shiftKey) {
	      selection.transformStart(-enterMoves.row, -enterMoves.col);
	    } else {
	      selection.transformStart(enterMoves.row, enterMoves.col, true);
	    }
	  }
	  function moveSelectionUp(shiftKey) {
	    if (shiftKey) {
	      selection.transformEnd(-1, 0);
	    } else {
	      selection.transformStart(-1, 0);
	    }
	  }
	  function moveSelectionDown(shiftKey) {
	    if (shiftKey) {
	      selection.transformEnd(1, 0);
	    } else {
	      selection.transformStart(1, 0);
	    }
	  }
	  function moveSelectionRight(shiftKey) {
	    if (shiftKey) {
	      selection.transformEnd(0, 1);
	    } else {
	      selection.transformStart(0, 1);
	    }
	  }
	  function moveSelectionLeft(shiftKey) {
	    if (shiftKey) {
	      selection.transformEnd(0, -1);
	    } else {
	      selection.transformStart(0, -1);
	    }
	  }
	  function onKeyDown(event) {
	    var ctrlDown,
	        rangeModifier;
	    if (!instance.isListening()) {
	      return;
	    }
	    Handsontable.hooks.run(instance, 'beforeKeyDown', event);
	    if (destroyed) {
	      return;
	    }
	    if (isImmediatePropagationStopped(event)) {
	      return;
	    }
	    priv.lastKeyCode = event.keyCode;
	    if (!selection.isSelected()) {
	      return;
	    }
	    ctrlDown = (event.ctrlKey || event.metaKey) && !event.altKey;
	    if (activeEditor && !activeEditor.isWaiting()) {
	      if (!isMetaKey(event.keyCode) && !isCtrlKey(event.keyCode) && !ctrlDown && !_this.isEditorOpened()) {
	        _this.openEditor('', event);
	        return;
	      }
	    }
	    rangeModifier = event.shiftKey ? selection.setRangeEnd : selection.setRangeStart;
	    switch (event.keyCode) {
	      case KEY_CODES.A:
	        if (!_this.isEditorOpened() && ctrlDown) {
	          selection.selectAll();
	          event.preventDefault();
	          stopPropagation(event);
	        }
	        break;
	      case KEY_CODES.ARROW_UP:
	        if (_this.isEditorOpened() && !activeEditor.isWaiting()) {
	          _this.closeEditorAndSaveChanges(ctrlDown);
	        }
	        moveSelectionUp(event.shiftKey);
	        event.preventDefault();
	        stopPropagation(event);
	        break;
	      case KEY_CODES.ARROW_DOWN:
	        if (_this.isEditorOpened() && !activeEditor.isWaiting()) {
	          _this.closeEditorAndSaveChanges(ctrlDown);
	        }
	        moveSelectionDown(event.shiftKey);
	        event.preventDefault();
	        stopPropagation(event);
	        break;
	      case KEY_CODES.ARROW_RIGHT:
	        if (_this.isEditorOpened() && !activeEditor.isWaiting()) {
	          _this.closeEditorAndSaveChanges(ctrlDown);
	        }
	        moveSelectionRight(event.shiftKey);
	        event.preventDefault();
	        stopPropagation(event);
	        break;
	      case KEY_CODES.ARROW_LEFT:
	        if (_this.isEditorOpened() && !activeEditor.isWaiting()) {
	          _this.closeEditorAndSaveChanges(ctrlDown);
	        }
	        moveSelectionLeft(event.shiftKey);
	        event.preventDefault();
	        stopPropagation(event);
	        break;
	      case KEY_CODES.TAB:
	        var tabMoves = typeof priv.settings.tabMoves === 'function' ? priv.settings.tabMoves(event) : priv.settings.tabMoves;
	        if (event.shiftKey) {
	          selection.transformStart(-tabMoves.row, -tabMoves.col);
	        } else {
	          selection.transformStart(tabMoves.row, tabMoves.col, true);
	        }
	        event.preventDefault();
	        stopPropagation(event);
	        break;
	      case KEY_CODES.BACKSPACE:
	      case KEY_CODES.DELETE:
	        selection.empty(event);
	        _this.prepareEditor();
	        event.preventDefault();
	        break;
	      case KEY_CODES.F2:
	        _this.openEditor(null, event);
	        if (activeEditor) {
	          activeEditor.enableFullEditMode();
	        }
	        event.preventDefault();
	        break;
	      case KEY_CODES.ENTER:
	        if (_this.isEditorOpened()) {
	          if (activeEditor && activeEditor.state !== Handsontable.EditorState.WAITING) {
	            _this.closeEditorAndSaveChanges(ctrlDown);
	          }
	          moveSelectionAfterEnter(event.shiftKey);
	        } else {
	          if (instance.getSettings().enterBeginsEditing) {
	            _this.openEditor(null, event);
	            if (activeEditor) {
	              activeEditor.enableFullEditMode();
	            }
	          } else {
	            moveSelectionAfterEnter(event.shiftKey);
	          }
	        }
	        event.preventDefault();
	        stopImmediatePropagation(event);
	        break;
	      case KEY_CODES.ESCAPE:
	        if (_this.isEditorOpened()) {
	          _this.closeEditorAndRestoreOriginalValue(ctrlDown);
	        }
	        event.preventDefault();
	        break;
	      case KEY_CODES.HOME:
	        if (event.ctrlKey || event.metaKey) {
	          rangeModifier(new WalkontableCellCoords(0, priv.selRange.from.col));
	        } else {
	          rangeModifier(new WalkontableCellCoords(priv.selRange.from.row, 0));
	        }
	        event.preventDefault();
	        stopPropagation(event);
	        break;
	      case KEY_CODES.END:
	        if (event.ctrlKey || event.metaKey) {
	          rangeModifier(new WalkontableCellCoords(instance.countRows() - 1, priv.selRange.from.col));
	        } else {
	          rangeModifier(new WalkontableCellCoords(priv.selRange.from.row, instance.countCols() - 1));
	        }
	        event.preventDefault();
	        stopPropagation(event);
	        break;
	      case KEY_CODES.PAGE_UP:
	        selection.transformStart(-instance.countVisibleRows(), 0);
	        event.preventDefault();
	        stopPropagation(event);
	        break;
	      case KEY_CODES.PAGE_DOWN:
	        selection.transformStart(instance.countVisibleRows(), 0);
	        event.preventDefault();
	        stopPropagation(event);
	        break;
	    }
	  }
	  function init() {
	    instance.addHook('afterDocumentKeyDown', onKeyDown);
	    eventManager.addEventListener(document.documentElement, 'keydown', function(event) {
	      instance.runHooks('afterDocumentKeyDown', event);
	    });
	    function onDblClick(event, coords, elem) {
	      if (elem.nodeName == 'TD') {
	        _this.openEditor();
	        if (activeEditor) {
	          activeEditor.enableFullEditMode();
	        }
	      }
	    }
	    instance.view.wt.update('onCellDblClick', onDblClick);
	    instance.addHook('afterDestroy', function() {
	      destroyed = true;
	    });
	  }
	  this.destroyEditor = function(revertOriginal) {
	    this.closeEditor(revertOriginal);
	  };
	  this.getActiveEditor = function() {
	    return activeEditor;
	  };
	  this.prepareEditor = function() {
	    var row,
	        col,
	        prop,
	        td,
	        originalValue,
	        cellProperties,
	        editorClass;
	    if (activeEditor && activeEditor.isWaiting()) {
	      this.closeEditor(false, false, function(dataSaved) {
	        if (dataSaved) {
	          _this.prepareEditor();
	        }
	      });
	      return;
	    }
	    row = priv.selRange.highlight.row;
	    col = priv.selRange.highlight.col;
	    prop = instance.colToProp(col);
	    td = instance.getCell(row, col);
	    originalValue = instance.getDataAtCell(row, col);
	    cellProperties = instance.getCellMeta(row, col);
	    editorClass = instance.getCellEditor(cellProperties);
	    if (editorClass) {
	      activeEditor = Handsontable.editors.getEditor(editorClass, instance);
	      activeEditor.prepare(row, col, prop, td, originalValue, cellProperties);
	    } else {
	      activeEditor = void 0;
	    }
	  };
	  this.isEditorOpened = function() {
	    return activeEditor && activeEditor.isOpened();
	  };
	  this.openEditor = function(initialValue, event) {
	    if (activeEditor && !activeEditor.cellProperties.readOnly) {
	      activeEditor.beginEditing(initialValue, event);
	    } else if (activeEditor && activeEditor.cellProperties.readOnly) {
	      if (event && event.keyCode === KEY_CODES.ENTER) {
	        moveSelectionAfterEnter();
	      }
	    }
	  };
	  this.closeEditor = function(restoreOriginalValue, ctrlDown, callback) {
	    if (activeEditor) {
	      activeEditor.finishEditing(restoreOriginalValue, ctrlDown, callback);
	    } else {
	      if (callback) {
	        callback(false);
	      }
	    }
	  };
	  this.closeEditorAndSaveChanges = function(ctrlDown) {
	    return this.closeEditor(false, ctrlDown);
	  };
	  this.closeEditorAndRestoreOriginalValue = function(ctrlDown) {
	    return this.closeEditor(true, ctrlDown);
	  };
	  init();
	}

	//# 
	},{"3rdparty/walkontable/src/cell/coords":5,"editors":28,"eventManager":40,"helpers/dom/event":45,"helpers/unicode":52}],28:[function(require,module,exports){
	"use strict";
	Object.defineProperties(exports, {
	  registerEditor: {get: function() {
	      return registerEditor;
	    }},
	  getEditor: {get: function() {
	      return getEditor;
	    }},
	  hasEditor: {get: function() {
	      return hasEditor;
	    }},
	  getEditorConstructor: {get: function() {
	      return getEditorConstructor;
	    }},
	  __esModule: {value: true}
	});
	var $__helpers_47_string__;
	var toUpperCaseFirst = ($__helpers_47_string__ = require("helpers/string"), $__helpers_47_string__ && $__helpers_47_string__.__esModule && $__helpers_47_string__ || {default: $__helpers_47_string__}).toUpperCaseFirst;
	;
	var registeredEditorNames = {},
	    registeredEditorClasses = new WeakMap();
	Handsontable.editors = Handsontable.editors || {};
	Handsontable.editors.registerEditor = registerEditor;
	Handsontable.editors.getEditor = getEditor;
	function RegisteredEditor(editorClass) {
	  var Clazz,
	      instances;
	  instances = {};
	  Clazz = editorClass;
	  this.getConstructor = function() {
	    return editorClass;
	  };
	  this.getInstance = function(hotInstance) {
	    if (!(hotInstance.guid in instances)) {
	      instances[hotInstance.guid] = new Clazz(hotInstance);
	    }
	    return instances[hotInstance.guid];
	  };
	}
	function registerEditor(editorName, editorClass) {
	  var editor = new RegisteredEditor(editorClass);
	  if (typeof editorName === 'string') {
	    registeredEditorNames[editorName] = editor;
	    Handsontable.editors[toUpperCaseFirst(editorName) + 'Editor'] = editorClass;
	  }
	  registeredEditorClasses.set(editorClass, editor);
	}
	function getEditor(editorName, hotInstance) {
	  var editor;
	  if (typeof editorName == 'function') {
	    if (!(registeredEditorClasses.get(editorName))) {
	      registerEditor(null, editorName);
	    }
	    editor = registeredEditorClasses.get(editorName);
	  } else if (typeof editorName == 'string') {
	    editor = registeredEditorNames[editorName];
	  } else {
	    throw Error('Only strings and functions can be passed as "editor" parameter ');
	  }
	  if (!editor) {
	    throw Error('No editor registered under name "' + editorName + '"');
	  }
	  return editor.getInstance(hotInstance);
	}
	function getEditorConstructor(editorName) {
	  var editor;
	  if (typeof editorName == 'string') {
	    editor = registeredEditorNames[editorName];
	  } else {
	    throw Error('Only strings and functions can be passed as "editor" parameter ');
	  }
	  if (!editor) {
	    throw Error('No editor registered under name "' + editorName + '"');
	  }
	  return editor.getConstructor();
	}
	function hasEditor(editorName) {
	  return registeredEditorNames[editorName] ? true : false;
	}

	//# 
	},{"helpers/string":51}],29:[function(require,module,exports){
	"use strict";
	Object.defineProperties(exports, {
	  BaseEditor: {get: function() {
	      return BaseEditor;
	    }},
	  __esModule: {value: true}
	});
	var $___46__46__47_helpers_47_mixed__,
	    $___46__46__47_3rdparty_47_walkontable_47_src_47_cell_47_coords__;
	var stringify = ($___46__46__47_helpers_47_mixed__ = require("helpers/mixed"), $___46__46__47_helpers_47_mixed__ && $___46__46__47_helpers_47_mixed__.__esModule && $___46__46__47_helpers_47_mixed__ || {default: $___46__46__47_helpers_47_mixed__}).stringify;
	var WalkontableCellCoords = ($___46__46__47_3rdparty_47_walkontable_47_src_47_cell_47_coords__ = require("3rdparty/walkontable/src/cell/coords"), $___46__46__47_3rdparty_47_walkontable_47_src_47_cell_47_coords__ && $___46__46__47_3rdparty_47_walkontable_47_src_47_cell_47_coords__.__esModule && $___46__46__47_3rdparty_47_walkontable_47_src_47_cell_47_coords__ || {default: $___46__46__47_3rdparty_47_walkontable_47_src_47_cell_47_coords__}).WalkontableCellCoords;
	;
	Handsontable.editors = Handsontable.editors || {};
	Handsontable.editors.BaseEditor = BaseEditor;
	Handsontable.EditorState = {
	  VIRGIN: 'STATE_VIRGIN',
	  EDITING: 'STATE_EDITING',
	  WAITING: 'STATE_WAITING',
	  FINISHED: 'STATE_FINISHED'
	};
	function BaseEditor(instance) {
	  this.instance = instance;
	  this.state = Handsontable.EditorState.VIRGIN;
	  this._opened = false;
	  this._fullEditMode = false;
	  this._closeCallback = null;
	  this.init();
	}
	BaseEditor.prototype._fireCallbacks = function(result) {
	  if (this._closeCallback) {
	    this._closeCallback(result);
	    this._closeCallback = null;
	  }
	};
	BaseEditor.prototype.init = function() {};
	BaseEditor.prototype.getValue = function() {
	  throw Error('Editor getValue() method unimplemented');
	};
	BaseEditor.prototype.setValue = function(newValue) {
	  throw Error('Editor setValue() method unimplemented');
	};
	BaseEditor.prototype.open = function() {
	  throw Error('Editor open() method unimplemented');
	};
	BaseEditor.prototype.close = function() {
	  throw Error('Editor close() method unimplemented');
	};
	BaseEditor.prototype.prepare = function(row, col, prop, td, originalValue, cellProperties) {
	  this.TD = td;
	  this.row = row;
	  this.col = col;
	  this.prop = prop;
	  this.originalValue = originalValue;
	  this.cellProperties = cellProperties;
	  this.state = Handsontable.EditorState.VIRGIN;
	};
	BaseEditor.prototype.extend = function() {
	  var baseClass = this.constructor;
	  function Editor() {
	    baseClass.apply(this, arguments);
	  }
	  function inherit(Child, Parent) {
	    function Bridge() {}
	    Bridge.prototype = Parent.prototype;
	    Child.prototype = new Bridge();
	    Child.prototype.constructor = Child;
	    return Child;
	  }
	  return inherit(Editor, baseClass);
	};
	BaseEditor.prototype.saveValue = function(val, ctrlDown) {
	  var sel,
	      tmp;
	  if (ctrlDown) {
	    sel = this.instance.getSelected();
	    if (sel[0] > sel[2]) {
	      tmp = sel[0];
	      sel[0] = sel[2];
	      sel[2] = tmp;
	    }
	    if (sel[1] > sel[3]) {
	      tmp = sel[1];
	      sel[1] = sel[3];
	      sel[3] = tmp;
	    }
	    this.instance.populateFromArray(sel[0], sel[1], val, sel[2], sel[3], 'edit');
	  } else {
	    this.instance.populateFromArray(this.row, this.col, val, null, null, 'edit');
	  }
	};
	BaseEditor.prototype.beginEditing = function(initialValue, event) {
	  if (this.state != Handsontable.EditorState.VIRGIN) {
	    return;
	  }
	  this.instance.view.scrollViewport(new WalkontableCellCoords(this.row, this.col));
	  this.instance.view.render();
	  this.state = Handsontable.EditorState.EDITING;
	  initialValue = typeof initialValue == 'string' ? initialValue : this.originalValue;
	  this.setValue(stringify(initialValue));
	  this.open(event);
	  this._opened = true;
	  this.focus();
	  this.instance.view.render();
	};
	BaseEditor.prototype.finishEditing = function(restoreOriginalValue, ctrlDown, callback) {
	  var _this = this,
	      val;
	  if (callback) {
	    var previousCloseCallback = this._closeCallback;
	    this._closeCallback = function(result) {
	      if (previousCloseCallback) {
	        previousCloseCallback(result);
	      }
	      callback(result);
	    };
	  }
	  if (this.isWaiting()) {
	    return;
	  }
	  if (this.state == Handsontable.EditorState.VIRGIN) {
	    this.instance._registerTimeout(setTimeout(function() {
	      _this._fireCallbacks(true);
	    }, 0));
	    return;
	  }
	  if (this.state == Handsontable.EditorState.EDITING) {
	    if (restoreOriginalValue) {
	      this.cancelChanges();
	      this.instance.view.render();
	      return;
	    }
	    if (this.instance.getSettings().trimWhitespace) {
	      val = [[typeof this.getValue() === 'string' ? String.prototype.trim.call(this.getValue() || '') : this.getValue()]];
	    } else {
	      val = [[this.getValue()]];
	    }
	    this.state = Handsontable.EditorState.WAITING;
	    this.saveValue(val, ctrlDown);
	    if (this.instance.getCellValidator(this.cellProperties)) {
	      this.instance.addHookOnce('postAfterValidate', function(result) {
	        _this.state = Handsontable.EditorState.FINISHED;
	        _this.discardEditor(result);
	      });
	    } else {
	      this.state = Handsontable.EditorState.FINISHED;
	      this.discardEditor(true);
	    }
	  }
	};
	BaseEditor.prototype.cancelChanges = function() {
	  this.state = Handsontable.EditorState.FINISHED;
	  this.discardEditor();
	};
	BaseEditor.prototype.discardEditor = function(result) {
	  if (this.state !== Handsontable.EditorState.FINISHED) {
	    return;
	  }
	  if (result === false && this.cellProperties.allowInvalid !== true) {
	    this.instance.selectCell(this.row, this.col);
	    this.focus();
	    this.state = Handsontable.EditorState.EDITING;
	    this._fireCallbacks(false);
	  } else {
	    this.close();
	    this._opened = false;
	    this._fullEditMode = false;
	    this.state = Handsontable.EditorState.VIRGIN;
	    this._fireCallbacks(true);
	  }
	};
	BaseEditor.prototype.enableFullEditMode = function() {
	  this._fullEditMode = true;
	};
	BaseEditor.prototype.isInFullEditMode = function() {
	  return this._fullEditMode;
	};
	BaseEditor.prototype.isOpened = function() {
	  return this._opened;
	};
	BaseEditor.prototype.isWaiting = function() {
	  return this.state === Handsontable.EditorState.WAITING;
	};
	BaseEditor.prototype.checkEditorSection = function() {
	  var totalRows = this.instance.countRows();
	  var section = '';
	  if (this.row < this.instance.getSettings().fixedRowsTop) {
	    if (this.col < this.instance.getSettings().fixedColumnsLeft) {
	      section = 'top-left-corner';
	    } else {
	      section = 'top';
	    }
	  } else if (this.instance.getSettings().fixedRowsBottom && this.row >= totalRows - this.instance.getSettings().fixedRowsBottom) {
	    if (this.col < this.instance.getSettings().fixedColumnsLeft) {
	      section = 'bottom-left-corner';
	    } else {
	      section = 'bottom';
	    }
	  } else {
	    if (this.col < this.instance.getSettings().fixedColumnsLeft) {
	      section = 'left';
	    }
	  }
	  return section;
	};

	//# 
	},{"3rdparty/walkontable/src/cell/coords":5,"helpers/mixed":47}],30:[function(require,module,exports){
	"use strict";
	Object.defineProperties(exports, {
	  AutocompleteEditor: {get: function() {
	      return AutocompleteEditor;
	    }},
	  __esModule: {value: true}
	});
	var $___46__46__47_helpers_47_unicode__,
	    $___46__46__47_helpers_47_mixed__,
	    $___46__46__47_helpers_47_array__,
	    $___46__46__47_helpers_47_dom_47_element__,
	    $___46__46__47_editors__,
	    $__handsontableEditor__;
	var $__0 = ($___46__46__47_helpers_47_unicode__ = require("helpers/unicode"), $___46__46__47_helpers_47_unicode__ && $___46__46__47_helpers_47_unicode__.__esModule && $___46__46__47_helpers_47_unicode__ || {default: $___46__46__47_helpers_47_unicode__}),
	    KEY_CODES = $__0.KEY_CODES,
	    isPrintableChar = $__0.isPrintableChar;
	var stringify = ($___46__46__47_helpers_47_mixed__ = require("helpers/mixed"), $___46__46__47_helpers_47_mixed__ && $___46__46__47_helpers_47_mixed__.__esModule && $___46__46__47_helpers_47_mixed__ || {default: $___46__46__47_helpers_47_mixed__}).stringify;
	var pivot = ($___46__46__47_helpers_47_array__ = require("helpers/array"), $___46__46__47_helpers_47_array__ && $___46__46__47_helpers_47_array__.__esModule && $___46__46__47_helpers_47_array__ || {default: $___46__46__47_helpers_47_array__}).pivot;
	var $__3 = ($___46__46__47_helpers_47_dom_47_element__ = require("helpers/dom/element"), $___46__46__47_helpers_47_dom_47_element__ && $___46__46__47_helpers_47_dom_47_element__.__esModule && $___46__46__47_helpers_47_dom_47_element__ || {default: $___46__46__47_helpers_47_dom_47_element__}),
	    addClass = $__3.addClass,
	    getCaretPosition = $__3.getCaretPosition,
	    getScrollbarWidth = $__3.getScrollbarWidth,
	    getSelectionEndPosition = $__3.getSelectionEndPosition,
	    outerWidth = $__3.outerWidth,
	    setCaretPosition = $__3.setCaretPosition;
	var $__4 = ($___46__46__47_editors__ = require("editors"), $___46__46__47_editors__ && $___46__46__47_editors__.__esModule && $___46__46__47_editors__ || {default: $___46__46__47_editors__}),
	    getEditorConstructor = $__4.getEditorConstructor,
	    registerEditor = $__4.registerEditor;
	var HandsontableEditor = ($__handsontableEditor__ = require("handsontableEditor"), $__handsontableEditor__ && $__handsontableEditor__.__esModule && $__handsontableEditor__ || {default: $__handsontableEditor__}).HandsontableEditor;
	var AutocompleteEditor = HandsontableEditor.prototype.extend();
	AutocompleteEditor.prototype.init = function() {
	  HandsontableEditor.prototype.init.apply(this, arguments);
	  this.query = null;
	  this.choices = [];
	};
	AutocompleteEditor.prototype.createElements = function() {
	  HandsontableEditor.prototype.createElements.apply(this, arguments);
	  addClass(this.htContainer, 'autocompleteEditor');
	  addClass(this.htContainer, window.navigator.platform.indexOf('Mac') === -1 ? '' : 'htMacScroll');
	};
	var skipOne = false;
	function onBeforeKeyDown(event) {
	  skipOne = false;
	  var editor = this.getActiveEditor();
	  if (isPrintableChar(event.keyCode) || event.keyCode === KEY_CODES.BACKSPACE || event.keyCode === KEY_CODES.DELETE || event.keyCode === KEY_CODES.INSERT) {
	    var timeOffset = 0;
	    if (event.keyCode === KEY_CODES.C && (event.ctrlKey || event.metaKey)) {
	      return;
	    }
	    if (!editor.isOpened()) {
	      timeOffset += 10;
	    }
	    if (editor.htEditor) {
	      editor.instance._registerTimeout(setTimeout(function() {
	        editor.queryChoices(editor.TEXTAREA.value);
	        skipOne = true;
	      }, timeOffset));
	    }
	  }
	}
	AutocompleteEditor.prototype.prepare = function() {
	  this.instance.addHook('beforeKeyDown', onBeforeKeyDown);
	  HandsontableEditor.prototype.prepare.apply(this, arguments);
	};
	AutocompleteEditor.prototype.open = function() {
	  this.TEXTAREA_PARENT.style.overflow = 'auto';
	  HandsontableEditor.prototype.open.apply(this, arguments);
	  this.TEXTAREA_PARENT.style.overflow = '';
	  var choicesListHot = this.htEditor.getInstance();
	  var that = this;
	  var trimDropdown = this.cellProperties.trimDropdown === void 0 ? true : this.cellProperties.trimDropdown;
	  this.TEXTAREA.style.visibility = 'visible';
	  this.focus();
	  choicesListHot.updateSettings({
	    colWidths: trimDropdown ? [outerWidth(this.TEXTAREA) - 2] : void 0,
	    width: trimDropdown ? outerWidth(this.TEXTAREA) + getScrollbarWidth() + 2 : void 0,
	    afterRenderer: function(TD, row, col, prop, value) {
	      var caseSensitive = this.getCellMeta(row, col).filteringCaseSensitive === true,
	          indexOfMatch,
	          match,
	          value = stringify(value);
	      if (value) {
	        indexOfMatch = caseSensitive ? value.indexOf(this.query) : value.toLowerCase().indexOf(that.query.toLowerCase());
	        if (indexOfMatch != -1) {
	          match = value.substr(indexOfMatch, that.query.length);
	          TD.innerHTML = value.replace(match, '<strong>' + match + '</strong>');
	        }
	      }
	    },
	    autoColumnSize: true,
	    modifyColWidth: function(width, col) {
	      var autoWidths = this.getPlugin('autoColumnSize').widths;
	      if (autoWidths[col]) {
	        width = autoWidths[col];
	      }
	      return trimDropdown ? width : width + 15;
	    }
	  });
	  this.htEditor.view.wt.wtTable.holder.parentNode.style['padding-right'] = getScrollbarWidth() + 2 + 'px';
	  if (skipOne) {
	    skipOne = false;
	  }
	  that.instance._registerTimeout(setTimeout(function() {
	    that.queryChoices(that.TEXTAREA.value);
	  }, 0));
	};
	AutocompleteEditor.prototype.close = function() {
	  HandsontableEditor.prototype.close.apply(this, arguments);
	};
	AutocompleteEditor.prototype.queryChoices = function(query) {
	  this.query = query;
	  if (typeof this.cellProperties.source == 'function') {
	    var that = this;
	    this.cellProperties.source(query, function(choices) {
	      that.updateChoicesList(choices);
	    });
	  } else if (Array.isArray(this.cellProperties.source)) {
	    var choices;
	    if (!query || this.cellProperties.filter === false) {
	      choices = this.cellProperties.source;
	    } else {
	      var filteringCaseSensitive = this.cellProperties.filteringCaseSensitive === true;
	      var lowerCaseQuery = query.toLowerCase();
	      choices = this.cellProperties.source.filter(function(choice) {
	        if (filteringCaseSensitive) {
	          return choice.indexOf(query) != -1;
	        } else {
	          return choice.toLowerCase().indexOf(lowerCaseQuery) != -1;
	        }
	      });
	    }
	    this.updateChoicesList(choices);
	  } else {
	    this.updateChoicesList([]);
	  }
	};
	AutocompleteEditor.prototype.updateChoicesList = function(choices) {
	  var pos = getCaretPosition(this.TEXTAREA),
	      endPos = getSelectionEndPosition(this.TEXTAREA);
	  var orderByRelevance = AutocompleteEditor.sortByRelevance(this.getValue(), choices, this.cellProperties.filteringCaseSensitive);
	  var highlightIndex;
	  if (this.cellProperties.filter == false) {
	    highlightIndex = orderByRelevance[0];
	  } else {
	    var sorted = [];
	    for (var i = 0,
	        choicesCount = orderByRelevance.length; i < choicesCount; i++) {
	      sorted.push(choices[orderByRelevance[i]]);
	    }
	    highlightIndex = 0;
	    choices = sorted;
	  }
	  this.choices = choices;
	  this.htEditor.loadData(pivot([choices]));
	  this.updateDropdownHeight();
	  if (this.cellProperties.strict === true) {
	    this.highlightBestMatchingChoice(highlightIndex);
	  }
	  this.instance.listen();
	  this.TEXTAREA.focus();
	  setCaretPosition(this.TEXTAREA, pos, (pos == endPos ? void 0 : endPos));
	};
	AutocompleteEditor.prototype.updateDropdownHeight = function() {
	  var currentDropdownWidth = this.htEditor.getColWidth(0) + getScrollbarWidth() + 2;
	  var trimDropdown = this.cellProperties.trimDropdown === void 0 ? true : this.cellProperties.trimDropdown;
	  this.htEditor.updateSettings({
	    height: this.getDropdownHeight(),
	    width: trimDropdown ? void 0 : currentDropdownWidth
	  });
	  this.htEditor.view.wt.wtTable.alignOverlaysWithTrimmingContainer();
	};
	AutocompleteEditor.prototype.finishEditing = function(restoreOriginalValue) {
	  if (!restoreOriginalValue) {
	    this.instance.removeHook('beforeKeyDown', onBeforeKeyDown);
	  }
	  HandsontableEditor.prototype.finishEditing.apply(this, arguments);
	};
	AutocompleteEditor.prototype.highlightBestMatchingChoice = function(index) {
	  if (typeof index === 'number') {
	    this.htEditor.selectCell(index, 0);
	  } else {
	    this.htEditor.deselectCell();
	  }
	};
	AutocompleteEditor.sortByRelevance = function(value, choices, caseSensitive) {
	  var choicesRelevance = [],
	      currentItem,
	      valueLength = value.length,
	      valueIndex,
	      charsLeft,
	      result = [],
	      i,
	      choicesCount;
	  if (valueLength === 0) {
	    for (i = 0, choicesCount = choices.length; i < choicesCount; i++) {
	      result.push(i);
	    }
	    return result;
	  }
	  for (i = 0, choicesCount = choices.length; i < choicesCount; i++) {
	    currentItem = stringify(choices[i]);
	    if (caseSensitive) {
	      valueIndex = currentItem.indexOf(value);
	    } else {
	      valueIndex = currentItem.toLowerCase().indexOf(value.toLowerCase());
	    }
	    if (valueIndex == -1) {
	      continue;
	    }
	    charsLeft = currentItem.length - valueIndex - valueLength;
	    choicesRelevance.push({
	      baseIndex: i,
	      index: valueIndex,
	      charsLeft: charsLeft,
	      value: currentItem
	    });
	  }
	  choicesRelevance.sort(function(a, b) {
	    if (b.index === -1) {
	      return -1;
	    }
	    if (a.index === -1) {
	      return 1;
	    }
	    if (a.index < b.index) {
	      return -1;
	    } else if (b.index < a.index) {
	      return 1;
	    } else if (a.index === b.index) {
	      if (a.charsLeft < b.charsLeft) {
	        return -1;
	      } else if (a.charsLeft > b.charsLeft) {
	        return 1;
	      } else {
	        return 0;
	      }
	    }
	  });
	  for (i = 0, choicesCount = choicesRelevance.length; i < choicesCount; i++) {
	    result.push(choicesRelevance[i].baseIndex);
	  }
	  return result;
	};
	AutocompleteEditor.prototype.getDropdownHeight = function() {
	  var firstRowHeight = this.htEditor.getInstance().getRowHeight(0) || 23;
	  var _visibleRows = this.cellProperties.visibleRows;
	  return this.choices.length >= _visibleRows ? _visibleRows * firstRowHeight : this.choices.length * firstRowHeight + 8;
	};
	AutocompleteEditor.prototype.allowKeyEventPropagation = function(keyCode) {
	  var selected = {row: this.htEditor.getSelectedRange() ? this.htEditor.getSelectedRange().from.row : -1};
	  var allowed = false;
	  if (keyCode === KEY_CODES.ARROW_DOWN && selected.row < this.htEditor.countRows() - 1) {
	    allowed = true;
	  }
	  if (keyCode === KEY_CODES.ARROW_UP && selected.row > -1) {
	    allowed = true;
	  }
	  return allowed;
	};
	;
	registerEditor('autocomplete', AutocompleteEditor);

	//# 
	},{"editors":28,"handsontableEditor":34,"helpers/array":41,"helpers/dom/element":44,"helpers/mixed":47,"helpers/unicode":52}],31:[function(require,module,exports){
	"use strict";
	Object.defineProperties(exports, {
	  CheckboxEditor: {get: function() {
	      return CheckboxEditor;
	    }},
	  __esModule: {value: true}
	});
	var $___46__46__47_editors__,
	    $___95_baseEditor__,
	    $___46__46__47_helpers_47_dom_47_element__;
	var registerEditor = ($___46__46__47_editors__ = require("editors"), $___46__46__47_editors__ && $___46__46__47_editors__.__esModule && $___46__46__47_editors__ || {default: $___46__46__47_editors__}).registerEditor;
	var BaseEditor = ($___95_baseEditor__ = require("_baseEditor"), $___95_baseEditor__ && $___95_baseEditor__.__esModule && $___95_baseEditor__ || {default: $___95_baseEditor__}).BaseEditor;
	var hasClass = ($___46__46__47_helpers_47_dom_47_element__ = require("helpers/dom/element"), $___46__46__47_helpers_47_dom_47_element__ && $___46__46__47_helpers_47_dom_47_element__.__esModule && $___46__46__47_helpers_47_dom_47_element__ || {default: $___46__46__47_helpers_47_dom_47_element__}).hasClass;
	var CheckboxEditor = function CheckboxEditor() {
	  $traceurRuntime.superConstructor($CheckboxEditor).apply(this, arguments);
	};
	var $CheckboxEditor = CheckboxEditor;
	($traceurRuntime.createClass)(CheckboxEditor, {
	  beginEditing: function() {
	    var checkbox = this.TD.querySelector('input[type="checkbox"]');
	    if (!hasClass(checkbox, 'htBadValue')) {
	      checkbox.click();
	    }
	  },
	  finishEditing: function() {},
	  init: function() {},
	  open: function() {},
	  close: function() {},
	  getValue: function() {},
	  setValue: function() {},
	  focus: function() {}
	}, {}, BaseEditor);
	;
	registerEditor('checkbox', CheckboxEditor);

	//# 
	},{"_baseEditor":29,"editors":28,"helpers/dom/element":44}],32:[function(require,module,exports){
	"use strict";
	Object.defineProperties(exports, {
	  DateEditor: {get: function() {
	      return DateEditor;
	    }},
	  __esModule: {value: true}
	});
	var $___46__46__47_helpers_47_dom_47_element__,
	    $___46__46__47_helpers_47_object__,
	    $___46__46__47_eventManager__,
	    $___46__46__47_editors__,
	    $___46__46__47_helpers_47_unicode__,
	    $___46__46__47_helpers_47_dom_47_event__,
	    $__textEditor__,
	    $__moment__,
	    $__pikaday__;
	var $__0 = ($___46__46__47_helpers_47_dom_47_element__ = require("helpers/dom/element"), $___46__46__47_helpers_47_dom_47_element__ && $___46__46__47_helpers_47_dom_47_element__.__esModule && $___46__46__47_helpers_47_dom_47_element__ || {default: $___46__46__47_helpers_47_dom_47_element__}),
	    addClass = $__0.addClass,
	    outerHeight = $__0.outerHeight;
	var deepExtend = ($___46__46__47_helpers_47_object__ = require("helpers/object"), $___46__46__47_helpers_47_object__ && $___46__46__47_helpers_47_object__.__esModule && $___46__46__47_helpers_47_object__ || {default: $___46__46__47_helpers_47_object__}).deepExtend;
	var EventManager = ($___46__46__47_eventManager__ = require("eventManager"), $___46__46__47_eventManager__ && $___46__46__47_eventManager__.__esModule && $___46__46__47_eventManager__ || {default: $___46__46__47_eventManager__}).EventManager;
	var $__3 = ($___46__46__47_editors__ = require("editors"), $___46__46__47_editors__ && $___46__46__47_editors__.__esModule && $___46__46__47_editors__ || {default: $___46__46__47_editors__}),
	    getEditor = $__3.getEditor,
	    registerEditor = $__3.registerEditor;
	var isMetaKey = ($___46__46__47_helpers_47_unicode__ = require("helpers/unicode"), $___46__46__47_helpers_47_unicode__ && $___46__46__47_helpers_47_unicode__.__esModule && $___46__46__47_helpers_47_unicode__ || {default: $___46__46__47_helpers_47_unicode__}).isMetaKey;
	var stopPropagation = ($___46__46__47_helpers_47_dom_47_event__ = require("helpers/dom/event"), $___46__46__47_helpers_47_dom_47_event__ && $___46__46__47_helpers_47_dom_47_event__.__esModule && $___46__46__47_helpers_47_dom_47_event__ || {default: $___46__46__47_helpers_47_dom_47_event__}).stopPropagation;
	var TextEditor = ($__textEditor__ = require("textEditor"), $__textEditor__ && $__textEditor__.__esModule && $__textEditor__ || {default: $__textEditor__}).TextEditor;
	var moment = ($__moment__ = require("moment"), $__moment__ && $__moment__.__esModule && $__moment__ || {default: $__moment__}).default;
	var Pikaday = ($__pikaday__ = require("pikaday"), $__pikaday__ && $__pikaday__.__esModule && $__pikaday__ || {default: $__pikaday__}).default;
	Handsontable.editors = Handsontable.editors || {};
	Handsontable.editors.DateEditor = DateEditor;
	var DateEditor = function DateEditor(hotInstance) {
	  this.$datePicker = null;
	  this.datePicker = null;
	  this.datePickerStyle = null;
	  this.defaultDateFormat = 'DD/MM/YYYY';
	  this.isCellEdited = false;
	  this.parentDestroyed = false;
	  $traceurRuntime.superConstructor($DateEditor).call(this, hotInstance);
	};
	var $DateEditor = DateEditor;
	($traceurRuntime.createClass)(DateEditor, {
	  init: function() {
	    var $__9 = this;
	    if (typeof moment !== 'function') {
	      throw new Error('You need to include moment.js to your project.');
	    }
	    if (typeof Pikaday !== 'function') {
	      throw new Error('You need to include Pikaday to your project.');
	    }
	    $traceurRuntime.superGet(this, $DateEditor.prototype, "init").call(this);
	    this.instance.addHook('afterDestroy', (function() {
	      $__9.parentDestroyed = true;
	      $__9.destroyElements();
	    }));
	  },
	  createElements: function() {
	    $traceurRuntime.superGet(this, $DateEditor.prototype, "createElements").call(this);
	    this.datePicker = document.createElement('DIV');
	    this.datePickerStyle = this.datePicker.style;
	    this.datePickerStyle.position = 'absolute';
	    this.datePickerStyle.top = 0;
	    this.datePickerStyle.left = 0;
	    this.datePickerStyle.zIndex = 9999;
	    addClass(this.datePicker, 'htDatepickerHolder');
	    document.body.appendChild(this.datePicker);
	    this.$datePicker = new Pikaday(this.getDatePickerConfig());
	    var eventManager = new EventManager(this);
	    eventManager.addEventListener(this.datePicker, 'mousedown', (function(event) {
	      return stopPropagation(event);
	    }));
	    this.hideDatepicker();
	  },
	  destroyElements: function() {
	    this.$datePicker.destroy();
	  },
	  prepare: function(row, col, prop, td, originalValue, cellProperties) {
	    this._opened = false;
	    $traceurRuntime.superGet(this, $DateEditor.prototype, "prepare").call(this, row, col, prop, td, originalValue, cellProperties);
	  },
	  open: function() {
	    var event = arguments[0] !== (void 0) ? arguments[0] : null;
	    $traceurRuntime.superGet(this, $DateEditor.prototype, "open").call(this);
	    this.showDatepicker(event);
	  },
	  close: function() {
	    var $__9 = this;
	    this._opened = false;
	    this.instance._registerTimeout(setTimeout((function() {
	      $__9.instance.selection.refreshBorders();
	    }), 0));
	    $traceurRuntime.superGet(this, $DateEditor.prototype, "close").call(this);
	  },
	  finishEditing: function() {
	    var isCancelled = arguments[0] !== (void 0) ? arguments[0] : false;
	    var ctrlDown = arguments[1] !== (void 0) ? arguments[1] : false;
	    if (isCancelled) {
	      var value = this.originalValue;
	      if (value !== void 0) {
	        this.setValue(value);
	      }
	    }
	    this.hideDatepicker();
	    $traceurRuntime.superGet(this, $DateEditor.prototype, "finishEditing").call(this, isCancelled, ctrlDown);
	  },
	  showDatepicker: function(event) {
	    this.$datePicker.config(this.getDatePickerConfig());
	    var offset = this.TD.getBoundingClientRect();
	    var dateFormat = this.cellProperties.dateFormat || this.defaultDateFormat;
	    var datePickerConfig = this.$datePicker.config();
	    var dateStr;
	    var isMouseDown = this.instance.view.isMouseDown();
	    var isMeta = event ? isMetaKey(event.keyCode) : false;
	    this.datePickerStyle.top = (window.pageYOffset + offset.top + outerHeight(this.TD)) + 'px';
	    this.datePickerStyle.left = (window.pageXOffset + offset.left) + 'px';
	    this.$datePicker._onInputFocus = function() {};
	    datePickerConfig.format = dateFormat;
	    if (this.originalValue) {
	      dateStr = this.originalValue;
	      if (moment(dateStr, dateFormat, true).isValid()) {
	        this.$datePicker.setMoment(moment(dateStr, dateFormat), true);
	      }
	      if (!isMeta && !isMouseDown) {
	        this.setValue('');
	      }
	    } else {
	      if (this.cellProperties.defaultDate) {
	        dateStr = this.cellProperties.defaultDate;
	        datePickerConfig.defaultDate = dateStr;
	        if (moment(dateStr, dateFormat, true).isValid()) {
	          this.$datePicker.setMoment(moment(dateStr, dateFormat), true);
	        }
	        if (!isMeta && !isMouseDown) {
	          this.setValue('');
	        }
	      } else {
	        this.$datePicker.gotoToday();
	      }
	    }
	    this.datePickerStyle.display = 'block';
	    this.$datePicker.show();
	  },
	  hideDatepicker: function() {
	    this.datePickerStyle.display = 'none';
	    this.$datePicker.hide();
	  },
	  getDatePickerConfig: function() {
	    var $__9 = this;
	    var htInput = this.TEXTAREA;
	    var options = {};
	    if (this.cellProperties && this.cellProperties.datePickerConfig) {
	      deepExtend(options, this.cellProperties.datePickerConfig);
	    }
	    var origOnSelect = options.onSelect;
	    var origOnClose = options.onClose;
	    options.field = htInput;
	    options.trigger = htInput;
	    options.container = this.datePicker;
	    options.bound = false;
	    options.format = options.format || this.defaultDateFormat;
	    options.reposition = options.reposition || false;
	    options.onSelect = (function(dateStr) {
	      if (!isNaN(dateStr.getTime())) {
	        dateStr = moment(dateStr).format($__9.cellProperties.dateFormat || $__9.defaultDateFormat);
	      }
	      $__9.setValue(dateStr);
	      $__9.hideDatepicker();
	      if (origOnSelect) {
	        origOnSelect();
	      }
	    });
	    options.onClose = (function() {
	      if (!$__9.parentDestroyed) {
	        $__9.finishEditing(false);
	      }
	      if (origOnClose) {
	        origOnClose();
	      }
	    });
	    return options;
	  }
	}, {}, TextEditor);
	;
	registerEditor('date', DateEditor);

	//# 
	},{"editors":28,"eventManager":40,"helpers/dom/element":44,"helpers/dom/event":45,"helpers/object":49,"helpers/unicode":52,"moment":"moment","pikaday":"pikaday","textEditor":39}],33:[function(require,module,exports){
	"use strict";
	Object.defineProperties(exports, {
	  DropdownEditor: {get: function() {
	      return DropdownEditor;
	    }},
	  __esModule: {value: true}
	});
	var $___46__46__47_editors__,
	    $__autocompleteEditor__;
	var $__0 = ($___46__46__47_editors__ = require("editors"), $___46__46__47_editors__ && $___46__46__47_editors__.__esModule && $___46__46__47_editors__ || {default: $___46__46__47_editors__}),
	    getEditor = $__0.getEditor,
	    registerEditor = $__0.registerEditor;
	var AutocompleteEditor = ($__autocompleteEditor__ = require("autocompleteEditor"), $__autocompleteEditor__ && $__autocompleteEditor__.__esModule && $__autocompleteEditor__ || {default: $__autocompleteEditor__}).AutocompleteEditor;
	var DropdownEditor = function DropdownEditor() {
	  $traceurRuntime.superConstructor($DropdownEditor).apply(this, arguments);
	};
	var $DropdownEditor = DropdownEditor;
	($traceurRuntime.createClass)(DropdownEditor, {prepare: function(row, col, prop, td, originalValue, cellProperties) {
	    $traceurRuntime.superGet(this, $DropdownEditor.prototype, "prepare").call(this, row, col, prop, td, originalValue, cellProperties);
	    this.cellProperties.filter = false;
	    this.cellProperties.strict = true;
	  }}, {}, AutocompleteEditor);
	Handsontable.hooks.add('beforeValidate', function(value, row, col, source) {
	  var cellMeta = this.getCellMeta(row, col);
	  if (cellMeta.editor === Handsontable.editors.DropdownEditor) {
	    if (cellMeta.strict === void 0) {
	      cellMeta.filter = false;
	      cellMeta.strict = true;
	    }
	  }
	});
	;
	registerEditor('dropdown', DropdownEditor);

	//# 
	},{"autocompleteEditor":30,"editors":28}],34:[function(require,module,exports){
	"use strict";
	Object.defineProperties(exports, {
	  HandsontableEditor: {get: function() {
	      return HandsontableEditor;
	    }},
	  __esModule: {value: true}
	});
	var $___46__46__47_helpers_47_unicode__,
	    $___46__46__47_helpers_47_object__,
	    $___46__46__47_helpers_47_dom_47_element__,
	    $___46__46__47_helpers_47_dom_47_event__,
	    $___46__46__47_editors__,
	    $__textEditor__;
	var KEY_CODES = ($___46__46__47_helpers_47_unicode__ = require("helpers/unicode"), $___46__46__47_helpers_47_unicode__ && $___46__46__47_helpers_47_unicode__.__esModule && $___46__46__47_helpers_47_unicode__ || {default: $___46__46__47_helpers_47_unicode__}).KEY_CODES;
	var extend = ($___46__46__47_helpers_47_object__ = require("helpers/object"), $___46__46__47_helpers_47_object__ && $___46__46__47_helpers_47_object__.__esModule && $___46__46__47_helpers_47_object__ || {default: $___46__46__47_helpers_47_object__}).extend;
	var setCaretPosition = ($___46__46__47_helpers_47_dom_47_element__ = require("helpers/dom/element"), $___46__46__47_helpers_47_dom_47_element__ && $___46__46__47_helpers_47_dom_47_element__.__esModule && $___46__46__47_helpers_47_dom_47_element__ || {default: $___46__46__47_helpers_47_dom_47_element__}).setCaretPosition;
	var $__3 = ($___46__46__47_helpers_47_dom_47_event__ = require("helpers/dom/event"), $___46__46__47_helpers_47_dom_47_event__ && $___46__46__47_helpers_47_dom_47_event__.__esModule && $___46__46__47_helpers_47_dom_47_event__ || {default: $___46__46__47_helpers_47_dom_47_event__}),
	    stopImmediatePropagation = $__3.stopImmediatePropagation,
	    isImmediatePropagationStopped = $__3.isImmediatePropagationStopped;
	var $__4 = ($___46__46__47_editors__ = require("editors"), $___46__46__47_editors__ && $___46__46__47_editors__.__esModule && $___46__46__47_editors__ || {default: $___46__46__47_editors__}),
	    getEditor = $__4.getEditor,
	    registerEditor = $__4.registerEditor;
	var TextEditor = ($__textEditor__ = require("textEditor"), $__textEditor__ && $__textEditor__.__esModule && $__textEditor__ || {default: $__textEditor__}).TextEditor;
	var HandsontableEditor = TextEditor.prototype.extend();
	HandsontableEditor.prototype.createElements = function() {
	  TextEditor.prototype.createElements.apply(this, arguments);
	  var DIV = document.createElement('DIV');
	  DIV.className = 'handsontableEditor';
	  this.TEXTAREA_PARENT.appendChild(DIV);
	  this.htContainer = DIV;
	  this.assignHooks();
	};
	HandsontableEditor.prototype.prepare = function(td, row, col, prop, value, cellProperties) {
	  TextEditor.prototype.prepare.apply(this, arguments);
	  var parent = this;
	  var options = {
	    startRows: 0,
	    startCols: 0,
	    minRows: 0,
	    minCols: 0,
	    className: 'listbox',
	    copyPaste: false,
	    autoColumnSize: false,
	    autoRowSize: false,
	    readOnly: true,
	    fillHandle: false,
	    afterOnCellMouseDown: function() {
	      var value = this.getValue();
	      if (value !== void 0) {
	        parent.setValue(value);
	      }
	      parent.instance.destroyEditor();
	    }
	  };
	  if (this.cellProperties.handsontable) {
	    extend(options, cellProperties.handsontable);
	  }
	  this.htOptions = options;
	};
	var onBeforeKeyDown = function(event) {
	  if (isImmediatePropagationStopped(event)) {
	    return;
	  }
	  var editor = this.getActiveEditor();
	  var innerHOT = editor.htEditor.getInstance();
	  var rowToSelect;
	  if (event.keyCode == KEY_CODES.ARROW_DOWN) {
	    if (innerHOT.getSelected()) {
	      var selectedRow = innerHOT.getSelected()[0];
	      var lastRow = innerHOT.countRows() - 1;
	      rowToSelect = Math.min(lastRow, selectedRow + 1);
	    } else {
	      rowToSelect = 0;
	    }
	  } else if (event.keyCode == KEY_CODES.ARROW_UP) {
	    if (innerHOT.getSelected()) {
	      var selectedRow = innerHOT.getSelected()[0];
	      rowToSelect = selectedRow - 1;
	    }
	  }
	  if (rowToSelect !== void 0) {
	    if (rowToSelect < 0) {
	      innerHOT.deselectCell();
	    } else {
	      innerHOT.selectCell(rowToSelect, 0);
	    }
	    if (innerHOT.getData().length) {
	      event.preventDefault();
	      stopImmediatePropagation(event);
	      editor.instance.listen();
	      editor.TEXTAREA.focus();
	    }
	  }
	};
	HandsontableEditor.prototype.open = function() {
	  this.instance.addHook('beforeKeyDown', onBeforeKeyDown);
	  TextEditor.prototype.open.apply(this, arguments);
	  if (this.htEditor) {
	    this.htEditor.destroy();
	  }
	  this.htEditor = new Handsontable(this.htContainer, this.htOptions);
	  if (this.cellProperties.strict) {
	    this.htEditor.selectCell(0, 0);
	    this.TEXTAREA.style.visibility = 'hidden';
	  } else {
	    this.htEditor.deselectCell();
	    this.TEXTAREA.style.visibility = 'visible';
	  }
	  setCaretPosition(this.TEXTAREA, 0, this.TEXTAREA.value.length);
	};
	HandsontableEditor.prototype.close = function() {
	  this.instance.removeHook('beforeKeyDown', onBeforeKeyDown);
	  this.instance.listen();
	  TextEditor.prototype.close.apply(this, arguments);
	};
	HandsontableEditor.prototype.focus = function() {
	  this.instance.listen();
	  TextEditor.prototype.focus.apply(this, arguments);
	};
	HandsontableEditor.prototype.beginEditing = function(initialValue) {
	  var onBeginEditing = this.instance.getSettings().onBeginEditing;
	  if (onBeginEditing && onBeginEditing() === false) {
	    return;
	  }
	  TextEditor.prototype.beginEditing.apply(this, arguments);
	};
	HandsontableEditor.prototype.finishEditing = function(isCancelled, ctrlDown) {
	  if (this.htEditor && this.htEditor.isListening()) {
	    this.instance.listen();
	  }
	  if (this.htEditor && this.htEditor.getSelected()) {
	    var value = this.htEditor.getInstance().getValue();
	    if (value !== void 0) {
	      this.setValue(value);
	    }
	  }
	  return TextEditor.prototype.finishEditing.apply(this, arguments);
	};
	HandsontableEditor.prototype.assignHooks = function() {
	  var _this = this;
	  this.instance.addHook('afterDestroy', function() {
	    if (_this.htEditor) {
	      _this.htEditor.destroy();
	    }
	  });
	};
	;
	registerEditor('handsontable', HandsontableEditor);

	//# 
	},{"editors":28,"helpers/dom/element":44,"helpers/dom/event":45,"helpers/object":49,"helpers/unicode":52,"textEditor":39}],35:[function(require,module,exports){
	"use strict";
	Object.defineProperties(exports, {
	  MobileTextEditor: {get: function() {
	      return MobileTextEditor;
	    }},
	  __esModule: {value: true}
	});
	var $___46__46__47_helpers_47_unicode__,
	    $___46__46__47_helpers_47_dom_47_event__,
	    $___46__46__47_helpers_47_dom_47_element__,
	    $___46__46__47_editors__,
	    $___95_baseEditor__,
	    $___46__46__47_eventManager__;
	var KEY_CODES = ($___46__46__47_helpers_47_unicode__ = require("helpers/unicode"), $___46__46__47_helpers_47_unicode__ && $___46__46__47_helpers_47_unicode__.__esModule && $___46__46__47_helpers_47_unicode__ || {default: $___46__46__47_helpers_47_unicode__}).KEY_CODES;
	var $__1 = ($___46__46__47_helpers_47_dom_47_event__ = require("helpers/dom/event"), $___46__46__47_helpers_47_dom_47_event__ && $___46__46__47_helpers_47_dom_47_event__.__esModule && $___46__46__47_helpers_47_dom_47_event__ || {default: $___46__46__47_helpers_47_dom_47_event__}),
	    stopImmediatePropagation = $__1.stopImmediatePropagation,
	    isImmediatePropagationStopped = $__1.isImmediatePropagationStopped;
	var $__2 = ($___46__46__47_helpers_47_dom_47_element__ = require("helpers/dom/element"), $___46__46__47_helpers_47_dom_47_element__ && $___46__46__47_helpers_47_dom_47_element__.__esModule && $___46__46__47_helpers_47_dom_47_element__ || {default: $___46__46__47_helpers_47_dom_47_element__}),
	    addClass = $__2.addClass,
	    getScrollLeft = $__2.getScrollLeft,
	    getScrollTop = $__2.getScrollTop,
	    hasClass = $__2.hasClass,
	    isChildOf = $__2.isChildOf,
	    offset = $__2.offset,
	    outerHeight = $__2.outerHeight,
	    outerWidth = $__2.outerWidth,
	    removeClass = $__2.removeClass,
	    setCaretPosition = $__2.setCaretPosition;
	var $__3 = ($___46__46__47_editors__ = require("editors"), $___46__46__47_editors__ && $___46__46__47_editors__.__esModule && $___46__46__47_editors__ || {default: $___46__46__47_editors__}),
	    getEditor = $__3.getEditor,
	    registerEditor = $__3.registerEditor;
	var BaseEditor = ($___95_baseEditor__ = require("_baseEditor"), $___95_baseEditor__ && $___95_baseEditor__.__esModule && $___95_baseEditor__ || {default: $___95_baseEditor__}).BaseEditor;
	var eventManagerObject = ($___46__46__47_eventManager__ = require("eventManager"), $___46__46__47_eventManager__ && $___46__46__47_eventManager__.__esModule && $___46__46__47_eventManager__ || {default: $___46__46__47_eventManager__}).eventManager;
	var MobileTextEditor = BaseEditor.prototype.extend(),
	    domDimensionsCache = {};
	var createControls = function() {
	  this.controls = {};
	  this.controls.leftButton = document.createElement('DIV');
	  this.controls.leftButton.className = 'leftButton';
	  this.controls.rightButton = document.createElement('DIV');
	  this.controls.rightButton.className = 'rightButton';
	  this.controls.upButton = document.createElement('DIV');
	  this.controls.upButton.className = 'upButton';
	  this.controls.downButton = document.createElement('DIV');
	  this.controls.downButton.className = 'downButton';
	  for (var button in this.controls) {
	    if (this.controls.hasOwnProperty(button)) {
	      this.positionControls.appendChild(this.controls[button]);
	    }
	  }
	};
	MobileTextEditor.prototype.valueChanged = function() {
	  return this.initValue != this.getValue();
	};
	MobileTextEditor.prototype.init = function() {
	  var that = this;
	  this.eventManager = eventManagerObject(this.instance);
	  this.createElements();
	  this.bindEvents();
	  this.instance.addHook('afterDestroy', function() {
	    that.destroy();
	  });
	};
	MobileTextEditor.prototype.getValue = function() {
	  return this.TEXTAREA.value;
	};
	MobileTextEditor.prototype.setValue = function(newValue) {
	  this.initValue = newValue;
	  this.TEXTAREA.value = newValue;
	};
	MobileTextEditor.prototype.createElements = function() {
	  this.editorContainer = document.createElement('DIV');
	  this.editorContainer.className = 'htMobileEditorContainer';
	  this.cellPointer = document.createElement('DIV');
	  this.cellPointer.className = 'cellPointer';
	  this.moveHandle = document.createElement('DIV');
	  this.moveHandle.className = 'moveHandle';
	  this.inputPane = document.createElement('DIV');
	  this.inputPane.className = 'inputs';
	  this.positionControls = document.createElement('DIV');
	  this.positionControls.className = 'positionControls';
	  this.TEXTAREA = document.createElement('TEXTAREA');
	  addClass(this.TEXTAREA, 'handsontableInput');
	  this.inputPane.appendChild(this.TEXTAREA);
	  this.editorContainer.appendChild(this.cellPointer);
	  this.editorContainer.appendChild(this.moveHandle);
	  this.editorContainer.appendChild(this.inputPane);
	  this.editorContainer.appendChild(this.positionControls);
	  createControls.call(this);
	  document.body.appendChild(this.editorContainer);
	};
	MobileTextEditor.prototype.onBeforeKeyDown = function(event) {
	  var instance = this;
	  var that = instance.getActiveEditor();
	  if (event.target !== that.TEXTAREA || isImmediatePropagationStopped(event)) {
	    return;
	  }
	  switch (event.keyCode) {
	    case KEY_CODES.ENTER:
	      that.close();
	      event.preventDefault();
	      break;
	    case KEY_CODES.BACKSPACE:
	      stopImmediatePropagation(event);
	      break;
	  }
	};
	MobileTextEditor.prototype.open = function() {
	  this.instance.addHook('beforeKeyDown', this.onBeforeKeyDown);
	  addClass(this.editorContainer, 'active');
	  removeClass(this.cellPointer, 'hidden');
	  this.updateEditorPosition();
	};
	MobileTextEditor.prototype.focus = function() {
	  this.TEXTAREA.focus();
	  setCaretPosition(this.TEXTAREA, this.TEXTAREA.value.length);
	};
	MobileTextEditor.prototype.close = function() {
	  this.TEXTAREA.blur();
	  this.instance.removeHook('beforeKeyDown', this.onBeforeKeyDown);
	  removeClass(this.editorContainer, 'active');
	};
	MobileTextEditor.prototype.scrollToView = function() {
	  var coords = this.instance.getSelectedRange().highlight;
	  this.instance.view.scrollViewport(coords);
	};
	MobileTextEditor.prototype.hideCellPointer = function() {
	  if (!hasClass(this.cellPointer, 'hidden')) {
	    addClass(this.cellPointer, 'hidden');
	  }
	};
	MobileTextEditor.prototype.updateEditorPosition = function(x, y) {
	  if (x && y) {
	    x = parseInt(x, 10);
	    y = parseInt(y, 10);
	    this.editorContainer.style.top = y + 'px';
	    this.editorContainer.style.left = x + 'px';
	  } else {
	    var selection = this.instance.getSelected(),
	        selectedCell = this.instance.getCell(selection[0], selection[1]);
	    if (!domDimensionsCache.cellPointer) {
	      domDimensionsCache.cellPointer = {
	        height: outerHeight(this.cellPointer),
	        width: outerWidth(this.cellPointer)
	      };
	    }
	    if (!domDimensionsCache.editorContainer) {
	      domDimensionsCache.editorContainer = {width: outerWidth(this.editorContainer)};
	    }
	    if (selectedCell !== undefined) {
	      var scrollLeft = this.instance.view.wt.wtOverlays.leftOverlay.trimmingContainer == window ? 0 : getScrollLeft(this.instance.view.wt.wtOverlays.leftOverlay.holder);
	      var scrollTop = this.instance.view.wt.wtOverlays.topOverlay.trimmingContainer == window ? 0 : getScrollTop(this.instance.view.wt.wtOverlays.topOverlay.holder);
	      var selectedCellOffset = offset(selectedCell),
	          selectedCellWidth = outerWidth(selectedCell),
	          currentScrollPosition = {
	            x: scrollLeft,
	            y: scrollTop
	          };
	      this.editorContainer.style.top = parseInt(selectedCellOffset.top + outerHeight(selectedCell) - currentScrollPosition.y + domDimensionsCache.cellPointer.height, 10) + 'px';
	      this.editorContainer.style.left = parseInt((window.innerWidth / 2) - (domDimensionsCache.editorContainer.width / 2), 10) + 'px';
	      if (selectedCellOffset.left + selectedCellWidth / 2 > parseInt(this.editorContainer.style.left, 10) + domDimensionsCache.editorContainer.width) {
	        this.editorContainer.style.left = window.innerWidth - domDimensionsCache.editorContainer.width + 'px';
	      } else if (selectedCellOffset.left + selectedCellWidth / 2 < parseInt(this.editorContainer.style.left, 10) + 20) {
	        this.editorContainer.style.left = 0 + 'px';
	      }
	      this.cellPointer.style.left = parseInt(selectedCellOffset.left - (domDimensionsCache.cellPointer.width / 2) - offset(this.editorContainer).left + (selectedCellWidth / 2) - currentScrollPosition.x, 10) + 'px';
	    }
	  }
	};
	MobileTextEditor.prototype.updateEditorData = function() {
	  var selected = this.instance.getSelected(),
	      selectedValue = this.instance.getDataAtCell(selected[0], selected[1]);
	  this.row = selected[0];
	  this.col = selected[1];
	  this.setValue(selectedValue);
	  this.updateEditorPosition();
	};
	MobileTextEditor.prototype.prepareAndSave = function() {
	  var val;
	  if (!this.valueChanged()) {
	    return true;
	  }
	  if (this.instance.getSettings().trimWhitespace) {
	    val = [[String.prototype.trim.call(this.getValue())]];
	  } else {
	    val = [[this.getValue()]];
	  }
	  this.saveValue(val);
	};
	MobileTextEditor.prototype.bindEvents = function() {
	  var that = this;
	  this.eventManager.addEventListener(this.controls.leftButton, 'touchend', function(event) {
	    that.prepareAndSave();
	    that.instance.selection.transformStart(0, -1, null, true);
	    that.updateEditorData();
	    event.preventDefault();
	  });
	  this.eventManager.addEventListener(this.controls.rightButton, 'touchend', function(event) {
	    that.prepareAndSave();
	    that.instance.selection.transformStart(0, 1, null, true);
	    that.updateEditorData();
	    event.preventDefault();
	  });
	  this.eventManager.addEventListener(this.controls.upButton, 'touchend', function(event) {
	    that.prepareAndSave();
	    that.instance.selection.transformStart(-1, 0, null, true);
	    that.updateEditorData();
	    event.preventDefault();
	  });
	  this.eventManager.addEventListener(this.controls.downButton, 'touchend', function(event) {
	    that.prepareAndSave();
	    that.instance.selection.transformStart(1, 0, null, true);
	    that.updateEditorData();
	    event.preventDefault();
	  });
	  this.eventManager.addEventListener(this.moveHandle, 'touchstart', function(event) {
	    if (event.touches.length == 1) {
	      var touch = event.touches[0],
	          onTouchPosition = {
	            x: that.editorContainer.offsetLeft,
	            y: that.editorContainer.offsetTop
	          },
	          onTouchOffset = {
	            x: touch.pageX - onTouchPosition.x,
	            y: touch.pageY - onTouchPosition.y
	          };
	      that.eventManager.addEventListener(this, 'touchmove', function(event) {
	        var touch = event.touches[0];
	        that.updateEditorPosition(touch.pageX - onTouchOffset.x, touch.pageY - onTouchOffset.y);
	        that.hideCellPointer();
	        event.preventDefault();
	      });
	    }
	  });
	  this.eventManager.addEventListener(document.body, 'touchend', function(event) {
	    if (!isChildOf(event.target, that.editorContainer) && !isChildOf(event.target, that.instance.rootElement)) {
	      that.close();
	    }
	  });
	  this.eventManager.addEventListener(this.instance.view.wt.wtOverlays.leftOverlay.holder, 'scroll', function(event) {
	    if (that.instance.view.wt.wtOverlays.leftOverlay.trimmingContainer != window) {
	      that.hideCellPointer();
	    }
	  });
	  this.eventManager.addEventListener(this.instance.view.wt.wtOverlays.topOverlay.holder, 'scroll', function(event) {
	    if (that.instance.view.wt.wtOverlays.topOverlay.trimmingContainer != window) {
	      that.hideCellPointer();
	    }
	  });
	};
	MobileTextEditor.prototype.destroy = function() {
	  this.eventManager.clear();
	  this.editorContainer.parentNode.removeChild(this.editorContainer);
	};
	;
	registerEditor('mobile', MobileTextEditor);

	//# 
	},{"_baseEditor":29,"editors":28,"eventManager":40,"helpers/dom/element":44,"helpers/dom/event":45,"helpers/unicode":52}],36:[function(require,module,exports){
	"use strict";
	Object.defineProperties(exports, {
	  NumericEditor: {get: function() {
	      return NumericEditor;
	    }},
	  __esModule: {value: true}
	});
	var $__numeral__,
	    $___46__46__47_editors__,
	    $__textEditor__;
	var numeral = ($__numeral__ = require("numeral"), $__numeral__ && $__numeral__.__esModule && $__numeral__ || {default: $__numeral__}).default;
	var $__1 = ($___46__46__47_editors__ = require("editors"), $___46__46__47_editors__ && $___46__46__47_editors__.__esModule && $___46__46__47_editors__ || {default: $___46__46__47_editors__}),
	    getEditor = $__1.getEditor,
	    registerEditor = $__1.registerEditor;
	var TextEditor = ($__textEditor__ = require("textEditor"), $__textEditor__ && $__textEditor__.__esModule && $__textEditor__ || {default: $__textEditor__}).TextEditor;
	var NumericEditor = function NumericEditor() {
	  $traceurRuntime.superConstructor($NumericEditor).apply(this, arguments);
	};
	var $NumericEditor = NumericEditor;
	($traceurRuntime.createClass)(NumericEditor, {beginEditing: function(initialValue) {
	    if (typeof initialValue === 'undefined' && this.originalValue) {
	      if (typeof this.cellProperties.language !== 'undefined') {
	        numeral.language(this.cellProperties.language);
	      }
	      var decimalDelimiter = numeral.languageData().delimiters.decimal;
	      initialValue = ('' + this.originalValue).replace('.', decimalDelimiter);
	    }
	    $traceurRuntime.superGet(this, $NumericEditor.prototype, "beginEditing").call(this, initialValue);
	  }}, {}, TextEditor);
	;
	registerEditor('numeric', NumericEditor);

	//# 
	},{"editors":28,"numeral":"numeral","textEditor":39}],37:[function(require,module,exports){
	"use strict";
	Object.defineProperties(exports, {
	  PasswordEditor: {get: function() {
	      return PasswordEditor;
	    }},
	  __esModule: {value: true}
	});
	var $___46__46__47_helpers_47_dom_47_element__,
	    $___46__46__47_editors__,
	    $__textEditor__;
	var empty = ($___46__46__47_helpers_47_dom_47_element__ = require("helpers/dom/element"), $___46__46__47_helpers_47_dom_47_element__ && $___46__46__47_helpers_47_dom_47_element__.__esModule && $___46__46__47_helpers_47_dom_47_element__ || {default: $___46__46__47_helpers_47_dom_47_element__}).empty;
	var $__1 = ($___46__46__47_editors__ = require("editors"), $___46__46__47_editors__ && $___46__46__47_editors__.__esModule && $___46__46__47_editors__ || {default: $___46__46__47_editors__}),
	    getEditor = $__1.getEditor,
	    registerEditor = $__1.registerEditor;
	var TextEditor = ($__textEditor__ = require("textEditor"), $__textEditor__ && $__textEditor__.__esModule && $__textEditor__ || {default: $__textEditor__}).TextEditor;
	var PasswordEditor = function PasswordEditor() {
	  $traceurRuntime.superConstructor($PasswordEditor).apply(this, arguments);
	};
	var $PasswordEditor = PasswordEditor;
	($traceurRuntime.createClass)(PasswordEditor, {createElements: function() {
	    $traceurRuntime.superGet(this, $PasswordEditor.prototype, "createElements").call(this);
	    this.TEXTAREA = document.createElement('input');
	    this.TEXTAREA.setAttribute('type', 'password');
	    this.TEXTAREA.className = 'handsontableInput';
	    this.textareaStyle = this.TEXTAREA.style;
	    this.textareaStyle.width = 0;
	    this.textareaStyle.height = 0;
	    empty(this.TEXTAREA_PARENT);
	    this.TEXTAREA_PARENT.appendChild(this.TEXTAREA);
	  }}, {}, TextEditor);
	;
	registerEditor('password', PasswordEditor);

	//# 
	},{"editors":28,"helpers/dom/element":44,"textEditor":39}],38:[function(require,module,exports){
	"use strict";
	Object.defineProperties(exports, {
	  SelectEditor: {get: function() {
	      return SelectEditor;
	    }},
	  __esModule: {value: true}
	});
	var $___46__46__47_helpers_47_dom_47_element__,
	    $___46__46__47_helpers_47_dom_47_event__,
	    $___46__46__47_helpers_47_unicode__,
	    $___46__46__47_editors__,
	    $___95_baseEditor__;
	var $__0 = ($___46__46__47_helpers_47_dom_47_element__ = require("helpers/dom/element"), $___46__46__47_helpers_47_dom_47_element__ && $___46__46__47_helpers_47_dom_47_element__.__esModule && $___46__46__47_helpers_47_dom_47_element__ || {default: $___46__46__47_helpers_47_dom_47_element__}),
	    addClass = $__0.addClass,
	    empty = $__0.empty,
	    fastInnerHTML = $__0.fastInnerHTML,
	    getComputedStyle = $__0.getComputedStyle,
	    getCssTransform = $__0.getCssTransform,
	    getScrollableElement = $__0.getScrollableElement,
	    offset = $__0.offset,
	    outerHeight = $__0.outerHeight,
	    outerWidth = $__0.outerWidth,
	    resetCssTransform = $__0.resetCssTransform;
	var stopImmediatePropagation = ($___46__46__47_helpers_47_dom_47_event__ = require("helpers/dom/event"), $___46__46__47_helpers_47_dom_47_event__ && $___46__46__47_helpers_47_dom_47_event__.__esModule && $___46__46__47_helpers_47_dom_47_event__ || {default: $___46__46__47_helpers_47_dom_47_event__}).stopImmediatePropagation;
	var KEY_CODES = ($___46__46__47_helpers_47_unicode__ = require("helpers/unicode"), $___46__46__47_helpers_47_unicode__ && $___46__46__47_helpers_47_unicode__.__esModule && $___46__46__47_helpers_47_unicode__ || {default: $___46__46__47_helpers_47_unicode__}).KEY_CODES;
	var $__3 = ($___46__46__47_editors__ = require("editors"), $___46__46__47_editors__ && $___46__46__47_editors__.__esModule && $___46__46__47_editors__ || {default: $___46__46__47_editors__}),
	    getEditor = $__3.getEditor,
	    registerEditor = $__3.registerEditor;
	var BaseEditor = ($___95_baseEditor__ = require("_baseEditor"), $___95_baseEditor__ && $___95_baseEditor__.__esModule && $___95_baseEditor__ || {default: $___95_baseEditor__}).BaseEditor;
	var SelectEditor = BaseEditor.prototype.extend();
	SelectEditor.prototype.init = function() {
	  this.select = document.createElement('SELECT');
	  addClass(this.select, 'htSelectEditor');
	  this.select.style.display = 'none';
	  this.instance.rootElement.appendChild(this.select);
	  this.registerHooks();
	};
	SelectEditor.prototype.registerHooks = function() {
	  var $__5 = this;
	  this.instance.addHook('afterScrollVertically', (function() {
	    return $__5.refreshDimensions();
	  }));
	  this.instance.addHook('afterColumnResize', (function() {
	    return $__5.refreshDimensions();
	  }));
	  this.instance.addHook('afterRowResize', (function() {
	    return $__5.refreshDimensions();
	  }));
	};
	SelectEditor.prototype.prepare = function() {
	  BaseEditor.prototype.prepare.apply(this, arguments);
	  var selectOptions = this.cellProperties.selectOptions;
	  var options;
	  if (typeof selectOptions == 'function') {
	    options = this.prepareOptions(selectOptions(this.row, this.col, this.prop));
	  } else {
	    options = this.prepareOptions(selectOptions);
	  }
	  empty(this.select);
	  for (var option in options) {
	    if (options.hasOwnProperty(option)) {
	      var optionElement = document.createElement('OPTION');
	      optionElement.value = option;
	      fastInnerHTML(optionElement, options[option]);
	      this.select.appendChild(optionElement);
	    }
	  }
	};
	SelectEditor.prototype.prepareOptions = function(optionsToPrepare) {
	  var preparedOptions = {};
	  if (Array.isArray(optionsToPrepare)) {
	    for (var i = 0,
	        len = optionsToPrepare.length; i < len; i++) {
	      preparedOptions[optionsToPrepare[i]] = optionsToPrepare[i];
	    }
	  } else if (typeof optionsToPrepare == 'object') {
	    preparedOptions = optionsToPrepare;
	  }
	  return preparedOptions;
	};
	SelectEditor.prototype.getValue = function() {
	  return this.select.value;
	};
	SelectEditor.prototype.setValue = function(value) {
	  this.select.value = value;
	};
	var onBeforeKeyDown = function(event) {
	  var instance = this;
	  var editor = instance.getActiveEditor();
	  switch (event.keyCode) {
	    case KEY_CODES.ARROW_UP:
	      var previousOptionIndex = editor.select.selectedIndex - 1;
	      if (previousOptionIndex >= 0) {
	        editor.select[previousOptionIndex].selected = true;
	      }
	      stopImmediatePropagation(event);
	      event.preventDefault();
	      break;
	    case KEY_CODES.ARROW_DOWN:
	      var nextOptionIndex = editor.select.selectedIndex + 1;
	      if (nextOptionIndex <= editor.select.length - 1) {
	        editor.select[nextOptionIndex].selected = true;
	      }
	      stopImmediatePropagation(event);
	      event.preventDefault();
	      break;
	  }
	};
	SelectEditor.prototype.open = function() {
	  this._opened = true;
	  this.refreshDimensions();
	  this.select.style.display = '';
	  this.instance.addHook('beforeKeyDown', onBeforeKeyDown);
	};
	SelectEditor.prototype.close = function() {
	  this._opened = false;
	  this.select.style.display = 'none';
	  this.instance.removeHook('beforeKeyDown', onBeforeKeyDown);
	};
	SelectEditor.prototype.focus = function() {
	  this.select.focus();
	};
	SelectEditor.prototype.refreshDimensions = function() {
	  if (this.state !== Handsontable.EditorState.EDITING) {
	    return;
	  }
	  this.TD = this.getEditedCell();
	  if (!this.TD) {
	    this.close();
	    return;
	  }
	  var width = outerWidth(this.TD) + 1,
	      height = outerHeight(this.TD) + 1,
	      currentOffset = offset(this.TD),
	      containerOffset = offset(this.instance.rootElement),
	      scrollableContainer = getScrollableElement(this.TD),
	      editTop = currentOffset.top - containerOffset.top - 1 - (scrollableContainer.scrollTop || 0),
	      editLeft = currentOffset.left - containerOffset.left - 1 - (scrollableContainer.scrollLeft || 0),
	      editorSection = this.checkEditorSection(),
	      cssTransformOffset;
	  var settings = this.instance.getSettings();
	  var rowHeadersCount = settings.rowHeaders ? 1 : 0;
	  var colHeadersCount = settings.colHeaders ? 1 : 0;
	  switch (editorSection) {
	    case 'top':
	      cssTransformOffset = getCssTransform(this.instance.view.wt.wtOverlays.topOverlay.clone.wtTable.holder.parentNode);
	      break;
	    case 'left':
	      cssTransformOffset = getCssTransform(this.instance.view.wt.wtOverlays.leftOverlay.clone.wtTable.holder.parentNode);
	      break;
	    case 'top-left-corner':
	      cssTransformOffset = getCssTransform(this.instance.view.wt.wtOverlays.topLeftCornerOverlay.clone.wtTable.holder.parentNode);
	      break;
	    case 'bottom-left-corner':
	      cssTransformOffset = getCssTransform(this.instance.view.wt.wtOverlays.bottomLeftCornerOverlay.clone.wtTable.holder.parentNode);
	      break;
	    case 'bottom':
	      cssTransformOffset = getCssTransform(this.instance.view.wt.wtOverlays.bottomOverlay.clone.wtTable.holder.parentNode);
	      break;
	  }
	  if (this.instance.getSelected()[0] === 0) {
	    editTop += 1;
	  }
	  if (this.instance.getSelected()[1] === 0) {
	    editLeft += 1;
	  }
	  var selectStyle = this.select.style;
	  if (cssTransformOffset && cssTransformOffset != -1) {
	    selectStyle[cssTransformOffset[0]] = cssTransformOffset[1];
	  } else {
	    resetCssTransform(this.select);
	  }
	  var cellComputedStyle = getComputedStyle(this.TD);
	  if (parseInt(cellComputedStyle.borderTopWidth, 10) > 0) {
	    height -= 1;
	  }
	  if (parseInt(cellComputedStyle.borderLeftWidth, 10) > 0) {
	    width -= 1;
	  }
	  selectStyle.height = height + 'px';
	  selectStyle.minWidth = width + 'px';
	  selectStyle.top = editTop + 'px';
	  selectStyle.left = editLeft + 'px';
	  selectStyle.margin = '0px';
	};
	SelectEditor.prototype.getEditedCell = function() {
	  var editorSection = this.checkEditorSection(),
	      editedCell;
	  switch (editorSection) {
	    case 'top':
	      editedCell = this.instance.view.wt.wtOverlays.topOverlay.clone.wtTable.getCell({
	        row: this.row,
	        col: this.col
	      });
	      this.select.style.zIndex = 101;
	      break;
	    case 'corner':
	      editedCell = this.instance.view.wt.wtOverlays.topLeftCornerOverlay.clone.wtTable.getCell({
	        row: this.row,
	        col: this.col
	      });
	      this.select.style.zIndex = 103;
	      break;
	    case 'left':
	      editedCell = this.instance.view.wt.wtOverlays.leftOverlay.clone.wtTable.getCell({
	        row: this.row,
	        col: this.col
	      });
	      this.select.style.zIndex = 102;
	      break;
	    default:
	      editedCell = this.instance.getCell(this.row, this.col);
	      this.select.style.zIndex = '';
	      break;
	  }
	  return editedCell != -1 && editedCell != -2 ? editedCell : void 0;
	};
	;
	registerEditor('select', SelectEditor);

	//# 
	},{"_baseEditor":29,"editors":28,"helpers/dom/element":44,"helpers/dom/event":45,"helpers/unicode":52}],39:[function(require,module,exports){
	"use strict";
	Object.defineProperties(exports, {
	  TextEditor: {get: function() {
	      return TextEditor;
	    }},
	  __esModule: {value: true}
	});
	var $___46__46__47_helpers_47_dom_47_element__,
	    $__autoResize__,
	    $___95_baseEditor__,
	    $___46__46__47_eventManager__,
	    $___46__46__47_editors__,
	    $___46__46__47_helpers_47_unicode__,
	    $___46__46__47_helpers_47_dom_47_event__;
	var $__0 = ($___46__46__47_helpers_47_dom_47_element__ = require("helpers/dom/element"), $___46__46__47_helpers_47_dom_47_element__ && $___46__46__47_helpers_47_dom_47_element__.__esModule && $___46__46__47_helpers_47_dom_47_element__ || {default: $___46__46__47_helpers_47_dom_47_element__}),
	    addClass = $__0.addClass,
	    getCaretPosition = $__0.getCaretPosition,
	    getComputedStyle = $__0.getComputedStyle,
	    getCssTransform = $__0.getCssTransform,
	    getScrollableElement = $__0.getScrollableElement,
	    innerWidth = $__0.innerWidth,
	    offset = $__0.offset,
	    resetCssTransform = $__0.resetCssTransform,
	    setCaretPosition = $__0.setCaretPosition;
	var autoResize = ($__autoResize__ = require("autoResize"), $__autoResize__ && $__autoResize__.__esModule && $__autoResize__ || {default: $__autoResize__}).default;
	var BaseEditor = ($___95_baseEditor__ = require("_baseEditor"), $___95_baseEditor__ && $___95_baseEditor__.__esModule && $___95_baseEditor__ || {default: $___95_baseEditor__}).BaseEditor;
	var eventManagerObject = ($___46__46__47_eventManager__ = require("eventManager"), $___46__46__47_eventManager__ && $___46__46__47_eventManager__.__esModule && $___46__46__47_eventManager__ || {default: $___46__46__47_eventManager__}).eventManager;
	var $__4 = ($___46__46__47_editors__ = require("editors"), $___46__46__47_editors__ && $___46__46__47_editors__.__esModule && $___46__46__47_editors__ || {default: $___46__46__47_editors__}),
	    getEditor = $__4.getEditor,
	    registerEditor = $__4.registerEditor;
	var KEY_CODES = ($___46__46__47_helpers_47_unicode__ = require("helpers/unicode"), $___46__46__47_helpers_47_unicode__ && $___46__46__47_helpers_47_unicode__.__esModule && $___46__46__47_helpers_47_unicode__ || {default: $___46__46__47_helpers_47_unicode__}).KEY_CODES;
	var $__6 = ($___46__46__47_helpers_47_dom_47_event__ = require("helpers/dom/event"), $___46__46__47_helpers_47_dom_47_event__ && $___46__46__47_helpers_47_dom_47_event__.__esModule && $___46__46__47_helpers_47_dom_47_event__ || {default: $___46__46__47_helpers_47_dom_47_event__}),
	    stopPropagation = $__6.stopPropagation,
	    stopImmediatePropagation = $__6.stopImmediatePropagation,
	    isImmediatePropagationStopped = $__6.isImmediatePropagationStopped;
	var TextEditor = BaseEditor.prototype.extend();
	TextEditor.prototype.init = function() {
	  var that = this;
	  this.createElements();
	  this.eventManager = eventManagerObject(this);
	  this.bindEvents();
	  this.autoResize = autoResize();
	  this.instance.addHook('afterDestroy', function() {
	    that.destroy();
	  });
	};
	TextEditor.prototype.getValue = function() {
	  return this.TEXTAREA.value;
	};
	TextEditor.prototype.setValue = function(newValue) {
	  this.TEXTAREA.value = newValue;
	};
	var onBeforeKeyDown = function onBeforeKeyDown(event) {
	  var instance = this,
	      that = instance.getActiveEditor(),
	      ctrlDown;
	  ctrlDown = (event.ctrlKey || event.metaKey) && !event.altKey;
	  if (event.target !== that.TEXTAREA || isImmediatePropagationStopped(event)) {
	    return;
	  }
	  if (event.keyCode === 17 || event.keyCode === 224 || event.keyCode === 91 || event.keyCode === 93) {
	    stopImmediatePropagation(event);
	    return;
	  }
	  switch (event.keyCode) {
	    case KEY_CODES.ARROW_RIGHT:
	      if (that.isInFullEditMode()) {
	        if ((!that.isWaiting() && !that.allowKeyEventPropagation) || (!that.isWaiting() && that.allowKeyEventPropagation && !that.allowKeyEventPropagation(event.keyCode))) {
	          stopImmediatePropagation(event);
	        }
	      }
	      break;
	    case KEY_CODES.ARROW_LEFT:
	      if (that.isInFullEditMode()) {
	        if ((!that.isWaiting() && !that.allowKeyEventPropagation) || (!that.isWaiting() && that.allowKeyEventPropagation && !that.allowKeyEventPropagation(event.keyCode))) {
	          stopImmediatePropagation(event);
	        }
	      }
	      break;
	    case KEY_CODES.ARROW_UP:
	    case KEY_CODES.ARROW_DOWN:
	      if (that.isInFullEditMode()) {
	        if ((!that.isWaiting() && !that.allowKeyEventPropagation) || (!that.isWaiting() && that.allowKeyEventPropagation && !that.allowKeyEventPropagation(event.keyCode))) {
	          stopImmediatePropagation(event);
	        }
	      }
	      break;
	    case KEY_CODES.ENTER:
	      var selected = that.instance.getSelected();
	      var isMultipleSelection = !(selected[0] === selected[2] && selected[1] === selected[3]);
	      if ((ctrlDown && !isMultipleSelection) || event.altKey) {
	        if (that.isOpened()) {
	          var caretPosition = getCaretPosition(that.TEXTAREA),
	              value = that.getValue();
	          var newValue = value.slice(0, caretPosition) + '\n' + value.slice(caretPosition);
	          that.setValue(newValue);
	          setCaretPosition(that.TEXTAREA, caretPosition + 1);
	        } else {
	          that.beginEditing(that.originalValue + '\n');
	        }
	        stopImmediatePropagation(event);
	      }
	      event.preventDefault();
	      break;
	    case KEY_CODES.A:
	    case KEY_CODES.X:
	    case KEY_CODES.C:
	    case KEY_CODES.V:
	      if (ctrlDown) {
	        stopImmediatePropagation(event);
	      }
	      break;
	    case KEY_CODES.BACKSPACE:
	    case KEY_CODES.DELETE:
	    case KEY_CODES.HOME:
	    case KEY_CODES.END:
	      stopImmediatePropagation(event);
	      break;
	  }
	  if ([KEY_CODES.ARROW_UP, KEY_CODES.ARROW_RIGHT, KEY_CODES.ARROW_DOWN, KEY_CODES.ARROW_LEFT].indexOf(event.keyCode) === -1) {
	    that.autoResize.resize(String.fromCharCode(event.keyCode));
	  }
	};
	TextEditor.prototype.open = function() {
	  this.refreshDimensions();
	  this.instance.addHook('beforeKeyDown', onBeforeKeyDown);
	};
	TextEditor.prototype.close = function(tdOutside) {
	  this.textareaParentStyle.display = 'none';
	  this.autoResize.unObserve();
	  if (document.activeElement === this.TEXTAREA) {
	    this.instance.listen();
	  }
	  this.instance.removeHook('beforeKeyDown', onBeforeKeyDown);
	};
	TextEditor.prototype.focus = function() {
	  this.TEXTAREA.focus();
	  setCaretPosition(this.TEXTAREA, this.TEXTAREA.value.length);
	};
	TextEditor.prototype.createElements = function() {
	  this.TEXTAREA = document.createElement('TEXTAREA');
	  addClass(this.TEXTAREA, 'handsontableInput');
	  this.textareaStyle = this.TEXTAREA.style;
	  this.textareaStyle.width = 0;
	  this.textareaStyle.height = 0;
	  this.TEXTAREA_PARENT = document.createElement('DIV');
	  addClass(this.TEXTAREA_PARENT, 'handsontableInputHolder');
	  this.textareaParentStyle = this.TEXTAREA_PARENT.style;
	  this.textareaParentStyle.top = 0;
	  this.textareaParentStyle.left = 0;
	  this.textareaParentStyle.display = 'none';
	  this.TEXTAREA_PARENT.appendChild(this.TEXTAREA);
	  this.instance.rootElement.appendChild(this.TEXTAREA_PARENT);
	  var that = this;
	  this.instance._registerTimeout(setTimeout(function() {
	    that.refreshDimensions();
	  }, 0));
	};
	TextEditor.prototype.getEditedCell = function() {
	  var editorSection = this.checkEditorSection(),
	      editedCell;
	  switch (editorSection) {
	    case 'top':
	      editedCell = this.instance.view.wt.wtOverlays.topOverlay.clone.wtTable.getCell({
	        row: this.row,
	        col: this.col
	      });
	      this.textareaParentStyle.zIndex = 101;
	      break;
	    case 'top-left-corner':
	      editedCell = this.instance.view.wt.wtOverlays.topLeftCornerOverlay.clone.wtTable.getCell({
	        row: this.row,
	        col: this.col
	      });
	      this.textareaParentStyle.zIndex = 103;
	      break;
	    case 'bottom-left-corner':
	      editedCell = this.instance.view.wt.wtOverlays.bottomLeftCornerOverlay.clone.wtTable.getCell({
	        row: this.row,
	        col: this.col
	      });
	      this.textareaParentStyle.zIndex = 103;
	      break;
	    case 'left':
	      editedCell = this.instance.view.wt.wtOverlays.leftOverlay.clone.wtTable.getCell({
	        row: this.row,
	        col: this.col
	      });
	      this.textareaParentStyle.zIndex = 102;
	      break;
	    case 'bottom':
	      editedCell = this.instance.view.wt.wtOverlays.bottomOverlay.clone.wtTable.getCell({
	        row: this.row,
	        col: this.col
	      });
	      this.textareaParentStyle.zIndex = 102;
	      break;
	    default:
	      editedCell = this.instance.getCell(this.row, this.col);
	      this.textareaParentStyle.zIndex = '';
	      break;
	  }
	  return editedCell != -1 && editedCell != -2 ? editedCell : void 0;
	};
	TextEditor.prototype.refreshDimensions = function() {
	  if (this.state !== Handsontable.EditorState.EDITING) {
	    return;
	  }
	  this.TD = this.getEditedCell();
	  if (!this.TD) {
	    this.close(true);
	    return;
	  }
	  var currentOffset = offset(this.TD),
	      containerOffset = offset(this.instance.rootElement),
	      scrollableContainer = getScrollableElement(this.TD),
	      totalRowsCount = this.instance.countRows(),
	      editTop = currentOffset.top - containerOffset.top - 1 - (scrollableContainer.scrollTop || 0),
	      editLeft = currentOffset.left - containerOffset.left - 1 - (scrollableContainer.scrollLeft || 0),
	      settings = this.instance.getSettings(),
	      rowHeadersCount = settings.rowHeaders ? 1 : 0,
	      colHeadersCount = settings.colHeaders ? 1 : 0,
	      editorSection = this.checkEditorSection(),
	      backgroundColor = this.TD.style.backgroundColor,
	      cssTransformOffset;
	  switch (editorSection) {
	    case 'top':
	      cssTransformOffset = getCssTransform(this.instance.view.wt.wtOverlays.topOverlay.clone.wtTable.holder.parentNode);
	      break;
	    case 'left':
	      cssTransformOffset = getCssTransform(this.instance.view.wt.wtOverlays.leftOverlay.clone.wtTable.holder.parentNode);
	      break;
	    case 'top-left-corner':
	      cssTransformOffset = getCssTransform(this.instance.view.wt.wtOverlays.topLeftCornerOverlay.clone.wtTable.holder.parentNode);
	      break;
	    case 'bottom-left-corner':
	      cssTransformOffset = getCssTransform(this.instance.view.wt.wtOverlays.bottomLeftCornerOverlay.clone.wtTable.holder.parentNode);
	      break;
	    case 'bottom':
	      cssTransformOffset = getCssTransform(this.instance.view.wt.wtOverlays.bottomOverlay.clone.wtTable.holder.parentNode);
	      break;
	  }
	  if (colHeadersCount && this.instance.getSelected()[0] === 0 || (settings.fixedRowsBottom && this.instance.getSelected()[0] === totalRowsCount - settings.fixedRowsBottom)) {
	    editTop += 1;
	  }
	  if (this.instance.getSelected()[1] === 0) {
	    editLeft += 1;
	  }
	  if (cssTransformOffset && cssTransformOffset != -1) {
	    this.textareaParentStyle[cssTransformOffset[0]] = cssTransformOffset[1];
	  } else {
	    resetCssTransform(this.textareaParentStyle);
	  }
	  this.textareaParentStyle.top = editTop + 'px';
	  this.textareaParentStyle.left = editLeft + 'px';
	  var cellTopOffset = this.TD.offsetTop - this.instance.view.wt.wtOverlays.topOverlay.getScrollPosition(),
	      cellLeftOffset = this.TD.offsetLeft - this.instance.view.wt.wtOverlays.leftOverlay.getScrollPosition();
	  var width = innerWidth(this.TD) - 8;
	  var maxWidth = this.instance.view.maximumVisibleElementWidth(cellLeftOffset) - 9;
	  var height = this.TD.scrollHeight + 1;
	  var maxHeight = Math.max(this.instance.view.maximumVisibleElementHeight(cellTopOffset) - 2, 23);
	  var cellComputedStyle = getComputedStyle(this.TD);
	  this.TEXTAREA.style.fontSize = cellComputedStyle.fontSize;
	  this.TEXTAREA.style.fontFamily = cellComputedStyle.fontFamily;
	  this.TEXTAREA.style.backgroundColor = '';
	  this.TEXTAREA.style.backgroundColor = backgroundColor ? backgroundColor : getComputedStyle(this.TEXTAREA).backgroundColor;
	  this.autoResize.init(this.TEXTAREA, {
	    minHeight: Math.min(height, maxHeight),
	    maxHeight: maxHeight,
	    minWidth: Math.min(width, maxWidth),
	    maxWidth: maxWidth
	  }, true);
	  this.textareaParentStyle.display = 'block';
	};
	TextEditor.prototype.bindEvents = function() {
	  var editor = this;
	  this.eventManager.addEventListener(this.TEXTAREA, 'cut', function(event) {
	    stopPropagation(event);
	  });
	  this.eventManager.addEventListener(this.TEXTAREA, 'paste', function(event) {
	    stopPropagation(event);
	  });
	  this.instance.addHook('afterScrollVertically', function() {
	    editor.refreshDimensions();
	  });
	  this.instance.addHook('afterColumnResize', function() {
	    editor.refreshDimensions();
	    editor.focus();
	  });
	  this.instance.addHook('afterRowResize', function() {
	    editor.refreshDimensions();
	    editor.focus();
	  });
	  this.instance.addHook('afterDestroy', function() {
	    editor.eventManager.destroy();
	  });
	};
	TextEditor.prototype.destroy = function() {
	  this.eventManager.destroy();
	};
	;
	registerEditor('text', TextEditor);

	//# 
	},{"_baseEditor":29,"autoResize":"autoResize","editors":28,"eventManager":40,"helpers/dom/element":44,"helpers/dom/event":45,"helpers/unicode":52}],40:[function(require,module,exports){
	"use strict";
	Object.defineProperties(exports, {
	  EventManager: {get: function() {
	      return EventManager;
	    }},
	  eventManager: {get: function() {
	      return eventManager;
	    }},
	  __esModule: {value: true}
	});
	var $__helpers_47_dom_47_element__,
	    $__helpers_47_browser__;
	var $__0 = ($__helpers_47_dom_47_element__ = require("helpers/dom/element"), $__helpers_47_dom_47_element__ && $__helpers_47_dom_47_element__.__esModule && $__helpers_47_dom_47_element__ || {default: $__helpers_47_dom_47_element__}),
	    polymerWrap = $__0.polymerWrap,
	    closest = $__0.closest;
	var isWebComponentSupportedNatively = ($__helpers_47_browser__ = require("helpers/browser"), $__helpers_47_browser__ && $__helpers_47_browser__.__esModule && $__helpers_47_browser__ || {default: $__helpers_47_browser__}).isWebComponentSupportedNatively;
	var EventManager = function EventManager() {
	  var context = arguments[0] !== (void 0) ? arguments[0] : null;
	  this.context = context || this;
	  if (!this.context.eventListeners) {
	    this.context.eventListeners = [];
	  }
	};
	($traceurRuntime.createClass)(EventManager, {
	  addEventListener: function(element, eventName, callback) {
	    var $__2 = this;
	    var context = this.context;
	    function callbackProxy(event) {
	      if (event.target == void 0 && event.srcElement != void 0) {
	        if (event.definePoperty) {
	          event.definePoperty('target', {value: event.srcElement});
	        } else {
	          event.target = event.srcElement;
	        }
	      }
	      if (event.preventDefault == void 0) {
	        if (event.definePoperty) {
	          event.definePoperty('preventDefault', {value: function() {
	              this.returnValue = false;
	            }});
	        } else {
	          event.preventDefault = function() {
	            this.returnValue = false;
	          };
	        }
	      }
	      event = extendEvent(context, event);
	      callback.call(this, event);
	    }
	    this.context.eventListeners.push({
	      element: element,
	      event: eventName,
	      callback: callback,
	      callbackProxy: callbackProxy
	    });
	    if (window.addEventListener) {
	      element.addEventListener(eventName, callbackProxy, false);
	    } else {
	      element.attachEvent('on' + eventName, callbackProxy);
	    }
	    Handsontable.countEventManagerListeners++;
	    return (function() {
	      $__2.removeEventListener(element, eventName, callback);
	    });
	  },
	  removeEventListener: function(element, eventName, callback) {
	    var len = this.context.eventListeners.length;
	    var tmpEvent;
	    while (len--) {
	      tmpEvent = this.context.eventListeners[len];
	      if (tmpEvent.event == eventName && tmpEvent.element == element) {
	        if (callback && callback != tmpEvent.callback) {
	          continue;
	        }
	        this.context.eventListeners.splice(len, 1);
	        if (tmpEvent.element.removeEventListener) {
	          tmpEvent.element.removeEventListener(tmpEvent.event, tmpEvent.callbackProxy, false);
	        } else {
	          tmpEvent.element.detachEvent('on' + tmpEvent.event, tmpEvent.callbackProxy);
	        }
	        Handsontable.countEventManagerListeners--;
	      }
	    }
	  },
	  clearEvents: function() {
	    if (!this.context) {
	      return;
	    }
	    var len = this.context.eventListeners.length;
	    while (len--) {
	      var event = this.context.eventListeners[len];
	      if (event) {
	        this.removeEventListener(event.element, event.event, event.callback);
	      }
	    }
	  },
	  clear: function() {
	    this.clearEvents();
	  },
	  destroy: function() {
	    this.clearEvents();
	    this.context = null;
	  },
	  fireEvent: function(element, eventName) {
	    var options = {
	      bubbles: true,
	      cancelable: (eventName !== 'mousemove'),
	      view: window,
	      detail: 0,
	      screenX: 0,
	      screenY: 0,
	      clientX: 1,
	      clientY: 1,
	      ctrlKey: false,
	      altKey: false,
	      shiftKey: false,
	      metaKey: false,
	      button: 0,
	      relatedTarget: undefined
	    };
	    var event;
	    if (document.createEvent) {
	      event = document.createEvent('MouseEvents');
	      event.initMouseEvent(eventName, options.bubbles, options.cancelable, options.view, options.detail, options.screenX, options.screenY, options.clientX, options.clientY, options.ctrlKey, options.altKey, options.shiftKey, options.metaKey, options.button, options.relatedTarget || document.body.parentNode);
	    } else {
	      event = document.createEventObject();
	    }
	    if (element.dispatchEvent) {
	      element.dispatchEvent(event);
	    } else {
	      element.fireEvent('on' + eventName, event);
	    }
	  }
	}, {});
	function extendEvent(context, event) {
	  var componentName = 'HOT-TABLE';
	  var isHotTableSpotted;
	  var fromElement;
	  var realTarget;
	  var target;
	  var len;
	  event.isTargetWebComponent = false;
	  event.realTarget = event.target;
	  if (!Handsontable.eventManager.isHotTableEnv) {
	    return event;
	  }
	  event = polymerWrap(event);
	  len = event.path ? event.path.length : 0;
	  while (len--) {
	    if (event.path[len].nodeName === componentName) {
	      isHotTableSpotted = true;
	    } else if (isHotTableSpotted && event.path[len].shadowRoot) {
	      target = event.path[len];
	      break;
	    }
	    if (len === 0 && !target) {
	      target = event.path[len];
	    }
	  }
	  if (!target) {
	    target = event.target;
	  }
	  event.isTargetWebComponent = true;
	  if (isWebComponentSupportedNatively()) {
	    event.realTarget = event.srcElement || event.toElement;
	  } else if (context instanceof Handsontable.Core || context instanceof Walkontable) {
	    if (context instanceof Handsontable.Core) {
	      fromElement = context.view ? context.view.wt.wtTable.TABLE : null;
	    } else if (context instanceof Walkontable) {
	      fromElement = context.wtTable.TABLE.parentNode.parentNode;
	    }
	    realTarget = closest(event.target, [componentName], fromElement);
	    if (realTarget) {
	      event.realTarget = fromElement.querySelector(componentName) || event.target;
	    } else {
	      event.realTarget = event.target;
	    }
	  }
	  Object.defineProperty(event, 'target', {
	    get: function() {
	      return polymerWrap(target);
	    },
	    enumerable: true,
	    configurable: true
	  });
	  return event;
	}
	;
	window.Handsontable = window.Handsontable || {};
	Handsontable.countEventManagerListeners = 0;
	Handsontable.eventManager = eventManager;
	function eventManager(context) {
	  return new EventManager(context);
	}

	//# 
	},{"helpers/browser":42,"helpers/dom/element":44}],41:[function(require,module,exports){
	"use strict";
	Object.defineProperties(exports, {
	  to2dArray: {get: function() {
	      return to2dArray;
	    }},
	  extendArray: {get: function() {
	      return extendArray;
	    }},
	  pivot: {get: function() {
	      return pivot;
	    }},
	  arrayReduce: {get: function() {
	      return arrayReduce;
	    }},
	  arrayFilter: {get: function() {
	      return arrayFilter;
	    }},
	  arrayMap: {get: function() {
	      return arrayMap;
	    }},
	  arrayEach: {get: function() {
	      return arrayEach;
	    }},
	  arraySum: {get: function() {
	      return arraySum;
	    }},
	  arrayAvg: {get: function() {
	      return arrayAvg;
	    }},
	  arrayFlatten: {get: function() {
	      return arrayFlatten;
	    }},
	  arrayUnique: {get: function() {
	      return arrayUnique;
	    }},
	  __esModule: {value: true}
	});
	function to2dArray(arr) {
	  var i = 0,
	      ilen = arr.length;
	  while (i < ilen) {
	    arr[i] = [arr[i]];
	    i++;
	  }
	}
	function extendArray(arr, extension) {
	  var i = 0,
	      ilen = extension.length;
	  while (i < ilen) {
	    arr.push(extension[i]);
	    i++;
	  }
	}
	function pivot(arr) {
	  var pivotedArr = [];
	  if (!arr || arr.length === 0 || !arr[0] || arr[0].length === 0) {
	    return pivotedArr;
	  }
	  var rowCount = arr.length;
	  var colCount = arr[0].length;
	  for (var i = 0; i < rowCount; i++) {
	    for (var j = 0; j < colCount; j++) {
	      if (!pivotedArr[j]) {
	        pivotedArr[j] = [];
	      }
	      pivotedArr[j][i] = arr[i][j];
	    }
	  }
	  return pivotedArr;
	}
	function arrayReduce(array, iteratee, accumulator, initFromArray) {
	  var index = -1,
	      length = array.length;
	  if (initFromArray && length) {
	    accumulator = array[++index];
	  }
	  while (++index < length) {
	    accumulator = iteratee(accumulator, array[index], index, array);
	  }
	  return accumulator;
	}
	function arrayFilter(array, predicate) {
	  var index = -1,
	      length = array.length,
	      resIndex = -1,
	      result = [];
	  while (++index < length) {
	    var value = array[index];
	    if (predicate(value, index, array)) {
	      result[++resIndex] = value;
	    }
	  }
	  return result;
	}
	function arrayMap(array, iteratee) {
	  var index = -1,
	      length = array.length,
	      resIndex = -1,
	      result = [];
	  while (++index < length) {
	    var value = array[index];
	    result[++resIndex] = iteratee(value, index, array);
	  }
	  return result;
	}
	function arrayEach(array, iteratee) {
	  var index = -1,
	      length = array.length;
	  while (++index < length) {
	    if (iteratee(array[index], index, array) === false) {
	      break;
	    }
	  }
	  return array;
	}
	function arraySum(array) {
	  return arrayReduce(array, (function(a, b) {
	    return (a + b);
	  }), 0);
	}
	function arrayAvg(array) {
	  if (!array.length) {
	    return 0;
	  }
	  return arraySum(array) / array.length;
	}
	function arrayFlatten(array) {
	  return arrayReduce(array, (function(initial, value) {
	    return initial.concat(Array.isArray(value) ? arrayFlatten(value) : value);
	  }), []);
	}
	function arrayUnique(array) {
	  var unique = [];
	  arrayEach(array, (function(value) {
	    if (unique.indexOf(value) === -1) {
	      unique.push(value);
	    }
	  }));
	  return unique;
	}

	//# 
	},{}],42:[function(require,module,exports){
	"use strict";
	Object.defineProperties(exports, {
	  isIE8: {get: function() {
	      return isIE8;
	    }},
	  isIE9: {get: function() {
	      return isIE9;
	    }},
	  isSafari: {get: function() {
	      return isSafari;
	    }},
	  isChrome: {get: function() {
	      return isChrome;
	    }},
	  isMobileBrowser: {get: function() {
	      return isMobileBrowser;
	    }},
	  isTouchSupported: {get: function() {
	      return isTouchSupported;
	    }},
	  isWebComponentSupportedNatively: {get: function() {
	      return isWebComponentSupportedNatively;
	    }},
	  hasCaptionProblem: {get: function() {
	      return hasCaptionProblem;
	    }},
	  __esModule: {value: true}
	});
	var _isIE8 = !(document.createTextNode('test').textContent);
	function isIE8() {
	  return _isIE8;
	}
	var _isIE9 = !!(document.documentMode);
	function isIE9() {
	  return _isIE9;
	}
	var _isSafari = (/Safari/.test(navigator.userAgent) && /Apple Computer/.test(navigator.vendor));
	function isSafari() {
	  return _isSafari;
	}
	var _isChrome = (/Chrome/.test(navigator.userAgent) && /Google/.test(navigator.vendor));
	function isChrome() {
	  return _isChrome;
	}
	function isMobileBrowser(userAgent) {
	  if (!userAgent) {
	    userAgent = navigator.userAgent;
	  }
	  return (/Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(userAgent));
	}
	function isTouchSupported() {
	  return ('ontouchstart' in window);
	}
	function isWebComponentSupportedNatively() {
	  var test = document.createElement('div');
	  return test.createShadowRoot && test.createShadowRoot.toString().match(/\[native code\]/) ? true : false;
	}
	var _hasCaptionProblem;
	function detectCaptionProblem() {
	  var TABLE = document.createElement('TABLE');
	  TABLE.style.borderSpacing = 0;
	  TABLE.style.borderWidth = 0;
	  TABLE.style.padding = 0;
	  var TBODY = document.createElement('TBODY');
	  TABLE.appendChild(TBODY);
	  TBODY.appendChild(document.createElement('TR'));
	  TBODY.firstChild.appendChild(document.createElement('TD'));
	  TBODY.firstChild.firstChild.innerHTML = '<tr><td>t<br>t</td></tr>';
	  var CAPTION = document.createElement('CAPTION');
	  CAPTION.innerHTML = 'c<br>c<br>c<br>c';
	  CAPTION.style.padding = 0;
	  CAPTION.style.margin = 0;
	  TABLE.insertBefore(CAPTION, TBODY);
	  document.body.appendChild(TABLE);
	  _hasCaptionProblem = (TABLE.offsetHeight < 2 * TABLE.lastChild.offsetHeight);
	  document.body.removeChild(TABLE);
	}
	function hasCaptionProblem() {
	  if (_hasCaptionProblem === void 0) {
	    detectCaptionProblem();
	  }
	  return _hasCaptionProblem;
	}

	//# 
	},{}],43:[function(require,module,exports){
	"use strict";
	Object.defineProperties(exports, {
	  spreadsheetColumnLabel: {get: function() {
	      return spreadsheetColumnLabel;
	    }},
	  createSpreadsheetData: {get: function() {
	      return createSpreadsheetData;
	    }},
	  createSpreadsheetObjectData: {get: function() {
	      return createSpreadsheetObjectData;
	    }},
	  translateRowsToColumns: {get: function() {
	      return translateRowsToColumns;
	    }},
	  cellMethodLookupFactory: {get: function() {
	      return cellMethodLookupFactory;
	    }},
	  __esModule: {value: true}
	});
	var $__object__;
	var getPrototypeOf = ($__object__ = require("object"), $__object__ && $__object__.__esModule && $__object__ || {default: $__object__}).getPrototypeOf;
	function spreadsheetColumnLabel(index) {
	  var dividend = index + 1;
	  var columnLabel = '';
	  var modulo;
	  while (dividend > 0) {
	    modulo = (dividend - 1) % 26;
	    columnLabel = String.fromCharCode(65 + modulo) + columnLabel;
	    dividend = parseInt((dividend - modulo) / 26, 10);
	  }
	  return columnLabel;
	}
	function createSpreadsheetData(rowCount, colCount) {
	  rowCount = typeof rowCount === 'number' ? rowCount : 100;
	  colCount = typeof colCount === 'number' ? colCount : 4;
	  var rows = [],
	      i,
	      j;
	  for (i = 0; i < rowCount; i++) {
	    var row = [];
	    for (j = 0; j < colCount; j++) {
	      row.push(spreadsheetColumnLabel(j) + (i + 1));
	    }
	    rows.push(row);
	  }
	  return rows;
	}
	function createSpreadsheetObjectData(rowCount, colCount) {
	  rowCount = typeof rowCount === 'number' ? rowCount : 100;
	  colCount = typeof colCount === 'number' ? colCount : 4;
	  var rows = [],
	      i,
	      j;
	  for (i = 0; i < rowCount; i++) {
	    var row = {};
	    for (j = 0; j < colCount; j++) {
	      row['prop' + j] = spreadsheetColumnLabel(j) + (i + 1);
	    }
	    rows.push(row);
	  }
	  return rows;
	}
	function translateRowsToColumns(input) {
	  var i,
	      ilen,
	      j,
	      jlen,
	      output = [],
	      olen = 0;
	  for (i = 0, ilen = input.length; i < ilen; i++) {
	    for (j = 0, jlen = input[i].length; j < jlen; j++) {
	      if (j == olen) {
	        output.push([]);
	        olen++;
	      }
	      output[j].push(input[i][j]);
	    }
	  }
	  return output;
	}
	function cellMethodLookupFactory(methodName, allowUndefined) {
	  allowUndefined = typeof allowUndefined == 'undefined' ? true : allowUndefined;
	  return function cellMethodLookup(row, col) {
	    return (function getMethodFromProperties(properties) {
	      if (!properties) {
	        return;
	      } else if (properties.hasOwnProperty(methodName) && properties[methodName] !== void 0) {
	        return properties[methodName];
	      } else if (properties.hasOwnProperty('type') && properties.type) {
	        var type;
	        if (typeof properties.type != 'string') {
	          throw new Error('Cell type must be a string ');
	        }
	        type = translateTypeNameToObject(properties.type);
	        if (type.hasOwnProperty(methodName)) {
	          return type[methodName];
	        } else if (allowUndefined) {
	          return;
	        }
	      }
	      return getMethodFromProperties(getPrototypeOf(properties));
	    })(typeof row == 'number' ? this.getCellMeta(row, col) : row);
	  };
	  function translateTypeNameToObject(typeName) {
	    var type = Handsontable.cellTypes[typeName];
	    if (typeof type == 'undefined') {
	      throw new Error('You declared cell type "' + typeName + '" as a string that is not mapped to a known object. ' + 'Cell type must be an object or a string mapped to an object in Handsontable.cellTypes');
	    }
	    return type;
	  }
	}

	//# 
	},{"object":49}],44:[function(require,module,exports){
	"use strict";
	Object.defineProperties(exports, {
	  closest: {get: function() {
	      return closest;
	    }},
	  isChildOf: {get: function() {
	      return isChildOf;
	    }},
	  isChildOfWebComponentTable: {get: function() {
	      return isChildOfWebComponentTable;
	    }},
	  polymerWrap: {get: function() {
	      return polymerWrap;
	    }},
	  polymerUnwrap: {get: function() {
	      return polymerUnwrap;
	    }},
	  index: {get: function() {
	      return index;
	    }},
	  overlayContainsElement: {get: function() {
	      return overlayContainsElement;
	    }},
	  hasClass: {get: function() {
	      return hasClass;
	    }},
	  addClass: {get: function() {
	      return addClass;
	    }},
	  removeClass: {get: function() {
	      return removeClass;
	    }},
	  removeTextNodes: {get: function() {
	      return removeTextNodes;
	    }},
	  empty: {get: function() {
	      return empty;
	    }},
	  HTML_CHARACTERS: {get: function() {
	      return HTML_CHARACTERS;
	    }},
	  fastInnerHTML: {get: function() {
	      return fastInnerHTML;
	    }},
	  fastInnerText: {get: function() {
	      return fastInnerText;
	    }},
	  isVisible: {get: function() {
	      return isVisible;
	    }},
	  offset: {get: function() {
	      return offset;
	    }},
	  getWindowScrollTop: {get: function() {
	      return getWindowScrollTop;
	    }},
	  getWindowScrollLeft: {get: function() {
	      return getWindowScrollLeft;
	    }},
	  getScrollTop: {get: function() {
	      return getScrollTop;
	    }},
	  getScrollLeft: {get: function() {
	      return getScrollLeft;
	    }},
	  getScrollableElement: {get: function() {
	      return getScrollableElement;
	    }},
	  getTrimmingContainer: {get: function() {
	      return getTrimmingContainer;
	    }},
	  getStyle: {get: function() {
	      return getStyle;
	    }},
	  getComputedStyle: {get: function() {
	      return getComputedStyle;
	    }},
	  outerWidth: {get: function() {
	      return outerWidth;
	    }},
	  outerHeight: {get: function() {
	      return outerHeight;
	    }},
	  innerHeight: {get: function() {
	      return innerHeight;
	    }},
	  innerWidth: {get: function() {
	      return innerWidth;
	    }},
	  addEvent: {get: function() {
	      return addEvent;
	    }},
	  removeEvent: {get: function() {
	      return removeEvent;
	    }},
	  getCaretPosition: {get: function() {
	      return getCaretPosition;
	    }},
	  getSelectionEndPosition: {get: function() {
	      return getSelectionEndPosition;
	    }},
	  setCaretPosition: {get: function() {
	      return setCaretPosition;
	    }},
	  getScrollbarWidth: {get: function() {
	      return getScrollbarWidth;
	    }},
	  setOverlayPosition: {get: function() {
	      return setOverlayPosition;
	    }},
	  getCssTransform: {get: function() {
	      return getCssTransform;
	    }},
	  resetCssTransform: {get: function() {
	      return resetCssTransform;
	    }},
	  isInput: {get: function() {
	      return isInput;
	    }},
	  isOutsideInput: {get: function() {
	      return isOutsideInput;
	    }},
	  requestAnimationFrame: {get: function() {
	      return requestAnimationFrame;
	    }},
	  cancelAnimationFrame: {get: function() {
	      return cancelAnimationFrame;
	    }},
	  __esModule: {value: true}
	});
	var $___46__46__47_browser__;
	var $__0 = ($___46__46__47_browser__ = require("../browser"), $___46__46__47_browser__ && $___46__46__47_browser__.__esModule && $___46__46__47_browser__ || {default: $___46__46__47_browser__}),
	    isIE8 = $__0.isIE8,
	    isIE9 = $__0.isIE9,
	    isSafari = $__0.isSafari,
	    hasCaptionProblem = $__0.hasCaptionProblem;
	function closest(element, nodes, until) {
	  while (element != null && element !== until) {
	    if (element.nodeType === Node.ELEMENT_NODE && (nodes.indexOf(element.nodeName) > -1 || nodes.indexOf(element) > -1)) {
	      return element;
	    }
	    if (element.host && element.nodeType === Node.DOCUMENT_FRAGMENT_NODE) {
	      element = element.host;
	    } else {
	      element = element.parentNode;
	    }
	  }
	  return null;
	}
	function isChildOf(child, parent) {
	  var node = child.parentNode;
	  var queriedParents = [];
	  if (typeof parent === 'string') {
	    queriedParents = Array.prototype.slice.call(document.querySelectorAll(parent), 0);
	  } else {
	    queriedParents.push(parent);
	  }
	  while (node != null) {
	    if (queriedParents.indexOf(node) > -1) {
	      return true;
	    }
	    node = node.parentNode;
	  }
	  return false;
	}
	function isChildOfWebComponentTable(element) {
	  var hotTableName = 'hot-table',
	      result = false,
	      parentNode;
	  parentNode = polymerWrap(element);
	  function isHotTable(element) {
	    return element.nodeType === Node.ELEMENT_NODE && element.nodeName === hotTableName.toUpperCase();
	  }
	  while (parentNode != null) {
	    if (isHotTable(parentNode)) {
	      result = true;
	      break;
	    } else if (parentNode.host && parentNode.nodeType === Node.DOCUMENT_FRAGMENT_NODE) {
	      result = isHotTable(parentNode.host);
	      if (result) {
	        break;
	      }
	      parentNode = parentNode.host;
	    }
	    parentNode = parentNode.parentNode;
	  }
	  return result;
	}
	function polymerWrap(element) {
	  return typeof Polymer !== 'undefined' && typeof wrap === 'function' ? wrap(element) : element;
	}
	function polymerUnwrap(element) {
	  return typeof Polymer !== 'undefined' && typeof unwrap === 'function' ? unwrap(element) : element;
	}
	function index(element) {
	  var i = 0;
	  if (element.previousSibling) {
	    while (element = element.previousSibling) {
	      ++i;
	    }
	  }
	  return i;
	}
	function overlayContainsElement(overlayType, element) {
	  var overlayElement = document.querySelector('.ht_clone_' + overlayType);
	  return overlayElement ? overlayElement.contains(element) : null;
	}
	var classListSupport = document.documentElement.classList ? true : false;
	var _hasClass,
	    _addClass,
	    _removeClass;
	function filterEmptyClassNames(classNames) {
	  var len = 0,
	      result = [];
	  if (!classNames || !classNames.length) {
	    return result;
	  }
	  while (classNames[len]) {
	    result.push(classNames[len]);
	    len++;
	  }
	  return result;
	}
	if (classListSupport) {
	  var isSupportMultipleClassesArg = (function() {
	    var element = document.createElement('div');
	    element.classList.add('test', 'test2');
	    return element.classList.contains('test2');
	  }());
	  _hasClass = function _hasClass(element, className) {
	    if (className === '') {
	      return false;
	    }
	    return element.classList.contains(className);
	  };
	  _addClass = function _addClass(element, className) {
	    var len = 0;
	    if (typeof className === 'string') {
	      className = className.split(' ');
	    }
	    className = filterEmptyClassNames(className);
	    if (isSupportMultipleClassesArg) {
	      element.classList.add.apply(element.classList, className);
	    } else {
	      while (className && className[len]) {
	        element.classList.add(className[len]);
	        len++;
	      }
	    }
	  };
	  _removeClass = function _removeClass(element, className) {
	    var len = 0;
	    if (typeof className === 'string') {
	      className = className.split(' ');
	    }
	    className = filterEmptyClassNames(className);
	    if (isSupportMultipleClassesArg) {
	      element.classList.remove.apply(element.classList, className);
	    } else {
	      while (className && className[len]) {
	        element.classList.remove(className[len]);
	        len++;
	      }
	    }
	  };
	} else {
	  var createClassNameRegExp = function createClassNameRegExp(className) {
	    return new RegExp('(\\s|^)' + className + '(\\s|$)');
	  };
	  _hasClass = function _hasClass(element, className) {
	    return element.className.match(createClassNameRegExp(className)) ? true : false;
	  };
	  _addClass = function _addClass(element, className) {
	    var len = 0,
	        _className = element.className;
	    if (typeof className === 'string') {
	      className = className.split(' ');
	    }
	    if (_className === '') {
	      _className = className.join(' ');
	    } else {
	      while (className && className[len]) {
	        if (!createClassNameRegExp(className[len]).test(_className)) {
	          _className += ' ' + className[len];
	        }
	        len++;
	      }
	    }
	    element.className = _className;
	  };
	  _removeClass = function _removeClass(element, className) {
	    var len = 0,
	        _className = element.className;
	    if (typeof className === 'string') {
	      className = className.split(' ');
	    }
	    while (className && className[len]) {
	      _className = _className.replace(createClassNameRegExp(className[len]), ' ').trim();
	      len++;
	    }
	    if (element.className !== _className) {
	      element.className = _className;
	    }
	  };
	}
	function hasClass(element, className) {
	  return _hasClass(element, className);
	}
	function addClass(element, className) {
	  return _addClass(element, className);
	}
	function removeClass(element, className) {
	  return _removeClass(element, className);
	}
	function removeTextNodes(element, parent) {
	  if (element.nodeType === 3) {
	    parent.removeChild(element);
	  } else if (['TABLE', 'THEAD', 'TBODY', 'TFOOT', 'TR'].indexOf(element.nodeName) > -1) {
	    var childs = element.childNodes;
	    for (var i = childs.length - 1; i >= 0; i--) {
	      removeTextNodes(childs[i], element);
	    }
	  }
	}
	function empty(element) {
	  var child;
	  while (child = element.lastChild) {
	    element.removeChild(child);
	  }
	}
	var HTML_CHARACTERS = /(<(.*)>|&(.*);)/;
	function fastInnerHTML(element, content) {
	  if (HTML_CHARACTERS.test(content)) {
	    element.innerHTML = content;
	  } else {
	    fastInnerText(element, content);
	  }
	}
	var textContextSupport = document.createTextNode('test').textContent ? true : false;
	function fastInnerText(element, content) {
	  var child = element.firstChild;
	  if (child && child.nodeType === 3 && child.nextSibling === null) {
	    if (textContextSupport) {
	      child.textContent = content;
	    } else {
	      child.data = content;
	    }
	  } else {
	    empty(element);
	    element.appendChild(document.createTextNode(content));
	  }
	}
	function isVisible(elem) {
	  var next = elem;
	  while (polymerUnwrap(next) !== document.documentElement) {
	    if (next === null) {
	      return false;
	    } else if (next.nodeType === Node.DOCUMENT_FRAGMENT_NODE) {
	      if (next.host) {
	        if (next.host.impl) {
	          return isVisible(next.host.impl);
	        } else if (next.host) {
	          return isVisible(next.host);
	        } else {
	          throw new Error('Lost in Web Components world');
	        }
	      } else {
	        return false;
	      }
	    } else if (next.style.display === 'none') {
	      return false;
	    }
	    next = next.parentNode;
	  }
	  return true;
	}
	function offset(elem) {
	  var offsetLeft,
	      offsetTop,
	      lastElem,
	      docElem,
	      box;
	  docElem = document.documentElement;
	  if (hasCaptionProblem() && elem.firstChild && elem.firstChild.nodeName === 'CAPTION') {
	    box = elem.getBoundingClientRect();
	    return {
	      top: box.top + (window.pageYOffset || docElem.scrollTop) - (docElem.clientTop || 0),
	      left: box.left + (window.pageXOffset || docElem.scrollLeft) - (docElem.clientLeft || 0)
	    };
	  }
	  offsetLeft = elem.offsetLeft;
	  offsetTop = elem.offsetTop;
	  lastElem = elem;
	  while (elem = elem.offsetParent) {
	    if (elem === document.body) {
	      break;
	    }
	    offsetLeft += elem.offsetLeft;
	    offsetTop += elem.offsetTop;
	    lastElem = elem;
	  }
	  if (lastElem && lastElem.style.position === 'fixed') {
	    offsetLeft += window.pageXOffset || docElem.scrollLeft;
	    offsetTop += window.pageYOffset || docElem.scrollTop;
	  }
	  return {
	    left: offsetLeft,
	    top: offsetTop
	  };
	}
	function getWindowScrollTop() {
	  var res = window.scrollY;
	  if (res === void 0) {
	    res = document.documentElement.scrollTop;
	  }
	  return res;
	}
	function getWindowScrollLeft() {
	  var res = window.scrollX;
	  if (res === void 0) {
	    res = document.documentElement.scrollLeft;
	  }
	  return res;
	}
	function getScrollTop(element) {
	  if (element === window) {
	    return getWindowScrollTop();
	  } else {
	    return element.scrollTop;
	  }
	}
	function getScrollLeft(element) {
	  if (element === window) {
	    return getWindowScrollLeft();
	  } else {
	    return element.scrollLeft;
	  }
	}
	function getScrollableElement(element) {
	  var el = element.parentNode,
	      props = ['auto', 'scroll'],
	      overflow,
	      overflowX,
	      overflowY,
	      computedStyle = '',
	      computedOverflow = '',
	      computedOverflowY = '',
	      computedOverflowX = '';
	  while (el && el.style && document.body !== el) {
	    overflow = el.style.overflow;
	    overflowX = el.style.overflowX;
	    overflowY = el.style.overflowY;
	    if (overflow == 'scroll' || overflowX == 'scroll' || overflowY == 'scroll') {
	      return el;
	    } else if (window.getComputedStyle) {
	      computedStyle = window.getComputedStyle(el);
	      computedOverflow = computedStyle.getPropertyValue('overflow');
	      computedOverflowY = computedStyle.getPropertyValue('overflow-y');
	      computedOverflowX = computedStyle.getPropertyValue('overflow-x');
	      if (computedOverflow === 'scroll' || computedOverflowX === 'scroll' || computedOverflowY === 'scroll') {
	        return el;
	      }
	    }
	    if (el.clientHeight <= el.scrollHeight && (props.indexOf(overflowY) !== -1 || props.indexOf(overflow) !== -1 || props.indexOf(computedOverflow) !== -1 || props.indexOf(computedOverflowY) !== -1)) {
	      return el;
	    }
	    if (el.clientWidth <= el.scrollWidth && (props.indexOf(overflowX) !== -1 || props.indexOf(overflow) !== -1 || props.indexOf(computedOverflow) !== -1 || props.indexOf(computedOverflowX) !== -1)) {
	      return el;
	    }
	    el = el.parentNode;
	  }
	  return window;
	}
	function getTrimmingContainer(base) {
	  var el = base.parentNode;
	  while (el && el.style && document.body !== el) {
	    if (el.style.overflow !== 'visible' && el.style.overflow !== '') {
	      return el;
	    } else if (window.getComputedStyle) {
	      var computedStyle = window.getComputedStyle(el);
	      if (computedStyle.getPropertyValue('overflow') !== 'visible' && computedStyle.getPropertyValue('overflow') !== '') {
	        return el;
	      }
	    }
	    el = el.parentNode;
	  }
	  return window;
	}
	function getStyle(element, prop) {
	  if (!element) {
	    return;
	  } else if (element === window) {
	    if (prop === 'width') {
	      return window.innerWidth + 'px';
	    } else if (prop === 'height') {
	      return window.innerHeight + 'px';
	    }
	    return;
	  }
	  var styleProp = element.style[prop],
	      computedStyle;
	  if (styleProp !== '' && styleProp !== void 0) {
	    return styleProp;
	  } else {
	    computedStyle = getComputedStyle(element);
	    if (computedStyle[prop] !== '' && computedStyle[prop] !== void 0) {
	      return computedStyle[prop];
	    }
	    return void 0;
	  }
	}
	function getComputedStyle(element) {
	  return element.currentStyle || document.defaultView.getComputedStyle(element);
	}
	function outerWidth(element) {
	  return element.offsetWidth;
	}
	function outerHeight(elem) {
	  if (hasCaptionProblem() && elem.firstChild && elem.firstChild.nodeName === 'CAPTION') {
	    return elem.offsetHeight + elem.firstChild.offsetHeight;
	  } else {
	    return elem.offsetHeight;
	  }
	}
	function innerHeight(element) {
	  return element.clientHeight || element.innerHeight;
	}
	function innerWidth(element) {
	  return element.clientWidth || element.innerWidth;
	}
	function addEvent(element, event, callback) {
	  if (window.addEventListener) {
	    element.addEventListener(event, callback, false);
	  } else {
	    element.attachEvent('on' + event, callback);
	  }
	}
	function removeEvent(element, event, callback) {
	  if (window.removeEventListener) {
	    element.removeEventListener(event, callback, false);
	  } else {
	    element.detachEvent('on' + event, callback);
	  }
	}
	function getCaretPosition(el) {
	  if (el.selectionStart) {
	    return el.selectionStart;
	  } else if (document.selection) {
	    el.focus();
	    var r = document.selection.createRange();
	    if (r == null) {
	      return 0;
	    }
	    var re = el.createTextRange();
	    var rc = re.duplicate();
	    re.moveToBookmark(r.getBookmark());
	    rc.setEndPoint('EndToStart', re);
	    return rc.text.length;
	  }
	  return 0;
	}
	function getSelectionEndPosition(el) {
	  if (el.selectionEnd) {
	    return el.selectionEnd;
	  } else if (document.selection) {
	    var r = document.selection.createRange();
	    if (r == null) {
	      return 0;
	    }
	    var re = el.createTextRange();
	    return re.text.indexOf(r.text) + r.text.length;
	  }
	}
	function setCaretPosition(element, pos, endPos) {
	  if (endPos === void 0) {
	    endPos = pos;
	  }
	  if (element.setSelectionRange) {
	    element.focus();
	    try {
	      element.setSelectionRange(pos, endPos);
	    } catch (err) {
	      var elementParent = element.parentNode;
	      var parentDisplayValue = elementParent.style.display;
	      elementParent.style.display = 'block';
	      element.setSelectionRange(pos, endPos);
	      elementParent.style.display = parentDisplayValue;
	    }
	  } else if (element.createTextRange) {
	    var range = element.createTextRange();
	    range.collapse(true);
	    range.moveEnd('character', endPos);
	    range.moveStart('character', pos);
	    range.select();
	  }
	}
	var cachedScrollbarWidth;
	function walkontableCalculateScrollbarWidth() {
	  var inner = document.createElement('p');
	  inner.style.width = '100%';
	  inner.style.height = '200px';
	  var outer = document.createElement('div');
	  outer.style.position = 'absolute';
	  outer.style.top = '0px';
	  outer.style.left = '0px';
	  outer.style.visibility = 'hidden';
	  outer.style.width = '200px';
	  outer.style.height = '150px';
	  outer.style.overflow = 'hidden';
	  outer.appendChild(inner);
	  (document.body || document.documentElement).appendChild(outer);
	  var w1 = inner.offsetWidth;
	  outer.style.overflow = 'scroll';
	  var w2 = inner.offsetWidth;
	  if (w1 == w2) {
	    w2 = outer.clientWidth;
	  }
	  (document.body || document.documentElement).removeChild(outer);
	  return (w1 - w2);
	}
	function getScrollbarWidth() {
	  if (cachedScrollbarWidth === void 0) {
	    cachedScrollbarWidth = walkontableCalculateScrollbarWidth();
	  }
	  return cachedScrollbarWidth;
	}
	function setOverlayPosition(overlayElem, left, top) {
	  if (isIE8() || isIE9()) {
	    overlayElem.style.top = top;
	    overlayElem.style.left = left;
	  } else if (isSafari()) {
	    overlayElem.style['-webkit-transform'] = 'translate3d(' + left + ',' + top + ',0)';
	  } else {
	    overlayElem.style.transform = 'translate3d(' + left + ',' + top + ',0)';
	  }
	}
	function getCssTransform(element) {
	  var transform;
	  if (element.style.transform && (transform = element.style.transform) !== '') {
	    return ['transform', transform];
	  } else if (element.style['-webkit-transform'] && (transform = element.style['-webkit-transform']) !== '') {
	    return ['-webkit-transform', transform];
	  }
	  return -1;
	}
	function resetCssTransform(element) {
	  if (element.transform && element.transform !== '') {
	    element.transform = '';
	  } else if (element['-webkit-transform'] && element['-webkit-transform'] !== '') {
	    element['-webkit-transform'] = '';
	  }
	}
	function isInput(element) {
	  var inputs = ['INPUT', 'SELECT', 'TEXTAREA'];
	  return inputs.indexOf(element.nodeName) > -1 || element.contentEditable === 'true';
	}
	function isOutsideInput(element) {
	  return isInput(element) && element.className.indexOf('handsontableInput') == -1 && element.className.indexOf('copyPaste') == -1;
	}
	var lastTime = 0;
	var vendors = ['ms', 'moz', 'webkit', 'o'];
	var _requestAnimationFrame = window.requestAnimationFrame;
	var _cancelAnimationFrame = window.cancelAnimationFrame;
	for (var x = 0; x < vendors.length && !_requestAnimationFrame; ++x) {
	  _requestAnimationFrame = window[vendors[x] + 'RequestAnimationFrame'];
	  _cancelAnimationFrame = window[vendors[x] + 'CancelAnimationFrame'] || window[vendors[x] + 'CancelRequestAnimationFrame'];
	}
	if (!_requestAnimationFrame) {
	  _requestAnimationFrame = function(callback) {
	    var currTime = new Date().getTime();
	    var timeToCall = Math.max(0, 16 - (currTime - lastTime));
	    var id = window.setTimeout(function() {
	      callback(currTime + timeToCall);
	    }, timeToCall);
	    lastTime = currTime + timeToCall;
	    return id;
	  };
	}
	if (!_cancelAnimationFrame) {
	  _cancelAnimationFrame = function(id) {
	    clearTimeout(id);
	  };
	}
	function requestAnimationFrame(callback) {
	  return _requestAnimationFrame.call(window, callback);
	}
	function cancelAnimationFrame(id) {
	  _cancelAnimationFrame.call(window, id);
	}

	//# 
	},{"../browser":42}],45:[function(require,module,exports){
	"use strict";
	Object.defineProperties(exports, {
	  stopImmediatePropagation: {get: function() {
	      return stopImmediatePropagation;
	    }},
	  isImmediatePropagationStopped: {get: function() {
	      return isImmediatePropagationStopped;
	    }},
	  stopPropagation: {get: function() {
	      return stopPropagation;
	    }},
	  pageX: {get: function() {
	      return pageX;
	    }},
	  pageY: {get: function() {
	      return pageY;
	    }},
	  __esModule: {value: true}
	});
	function stopImmediatePropagation(event) {
	  event.isImmediatePropagationEnabled = false;
	  event.cancelBubble = true;
	}
	function isImmediatePropagationStopped(event) {
	  return event.isImmediatePropagationEnabled === false;
	}
	function stopPropagation(event) {
	  if (typeof event.stopPropagation === 'function') {
	    event.stopPropagation();
	  } else {
	    event.cancelBubble = true;
	  }
	}
	function pageX(event) {
	  if (event.pageX) {
	    return event.pageX;
	  }
	  var scrollLeft = getWindowScrollLeft();
	  var cursorX = event.clientX + scrollLeft;
	  return cursorX;
	}
	function pageY(event) {
	  if (event.pageY) {
	    return event.pageY;
	  }
	  var scrollTop = getWindowScrollTop();
	  var cursorY = event.clientY + scrollTop;
	  return cursorY;
	}

	//# 
	},{}],46:[function(require,module,exports){
	"use strict";
	Object.defineProperties(exports, {
	  proxy: {get: function() {
	      return proxy;
	    }},
	  throttle: {get: function() {
	      return throttle;
	    }},
	  throttleAfterHits: {get: function() {
	      return throttleAfterHits;
	    }},
	  __esModule: {value: true}
	});
	function proxy(fun, context) {
	  return function() {
	    return fun.apply(context, arguments);
	  };
	}
	function throttle(func) {
	  var wait = arguments[1] !== (void 0) ? arguments[1] : 200;
	  var lastCalled = 0;
	  var result = {lastCallThrottled: true};
	  var lastTimer = null;
	  function _throttle() {
	    var $__0 = this;
	    var args = arguments;
	    var stamp = Date.now();
	    var needCall = false;
	    result.lastCallThrottled = true;
	    if (!lastCalled) {
	      lastCalled = stamp;
	      needCall = true;
	    }
	    var remaining = wait - (stamp - lastCalled);
	    if (needCall) {
	      result.lastCallThrottled = false;
	      func.apply(this, args);
	    } else {
	      if (lastTimer) {
	        clearTimeout(lastTimer);
	      }
	      lastTimer = setTimeout((function() {
	        result.lastCallThrottled = false;
	        func.apply($__0, args);
	        lastCalled = 0;
	        lastTimer = void 0;
	      }), remaining);
	    }
	    return result;
	  }
	  return _throttle;
	}
	function throttleAfterHits(func) {
	  var wait = arguments[1] !== (void 0) ? arguments[1] : 200;
	  var hits = arguments[2] !== (void 0) ? arguments[2] : 10;
	  var funcThrottle = throttle(func, wait);
	  var remainHits = hits;
	  function _clearHits() {
	    remainHits = hits;
	  }
	  function _throttleAfterHits() {
	    if (remainHits) {
	      remainHits--;
	      return func.apply(this, arguments);
	    }
	    return funcThrottle.apply(this, arguments);
	  }
	  _throttleAfterHits.clearHits = _clearHits;
	  return _throttleAfterHits;
	}

	//# 
	},{}],47:[function(require,module,exports){
	"use strict";
	Object.defineProperties(exports, {
	  stringify: {get: function() {
	      return stringify;
	    }},
	  __esModule: {value: true}
	});
	function stringify(value) {
	  switch (typeof value) {
	    case 'string':
	    case 'number':
	      return value + '';
	    case 'object':
	      if (value === null) {
	        return '';
	      } else {
	        return value.toString();
	      }
	      break;
	    case 'undefined':
	      return '';
	    default:
	      return value.toString();
	  }
	}

	//# 
	},{}],48:[function(require,module,exports){
	"use strict";
	Object.defineProperties(exports, {
	  isNumeric: {get: function() {
	      return isNumeric;
	    }},
	  rangeEach: {get: function() {
	      return rangeEach;
	    }},
	  valueAccordingPercent: {get: function() {
	      return valueAccordingPercent;
	    }},
	  __esModule: {value: true}
	});
	function isNumeric(n) {
	  var t = typeof n;
	  return t == 'number' ? !isNaN(n) && isFinite(n) : t == 'string' ? !n.length ? false : n.length == 1 ? /\d/.test(n) : /^\s*[+-]?\s*(?:(?:\d+(?:\.\d+)?(?:e[+-]?\d+)?)|(?:0x[a-f\d]+))\s*$/i.test(n) : t == 'object' ? !!n && typeof n.valueOf() == 'number' && !(n instanceof Date) : false;
	}
	function rangeEach(rangeFrom, rangeTo, iteratee, onlyForward) {
	  var index = -1;
	  var _rangeTo = rangeTo;
	  var _rangeFrom = 0;
	  if (typeof rangeTo === 'function') {
	    iteratee = rangeTo;
	    _rangeTo = rangeFrom;
	  } else {
	    index = rangeFrom - 1;
	  }
	  if (onlyForward || rangeFrom <= _rangeTo) {
	    while (++index <= _rangeTo) {
	      if (iteratee(index) === false) {
	        break;
	      }
	    }
	  } else {
	    index = rangeFrom + 1;
	    while (--index >= rangeTo) {
	      if (iteratee(index) === false) {
	        break;
	      }
	    }
	  }
	}
	function valueAccordingPercent(value, percent) {
	  percent = parseInt(percent.toString().replace('%', ''), 10);
	  percent = parseInt(value * percent / 100);
	  return percent;
	}

	//# 
	},{}],49:[function(require,module,exports){
	"use strict";
	Object.defineProperties(exports, {
	  duckSchema: {get: function() {
	      return duckSchema;
	    }},
	  inherit: {get: function() {
	      return inherit;
	    }},
	  extend: {get: function() {
	      return extend;
	    }},
	  deepExtend: {get: function() {
	      return deepExtend;
	    }},
	  deepClone: {get: function() {
	      return deepClone;
	    }},
	  clone: {get: function() {
	      return clone;
	    }},
	  mixin: {get: function() {
	      return mixin;
	    }},
	  isObjectEquals: {get: function() {
	      return isObjectEquals;
	    }},
	  isObject: {get: function() {
	      return isObject;
	    }},
	  getPrototypeOf: {get: function() {
	      return getPrototypeOf;
	    }},
	  defineGetter: {get: function() {
	      return defineGetter;
	    }},
	  objectEach: {get: function() {
	      return objectEach;
	    }},
	  __esModule: {value: true}
	});
	var $__array__;
	var arrayEach = ($__array__ = require("array"), $__array__ && $__array__.__esModule && $__array__ || {default: $__array__}).arrayEach;
	function duckSchema(object) {
	  var schema;
	  if (Array.isArray(object)) {
	    schema = [];
	  } else {
	    schema = {};
	    objectEach(object, function(value, key) {
	      if (value && typeof value === 'object' && !Array.isArray(value)) {
	        schema[key] = duckSchema(value);
	      } else if (Array.isArray(value)) {
	        if (value.length && typeof value[0] === 'object' && !Array.isArray(value[0])) {
	          schema[key] = [duckSchema(value[0])];
	        } else {
	          schema[key] = [];
	        }
	      } else {
	        schema[key] = null;
	      }
	    });
	  }
	  return schema;
	}
	function inherit(Child, Parent) {
	  Parent.prototype.constructor = Parent;
	  Child.prototype = new Parent();
	  Child.prototype.constructor = Child;
	  return Child;
	}
	function extend(target, extension) {
	  objectEach(extension, function(value, key) {
	    target[key] = value;
	  });
	  return target;
	}
	function deepExtend(target, extension) {
	  objectEach(extension, function(value, key) {
	    if (extension[key] && typeof extension[key] === 'object') {
	      if (!target[key]) {
	        if (Array.isArray(extension[key])) {
	          target[key] = [];
	        } else {
	          target[key] = {};
	        }
	      }
	      deepExtend(target[key], extension[key]);
	    } else {
	      target[key] = extension[key];
	    }
	  });
	}
	function deepClone(obj) {
	  if (typeof obj === 'object') {
	    return JSON.parse(JSON.stringify(obj));
	  }
	  return obj;
	}
	function clone(object) {
	  var result = {};
	  objectEach(object, (function(value, key) {
	    return result[key] = value;
	  }));
	  return result;
	}
	function mixin(Base) {
	  for (var mixins = [],
	      $__1 = 1; $__1 < arguments.length; $__1++)
	    mixins[$__1 - 1] = arguments[$__1];
	  arrayEach(mixins, (function(mixin) {
	    objectEach(mixin, (function(value, key) {
	      if (typeof value === 'function') {
	        Base.prototype[key] = value;
	      } else {
	        var getter = function _getter(propertyName, initialValue) {
	          propertyName = '_' + propertyName;
	          var initValue = (function(value) {
	            if (Array.isArray(value) || isObject(value)) {
	              value = deepClone(value);
	            }
	            return value;
	          });
	          return function() {
	            if (this[propertyName] === void 0) {
	              this[propertyName] = initValue(initialValue);
	            }
	            return this[propertyName];
	          };
	        };
	        var setter = function _setter(propertyName) {
	          propertyName = '_' + propertyName;
	          return function(value) {
	            this[propertyName] = value;
	          };
	        };
	        Object.defineProperty(Base.prototype, key, {
	          get: getter(key, value),
	          set: setter(key),
	          configurable: true
	        });
	      }
	    }));
	  }));
	  return Base;
	}
	function isObjectEquals(object1, object2) {
	  return JSON.stringify(object1) === JSON.stringify(object2);
	}
	function isObject(obj) {
	  return Object.prototype.toString.call(obj) == '[object Object]';
	}
	function getPrototypeOf(obj) {
	  var prototype;
	  if (typeof obj.__proto__ == 'object') {
	    prototype = obj.__proto__;
	  } else {
	    var oldConstructor,
	        constructor = obj.constructor;
	    if (typeof obj.constructor == 'function') {
	      oldConstructor = constructor;
	      if (delete obj.constructor) {
	        constructor = obj.constructor;
	        obj.constructor = oldConstructor;
	      }
	    }
	    prototype = constructor ? constructor.prototype : null;
	  }
	  return prototype;
	}
	function defineGetter(object, property, value, options) {
	  options.value = value;
	  options.writable = options.writable === false ? false : true;
	  options.enumerable = options.enumerable === false ? false : true;
	  options.configurable = options.configurable === false ? false : true;
	  Object.defineProperty(object, property, options);
	}
	function objectEach(object, iteratee) {
	  for (var key in object) {
	    if (!object.hasOwnProperty || (object.hasOwnProperty && object.hasOwnProperty(key))) {
	      if (iteratee(object[key], key, object) === false) {
	        break;
	      }
	    }
	  }
	  return object;
	}

	//# 
	},{"array":41}],50:[function(require,module,exports){
	"use strict";
	Object.defineProperties(exports, {
	  columnFactory: {get: function() {
	      return columnFactory;
	    }},
	  __esModule: {value: true}
	});
	var $__object__;
	var inherit = ($__object__ = require("object"), $__object__ && $__object__.__esModule && $__object__ || {default: $__object__}).inherit;
	function columnFactory(GridSettings, conflictList) {
	  function ColumnSettings() {}
	  ;
	  inherit(ColumnSettings, GridSettings);
	  for (var i = 0,
	      len = conflictList.length; i < len; i++) {
	    ColumnSettings.prototype[conflictList[i]] = void 0;
	  }
	  return ColumnSettings;
	}

	//# 
	},{"object":49}],51:[function(require,module,exports){
	"use strict";
	Object.defineProperties(exports, {
	  toUpperCaseFirst: {get: function() {
	      return toUpperCaseFirst;
	    }},
	  startsWith: {get: function() {
	      return startsWith;
	    }},
	  endsWith: {get: function() {
	      return endsWith;
	    }},
	  equalsIgnoreCase: {get: function() {
	      return equalsIgnoreCase;
	    }},
	  randomString: {get: function() {
	      return randomString;
	    }},
	  isPercentValue: {get: function() {
	      return isPercentValue;
	    }},
	  __esModule: {value: true}
	});
	var $__mixed__,
	    $__number__;
	var stringify = ($__mixed__ = require("mixed"), $__mixed__ && $__mixed__.__esModule && $__mixed__ || {default: $__mixed__}).stringify;
	var rangeEach = ($__number__ = require("number"), $__number__ && $__number__.__esModule && $__number__ || {default: $__number__}).rangeEach;
	function toUpperCaseFirst(string) {
	  return string[0].toUpperCase() + string.substr(1);
	}
	function startsWith(string, needle) {
	  var result = true;
	  rangeEach(needle.length - 1, (function(index) {
	    if (string.charAt(index) !== needle.charAt(index)) {
	      result = false;
	      return false;
	    }
	  }));
	  return result;
	}
	function endsWith(string, needle) {
	  var result = true;
	  var needleLength = needle.length - 1;
	  var stringLength = string.length - 1;
	  rangeEach(needleLength, (function(index) {
	    var stringIndex = stringLength - index;
	    var needleIndex = needleLength - index;
	    if (string.charAt(stringIndex) !== needle.charAt(needleIndex)) {
	      result = false;
	      return false;
	    }
	  }));
	  return result;
	}
	function equalsIgnoreCase() {
	  for (var strings = [],
	      $__2 = 0; $__2 < arguments.length; $__2++)
	    strings[$__2] = arguments[$__2];
	  var unique = [];
	  var length = strings.length;
	  while (length--) {
	    var string = stringify(strings[length]).toLowerCase();
	    if (unique.indexOf(string) === -1) {
	      unique.push(string);
	    }
	  }
	  return unique.length === 1;
	}
	function randomString() {
	  function s4() {
	    return Math.floor((1 + Math.random()) * 0x10000).toString(16).substring(1);
	  }
	  return s4() + s4() + s4() + s4();
	}
	function isPercentValue(value) {
	  return /^([0-9][0-9]?\%$)|(^100\%$)/.test(value);
	}

	//# 
	},{"mixed":47,"number":48}],52:[function(require,module,exports){
	"use strict";
	Object.defineProperties(exports, {
	  KEY_CODES: {get: function() {
	      return KEY_CODES;
	    }},
	  isPrintableChar: {get: function() {
	      return isPrintableChar;
	    }},
	  isMetaKey: {get: function() {
	      return isMetaKey;
	    }},
	  isCtrlKey: {get: function() {
	      return isCtrlKey;
	    }},
	  isKey: {get: function() {
	      return isKey;
	    }},
	  __esModule: {value: true}
	});
	var $__array__;
	var arrayEach = ($__array__ = require("array"), $__array__ && $__array__.__esModule && $__array__ || {default: $__array__}).arrayEach;
	var KEY_CODES = {
	  MOUSE_LEFT: 1,
	  MOUSE_RIGHT: 3,
	  MOUSE_MIDDLE: 2,
	  BACKSPACE: 8,
	  COMMA: 188,
	  INSERT: 45,
	  DELETE: 46,
	  END: 35,
	  ENTER: 13,
	  ESCAPE: 27,
	  CONTROL_LEFT: 91,
	  COMMAND_LEFT: 17,
	  COMMAND_RIGHT: 93,
	  ALT: 18,
	  HOME: 36,
	  PAGE_DOWN: 34,
	  PAGE_UP: 33,
	  PERIOD: 190,
	  SPACE: 32,
	  SHIFT: 16,
	  CAPS_LOCK: 20,
	  TAB: 9,
	  ARROW_RIGHT: 39,
	  ARROW_LEFT: 37,
	  ARROW_UP: 38,
	  ARROW_DOWN: 40,
	  F1: 112,
	  F2: 113,
	  F3: 114,
	  F4: 115,
	  F5: 116,
	  F6: 117,
	  F7: 118,
	  F8: 119,
	  F9: 120,
	  F10: 121,
	  F11: 122,
	  F12: 123,
	  A: 65,
	  X: 88,
	  C: 67,
	  V: 86
	};
	function isPrintableChar(keyCode) {
	  return ((keyCode == 32) || (keyCode >= 48 && keyCode <= 57) || (keyCode >= 96 && keyCode <= 111) || (keyCode >= 186 && keyCode <= 192) || (keyCode >= 219 && keyCode <= 222) || keyCode >= 226 || (keyCode >= 65 && keyCode <= 90));
	}
	function isMetaKey(keyCode) {
	  var metaKeys = [KEY_CODES.ARROW_DOWN, KEY_CODES.ARROW_UP, KEY_CODES.ARROW_LEFT, KEY_CODES.ARROW_RIGHT, KEY_CODES.HOME, KEY_CODES.END, KEY_CODES.DELETE, KEY_CODES.BACKSPACE, KEY_CODES.F1, KEY_CODES.F2, KEY_CODES.F3, KEY_CODES.F4, KEY_CODES.F5, KEY_CODES.F6, KEY_CODES.F7, KEY_CODES.F8, KEY_CODES.F9, KEY_CODES.F10, KEY_CODES.F11, KEY_CODES.F12, KEY_CODES.TAB, KEY_CODES.PAGE_DOWN, KEY_CODES.PAGE_UP, KEY_CODES.ENTER, KEY_CODES.ESCAPE, KEY_CODES.SHIFT, KEY_CODES.CAPS_LOCK, KEY_CODES.ALT];
	  return metaKeys.indexOf(keyCode) !== -1;
	}
	function isCtrlKey(keyCode) {
	  return [KEY_CODES.CONTROL_LEFT, 224, KEY_CODES.COMMAND_LEFT, KEY_CODES.COMMAND_RIGHT].indexOf(keyCode) !== -1;
	}
	function isKey(keyCode, baseCode) {
	  var keys = baseCode.split('|');
	  var result = false;
	  arrayEach(keys, function(key) {
	    if (keyCode === KEY_CODES[key]) {
	      result = true;
	      return false;
	    }
	  });
	  return result;
	}

	//# 
	},{"array":41}],53:[function(require,module,exports){
	"use strict";
	Object.defineProperties(exports, {
	  MultiMap: {get: function() {
	      return MultiMap;
	    }},
	  __esModule: {value: true}
	});
	;
	window.MultiMap = MultiMap;
	function MultiMap() {
	  var map = {
	    arrayMap: [],
	    weakMap: new WeakMap()
	  };
	  return {
	    get: function(key) {
	      if (canBeAnArrayMapKey(key)) {
	        return map.arrayMap[key];
	      } else if (canBeAWeakMapKey(key)) {
	        return map.weakMap.get(key);
	      }
	    },
	    set: function(key, value) {
	      if (canBeAnArrayMapKey(key)) {
	        map.arrayMap[key] = value;
	      } else if (canBeAWeakMapKey(key)) {
	        map.weakMap.set(key, value);
	      } else {
	        throw new Error('Invalid key type');
	      }
	    },
	    delete: function(key) {
	      if (canBeAnArrayMapKey(key)) {
	        delete map.arrayMap[key];
	      } else if (canBeAWeakMapKey(key)) {
	        map.weakMap.delete(key);
	      }
	    }
	  };
	  function canBeAnArrayMapKey(obj) {
	    return obj !== null && !isNaNSymbol(obj) && (typeof obj == 'string' || typeof obj == 'number');
	  }
	  function canBeAWeakMapKey(obj) {
	    return obj !== null && (typeof obj == 'object' || typeof obj == 'function');
	  }
	  function isNaNSymbol(obj) {
	    return obj !== obj;
	  }
	}

	//# 
	},{}],54:[function(require,module,exports){
	"use strict";
	Object.defineProperties(exports, {
	  Hooks: {get: function() {
	      return Hooks;
	    }},
	  localHooks: {get: function() {
	      return localHooks;
	    }},
	  __esModule: {value: true}
	});
	var $__helpers_47_array__,
	    $__helpers_47_object__;
	var REGISTERED_HOOKS = ['afterCellMetaReset', 'afterChange', 'afterChangesObserved', 'afterColumnMove', 'afterColumnResize', 'afterContextMenuDefaultOptions', 'afterContextMenuHide', 'afterContextMenuShow', 'afterCopyLimit', 'afterCreateCol', 'afterCreateRow', 'afterDeselect', 'afterDestroy', 'afterDocumentKeyDown', 'afterGetCellMeta', 'afterGetColHeader', 'afterGetRowHeader', 'afterInit', 'afterIsMultipleSelectionCheck', 'afterLoadData', 'afterMomentumScroll', 'afterOnCellCornerMouseDown', 'afterOnCellMouseDown', 'afterOnCellMouseOver', 'afterRemoveCol', 'afterRemoveRow', 'afterRender', 'afterRenderer', 'afterScrollHorizontally', 'afterScrollVertically', 'afterSelection', 'afterSelectionByProp', 'afterSelectionEnd', 'afterSelectionEndByProp', 'afterSetCellMeta', 'afterUpdateSettings', 'afterValidate', 'beforeAutofill', 'beforeCellAlignment', 'beforeChange', 'beforeChangeRender', 'beforeDrawBorders', 'beforeGetCellMeta', 'beforeInit', 'beforeInitWalkontable', 'beforeKeyDown', 'beforeOnCellMouseDown', 'beforeRemoveCol', 'beforeRemoveRow', 'beforeRender', 'beforeSetRangeEnd', 'beforeTouchScroll', 'beforeValidate', 'construct', 'init', 'modifyCol', 'modifyColWidth', 'modifyRow', 'modifyRowHeight', 'persistentStateLoad', 'persistentStateReset', 'persistentStateSave', 'beforeColumnSort', 'afterColumnSort', 'afterAutofillApplyValues', 'modifyCopyableRange', 'beforeColumnMove', 'afterColumnMove', 'beforeRowMove', 'afterRowMove', 'beforeColumnResize', 'afterColumnResize', 'beforeRowResize', 'afterRowResize'];
	var arrayEach = ($__helpers_47_array__ = require("helpers/array"), $__helpers_47_array__ && $__helpers_47_array__.__esModule && $__helpers_47_array__ || {default: $__helpers_47_array__}).arrayEach;
	var objectEach = ($__helpers_47_object__ = require("helpers/object"), $__helpers_47_object__ && $__helpers_47_object__.__esModule && $__helpers_47_object__ || {default: $__helpers_47_object__}).objectEach;
	var Hooks = function Hooks() {
	  this.globalBucket = this.createEmptyBucket();
	};
	($traceurRuntime.createClass)(Hooks, {
	  createEmptyBucket: function() {
	    var bucket = Object.create(null);
	    arrayEach(REGISTERED_HOOKS, (function(hook) {
	      return (bucket[hook] = []);
	    }));
	    return bucket;
	  },
	  getBucket: function() {
	    var context = arguments[0] !== (void 0) ? arguments[0] : null;
	    if (context) {
	      if (!context.pluginHookBucket) {
	        context.pluginHookBucket = this.createEmptyBucket();
	      }
	      return context.pluginHookBucket;
	    }
	    return this.globalBucket;
	  },
	  add: function(key, callback) {
	    var context = arguments[2] !== (void 0) ? arguments[2] : null;
	    var $__2 = this;
	    if (Array.isArray(callback)) {
	      arrayEach(callback, (function(c) {
	        return ($__2.add(key, c, context));
	      }));
	    } else {
	      var bucket = this.getBucket(context);
	      if (typeof bucket[key] === 'undefined') {
	        this.register(key);
	        bucket[key] = [];
	      }
	      callback.skip = false;
	      if (bucket[key].indexOf(callback) === -1) {
	        bucket[key].push(callback);
	      }
	    }
	    return this;
	  },
	  once: function(key, callback) {
	    var context = arguments[2] !== (void 0) ? arguments[2] : null;
	    var $__2 = this;
	    if (Array.isArray(callback)) {
	      arrayEach(callback, (function(c) {
	        return ($__2.once(key, c, context));
	      }));
	    } else {
	      callback.runOnce = true;
	      this.add(key, callback, context);
	    }
	  },
	  remove: function(key, callback) {
	    var context = arguments[2] !== (void 0) ? arguments[2] : null;
	    var bucket = this.getBucket(context);
	    if (typeof bucket[key] !== 'undefined') {
	      if (bucket[key].indexOf(callback) >= 0) {
	        callback.skip = true;
	        return true;
	      }
	    }
	    return false;
	  },
	  run: function(context, key, p1, p2, p3, p4, p5, p6) {
	    {
	      var globalHandlers = this.globalBucket[key];
	      var index = -1;
	      var length = globalHandlers ? globalHandlers.length : 0;
	      if (length) {
	        while (++index < length) {
	          if (!globalHandlers[index] || globalHandlers[index].skip) {
	            continue;
	          }
	          var res = globalHandlers[index].call(context, p1, p2, p3, p4, p5, p6);
	          if (res !== void 0) {
	            p1 = res;
	          }
	          if (globalHandlers[index] && globalHandlers[index].runOnce) {
	            this.remove(key, globalHandlers[index]);
	          }
	        }
	      }
	    }
	    {
	      var localHandlers = this.getBucket(context)[key];
	      var index$__5 = -1;
	      var length$__6 = localHandlers ? localHandlers.length : 0;
	      if (length$__6) {
	        while (++index$__5 < length$__6) {
	          if (!localHandlers[index$__5] || localHandlers[index$__5].skip) {
	            continue;
	          }
	          var res$__7 = localHandlers[index$__5].call(context, p1, p2, p3, p4, p5, p6);
	          if (res$__7 !== void 0) {
	            p1 = res$__7;
	          }
	          if (localHandlers[index$__5] && localHandlers[index$__5].runOnce) {
	            this.remove(key, localHandlers[index$__5], context);
	          }
	        }
	      }
	    }
	    return p1;
	  },
	  destroy: function() {
	    var context = arguments[0] !== (void 0) ? arguments[0] : null;
	    objectEach(this.getBucket(context), (function(value, key, bucket) {
	      return (bucket[key].length = 0);
	    }));
	  },
	  register: function(key) {
	    if (!this.isRegistered(key)) {
	      REGISTERED_HOOKS.push(key);
	    }
	  },
	  deregister: function(key) {
	    if (this.isRegistered(key)) {
	      REGISTERED_HOOKS.splice(REGISTERED_HOOKS.indexOf(key), 1);
	    }
	  },
	  isRegistered: function(key) {
	    return REGISTERED_HOOKS.indexOf(key) >= 0;
	  },
	  getRegistered: function() {
	    return REGISTERED_HOOKS;
	  }
	}, {});
	;
	var localHooks = {
	  _localHooks: Object.create(null),
	  addLocalHook: function(key, callback) {
	    if (!this._localHooks[key]) {
	      this._localHooks[key] = [];
	    }
	    this._localHooks[key].push(callback);
	  },
	  runLocalHooks: function(key) {
	    for (var params = [],
	        $__4 = 1; $__4 < arguments.length; $__4++)
	      params[$__4 - 1] = arguments[$__4];
	    var $__2 = this;
	    if (this._localHooks[key]) {
	      arrayEach(this._localHooks[key], (function(callback) {
	        return callback.apply($__2, params);
	      }));
	    }
	  },
	  clearLocalHooks: function() {
	    this._localHooks = {};
	  }
	};
	;
	Handsontable.utils = Handsontable.utils || {};
	Handsontable.utils.Hooks = Hooks;
	Handsontable.utils.localHooks = localHooks;

	//# 
	},{"helpers/array":41,"helpers/object":49}],55:[function(require,module,exports){
	"use strict";
	Object.defineProperties(exports, {
	  registerPlugin: {get: function() {
	      return registerPlugin;
	    }},
	  getPlugin: {get: function() {
	      return getPlugin;
	    }},
	  getRegistredPluginNames: {get: function() {
	      return getRegistredPluginNames;
	    }},
	  getPluginName: {get: function() {
	      return getPluginName;
	    }},
	  __esModule: {value: true}
	});
	var $__helpers_47_object__,
	    $__helpers_47_string__;
	var objectEach = ($__helpers_47_object__ = require("helpers/object"), $__helpers_47_object__ && $__helpers_47_object__.__esModule && $__helpers_47_object__ || {default: $__helpers_47_object__}).objectEach;
	var toUpperCaseFirst = ($__helpers_47_string__ = require("helpers/string"), $__helpers_47_string__ && $__helpers_47_string__.__esModule && $__helpers_47_string__ || {default: $__helpers_47_string__}).toUpperCaseFirst;
	var registeredPlugins = new WeakMap();
	Handsontable.plugins = Handsontable.plugins || {};
	function registerPlugin(pluginName, PluginClass) {
	  pluginName = toUpperCaseFirst(pluginName);
	  Handsontable.plugins[pluginName] = PluginClass;
	  Handsontable.hooks.add('construct', function() {
	    var holder;
	    if (!registeredPlugins.has(this)) {
	      registeredPlugins.set(this, {});
	    }
	    holder = registeredPlugins.get(this);
	    if (!holder[pluginName]) {
	      holder[pluginName] = new PluginClass(this);
	    }
	  });
	  Handsontable.hooks.add('afterDestroy', function() {
	    if (registeredPlugins.has(this)) {
	      var pluginsHolder = registeredPlugins.get(this);
	      objectEach(pluginsHolder, (function(plugin) {
	        return plugin.destroy();
	      }));
	      registeredPlugins.delete(this);
	    }
	  });
	}
	function getPlugin(instance, pluginName) {
	  if (typeof pluginName != 'string') {
	    throw Error('Only strings can be passed as "plugin" parameter');
	  }
	  var _pluginName = toUpperCaseFirst(pluginName);
	  if (!registeredPlugins.has(instance) || !registeredPlugins.get(instance)[_pluginName]) {
	    return void 0;
	  }
	  return registeredPlugins.get(instance)[_pluginName];
	}
	function getRegistredPluginNames(hotInstance) {
	  return registeredPlugins.has(hotInstance) ? Object.keys(registeredPlugins.get(hotInstance)) : [];
	}
	function getPluginName(hotInstance, plugin) {
	  var pluginName = null;
	  if (registeredPlugins.has(hotInstance)) {
	    objectEach(registeredPlugins.get(hotInstance), (function(pluginInstance, name) {
	      if (pluginInstance === plugin) {
	        pluginName = name;
	      }
	    }));
	  }
	  return pluginName;
	}
	;

	//# 
	},{"helpers/object":49,"helpers/string":51}],56:[function(require,module,exports){
	"use strict";
	Object.defineProperties(exports, {
	  default: {get: function() {
	      return $__default;
	    }},
	  __esModule: {value: true}
	});
	var $___46__46__47_helpers_47_object__,
	    $___46__46__47_helpers_47_array__,
	    $___46__46__47_plugins__;
	var $__0 = ($___46__46__47_helpers_47_object__ = require("helpers/object"), $___46__46__47_helpers_47_object__ && $___46__46__47_helpers_47_object__.__esModule && $___46__46__47_helpers_47_object__ || {default: $___46__46__47_helpers_47_object__}),
	    defineGetter = $__0.defineGetter,
	    objectEach = $__0.objectEach;
	var arrayEach = ($___46__46__47_helpers_47_array__ = require("helpers/array"), $___46__46__47_helpers_47_array__ && $___46__46__47_helpers_47_array__.__esModule && $___46__46__47_helpers_47_array__ || {default: $___46__46__47_helpers_47_array__}).arrayEach;
	var $__2 = ($___46__46__47_plugins__ = require("plugins"), $___46__46__47_plugins__ && $___46__46__47_plugins__.__esModule && $___46__46__47_plugins__ || {default: $___46__46__47_plugins__}),
	    getRegistredPluginNames = $__2.getRegistredPluginNames,
	    getPluginName = $__2.getPluginName;
	var privatePool = new WeakMap();
	var initializedPlugins = null;
	var BasePlugin = function BasePlugin(hotInstance) {
	  var $__3 = this;
	  defineGetter(this, 'hot', hotInstance, {writable: false});
	  privatePool.set(this, {hooks: {}});
	  initializedPlugins = null;
	  this.pluginsInitializedCallbacks = [];
	  this.isPluginsReady = false;
	  this.pluginName = null;
	  this.enabled = false;
	  this.initialized = false;
	  this.hot.addHook('afterPluginsInitialized', (function() {
	    return $__3.onAfterPluginsInitialized();
	  }));
	  this.hot.addHook('afterUpdateSettings', (function() {
	    return $__3.onUpdateSettings();
	  }));
	  this.hot.addHook('beforeInit', (function() {
	    return $__3.init();
	  }));
	};
	($traceurRuntime.createClass)(BasePlugin, {
	  init: function() {
	    this.pluginName = getPluginName(this.hot, this);
	    if (this.isEnabled && this.isEnabled()) {
	      this.enablePlugin();
	    }
	    if (!initializedPlugins) {
	      initializedPlugins = getRegistredPluginNames(this.hot);
	    }
	    if (initializedPlugins.indexOf(this.pluginName) >= 0) {
	      initializedPlugins.splice(initializedPlugins.indexOf(this.pluginName), 1);
	    }
	    if (!initializedPlugins.length) {
	      this.hot.runHooks('afterPluginsInitialized');
	    }
	    this.initialized = true;
	  },
	  enablePlugin: function() {
	    this.enabled = true;
	  },
	  disablePlugin: function() {
	    if (this.eventManager) {
	      this.eventManager.clear();
	    }
	    this.clearHooks();
	    this.enabled = false;
	  },
	  addHook: function(name, callback) {
	    var hooks = privatePool.get(this).hooks[name] = (privatePool.get(this).hooks[name] || []);
	    this.hot.addHook(name, callback);
	    hooks.push(callback);
	    privatePool.get(this).hooks[name] = hooks;
	  },
	  removeHooks: function(name) {
	    var $__3 = this;
	    arrayEach(privatePool.get(this).hooks[name] || [], (function(callback) {
	      $__3.hot.removeHook(name, callback);
	    }));
	  },
	  clearHooks: function() {
	    var $__3 = this;
	    var hooks = privatePool.get(this).hooks;
	    objectEach(hooks, (function(callbacks, name) {
	      return $__3.removeHooks(name);
	    }));
	    hooks.length = 0;
	  },
	  callOnPluginsReady: function(callback) {
	    if (this.isPluginsReady) {
	      callback();
	    } else {
	      this.pluginsInitializedCallbacks.push(callback);
	    }
	  },
	  onAfterPluginsInitialized: function() {
	    arrayEach(this.pluginsInitializedCallbacks, (function(callback) {
	      return callback();
	    }));
	    this.pluginsInitializedCallbacks.length = 0;
	    this.isPluginsReady = true;
	  },
	  onUpdateSettings: function() {
	    if (this.isEnabled) {
	      if (this.enabled && !this.isEnabled()) {
	        this.disablePlugin();
	      }
	      if (!this.enabled && this.isEnabled()) {
	        this.enablePlugin();
	      }
	      if (this.enabled && this.isEnabled()) {
	        if (this.updatePlugin) {
	          this.updatePlugin();
	        }
	      }
	    }
	  },
	  updatePlugin: function() {},
	  destroy: function() {
	    if (this.eventManager) {
	      this.eventManager.destroy();
	    }
	    this.clearHooks();
	    delete this.hot;
	  }
	}, {});
	var $__default = BasePlugin;

	//# 
	},{"helpers/array":41,"helpers/object":49,"plugins":55}],57:[function(require,module,exports){
	"use strict";
	Object.defineProperties(exports, {
	  AutoColumnSize: {get: function() {
	      return AutoColumnSize;
	    }},
	  __esModule: {value: true}
	});
	var $___46__46__47__95_base__,
	    $___46__46__47__46__46__47_helpers_47_array__,
	    $___46__46__47__46__46__47_helpers_47_dom_47_element__,
	    $___46__46__47__46__46__47_utils_47_ghostTable__,
	    $___46__46__47__46__46__47_helpers_47_object__,
	    $___46__46__47__46__46__47_helpers_47_number__,
	    $___46__46__47__46__46__47_plugins__,
	    $___46__46__47__46__46__47_utils_47_samplesGenerator__,
	    $___46__46__47__46__46__47_helpers_47_string__,
	    $___46__46__47__46__46__47_3rdparty_47_walkontable_47_src_47_calculator_47_viewportColumns__;
	var BasePlugin = ($___46__46__47__95_base__ = require("_base"), $___46__46__47__95_base__ && $___46__46__47__95_base__.__esModule && $___46__46__47__95_base__ || {default: $___46__46__47__95_base__}).default;
	var $__1 = ($___46__46__47__46__46__47_helpers_47_array__ = require("helpers/array"), $___46__46__47__46__46__47_helpers_47_array__ && $___46__46__47__46__46__47_helpers_47_array__.__esModule && $___46__46__47__46__46__47_helpers_47_array__ || {default: $___46__46__47__46__46__47_helpers_47_array__}),
	    arrayEach = $__1.arrayEach,
	    arrayFilter = $__1.arrayFilter;
	var $__2 = ($___46__46__47__46__46__47_helpers_47_dom_47_element__ = require("helpers/dom/element"), $___46__46__47__46__46__47_helpers_47_dom_47_element__ && $___46__46__47__46__46__47_helpers_47_dom_47_element__.__esModule && $___46__46__47__46__46__47_helpers_47_dom_47_element__ || {default: $___46__46__47__46__46__47_helpers_47_dom_47_element__}),
	    cancelAnimationFrame = $__2.cancelAnimationFrame,
	    requestAnimationFrame = $__2.requestAnimationFrame,
	    isVisible = $__2.isVisible;
	var GhostTable = ($___46__46__47__46__46__47_utils_47_ghostTable__ = require("utils/ghostTable"), $___46__46__47__46__46__47_utils_47_ghostTable__ && $___46__46__47__46__46__47_utils_47_ghostTable__.__esModule && $___46__46__47__46__46__47_utils_47_ghostTable__ || {default: $___46__46__47__46__46__47_utils_47_ghostTable__}).GhostTable;
	var $__4 = ($___46__46__47__46__46__47_helpers_47_object__ = require("helpers/object"), $___46__46__47__46__46__47_helpers_47_object__ && $___46__46__47__46__46__47_helpers_47_object__.__esModule && $___46__46__47__46__46__47_helpers_47_object__ || {default: $___46__46__47__46__46__47_helpers_47_object__}),
	    isObject = $__4.isObject,
	    objectEach = $__4.objectEach;
	var $__5 = ($___46__46__47__46__46__47_helpers_47_number__ = require("helpers/number"), $___46__46__47__46__46__47_helpers_47_number__ && $___46__46__47__46__46__47_helpers_47_number__.__esModule && $___46__46__47__46__46__47_helpers_47_number__ || {default: $___46__46__47__46__46__47_helpers_47_number__}),
	    valueAccordingPercent = $__5.valueAccordingPercent,
	    rangeEach = $__5.rangeEach;
	var registerPlugin = ($___46__46__47__46__46__47_plugins__ = require("plugins"), $___46__46__47__46__46__47_plugins__ && $___46__46__47__46__46__47_plugins__.__esModule && $___46__46__47__46__46__47_plugins__ || {default: $___46__46__47__46__46__47_plugins__}).registerPlugin;
	var SamplesGenerator = ($___46__46__47__46__46__47_utils_47_samplesGenerator__ = require("utils/samplesGenerator"), $___46__46__47__46__46__47_utils_47_samplesGenerator__ && $___46__46__47__46__46__47_utils_47_samplesGenerator__.__esModule && $___46__46__47__46__46__47_utils_47_samplesGenerator__ || {default: $___46__46__47__46__46__47_utils_47_samplesGenerator__}).SamplesGenerator;
	var isPercentValue = ($___46__46__47__46__46__47_helpers_47_string__ = require("helpers/string"), $___46__46__47__46__46__47_helpers_47_string__ && $___46__46__47__46__46__47_helpers_47_string__.__esModule && $___46__46__47__46__46__47_helpers_47_string__ || {default: $___46__46__47__46__46__47_helpers_47_string__}).isPercentValue;
	var WalkontableViewportColumnsCalculator = ($___46__46__47__46__46__47_3rdparty_47_walkontable_47_src_47_calculator_47_viewportColumns__ = require("3rdparty/walkontable/src/calculator/viewportColumns"), $___46__46__47__46__46__47_3rdparty_47_walkontable_47_src_47_calculator_47_viewportColumns__ && $___46__46__47__46__46__47_3rdparty_47_walkontable_47_src_47_calculator_47_viewportColumns__.__esModule && $___46__46__47__46__46__47_3rdparty_47_walkontable_47_src_47_calculator_47_viewportColumns__ || {default: $___46__46__47__46__46__47_3rdparty_47_walkontable_47_src_47_calculator_47_viewportColumns__}).WalkontableViewportColumnsCalculator;
	var AutoColumnSize = function AutoColumnSize(hotInstance) {
	  var $__10 = this;
	  $traceurRuntime.superConstructor($AutoColumnSize).call(this, hotInstance);
	  this.widths = [];
	  this.ghostTable = new GhostTable(this.hot);
	  this.samplesGenerator = new SamplesGenerator((function(row, col) {
	    return $__10.hot.getDataAtCell(row, col);
	  }));
	  this.firstCalculation = true;
	  this.inProgress = false;
	  this.addHook('beforeColumnResize', (function(col, size, isDblClick) {
	    return $__10.onBeforeColumnResize(col, size, isDblClick);
	  }));
	};
	var $AutoColumnSize = AutoColumnSize;
	($traceurRuntime.createClass)(AutoColumnSize, {
	  isEnabled: function() {
	    return this.hot.getSettings().autoColumnSize !== false && !this.hot.getSettings().colWidths;
	  },
	  enablePlugin: function() {
	    var $__10 = this;
	    if (this.enabled) {
	      return;
	    }
	    this.addHook('afterLoadData', (function() {
	      return $__10.onAfterLoadData();
	    }));
	    this.addHook('beforeChange', (function(changes) {
	      return $__10.onBeforeChange(changes);
	    }));
	    this.addHook('beforeRender', (function(force) {
	      return $__10.onBeforeRender(force);
	    }));
	    this.addHook('modifyColWidth', (function(width, col) {
	      return $__10.getColumnWidth(col, width);
	    }));
	    $traceurRuntime.superGet(this, $AutoColumnSize.prototype, "enablePlugin").call(this);
	  },
	  disablePlugin: function() {
	    $traceurRuntime.superGet(this, $AutoColumnSize.prototype, "disablePlugin").call(this);
	  },
	  calculateColumnsWidth: function() {
	    var colRange = arguments[0] !== (void 0) ? arguments[0] : {
	      from: 0,
	      to: this.hot.countCols() - 1
	    };
	    var rowRange = arguments[1] !== (void 0) ? arguments[1] : {
	      from: 0,
	      to: this.hot.countRows() - 1
	    };
	    var force = arguments[2] !== (void 0) ? arguments[2] : false;
	    var $__10 = this;
	    if (typeof colRange === 'number') {
	      colRange = {
	        from: colRange,
	        to: colRange
	      };
	    }
	    if (typeof rowRange === 'number') {
	      rowRange = {
	        from: rowRange,
	        to: rowRange
	      };
	    }
	    rangeEach(colRange.from, colRange.to, (function(col) {
	      if (force || ($__10.widths[col] === void 0 && !$__10.hot._getColWidthFromSettings(col))) {
	        var samples = $__10.samplesGenerator.generateColumnSamples(col, rowRange);
	        samples.forEach((function(sample, col) {
	          return $__10.ghostTable.addColumn(col, sample);
	        }));
	      }
	    }));
	    if (this.ghostTable.columns.length) {
	      this.ghostTable.getWidths((function(col, width) {
	        return $__10.widths[col] = width;
	      }));
	      this.ghostTable.clean();
	    }
	  },
	  calculateAllColumnsWidth: function() {
	    var rowRange = arguments[0] !== (void 0) ? arguments[0] : {
	      from: 0,
	      to: this.hot.countRows() - 1
	    };
	    var $__10 = this;
	    var current = 0;
	    var length = this.hot.countCols() - 1;
	    var timer = null;
	    this.inProgress = true;
	    var loop = (function() {
	      if (!$__10.hot) {
	        cancelAnimationFrame(timer);
	        $__10.inProgress = false;
	        return;
	      }
	      $__10.calculateColumnsWidth({
	        from: current,
	        to: Math.min(current + $AutoColumnSize.CALCULATION_STEP, length)
	      }, rowRange);
	      current = current + $AutoColumnSize.CALCULATION_STEP + 1;
	      if (current < length) {
	        timer = requestAnimationFrame(loop);
	      } else {
	        cancelAnimationFrame(timer);
	        $__10.inProgress = false;
	        $__10.hot.view.wt.wtOverlays.adjustElementsSize(true);
	        if ($__10.hot.view.wt.wtOverlays.leftOverlay.needFullRender) {
	          $__10.hot.view.wt.wtOverlays.leftOverlay.clone.draw();
	        }
	      }
	    });
	    if (this.firstCalculation && this.getSyncCalculationLimit()) {
	      this.calculateColumnsWidth({
	        from: 0,
	        to: this.getSyncCalculationLimit()
	      }, rowRange);
	      this.firstCalculation = false;
	      current = this.getSyncCalculationLimit() + 1;
	    }
	    if (current < length) {
	      loop();
	    } else {
	      this.inProgress = false;
	    }
	  },
	  recalculateAllColumnsWidth: function() {
	    if (this.hot.view && isVisible(this.hot.view.wt.wtTable.TABLE)) {
	      this.clearCache();
	      this.calculateAllColumnsWidth();
	    }
	  },
	  getSyncCalculationLimit: function() {
	    var limit = $AutoColumnSize.SYNC_CALCULATION_LIMIT;
	    var colsLimit = this.hot.countCols() - 1;
	    if (isObject(this.hot.getSettings().autoColumnSize)) {
	      limit = this.hot.getSettings().autoColumnSize.syncLimit;
	      if (isPercentValue(limit)) {
	        limit = valueAccordingPercent(colsLimit, limit);
	      } else {
	        limit = limit >> 0;
	      }
	    }
	    return Math.min(limit, colsLimit);
	  },
	  getColumnWidth: function(col) {
	    var defaultWidth = arguments[1];
	    var keepMinimum = arguments[2] !== (void 0) ? arguments[2] : true;
	    var width = defaultWidth;
	    if (width === void 0) {
	      width = this.widths[col];
	      if (keepMinimum && typeof width === 'number') {
	        width = Math.max(width, WalkontableViewportColumnsCalculator.DEFAULT_WIDTH);
	      }
	    }
	    return width;
	  },
	  getFirstVisibleColumn: function() {
	    var wot = this.hot.view.wt;
	    if (wot.wtViewport.columnsVisibleCalculator) {
	      return wot.wtTable.getFirstVisibleColumn();
	    }
	    if (wot.wtViewport.columnsRenderCalculator) {
	      return wot.wtTable.getFirstRenderedColumn();
	    }
	    return -1;
	  },
	  getLastVisibleColumn: function() {
	    var wot = this.hot.view.wt;
	    if (wot.wtViewport.columnsVisibleCalculator) {
	      return wot.wtTable.getLastVisibleColumn();
	    }
	    if (wot.wtViewport.columnsRenderCalculator) {
	      return wot.wtTable.getLastRenderedColumn();
	    }
	    return -1;
	  },
	  clearCache: function() {
	    this.widths.length = 0;
	  },
	  isNeedRecalculate: function() {
	    return arrayFilter(this.widths, (function(item) {
	      return (item === void 0);
	    })).length ? true : false;
	  },
	  onBeforeRender: function() {
	    var force = this.hot.renderCall;
	    this.calculateColumnsWidth({
	      from: this.getFirstVisibleColumn(),
	      to: this.getLastVisibleColumn()
	    }, void 0, force);
	    if (this.isNeedRecalculate() && !this.inProgress) {
	      this.calculateAllColumnsWidth();
	    }
	  },
	  onAfterLoadData: function() {
	    var $__10 = this;
	    if (this.hot.view) {
	      this.recalculateAllColumnsWidth();
	    } else {
	      setTimeout((function() {
	        if ($__10.hot) {
	          $__10.recalculateAllColumnsWidth();
	        }
	      }), 0);
	    }
	  },
	  onBeforeChange: function(changes) {
	    var $__10 = this;
	    arrayEach(changes, (function(data) {
	      return $__10.widths[data[1]] = void 0;
	    }));
	  },
	  onBeforeColumnResize: function(col, size, isDblClick) {
	    if (isDblClick) {
	      this.calculateColumnsWidth(col, void 0, true);
	      size = this.getColumnWidth(col, void 0, false);
	    }
	    return size;
	  },
	  destroy: function() {
	    this.ghostTable.clean();
	    $traceurRuntime.superGet(this, $AutoColumnSize.prototype, "destroy").call(this);
	  }
	}, {
	  get CALCULATION_STEP() {
	    return 50;
	  },
	  get SYNC_CALCULATION_LIMIT() {
	    return 50;
	  }
	}, BasePlugin);
	;
	registerPlugin('autoColumnSize', AutoColumnSize);

	//# 
	},{"3rdparty/walkontable/src/calculator/viewportColumns":3,"_base":56,"helpers/array":41,"helpers/dom/element":44,"helpers/number":48,"helpers/object":49,"helpers/string":51,"plugins":55,"utils/ghostTable":96,"utils/samplesGenerator":97}],58:[function(require,module,exports){
	"use strict";
	Object.defineProperties(exports, {
	  AutoRowSize: {get: function() {
	      return AutoRowSize;
	    }},
	  __esModule: {value: true}
	});
	var $___46__46__47__95_base__,
	    $___46__46__47__46__46__47_helpers_47_array__,
	    $___46__46__47__46__46__47_helpers_47_dom_47_element__,
	    $___46__46__47__46__46__47_utils_47_ghostTable__,
	    $___46__46__47__46__46__47_helpers_47_object__,
	    $___46__46__47__46__46__47_helpers_47_number__,
	    $___46__46__47__46__46__47_plugins__,
	    $___46__46__47__46__46__47_utils_47_samplesGenerator__,
	    $___46__46__47__46__46__47_helpers_47_string__;
	var BasePlugin = ($___46__46__47__95_base__ = require("_base"), $___46__46__47__95_base__ && $___46__46__47__95_base__.__esModule && $___46__46__47__95_base__ || {default: $___46__46__47__95_base__}).default;
	var $__1 = ($___46__46__47__46__46__47_helpers_47_array__ = require("helpers/array"), $___46__46__47__46__46__47_helpers_47_array__ && $___46__46__47__46__46__47_helpers_47_array__.__esModule && $___46__46__47__46__46__47_helpers_47_array__ || {default: $___46__46__47__46__46__47_helpers_47_array__}),
	    arrayEach = $__1.arrayEach,
	    arrayFilter = $__1.arrayFilter;
	var $__2 = ($___46__46__47__46__46__47_helpers_47_dom_47_element__ = require("helpers/dom/element"), $___46__46__47__46__46__47_helpers_47_dom_47_element__ && $___46__46__47__46__46__47_helpers_47_dom_47_element__.__esModule && $___46__46__47__46__46__47_helpers_47_dom_47_element__ || {default: $___46__46__47__46__46__47_helpers_47_dom_47_element__}),
	    cancelAnimationFrame = $__2.cancelAnimationFrame,
	    requestAnimationFrame = $__2.requestAnimationFrame,
	    isVisible = $__2.isVisible;
	var GhostTable = ($___46__46__47__46__46__47_utils_47_ghostTable__ = require("utils/ghostTable"), $___46__46__47__46__46__47_utils_47_ghostTable__ && $___46__46__47__46__46__47_utils_47_ghostTable__.__esModule && $___46__46__47__46__46__47_utils_47_ghostTable__ || {default: $___46__46__47__46__46__47_utils_47_ghostTable__}).GhostTable;
	var $__4 = ($___46__46__47__46__46__47_helpers_47_object__ = require("helpers/object"), $___46__46__47__46__46__47_helpers_47_object__ && $___46__46__47__46__46__47_helpers_47_object__.__esModule && $___46__46__47__46__46__47_helpers_47_object__ || {default: $___46__46__47__46__46__47_helpers_47_object__}),
	    isObject = $__4.isObject,
	    objectEach = $__4.objectEach;
	var $__5 = ($___46__46__47__46__46__47_helpers_47_number__ = require("helpers/number"), $___46__46__47__46__46__47_helpers_47_number__ && $___46__46__47__46__46__47_helpers_47_number__.__esModule && $___46__46__47__46__46__47_helpers_47_number__ || {default: $___46__46__47__46__46__47_helpers_47_number__}),
	    valueAccordingPercent = $__5.valueAccordingPercent,
	    rangeEach = $__5.rangeEach;
	var registerPlugin = ($___46__46__47__46__46__47_plugins__ = require("plugins"), $___46__46__47__46__46__47_plugins__ && $___46__46__47__46__46__47_plugins__.__esModule && $___46__46__47__46__46__47_plugins__ || {default: $___46__46__47__46__46__47_plugins__}).registerPlugin;
	var SamplesGenerator = ($___46__46__47__46__46__47_utils_47_samplesGenerator__ = require("utils/samplesGenerator"), $___46__46__47__46__46__47_utils_47_samplesGenerator__ && $___46__46__47__46__46__47_utils_47_samplesGenerator__.__esModule && $___46__46__47__46__46__47_utils_47_samplesGenerator__ || {default: $___46__46__47__46__46__47_utils_47_samplesGenerator__}).SamplesGenerator;
	var isPercentValue = ($___46__46__47__46__46__47_helpers_47_string__ = require("helpers/string"), $___46__46__47__46__46__47_helpers_47_string__ && $___46__46__47__46__46__47_helpers_47_string__.__esModule && $___46__46__47__46__46__47_helpers_47_string__ || {default: $___46__46__47__46__46__47_helpers_47_string__}).isPercentValue;
	var AutoRowSize = function AutoRowSize(hotInstance) {
	  var $__9 = this;
	  $traceurRuntime.superConstructor($AutoRowSize).call(this, hotInstance);
	  this.heights = [];
	  this.ghostTable = new GhostTable(this.hot);
	  this.samplesGenerator = new SamplesGenerator((function(row, col) {
	    return $__9.hot.getDataAtCell(row, col);
	  }));
	  this.firstCalculation = true;
	  this.inProgress = false;
	  this.addHook('beforeRowResize', (function(row, size, isDblClick) {
	    return $__9.onBeforeRowResize(row, size, isDblClick);
	  }));
	};
	var $AutoRowSize = AutoRowSize;
	($traceurRuntime.createClass)(AutoRowSize, {
	  isEnabled: function() {
	    return this.hot.getSettings().autoRowSize === true || isObject(this.hot.getSettings().autoRowSize);
	  },
	  enablePlugin: function() {
	    var $__9 = this;
	    if (this.enabled) {
	      return;
	    }
	    this.addHook('afterLoadData', (function() {
	      return $__9.onAfterLoadData();
	    }));
	    this.addHook('beforeChange', (function(changes) {
	      return $__9.onBeforeChange(changes);
	    }));
	    this.addHook('beforeColumnMove', (function() {
	      return $__9.recalculateAllRowsHeight();
	    }));
	    this.addHook('beforeColumnResize', (function() {
	      return $__9.recalculateAllRowsHeight();
	    }));
	    this.addHook('beforeColumnSort', (function() {
	      return $__9.clearCache();
	    }));
	    this.addHook('beforeRender', (function(force) {
	      return $__9.onBeforeRender(force);
	    }));
	    this.addHook('beforeRowMove', (function(rowStart, rowEnd) {
	      return $__9.onBeforeRowMove(rowStart, rowEnd);
	    }));
	    this.addHook('modifyRowHeight', (function(height, row) {
	      return $__9.getRowHeight(row, height);
	    }));
	    $traceurRuntime.superGet(this, $AutoRowSize.prototype, "enablePlugin").call(this);
	  },
	  disablePlugin: function() {
	    $traceurRuntime.superGet(this, $AutoRowSize.prototype, "disablePlugin").call(this);
	  },
	  calculateRowsHeight: function() {
	    var rowRange = arguments[0] !== (void 0) ? arguments[0] : {
	      from: 0,
	      to: this.hot.countRows() - 1
	    };
	    var colRange = arguments[1] !== (void 0) ? arguments[1] : {
	      from: 0,
	      to: this.hot.countCols() - 1
	    };
	    var force = arguments[2] !== (void 0) ? arguments[2] : false;
	    var $__9 = this;
	    if (typeof rowRange === 'number') {
	      rowRange = {
	        from: rowRange,
	        to: rowRange
	      };
	    }
	    if (typeof colRange === 'number') {
	      colRange = {
	        from: colRange,
	        to: colRange
	      };
	    }
	    rangeEach(rowRange.from, rowRange.to, (function(row) {
	      if (force || $__9.heights[row] === void 0) {
	        var samples = $__9.samplesGenerator.generateRowSamples(row, colRange);
	        samples.forEach((function(sample, row) {
	          return $__9.ghostTable.addRow(row, sample);
	        }));
	      }
	    }));
	    if (this.ghostTable.rows.length) {
	      this.ghostTable.getHeights((function(row, height) {
	        return $__9.heights[row] = height;
	      }));
	      this.ghostTable.clean();
	    }
	  },
	  calculateAllRowsHeight: function() {
	    var colRange = arguments[0] !== (void 0) ? arguments[0] : {
	      from: 0,
	      to: this.hot.countCols() - 1
	    };
	    var $__9 = this;
	    var current = 0;
	    var length = this.hot.countRows() - 1;
	    var timer = null;
	    this.inProgress = true;
	    var loop = (function() {
	      if (!$__9.hot) {
	        cancelAnimationFrame(timer);
	        $__9.inProgress = false;
	        return;
	      }
	      $__9.calculateRowsHeight({
	        from: current,
	        to: Math.min(current + $AutoRowSize.CALCULATION_STEP, length)
	      }, colRange);
	      current = current + $AutoRowSize.CALCULATION_STEP + 1;
	      if (current < length) {
	        timer = requestAnimationFrame(loop);
	      } else {
	        cancelAnimationFrame(timer);
	        $__9.inProgress = false;
	        $__9.hot.view.wt.wtOverlays.adjustElementsSize(true);
	        if ($__9.hot.view.wt.wtOverlays.leftOverlay.needFullRender) {
	          $__9.hot.view.wt.wtOverlays.leftOverlay.clone.draw();
	        }
	      }
	    });
	    if (this.firstCalculation && this.getSyncCalculationLimit()) {
	      this.calculateRowsHeight({
	        from: 0,
	        to: this.getSyncCalculationLimit()
	      }, colRange);
	      this.firstCalculation = false;
	      current = this.getSyncCalculationLimit() + 1;
	    }
	    if (current < length) {
	      loop();
	    } else {
	      this.inProgress = false;
	    }
	  },
	  recalculateAllRowsHeight: function() {
	    if (isVisible(this.hot.view.wt.wtTable.TABLE)) {
	      this.clearCache();
	      this.calculateAllRowsHeight();
	    }
	  },
	  getSyncCalculationLimit: function() {
	    var limit = $AutoRowSize.SYNC_CALCULATION_LIMIT;
	    var rowsLimit = this.hot.countRows() - 1;
	    if (isObject(this.hot.getSettings().autoRowSize)) {
	      limit = this.hot.getSettings().autoRowSize.syncLimit;
	      if (isPercentValue(limit)) {
	        limit = valueAccordingPercent(rowsLimit, limit);
	      } else {
	        limit = limit >> 0;
	      }
	    }
	    return Math.min(limit, rowsLimit);
	  },
	  getRowHeight: function(row) {
	    var defaultHeight = arguments[1];
	    var height = defaultHeight;
	    if (this.heights[row] !== void 0 && this.heights[row] > (defaultHeight || 0)) {
	      height = this.heights[row];
	    }
	    return height;
	  },
	  getFirstVisibleRow: function() {
	    var wot = this.hot.view.wt;
	    if (wot.wtViewport.rowsVisibleCalculator) {
	      return wot.wtTable.getFirstVisibleRow();
	    }
	    if (wot.wtViewport.rowsRenderCalculator) {
	      return wot.wtTable.getFirstRenderedRow();
	    }
	    return -1;
	  },
	  getLastVisibleRow: function() {
	    var wot = this.hot.view.wt;
	    if (wot.wtViewport.rowsVisibleCalculator) {
	      return wot.wtTable.getLastVisibleRow();
	    }
	    if (wot.wtViewport.rowsRenderCalculator) {
	      return wot.wtTable.getLastRenderedRow();
	    }
	    return -1;
	  },
	  clearCache: function() {
	    this.heights.length = 0;
	  },
	  clearCacheByRange: function(range) {
	    var $__9 = this;
	    if (typeof range === 'number') {
	      range = {
	        from: range,
	        to: range
	      };
	    }
	    rangeEach(Math.min(range.from, range.to), Math.max(range.from, range.to), (function(row) {
	      return $__9.heights[row] = void 0;
	    }));
	  },
	  isNeedRecalculate: function() {
	    return arrayFilter(this.heights, (function(item) {
	      return (item === void 0);
	    })).length ? true : false;
	  },
	  onBeforeRender: function() {
	    var force = this.hot.renderCall;
	    this.calculateRowsHeight({
	      from: this.getFirstVisibleRow(),
	      to: this.getLastVisibleRow()
	    }, void 0, force);
	    if (this.isNeedRecalculate() && !this.inProgress) {
	      this.calculateAllRowsHeight();
	    }
	  },
	  onBeforeRowMove: function(from, to) {
	    this.clearCacheByRange({
	      from: from,
	      to: to
	    });
	    this.calculateAllRowsHeight();
	  },
	  onBeforeRowResize: function(row, size, isDblClick) {
	    if (isDblClick) {
	      this.calculateRowsHeight(row, void 0, true);
	      size = this.getRowHeight(row);
	    }
	    return size;
	  },
	  onAfterLoadData: function() {
	    var $__9 = this;
	    if (this.hot.view) {
	      this.recalculateAllRowsHeight();
	    } else {
	      setTimeout((function() {
	        if ($__9.hot) {
	          $__9.recalculateAllRowsHeight();
	        }
	      }), 0);
	    }
	  },
	  onBeforeChange: function(changes) {
	    var range = null;
	    if (changes.length === 1) {
	      range = changes[0][0];
	    } else if (changes.length > 1) {
	      range = {
	        from: changes[0][0],
	        to: changes[changes.length - 1][0]
	      };
	    }
	    if (range !== null) {
	      this.clearCacheByRange(range);
	    }
	  },
	  destroy: function() {
	    this.ghostTable.clean();
	    $traceurRuntime.superGet(this, $AutoRowSize.prototype, "destroy").call(this);
	  }
	}, {
	  get CALCULATION_STEP() {
	    return 50;
	  },
	  get SYNC_CALCULATION_LIMIT() {
	    return 500;
	  }
	}, BasePlugin);
	;
	registerPlugin('autoRowSize', AutoRowSize);

	//# 
	},{"_base":56,"helpers/array":41,"helpers/dom/element":44,"helpers/number":48,"helpers/object":49,"helpers/string":51,"plugins":55,"utils/ghostTable":96,"utils/samplesGenerator":97}],59:[function(require,module,exports){
	"use strict";
	Object.defineProperties(exports, {
	  Autofill: {get: function() {
	      return Autofill;
	    }},
	  __esModule: {value: true}
	});
	var $___46__46__47__46__46__47_helpers_47_dom_47_element__,
	    $___46__46__47__46__46__47_eventManager__,
	    $___46__46__47__46__46__47_plugins__,
	    $___46__46__47__46__46__47_3rdparty_47_walkontable_47_src_47_cell_47_coords__;
	var $__0 = ($___46__46__47__46__46__47_helpers_47_dom_47_element__ = require("helpers/dom/element"), $___46__46__47__46__46__47_helpers_47_dom_47_element__ && $___46__46__47__46__46__47_helpers_47_dom_47_element__.__esModule && $___46__46__47__46__46__47_helpers_47_dom_47_element__ || {default: $___46__46__47__46__46__47_helpers_47_dom_47_element__}),
	    offset = $__0.offset,
	    outerHeight = $__0.outerHeight,
	    outerWidth = $__0.outerWidth;
	var eventManagerObject = ($___46__46__47__46__46__47_eventManager__ = require("eventManager"), $___46__46__47__46__46__47_eventManager__ && $___46__46__47__46__46__47_eventManager__.__esModule && $___46__46__47__46__46__47_eventManager__ || {default: $___46__46__47__46__46__47_eventManager__}).eventManager;
	var registerPlugin = ($___46__46__47__46__46__47_plugins__ = require("plugins"), $___46__46__47__46__46__47_plugins__ && $___46__46__47__46__46__47_plugins__.__esModule && $___46__46__47__46__46__47_plugins__ || {default: $___46__46__47__46__46__47_plugins__}).registerPlugin;
	var WalkontableCellCoords = ($___46__46__47__46__46__47_3rdparty_47_walkontable_47_src_47_cell_47_coords__ = require("3rdparty/walkontable/src/cell/coords"), $___46__46__47__46__46__47_3rdparty_47_walkontable_47_src_47_cell_47_coords__ && $___46__46__47__46__46__47_3rdparty_47_walkontable_47_src_47_cell_47_coords__.__esModule && $___46__46__47__46__46__47_3rdparty_47_walkontable_47_src_47_cell_47_coords__ || {default: $___46__46__47__46__46__47_3rdparty_47_walkontable_47_src_47_cell_47_coords__}).WalkontableCellCoords;
	;
	function getDeltas(start, end, data, direction) {
	  var rlength = data.length,
	      clength = data ? data[0].length : 0,
	      deltas = [],
	      arr = [],
	      diffRow,
	      diffCol,
	      startValue,
	      endValue,
	      delta;
	  diffRow = end.row - start.row;
	  diffCol = end.col - start.col;
	  if (['down', 'up'].indexOf(direction) !== -1) {
	    for (var col = 0; col <= diffCol; col++) {
	      startValue = parseInt(data[0][col], 10);
	      endValue = parseInt(data[rlength - 1][col], 10);
	      delta = (direction === 'down' ? (endValue - startValue) : (startValue - endValue)) / (rlength - 1) || 0;
	      arr.push(delta);
	    }
	    deltas.push(arr);
	  }
	  if (['right', 'left'].indexOf(direction) !== -1) {
	    for (var row = 0; row <= diffRow; row++) {
	      startValue = parseInt(data[row][0], 10);
	      endValue = parseInt(data[row][clength - 1], 10);
	      delta = (direction === 'right' ? (endValue - startValue) : (startValue - endValue)) / (clength - 1) || 0;
	      arr = [];
	      arr.push(delta);
	      deltas.push(arr);
	    }
	  }
	  return deltas;
	}
	function Autofill(instance) {
	  var _this = this,
	      mouseDownOnCellCorner = false,
	      wtOnCellCornerMouseDown,
	      wtOnCellMouseOver,
	      eventManager;
	  this.instance = instance;
	  this.addingStarted = false;
	  eventManager = eventManagerObject(instance);
	  function mouseUpCallback(event) {
	    if (!instance.autofill) {
	      return true;
	    }
	    if (instance.autofill.handle && instance.autofill.handle.isDragged) {
	      if (instance.autofill.handle.isDragged > 1) {
	        instance.autofill.apply();
	      }
	      instance.autofill.handle.isDragged = 0;
	      mouseDownOnCellCorner = false;
	    }
	  }
	  function mouseMoveCallback(event) {
	    var tableBottom,
	        tableRight;
	    if (!_this.instance.autofill) {
	      return false;
	    }
	    tableBottom = offset(_this.instance.table).top - (window.pageYOffset || document.documentElement.scrollTop) + outerHeight(_this.instance.table);
	    tableRight = offset(_this.instance.table).left - (window.pageXOffset || document.documentElement.scrollLeft) + outerWidth(_this.instance.table);
	    if (_this.addingStarted === false && _this.instance.autofill.handle.isDragged > 0 && event.clientY > tableBottom && event.clientX <= tableRight) {
	      _this.instance.mouseDragOutside = true;
	      _this.addingStarted = true;
	    } else {
	      _this.instance.mouseDragOutside = false;
	    }
	    if (_this.instance.mouseDragOutside) {
	      setTimeout(function() {
	        _this.addingStarted = false;
	        _this.instance.alter('insert_row');
	      }, 200);
	    }
	  }
	  eventManager.addEventListener(document, 'mouseup', mouseUpCallback);
	  eventManager.addEventListener(document, 'mousemove', mouseMoveCallback);
	  wtOnCellCornerMouseDown = this.instance.view.wt.wtSettings.settings.onCellCornerMouseDown;
	  this.instance.view.wt.wtSettings.settings.onCellCornerMouseDown = function(event) {
	    instance.autofill.handle.isDragged = 1;
	    mouseDownOnCellCorner = true;
	    wtOnCellCornerMouseDown(event);
	  };
	  wtOnCellMouseOver = this.instance.view.wt.wtSettings.settings.onCellMouseOver;
	  this.instance.view.wt.wtSettings.settings.onCellMouseOver = function(event, coords, TD, wt) {
	    if (instance.autofill && mouseDownOnCellCorner && !instance.view.isMouseDown() && instance.autofill.handle && instance.autofill.handle.isDragged) {
	      instance.autofill.handle.isDragged++;
	      instance.autofill.showBorder(coords);
	      instance.autofill.checkIfNewRowNeeded();
	    }
	    wtOnCellMouseOver(event, coords, TD, wt);
	  };
	  this.instance.view.wt.wtSettings.settings.onCellCornerDblClick = function() {
	    instance.autofill.selectAdjacent();
	  };
	}
	Autofill.prototype.init = function() {
	  this.handle = {};
	};
	Autofill.prototype.disable = function() {
	  this.handle.disabled = true;
	};
	Autofill.prototype.selectAdjacent = function() {
	  var select,
	      data,
	      r,
	      maxR,
	      c;
	  if (this.instance.selection.isMultiple()) {
	    select = this.instance.view.wt.selections.area.getCorners();
	  } else {
	    select = this.instance.view.wt.selections.current.getCorners();
	  }
	  data = this.instance.getData();
	  rows: for (r = select[2] + 1; r < this.instance.countRows(); r++) {
	    for (c = select[1]; c <= select[3]; c++) {
	      if (data[r][c]) {
	        break rows;
	      }
	    }
	    if (!!data[r][select[1] - 1] || !!data[r][select[3] + 1]) {
	      maxR = r;
	    }
	  }
	  if (maxR) {
	    this.instance.view.wt.selections.fill.clear();
	    this.instance.view.wt.selections.fill.add(new WalkontableCellCoords(select[0], select[1]));
	    this.instance.view.wt.selections.fill.add(new WalkontableCellCoords(maxR, select[3]));
	    this.apply();
	  }
	};
	Autofill.prototype.apply = function() {
	  var drag,
	      select,
	      start,
	      end,
	      _data,
	      direction,
	      deltas,
	      selRange;
	  this.handle.isDragged = 0;
	  if (this.instance.view.wt.selections.fill.isEmpty()) {
	    return;
	  }
	  drag = this.instance.view.wt.selections.fill.getCorners();
	  this.instance.view.wt.selections.fill.clear();
	  if (this.instance.selection.isMultiple()) {
	    select = this.instance.view.wt.selections.area.getCorners();
	  } else {
	    select = this.instance.view.wt.selections.current.getCorners();
	  }
	  Handsontable.hooks.run(this.instance, 'afterAutofillApplyValues', select, drag);
	  if (drag[0] === select[0] && drag[1] < select[1]) {
	    direction = 'left';
	    start = new WalkontableCellCoords(drag[0], drag[1]);
	    end = new WalkontableCellCoords(drag[2], select[1] - 1);
	  } else if (drag[0] === select[0] && drag[3] > select[3]) {
	    direction = 'right';
	    start = new WalkontableCellCoords(drag[0], select[3] + 1);
	    end = new WalkontableCellCoords(drag[2], drag[3]);
	  } else if (drag[0] < select[0] && drag[1] === select[1]) {
	    direction = 'up';
	    start = new WalkontableCellCoords(drag[0], drag[1]);
	    end = new WalkontableCellCoords(select[0] - 1, drag[3]);
	  } else if (drag[2] > select[2] && drag[1] === select[1]) {
	    direction = 'down';
	    start = new WalkontableCellCoords(select[2] + 1, drag[1]);
	    end = new WalkontableCellCoords(drag[2], drag[3]);
	  }
	  if (start && start.row > -1 && start.col > -1) {
	    selRange = {
	      from: this.instance.getSelectedRange().from,
	      to: this.instance.getSelectedRange().to
	    };
	    _data = this.instance.getData(selRange.from.row, selRange.from.col, selRange.to.row, selRange.to.col);
	    deltas = getDeltas(start, end, _data, direction);
	    Handsontable.hooks.run(this.instance, 'beforeAutofill', start, end, _data);
	    this.instance.populateFromArray(start.row, start.col, _data, end.row, end.col, 'autofill', null, direction, deltas);
	    this.instance.selection.setRangeStart(new WalkontableCellCoords(drag[0], drag[1]));
	    this.instance.selection.setRangeEnd(new WalkontableCellCoords(drag[2], drag[3]));
	  } else {
	    this.instance.selection.refreshBorders();
	  }
	};
	Autofill.prototype.showBorder = function(coords) {
	  var topLeft = this.instance.getSelectedRange().getTopLeftCorner(),
	      bottomRight = this.instance.getSelectedRange().getBottomRightCorner();
	  if (this.instance.getSettings().fillHandle !== 'horizontal' && (bottomRight.row < coords.row || topLeft.row > coords.row)) {
	    coords = new WalkontableCellCoords(coords.row, bottomRight.col);
	  } else if (this.instance.getSettings().fillHandle !== 'vertical') {
	    coords = new WalkontableCellCoords(bottomRight.row, coords.col);
	  } else {
	    return;
	  }
	  this.instance.view.wt.selections.fill.clear();
	  this.instance.view.wt.selections.fill.add(this.instance.getSelectedRange().from);
	  this.instance.view.wt.selections.fill.add(this.instance.getSelectedRange().to);
	  this.instance.view.wt.selections.fill.add(coords);
	  this.instance.view.render();
	};
	Autofill.prototype.checkIfNewRowNeeded = function() {
	  var fillCorners,
	      selection,
	      tableRows = this.instance.countRows(),
	      that = this;
	  if (this.instance.view.wt.selections.fill.cellRange && this.addingStarted === false) {
	    selection = this.instance.getSelected();
	    fillCorners = this.instance.view.wt.selections.fill.getCorners();
	    if (selection[2] < tableRows - 1 && fillCorners[2] === tableRows - 1) {
	      this.addingStarted = true;
	      this.instance._registerTimeout(setTimeout(function() {
	        that.instance.alter('insert_row');
	        that.addingStarted = false;
	      }, 200));
	    }
	  }
	};
	Handsontable.hooks.add('afterInit', function() {
	  var autofill = new Autofill(this);
	  if (typeof this.getSettings().fillHandle !== 'undefined') {
	    if (autofill.handle && this.getSettings().fillHandle === false) {
	      autofill.disable();
	    } else if (!autofill.handle && this.getSettings().fillHandle !== false) {
	      this.autofill = autofill;
	      this.autofill.init();
	    }
	  }
	});
	Handsontable.Autofill = Autofill;

	//# 
	},{"3rdparty/walkontable/src/cell/coords":5,"eventManager":40,"helpers/dom/element":44,"plugins":55}],60:[function(require,module,exports){
	"use strict";
	Object.defineProperties(exports, {
	  default: {get: function() {
	      return $__default;
	    }},
	  __esModule: {value: true}
	});
	var $___46__46__47__46__46__47_helpers_47_dom_47_element__,
	    $___46__46__47__46__46__47_eventManager__,
	    $___46__46__47__95_base__,
	    $___46__46__47__46__46__47_plugins__;
	var $__0 = ($___46__46__47__46__46__47_helpers_47_dom_47_element__ = require("helpers/dom/element"), $___46__46__47__46__46__47_helpers_47_dom_47_element__ && $___46__46__47__46__46__47_helpers_47_dom_47_element__.__esModule && $___46__46__47__46__46__47_helpers_47_dom_47_element__ || {default: $___46__46__47__46__46__47_helpers_47_dom_47_element__}),
	    addClass = $__0.addClass,
	    closest = $__0.closest,
	    hasClass = $__0.hasClass,
	    index = $__0.index,
	    removeClass = $__0.removeClass;
	var eventManagerObject = ($___46__46__47__46__46__47_eventManager__ = require("eventManager"), $___46__46__47__46__46__47_eventManager__ && $___46__46__47__46__46__47_eventManager__.__esModule && $___46__46__47__46__46__47_eventManager__ || {default: $___46__46__47__46__46__47_eventManager__}).eventManager;
	var BasePlugin = ($___46__46__47__95_base__ = require("_base"), $___46__46__47__95_base__ && $___46__46__47__95_base__.__esModule && $___46__46__47__95_base__ || {default: $___46__46__47__95_base__}).default;
	var registerPlugin = ($___46__46__47__46__46__47_plugins__ = require("plugins"), $___46__46__47__46__46__47_plugins__ && $___46__46__47__46__46__47_plugins__.__esModule && $___46__46__47__46__46__47_plugins__ || {default: $___46__46__47__46__46__47_plugins__}).registerPlugin;
	Handsontable.hooks.register('beforeColumnSort');
	Handsontable.hooks.register('afterColumnSort');
	var ColumnSorting = function ColumnSorting(hotInstance) {
	  $traceurRuntime.superConstructor($ColumnSorting).call(this, hotInstance);
	  this.sortIndicators = [];
	};
	var $ColumnSorting = ColumnSorting;
	($traceurRuntime.createClass)(ColumnSorting, {
	  isEnabled: function() {
	    return !!(this.hot.getSettings().columnSorting);
	  },
	  enablePlugin: function() {
	    var $__4 = this;
	    if (this.enabled) {
	      return;
	    }
	    var _this = this;
	    this.hot.sortIndex = [];
	    this.hot.sort = function() {
	      var args = Array.prototype.slice.call(arguments);
	      return _this.sortByColumn.apply(_this, args);
	    };
	    if (typeof this.hot.getSettings().observeChanges === 'undefined') {
	      this.enableObserveChangesPlugin();
	    }
	    this.bindColumnSortingAfterClick();
	    this.addHook('modifyRow', (function(row) {
	      return $__4.translateRow(row);
	    }));
	    this.addHook('afterUpdateSettings', (function() {
	      return $__4.onAfterUpdateSettings();
	    }));
	    this.addHook('afterGetColHeader', (function(col, TH) {
	      return $__4.getColHeader(col, TH);
	    }));
	    this.addHook('afterCreateRow', function() {
	      _this.afterCreateRow.apply(_this, arguments);
	    });
	    this.addHook('afterRemoveRow', function() {
	      _this.afterRemoveRow.apply(_this, arguments);
	    });
	    this.addHook('afterInit', (function() {
	      return $__4.sortBySettings();
	    }));
	    this.addHook('afterLoadData', (function() {
	      $__4.hot.sortIndex = [];
	      if ($__4.hot.view) {
	        $__4.sortBySettings();
	      }
	    }));
	    if (this.hot.view) {
	      this.sortBySettings();
	    }
	    $traceurRuntime.superGet(this, $ColumnSorting.prototype, "enablePlugin").call(this);
	  },
	  disablePlugin: function() {
	    this.hot.sort = void 0;
	    $traceurRuntime.superGet(this, $ColumnSorting.prototype, "disablePlugin").call(this);
	  },
	  onAfterUpdateSettings: function() {
	    this.sortBySettings();
	  },
	  sortBySettings: function() {
	    var sortingSettings = this.hot.getSettings().columnSorting;
	    var loadedSortingState = this.loadSortingState();
	    var sortingColumn;
	    var sortingOrder;
	    if (typeof loadedSortingState === 'undefined') {
	      sortingColumn = sortingSettings.column;
	      sortingOrder = sortingSettings.sortOrder;
	    } else {
	      sortingColumn = loadedSortingState.sortColumn;
	      sortingOrder = loadedSortingState.sortOrder;
	    }
	    this.sortByColumn(sortingColumn, sortingOrder);
	  },
	  setSortingColumn: function(col, order) {
	    if (typeof col == 'undefined') {
	      this.hot.sortColumn = void 0;
	      this.hot.sortOrder = void 0;
	      return;
	    } else if (this.hot.sortColumn === col && typeof order == 'undefined') {
	      if (this.hot.sortOrder === false) {
	        this.hot.sortOrder = void 0;
	      } else {
	        this.hot.sortOrder = !this.hot.sortOrder;
	      }
	    } else {
	      this.hot.sortOrder = typeof order === 'undefined' ? true : order;
	    }
	    this.hot.sortColumn = col;
	  },
	  sortByColumn: function(col, order) {
	    this.setSortingColumn(col, order);
	    if (typeof this.hot.sortColumn == 'undefined') {
	      return;
	    }
	    Handsontable.hooks.run(this.hot, 'beforeColumnSort', this.hot.sortColumn, this.hot.sortOrder);
	    this.sort();
	    this.hot.render();
	    this.saveSortingState();
	    Handsontable.hooks.run(this.hot, 'afterColumnSort', this.hot.sortColumn, this.hot.sortOrder);
	  },
	  saveSortingState: function() {
	    var sortingState = {};
	    if (typeof this.hot.sortColumn != 'undefined') {
	      sortingState.sortColumn = this.hot.sortColumn;
	    }
	    if (typeof this.hot.sortOrder != 'undefined') {
	      sortingState.sortOrder = this.hot.sortOrder;
	    }
	    if (sortingState.hasOwnProperty('sortColumn') || sortingState.hasOwnProperty('sortOrder')) {
	      Handsontable.hooks.run(this.hot, 'persistentStateSave', 'columnSorting', sortingState);
	    }
	  },
	  loadSortingState: function() {
	    var storedState = {};
	    Handsontable.hooks.run(this.hot, 'persistentStateLoad', 'columnSorting', storedState);
	    return storedState.value;
	  },
	  bindColumnSortingAfterClick: function() {
	    if (this.bindedSortEvent) {
	      return;
	    }
	    var eventManager = eventManagerObject(this.hot),
	        _this = this;
	    this.bindedSortEvent = true;
	    eventManager.addEventListener(this.hot.rootElement, 'click', function(e) {
	      if (hasClass(e.target, 'columnSorting')) {
	        var col = getColumn(e.target);
	        if (col === this.lastSortedColumn) {
	          switch (_this.hot.sortOrder) {
	            case void 0:
	              _this.sortOrderClass = 'ascending';
	              break;
	            case true:
	              _this.sortOrderClass = 'descending';
	              break;
	            case false:
	              _this.sortOrderClass = void 0;
	          }
	        } else {
	          _this.sortOrderClass = 'ascending';
	        }
	        this.lastSortedColumn = col;
	        _this.sortByColumn(col);
	      }
	    });
	    function countRowHeaders() {
	      var THs = _this.hot.view.TBODY.querySelector('tr').querySelectorAll('th');
	      return THs.length;
	    }
	    function getColumn(target) {
	      var TH = closest(target, 'TH');
	      return _this.hot.view.wt.wtTable.getFirstRenderedColumn() + index(TH) - countRowHeaders();
	    }
	  },
	  enableObserveChangesPlugin: function() {
	    var _this = this;
	    this.hot._registerTimeout(setTimeout(function() {
	      _this.hot.updateSettings({observeChanges: true});
	    }, 0));
	  },
	  defaultSort: function(sortOrder) {
	    return function(a, b) {
	      if (typeof a[1] == 'string') {
	        a[1] = a[1].toLowerCase();
	      }
	      if (typeof b[1] == 'string') {
	        b[1] = b[1].toLowerCase();
	      }
	      if (a[1] === b[1]) {
	        return 0;
	      }
	      if (a[1] === null || a[1] === '') {
	        return 1;
	      }
	      if (b[1] === null || b[1] === '') {
	        return -1;
	      }
	      if (isNaN(a[1]) && !isNaN(b[1])) {
	        return sortOrder ? 1 : -1;
	      } else if (!isNaN(a[1]) && isNaN(b[1])) {
	        return sortOrder ? -1 : 1;
	      }
	      if (a[1] < b[1]) {
	        return sortOrder ? -1 : 1;
	      }
	      if (a[1] > b[1]) {
	        return sortOrder ? 1 : -1;
	      }
	      return 0;
	    };
	  },
	  dateSort: function(sortOrder) {
	    return function(a, b) {
	      if (a[1] === b[1]) {
	        return 0;
	      }
	      if (a[1] === null || a[1] === '') {
	        return 1;
	      }
	      if (b[1] === null || b[1] === '') {
	        return -1;
	      }
	      var aDate = new Date(a[1]);
	      var bDate = new Date(b[1]);
	      if (aDate < bDate) {
	        return sortOrder ? -1 : 1;
	      }
	      if (aDate > bDate) {
	        return sortOrder ? 1 : -1;
	      }
	      return 0;
	    };
	  },
	  sort: function() {
	    if (typeof this.hot.sortOrder == 'undefined') {
	      return;
	    }
	    var colMeta,
	        sortFunction;
	    this.hot.sortingEnabled = false;
	    this.hot.sortIndex.length = 0;
	    var colOffset = this.hot.colOffset();
	    for (var i = 0,
	        ilen = this.hot.countRows() - this.hot.getSettings().minSpareRows; i < ilen; i++) {
	      this.hot.sortIndex.push([i, this.hot.getDataAtCell(i, this.hot.sortColumn + colOffset)]);
	    }
	    colMeta = this.hot.getCellMeta(0, this.hot.sortColumn);
	    this.sortIndicators[this.hot.sortColumn] = colMeta.sortIndicator;
	    switch (colMeta.type) {
	      case 'date':
	        sortFunction = this.dateSort;
	        break;
	      default:
	        sortFunction = this.defaultSort;
	    }
	    this.hot.sortIndex.sort(sortFunction(this.hot.sortOrder));
	    for (var i = this.hot.sortIndex.length; i < this.hot.countRows(); i++) {
	      this.hot.sortIndex.push([i, this.hot.getDataAtCell(i, this.hot.sortColumn + colOffset)]);
	    }
	    this.hot.sortingEnabled = true;
	  },
	  translateRow: function(row) {
	    if (this.hot.sortingEnabled && (typeof this.hot.sortOrder !== 'undefined') && this.hot.sortIndex && this.hot.sortIndex.length && this.hot.sortIndex[row]) {
	      return this.hot.sortIndex[row][0];
	    }
	    return row;
	  },
	  untranslateRow: function(row) {
	    if (this.hot.sortingEnabled && this.hot.sortIndex && this.hot.sortIndex.length) {
	      for (var i = 0; i < this.hot.sortIndex.length; i++) {
	        if (this.hot.sortIndex[i][0] == row) {
	          return i;
	        }
	      }
	    }
	  },
	  getColHeader: function(col, TH) {
	    var headerLink = TH.querySelector('.colHeader');
	    var colspan = TH.getAttribute('colspan');
	    var TRs = TH.parentNode.parentNode.childNodes;
	    var headerLevel = Array.prototype.indexOf.call(TRs, TH.parentNode);
	    headerLevel = headerLevel - TRs.length;
	    if (!headerLink) {
	      return;
	    }
	    if (this.hot.getSettings().columnSorting && col >= 0 && headerLevel === -1) {
	      addClass(headerLink, 'columnSorting');
	    }
	    removeClass(headerLink, 'descending');
	    removeClass(headerLink, 'ascending');
	    if (this.sortIndicators[col]) {
	      if (col === this.hot.sortColumn) {
	        if (this.sortOrderClass === 'ascending') {
	          addClass(headerLink, 'ascending');
	        } else if (this.sortOrderClass === 'descending') {
	          addClass(headerLink, 'descending');
	        }
	      }
	    }
	  },
	  isSorted: function() {
	    return typeof this.hot.sortColumn != 'undefined';
	  },
	  afterCreateRow: function(index, amount) {
	    if (!this.isSorted()) {
	      return;
	    }
	    for (var i = 0; i < this.hot.sortIndex.length; i++) {
	      if (this.hot.sortIndex[i][0] >= index) {
	        this.hot.sortIndex[i][0] += amount;
	      }
	    }
	    for (var i = 0; i < amount; i++) {
	      this.hot.sortIndex.splice(index + i, 0, [index + i, this.hot.getData()[index + i][this.hot.sortColumn + this.hot.colOffset()]]);
	    }
	    this.saveSortingState();
	  },
	  afterRemoveRow: function(index, amount) {
	    if (!this.isSorted()) {
	      return;
	    }
	    var physicalRemovedIndex = this.translateRow(index);
	    this.hot.sortIndex.splice(index, amount);
	    for (var i = 0; i < this.hot.sortIndex.length; i++) {
	      if (this.hot.sortIndex[i][0] > physicalRemovedIndex) {
	        this.hot.sortIndex[i][0] -= amount;
	      }
	    }
	    this.saveSortingState();
	  }
	}, {}, BasePlugin);
	var $__default = ColumnSorting;
	registerPlugin('columnSorting', ColumnSorting);

	//# 
	},{"_base":56,"eventManager":40,"helpers/dom/element":44,"plugins":55}],61:[function(require,module,exports){
	"use strict";
	Object.defineProperties(exports, {
	  CommentEditor: {get: function() {
	      return CommentEditor;
	    }},
	  __esModule: {value: true}
	});
	var $___46__46__47__46__46__47_helpers_47_dom_47_element__;
	var addClass = ($___46__46__47__46__46__47_helpers_47_dom_47_element__ = require("helpers/dom/element"), $___46__46__47__46__46__47_helpers_47_dom_47_element__ && $___46__46__47__46__46__47_helpers_47_dom_47_element__.__esModule && $___46__46__47__46__46__47_helpers_47_dom_47_element__ || {default: $___46__46__47__46__46__47_helpers_47_dom_47_element__}).addClass;
	var CommentEditor = function CommentEditor() {
	  this.editor = this.createEditor();
	  this.editorStyle = this.editor.style;
	  this.editorStyle.position = 'absolute';
	  this.editorStyle.zIndex = 100;
	  this.hide();
	};
	var $CommentEditor = CommentEditor;
	($traceurRuntime.createClass)(CommentEditor, {
	  setPosition: function(x, y) {
	    this.editorStyle.left = x + 'px';
	    this.editorStyle.top = y + 'px';
	  },
	  show: function() {
	    this.editorStyle.display = 'block';
	  },
	  hide: function() {
	    this.editorStyle.display = 'none';
	  },
	  isVisible: function() {
	    return this.editorStyle.display === 'block';
	  },
	  setValue: function() {
	    var value = arguments[0] !== (void 0) ? arguments[0] : '';
	    value = value || '';
	    this.getInputElement().value = value;
	  },
	  getValue: function() {
	    return this.getInputElement().value;
	  },
	  isFocused: function() {
	    return document.activeElement === this.getInputElement();
	  },
	  focus: function() {
	    this.getInputElement().focus();
	  },
	  createEditor: function() {
	    var container = document.querySelector('.' + $CommentEditor.CLASS_EDITOR_CONTAINER);
	    var editor;
	    var textArea;
	    if (!container) {
	      container = document.createElement('div');
	      addClass(container, $CommentEditor.CLASS_EDITOR_CONTAINER);
	      document.body.appendChild(container);
	    }
	    editor = document.createElement('div');
	    addClass(editor, $CommentEditor.CLASS_EDITOR);
	    textArea = document.createElement('textarea');
	    addClass(textArea, $CommentEditor.CLASS_INPUT);
	    editor.appendChild(textArea);
	    container.appendChild(editor);
	    return editor;
	  },
	  getInputElement: function() {
	    return this.editor.querySelector('.' + $CommentEditor.CLASS_INPUT);
	  },
	  destroy: function() {
	    this.editor.parentNode.removeChild(this.editor);
	    this.editor = null;
	    this.editorStyle = null;
	  }
	}, {
	  get CLASS_EDITOR_CONTAINER() {
	    return 'htCommentsContainer';
	  },
	  get CLASS_EDITOR() {
	    return 'htComments';
	  },
	  get CLASS_INPUT() {
	    return 'htCommentTextArea';
	  },
	  get CLASS_CELL() {
	    return 'htCommentCell';
	  }
	});
	;

	//# 
	},{"helpers/dom/element":44}],62:[function(require,module,exports){
	"use strict";
	Object.defineProperties(exports, {
	  Comments: {get: function() {
	      return Comments;
	    }},
	  __esModule: {value: true}
	});
	var $___46__46__47__46__46__47_helpers_47_dom_47_element__,
	    $___46__46__47__46__46__47_eventManager__,
	    $___46__46__47__46__46__47_3rdparty_47_walkontable_47_src_47_cell_47_coords__,
	    $___46__46__47__46__46__47_plugins__,
	    $___46__46__47__95_base__,
	    $__commentEditor__;
	var $__0 = ($___46__46__47__46__46__47_helpers_47_dom_47_element__ = require("helpers/dom/element"), $___46__46__47__46__46__47_helpers_47_dom_47_element__ && $___46__46__47__46__46__47_helpers_47_dom_47_element__.__esModule && $___46__46__47__46__46__47_helpers_47_dom_47_element__ || {default: $___46__46__47__46__46__47_helpers_47_dom_47_element__}),
	    addClass = $__0.addClass,
	    closest = $__0.closest,
	    getWindowScrollLeft = $__0.getWindowScrollLeft,
	    getWindowScrollTop = $__0.getWindowScrollTop,
	    hasClass = $__0.hasClass,
	    offset = $__0.offset;
	var EventManager = ($___46__46__47__46__46__47_eventManager__ = require("eventManager"), $___46__46__47__46__46__47_eventManager__ && $___46__46__47__46__46__47_eventManager__.__esModule && $___46__46__47__46__46__47_eventManager__ || {default: $___46__46__47__46__46__47_eventManager__}).EventManager;
	var WalkontableCellCoords = ($___46__46__47__46__46__47_3rdparty_47_walkontable_47_src_47_cell_47_coords__ = require("3rdparty/walkontable/src/cell/coords"), $___46__46__47__46__46__47_3rdparty_47_walkontable_47_src_47_cell_47_coords__ && $___46__46__47__46__46__47_3rdparty_47_walkontable_47_src_47_cell_47_coords__.__esModule && $___46__46__47__46__46__47_3rdparty_47_walkontable_47_src_47_cell_47_coords__ || {default: $___46__46__47__46__46__47_3rdparty_47_walkontable_47_src_47_cell_47_coords__}).WalkontableCellCoords;
	var $__3 = ($___46__46__47__46__46__47_plugins__ = require("plugins"), $___46__46__47__46__46__47_plugins__ && $___46__46__47__46__46__47_plugins__.__esModule && $___46__46__47__46__46__47_plugins__ || {default: $___46__46__47__46__46__47_plugins__}),
	    registerPlugin = $__3.registerPlugin,
	    getPlugin = $__3.getPlugin;
	var BasePlugin = ($___46__46__47__95_base__ = require("_base"), $___46__46__47__95_base__ && $___46__46__47__95_base__.__esModule && $___46__46__47__95_base__ || {default: $___46__46__47__95_base__}).default;
	var CommentEditor = ($__commentEditor__ = require("commentEditor"), $__commentEditor__ && $__commentEditor__.__esModule && $__commentEditor__ || {default: $__commentEditor__}).CommentEditor;
	var Comments = function Comments(hotInstance) {
	  $traceurRuntime.superConstructor($Comments).call(this, hotInstance);
	  this.editor = null;
	  this.eventManager = null;
	  this.range = {};
	  this.mouseDown = false;
	  this.contextMenuEvent = false;
	  this.timer = null;
	};
	var $Comments = Comments;
	($traceurRuntime.createClass)(Comments, {
	  isEnabled: function() {
	    return this.hot.getSettings().comments;
	  },
	  enablePlugin: function() {
	    var $__6 = this;
	    if (this.enabled) {
	      return;
	    }
	    if (!this.editor) {
	      this.editor = new CommentEditor();
	    }
	    if (!this.eventManager) {
	      this.eventManager = new EventManager(this);
	    }
	    this.addHook('afterContextMenuDefaultOptions', (function(options) {
	      return $__6.addToContextMenu(options);
	    }));
	    this.addHook('afterRenderer', (function(TD, row, col, prop, value, cellProperties) {
	      return $__6.onAfterRenderer(TD, cellProperties);
	    }));
	    this.addHook('afterScrollVertically', (function() {
	      return $__6.refreshEditorPosition();
	    }));
	    this.addHook('afterColumnResize', (function() {
	      return $__6.refreshEditorPosition();
	    }));
	    this.addHook('afterRowResize', (function() {
	      return $__6.refreshEditorPosition();
	    }));
	    this.registerListeners();
	    $traceurRuntime.superGet(this, $Comments.prototype, "enablePlugin").call(this);
	  },
	  disablePlugin: function() {
	    $traceurRuntime.superGet(this, $Comments.prototype, "disablePlugin").call(this);
	  },
	  registerListeners: function() {
	    var $__6 = this;
	    this.eventManager.addEventListener(document, 'mouseover', (function(event) {
	      return $__6.onMouseOver(event);
	    }));
	    this.eventManager.addEventListener(document, 'mousedown', (function(event) {
	      return $__6.onMouseDown(event);
	    }));
	    this.eventManager.addEventListener(document, 'mousemove', (function(event) {
	      return $__6.onMouseMove(event);
	    }));
	    this.eventManager.addEventListener(document, 'mouseup', (function(event) {
	      return $__6.onMouseUp(event);
	    }));
	    this.eventManager.addEventListener(this.editor.getInputElement(), 'blur', (function(event) {
	      return $__6.onEditorBlur(event);
	    }));
	  },
	  setRange: function(range) {
	    this.range = range;
	  },
	  clearRange: function() {
	    this.range = {};
	  },
	  targetIsCellWithComment: function(event) {
	    return hasClass(event.target, 'htCommentCell') && closest(event.target, [this.hot.rootElement]) ? true : false;
	  },
	  targetIsCommentTextArea: function(event) {
	    return this.editor.getInputElement() === event.target;
	  },
	  saveComment: function() {
	    if (!this.range.from) {
	      throw new Error('Before using this method, first set cell range (hot.getPlugin("comment").setRange())');
	    }
	    var comment = this.editor.getValue();
	    var row = this.range.from.row;
	    var col = this.range.from.col;
	    this.hot.setCellMeta(row, col, 'comment', comment);
	    this.hot.render();
	  },
	  saveCommentAtCell: function(row, col) {
	    this.setRange({from: new WalkontableCellCoords(row, col)});
	    this.saveComment();
	  },
	  removeComment: function() {
	    if (!this.range.from) {
	      throw new Error('Before using this method, first set cell range (hot.getPlugin("comment").setRange())');
	    }
	    this.hot.removeCellMeta(this.range.from.row, this.range.from.col, 'comment');
	    this.hot.render();
	    this.hide();
	  },
	  removeCommentAtCell: function(row, col) {
	    this.setRange({from: new WalkontableCellCoords(row, col)});
	    this.removeComment();
	  },
	  show: function() {
	    if (!this.range.from) {
	      throw new Error('Before using this method, first set cell range (hot.getPlugin("comment").setRange())');
	    }
	    var meta = this.hot.getCellMeta(this.range.from.row, this.range.from.col);
	    this.refreshEditorPosition(true);
	    this.editor.setValue(meta.comment || '');
	    this.editor.show();
	    return true;
	  },
	  showAtCell: function(row, col) {
	    this.setRange({from: new WalkontableCellCoords(row, col)});
	    return this.show();
	  },
	  hide: function() {
	    this.editor.hide();
	  },
	  refreshEditorPosition: function() {
	    var force = arguments[0] !== (void 0) ? arguments[0] : false;
	    if (!force && (!this.range.from || !this.editor.isVisible())) {
	      return;
	    }
	    var TD = this.hot.view.wt.wtTable.getCell(this.range.from);
	    var cellOffset = offset(TD);
	    var lastColWidth = this.hot.getColWidth(this.range.from.col);
	    var cellTopOffset = cellOffset.top;
	    var cellLeftOffset = cellOffset.left;
	    var verticalCompensation = 0;
	    var horizontalCompensation = 0;
	    if (this.hot.view.wt.wtViewport.hasVerticalScroll()) {
	      cellTopOffset = cellTopOffset - this.hot.view.wt.wtOverlays.topOverlay.getScrollPosition();
	      verticalCompensation = 20;
	    }
	    if (this.hot.view.wt.wtViewport.hasHorizontalScroll()) {
	      cellLeftOffset = cellLeftOffset - this.hot.view.wt.wtOverlays.leftOverlay.getScrollPosition();
	      horizontalCompensation = 20;
	    }
	    var x = cellLeftOffset + lastColWidth;
	    var y = cellTopOffset;
	    var rect = this.hot.view.wt.wtTable.holder.getBoundingClientRect();
	    var holderPos = {
	      left: rect.left + getWindowScrollLeft() + horizontalCompensation,
	      right: rect.right + getWindowScrollLeft() - 15,
	      top: rect.top + getWindowScrollTop() + verticalCompensation,
	      bottom: rect.bottom + getWindowScrollTop()
	    };
	    if (x <= holderPos.left || x > holderPos.right || y <= holderPos.top || y > holderPos.bottom) {
	      this.hide();
	    } else {
	      this.editor.setPosition(x, y);
	    }
	  },
	  onMouseDown: function(event) {
	    this.mouseDown = true;
	    if (!this.hot.view || !this.hot.view.wt) {
	      return;
	    }
	    if (!this.contextMenuEvent && !this.targetIsCommentTextArea(event) && !this.targetIsCellWithComment(event)) {
	      this.hide();
	    }
	    this.contextMenuEvent = false;
	  },
	  onMouseOver: function(event) {
	    if (this.mouseDown || this.editor.isFocused()) {
	      return;
	    }
	    if (this.targetIsCellWithComment(event)) {
	      var coordinates = this.hot.view.wt.wtTable.getCoords(event.target);
	      var range = {from: new WalkontableCellCoords(coordinates.row, coordinates.col)};
	      this.setRange(range);
	      this.show();
	    } else if (!this.targetIsCommentTextArea(event) && !this.editor.isFocused()) {
	      this.hide();
	    }
	  },
	  onMouseMove: function(event) {
	    var $__6 = this;
	    if (this.targetIsCommentTextArea(event)) {
	      this.mouseDown = true;
	      clearTimeout(this.timer);
	      this.timer = setTimeout((function() {
	        $__6.mouseDown = false;
	      }), 200);
	    }
	  },
	  onMouseUp: function(event) {
	    this.mouseDown = false;
	  },
	  onAfterRenderer: function(TD, cellProperties) {
	    if (cellProperties.comment) {
	      addClass(TD, cellProperties.commentedCellClassName);
	    }
	  },
	  onEditorBlur: function(event) {
	    this.saveComment();
	  },
	  checkSelectionCommentsConsistency: function() {
	    var selected = this.hot.getSelectedRange();
	    if (!selected) {
	      return false;
	    }
	    var hasComment = false;
	    var cell = selected.from;
	    if (this.hot.getCellMeta(cell.row, cell.col).comment) {
	      hasComment = true;
	    }
	    return hasComment;
	  },
	  onContextMenuAddComment: function() {
	    var $__6 = this;
	    var coords = this.hot.getSelectedRange();
	    this.contextMenuEvent = true;
	    this.setRange({from: coords.from});
	    this.show();
	    setTimeout((function() {
	      if ($__6.hot) {
	        $__6.hot.deselectCell();
	        $__6.editor.focus();
	      }
	    }), 10);
	  },
	  onContextMenuRemoveComment: function(key, selection) {
	    this.contextMenuEvent = true;
	    this.removeCommentAtCell(selection.start.row, selection.start.col);
	  },
	  addToContextMenu: function(defaultOptions) {
	    var $__6 = this;
	    defaultOptions.items.push(Handsontable.plugins.ContextMenu.SEPARATOR, {
	      key: 'commentsAddEdit',
	      name: (function() {
	        return $__6.checkSelectionCommentsConsistency() ? 'Edit Comment' : 'Add Comment';
	      }),
	      callback: (function() {
	        return $__6.onContextMenuAddComment();
	      }),
	      disabled: function() {
	        return this.getSelected() ? false : true;
	      }
	    }, {
	      key: 'commentsRemove',
	      name: function() {
	        return 'Delete Comment';
	      },
	      callback: (function(key, selection) {
	        return $__6.onContextMenuRemoveComment(key, selection);
	      }),
	      disabled: (function() {
	        return !$__6.checkSelectionCommentsConsistency();
	      })
	    });
	  },
	  destroy: function() {
	    if (this.editor) {
	      this.editor.destroy();
	    }
	    $traceurRuntime.superGet(this, $Comments.prototype, "destroy").call(this);
	  }
	}, {}, BasePlugin);
	;
	registerPlugin('comments', Comments);

	//# 
	},{"3rdparty/walkontable/src/cell/coords":5,"_base":56,"commentEditor":61,"eventManager":40,"helpers/dom/element":44,"plugins":55}],63:[function(require,module,exports){
	"use strict";
	Object.defineProperties(exports, {
	  CommandExecutor: {get: function() {
	      return CommandExecutor;
	    }},
	  __esModule: {value: true}
	});
	var $___46__46__47__46__46__47_helpers_47_array__;
	var arrayEach = ($___46__46__47__46__46__47_helpers_47_array__ = require("helpers/array"), $___46__46__47__46__46__47_helpers_47_array__ && $___46__46__47__46__46__47_helpers_47_array__.__esModule && $___46__46__47__46__46__47_helpers_47_array__ || {default: $___46__46__47__46__46__47_helpers_47_array__}).arrayEach;
	var CommandExecutor = function CommandExecutor(hotInstance) {
	  this.hot = hotInstance;
	  this.commands = {};
	  this.commonCallback = null;
	};
	($traceurRuntime.createClass)(CommandExecutor, {
	  registerCommand: function(name, commandDescriptor) {
	    this.commands[name] = commandDescriptor;
	  },
	  setCommonCallback: function(callback) {
	    this.commonCallback = callback;
	  },
	  execute: function(commandName) {
	    for (var params = [],
	        $__3 = 1; $__3 < arguments.length; $__3++)
	      params[$__3 - 1] = arguments[$__3];
	    var $__1 = this;
	    var commandSplit = commandName.split(':');
	    commandName = commandSplit[0];
	    var subCommandName = commandSplit.length === 2 ? commandSplit[1] : null;
	    var command = this.commands[commandName];
	    if (!command) {
	      throw new Error(("Menu command '" + commandName + "' not exists."));
	    }
	    if (subCommandName && command.submenu) {
	      command = findSubCommand(subCommandName, command.submenu.items);
	    }
	    if (command.disabled === true) {
	      return;
	    }
	    if (typeof command.disabled == 'function' && command.disabled.call(this.hot) === true) {
	      return;
	    }
	    if (command.hasOwnProperty('submenu')) {
	      return;
	    }
	    var callbacks = [];
	    if (typeof command.callback === 'function') {
	      callbacks.push(command.callback);
	    }
	    if (typeof this.commonCallback === 'function') {
	      callbacks.push(this.commonCallback);
	    }
	    params.unshift(commandSplit.join(':'));
	    arrayEach(callbacks, (function(callback) {
	      return callback.apply($__1.hot, params);
	    }));
	  }
	}, {});
	function findSubCommand(subCommandName, subCommands) {
	  var command;
	  arrayEach(subCommands, (function(cmd) {
	    var cmds = cmd.key ? cmd.key.split(':') : null;
	    if (Array.isArray(cmds) && cmds[1] === subCommandName) {
	      command = cmd;
	      return false;
	    }
	  }));
	  return command;
	}
	;

	//# 
	},{"helpers/array":41}],64:[function(require,module,exports){
	"use strict";
	Object.defineProperties(exports, {
	  ContextMenu: {get: function() {
	      return ContextMenu;
	    }},
	  __esModule: {value: true}
	});
	var $___46__46__47__95_base__,
	    $___46__46__47__46__46__47_helpers_47_array__,
	    $__commandExecutor__,
	    $___46__46__47__46__46__47_eventManager__,
	    $___46__46__47__46__46__47_helpers_47_dom_47_element__,
	    $__itemsFactory__,
	    $__menu__,
	    $___46__46__47__46__46__47_helpers_47_object__,
	    $___46__46__47__46__46__47_plugins__,
	    $___46__46__47__46__46__47_helpers_47_dom_47_event__,
	    $__predefinedItems__;
	var BasePlugin = ($___46__46__47__95_base__ = require("_base"), $___46__46__47__95_base__ && $___46__46__47__95_base__.__esModule && $___46__46__47__95_base__ || {default: $___46__46__47__95_base__}).default;
	var arrayEach = ($___46__46__47__46__46__47_helpers_47_array__ = require("helpers/array"), $___46__46__47__46__46__47_helpers_47_array__ && $___46__46__47__46__46__47_helpers_47_array__.__esModule && $___46__46__47__46__46__47_helpers_47_array__ || {default: $___46__46__47__46__46__47_helpers_47_array__}).arrayEach;
	var CommandExecutor = ($__commandExecutor__ = require("commandExecutor"), $__commandExecutor__ && $__commandExecutor__.__esModule && $__commandExecutor__ || {default: $__commandExecutor__}).CommandExecutor;
	var EventManager = ($___46__46__47__46__46__47_eventManager__ = require("eventManager"), $___46__46__47__46__46__47_eventManager__ && $___46__46__47__46__46__47_eventManager__.__esModule && $___46__46__47__46__46__47_eventManager__ || {default: $___46__46__47__46__46__47_eventManager__}).EventManager;
	var hasClass = ($___46__46__47__46__46__47_helpers_47_dom_47_element__ = require("helpers/dom/element"), $___46__46__47__46__46__47_helpers_47_dom_47_element__ && $___46__46__47__46__46__47_helpers_47_dom_47_element__.__esModule && $___46__46__47__46__46__47_helpers_47_dom_47_element__ || {default: $___46__46__47__46__46__47_helpers_47_dom_47_element__}).hasClass;
	var ItemsFactory = ($__itemsFactory__ = require("itemsFactory"), $__itemsFactory__ && $__itemsFactory__.__esModule && $__itemsFactory__ || {default: $__itemsFactory__}).ItemsFactory;
	var Menu = ($__menu__ = require("menu"), $__menu__ && $__menu__.__esModule && $__menu__ || {default: $__menu__}).Menu;
	var $__7 = ($___46__46__47__46__46__47_helpers_47_object__ = require("helpers/object"), $___46__46__47__46__46__47_helpers_47_object__ && $___46__46__47__46__46__47_helpers_47_object__.__esModule && $___46__46__47__46__46__47_helpers_47_object__ || {default: $___46__46__47__46__46__47_helpers_47_object__}),
	    objectEach = $__7.objectEach,
	    mixin = $__7.mixin;
	var registerPlugin = ($___46__46__47__46__46__47_plugins__ = require("plugins"), $___46__46__47__46__46__47_plugins__ && $___46__46__47__46__46__47_plugins__.__esModule && $___46__46__47__46__46__47_plugins__ || {default: $___46__46__47__46__46__47_plugins__}).registerPlugin;
	var stopPropagation = ($___46__46__47__46__46__47_helpers_47_dom_47_event__ = require("helpers/dom/event"), $___46__46__47__46__46__47_helpers_47_dom_47_event__ && $___46__46__47__46__46__47_helpers_47_dom_47_event__.__esModule && $___46__46__47__46__46__47_helpers_47_dom_47_event__ || {default: $___46__46__47__46__46__47_helpers_47_dom_47_event__}).stopPropagation;
	var $__10 = ($__predefinedItems__ = require("predefinedItems"), $__predefinedItems__ && $__predefinedItems__.__esModule && $__predefinedItems__ || {default: $__predefinedItems__}),
	    ROW_ABOVE = $__10.ROW_ABOVE,
	    ROW_BELOW = $__10.ROW_BELOW,
	    COLUMN_LEFT = $__10.COLUMN_LEFT,
	    COLUMN_RIGHT = $__10.COLUMN_RIGHT,
	    REMOVE_ROW = $__10.REMOVE_ROW,
	    REMOVE_COLUMN = $__10.REMOVE_COLUMN,
	    UNDO = $__10.UNDO,
	    REDO = $__10.REDO,
	    READ_ONLY = $__10.READ_ONLY,
	    ALIGNMENT = $__10.ALIGNMENT,
	    SEPARATOR = $__10.SEPARATOR,
	    predefinedItems = $__10.predefinedItems;
	var ContextMenu = function ContextMenu(hotInstance) {
	  $traceurRuntime.superConstructor($ContextMenu).call(this, hotInstance);
	  this.eventManager = new EventManager(this);
	  this.commandExecutor = new CommandExecutor(this.hot);
	  this.itemsFactory = null;
	  this.menu = null;
	};
	var $ContextMenu = ContextMenu;
	($traceurRuntime.createClass)(ContextMenu, {
	  isEnabled: function() {
	    return this.hot.getSettings().contextMenu;
	  },
	  enablePlugin: function() {
	    var $__11 = this;
	    if (this.enabled) {
	      return;
	    }
	    this.itemsFactory = new ItemsFactory(this.hot, $ContextMenu.DEFAULT_ITEMS);
	    var settings = this.hot.getSettings().contextMenu;
	    var predefinedItems = {items: this.itemsFactory.getVisibleItems(settings)};
	    this.registerEvents();
	    if (typeof settings.callback === 'function') {
	      this.commandExecutor.setCommonCallback(settings.callback);
	    }
	    $traceurRuntime.superGet(this, $ContextMenu.prototype, "enablePlugin").call(this);
	    this.callOnPluginsReady((function() {
	      $__11.hot.runHooks('afterContextMenuDefaultOptions', predefinedItems);
	      $__11.itemsFactory.setPredefinedItems(predefinedItems.items);
	      var menuItems = $__11.itemsFactory.getVisibleItems(settings);
	      $__11.menu = new Menu($__11.hot, {className: 'htContextMenu'});
	      $__11.menu.setMenuItems(menuItems);
	      $__11.menu.addLocalHook('afterOpen', (function() {
	        return $__11.hot.runHooks('afterContextMenuShow', $__11);
	      }));
	      $__11.menu.addLocalHook('afterClose', (function() {
	        return $__11.hot.runHooks('afterContextMenuHide', $__11);
	      }));
	      $__11.menu.addLocalHook('executeCommand', (function() {
	        for (var params = [],
	            $__13 = 0; $__13 < arguments.length; $__13++)
	          params[$__13] = arguments[$__13];
	        return $__11.executeCommand.apply($__11, params);
	      }));
	      arrayEach(menuItems, (function(command) {
	        return $__11.commandExecutor.registerCommand(command.key, command);
	      }));
	    }));
	  },
	  disablePlugin: function() {
	    this.close();
	    if (this.menu) {
	      this.menu.destroy();
	      this.menu = null;
	    }
	    $traceurRuntime.superGet(this, $ContextMenu.prototype, "disablePlugin").call(this);
	  },
	  registerEvents: function() {
	    var $__11 = this;
	    this.eventManager.addEventListener(this.hot.rootElement, 'contextmenu', (function(event) {
	      return $__11.onContextMenu(event);
	    }));
	  },
	  open: function(event) {
	    if (!this.menu) {
	      return;
	    }
	    this.menu.open();
	    this.menu.setPosition(event);
	    this.menu.hotMenu.isHotTableEnv = this.hot.isHotTableEnv;
	    Handsontable.eventManager.isHotTableEnv = this.hot.isHotTableEnv;
	  },
	  close: function() {
	    if (!this.menu) {
	      return;
	    }
	    this.menu.close();
	  },
	  executeCommand: function() {
	    for (var params = [],
	        $__13 = 0; $__13 < arguments.length; $__13++)
	      params[$__13] = arguments[$__13];
	    this.commandExecutor.execute.apply(this.commandExecutor, params);
	  },
	  destroy: function() {
	    this.close();
	    if (this.menu) {
	      this.menu.destroy();
	    }
	    $traceurRuntime.superGet(this, $ContextMenu.prototype, "destroy").call(this);
	  },
	  onContextMenu: function(event) {
	    var settings = this.hot.getSettings();
	    var showRowHeaders = settings.rowHeaders;
	    var showColHeaders = settings.colHeaders;
	    function isValidElement(element) {
	      return element.nodeName === 'TD' || element.parentNode.nodeName === 'TD';
	    }
	    var element = event.realTarget;
	    this.close();
	    event.preventDefault();
	    stopPropagation(event);
	    if (!(showRowHeaders || showColHeaders)) {
	      if (!isValidElement(element) && !(hasClass(element, 'current') && hasClass(element, 'wtBorder'))) {
	        return;
	      }
	    } else if (showRowHeaders && showColHeaders) {
	      var containsCornerHeader = element.parentNode.querySelectorAll('.cornerHeader').length > 0;
	      if (containsCornerHeader) {
	        return;
	      }
	    }
	    this.open(event);
	  }
	}, {get DEFAULT_ITEMS() {
	    return [ROW_ABOVE, ROW_BELOW, SEPARATOR, COLUMN_LEFT, COLUMN_RIGHT, SEPARATOR, REMOVE_ROW, REMOVE_COLUMN, SEPARATOR, UNDO, REDO, SEPARATOR, READ_ONLY, SEPARATOR, ALIGNMENT];
	  }}, BasePlugin);
	ContextMenu.SEPARATOR = {name: SEPARATOR};
	Handsontable.hooks.register('afterContextMenuDefaultOptions');
	Handsontable.hooks.register('afterContextMenuShow');
	Handsontable.hooks.register('afterContextMenuHide');
	Handsontable.hooks.register('afterContextMenuExecute');
	;
	registerPlugin('contextMenu', ContextMenu);

	//# 
	},{"_base":56,"commandExecutor":63,"eventManager":40,"helpers/array":41,"helpers/dom/element":44,"helpers/dom/event":45,"helpers/object":49,"itemsFactory":66,"menu":67,"plugins":55,"predefinedItems":68}],65:[function(require,module,exports){
	"use strict";
	Object.defineProperties(exports, {
	  Cursor: {get: function() {
	      return Cursor;
	    }},
	  __esModule: {value: true}
	});
	var $___46__46__47__46__46__47_helpers_47_dom_47_element__,
	    $___46__46__47__46__46__47_helpers_47_dom_47_event__;
	var $__0 = ($___46__46__47__46__46__47_helpers_47_dom_47_element__ = require("helpers/dom/element"), $___46__46__47__46__46__47_helpers_47_dom_47_element__ && $___46__46__47__46__46__47_helpers_47_dom_47_element__.__esModule && $___46__46__47__46__46__47_helpers_47_dom_47_element__ || {default: $___46__46__47__46__46__47_helpers_47_dom_47_element__}),
	    getWindowScrollLeft = $__0.getWindowScrollLeft,
	    getWindowScrollTop = $__0.getWindowScrollTop;
	var $__1 = ($___46__46__47__46__46__47_helpers_47_dom_47_event__ = require("helpers/dom/event"), $___46__46__47__46__46__47_helpers_47_dom_47_event__ && $___46__46__47__46__46__47_helpers_47_dom_47_event__.__esModule && $___46__46__47__46__46__47_helpers_47_dom_47_event__ || {default: $___46__46__47__46__46__47_helpers_47_dom_47_event__}),
	    pageX = $__1.pageX,
	    pageY = $__1.pageY;
	var Cursor = function Cursor(object) {
	  var windowScrollTop = getWindowScrollTop();
	  var windowScrollLeft = getWindowScrollLeft();
	  var top,
	      topRelative;
	  var left,
	      leftRelative;
	  var scrollTop,
	      scrollLeft;
	  var cellHeight,
	      cellWidth;
	  this.type = this.getSourceType(object);
	  if (this.type === 'literal') {
	    top = parseInt(object.top, 10);
	    left = parseInt(object.left, 10);
	    cellHeight = object.height;
	    cellWidth = object.width;
	  } else if (this.type === 'event') {
	    top = parseInt(pageY(object), 10);
	    left = parseInt(pageX(object), 10);
	    cellHeight = object.target.clientHeight;
	    cellWidth = object.target.clientWidth;
	  }
	  topRelative = top - windowScrollTop;
	  leftRelative = left - windowScrollLeft;
	  scrollTop = windowScrollTop;
	  scrollLeft = windowScrollLeft;
	  this.top = top;
	  this.topRelative = topRelative;
	  this.left = left;
	  this.leftRelative = leftRelative;
	  this.scrollTop = scrollTop;
	  this.scrollLeft = scrollLeft;
	  this.cellHeight = cellHeight;
	  this.cellWidth = cellWidth;
	};
	($traceurRuntime.createClass)(Cursor, {
	  getSourceType: function(object) {
	    var type = 'literal';
	    if (object instanceof Event) {
	      type = 'event';
	    }
	    return type;
	  },
	  fitsAbove: function(element) {
	    return this.topRelative >= element.offsetHeight;
	  },
	  fitsBelow: function(element) {
	    var viewportHeight = arguments[1] !== (void 0) ? arguments[1] : window.innerHeight;
	    return this.topRelative + element.offsetHeight <= viewportHeight;
	  },
	  fitsOnRight: function(element) {
	    var viewportWidth = arguments[1] !== (void 0) ? arguments[1] : window.innerWidth;
	    return this.leftRelative + this.cellWidth + element.offsetWidth <= viewportWidth;
	  },
	  fitsOnLeft: function(element) {
	    return this.leftRelative >= element.offsetWidth;
	  }
	}, {});
	;
	Handsontable.plugins.utils = Handsontable.plugins.utils || {};
	Handsontable.plugins.utils.Cursor = Cursor;

	//# 
	},{"helpers/dom/element":44,"helpers/dom/event":45}],66:[function(require,module,exports){
	"use strict";
	Object.defineProperties(exports, {
	  ItemsFactory: {get: function() {
	      return ItemsFactory;
	    }},
	  __esModule: {value: true}
	});
	var $___46__46__47__46__46__47_helpers_47_object__,
	    $___46__46__47__46__46__47_helpers_47_array__,
	    $__predefinedItems__;
	var $__0 = ($___46__46__47__46__46__47_helpers_47_object__ = require("helpers/object"), $___46__46__47__46__46__47_helpers_47_object__ && $___46__46__47__46__46__47_helpers_47_object__.__esModule && $___46__46__47__46__46__47_helpers_47_object__ || {default: $___46__46__47__46__46__47_helpers_47_object__}),
	    objectEach = $__0.objectEach,
	    isObject = $__0.isObject,
	    extend = $__0.extend;
	var arrayEach = ($___46__46__47__46__46__47_helpers_47_array__ = require("helpers/array"), $___46__46__47__46__46__47_helpers_47_array__ && $___46__46__47__46__46__47_helpers_47_array__.__esModule && $___46__46__47__46__46__47_helpers_47_array__ || {default: $___46__46__47__46__46__47_helpers_47_array__}).arrayEach;
	var $__2 = ($__predefinedItems__ = require("predefinedItems"), $__predefinedItems__ && $__predefinedItems__.__esModule && $__predefinedItems__ || {default: $__predefinedItems__}),
	    SEPARATOR = $__2.SEPARATOR,
	    ITEMS = $__2.ITEMS,
	    predefinedItems = $__2.predefinedItems;
	var ItemsFactory = function ItemsFactory(hotInstance) {
	  var orderPattern = arguments[1] !== (void 0) ? arguments[1] : null;
	  this.hot = hotInstance;
	  this.predefinedItems = predefinedItems();
	  this.defaultOrderPattern = orderPattern;
	};
	($traceurRuntime.createClass)(ItemsFactory, {
	  setPredefinedItems: function(predefinedItems) {
	    var $__3 = this;
	    var items = {};
	    this.defaultOrderPattern.length = 0;
	    objectEach(predefinedItems, (function(value, key) {
	      var menuItemKey = '';
	      if (value.name === SEPARATOR) {
	        items[SEPARATOR] = value;
	        menuItemKey = SEPARATOR;
	      } else if (isNaN(parseInt(key, 10))) {
	        value.key = value.key === void 0 ? key : value.key;
	        items[key] = value;
	        menuItemKey = value.key;
	      } else {
	        items[value.key] = value;
	        menuItemKey = value.key;
	      }
	      $__3.defaultOrderPattern.push(menuItemKey);
	    }));
	    this.predefinedItems = items;
	  },
	  getVisibleItems: function() {
	    var pattern = arguments[0] !== (void 0) ? arguments[0] : null;
	    var $__3 = this;
	    var visibleItems = {};
	    objectEach(this.predefinedItems, (function(value, key) {
	      if (!value.hidden || value.hidden && !value.hidden.apply($__3.hot)) {
	        visibleItems[key] = value;
	      }
	    }));
	    return getItems(pattern, this.defaultOrderPattern, visibleItems);
	  },
	  getItems: function() {
	    var pattern = arguments[0] !== (void 0) ? arguments[0] : null;
	    return getItems(pattern, this.defaultOrderPattern, this.predefinedItems);
	  }
	}, {});
	function getItems() {
	  var pattern = arguments[0] !== (void 0) ? arguments[0] : null;
	  var defaultPattern = arguments[1] !== (void 0) ? arguments[1] : [];
	  var items = arguments[2] !== (void 0) ? arguments[2] : {};
	  var result = [];
	  if (pattern && pattern.items) {
	    pattern = pattern.items;
	  } else if (!Array.isArray(pattern)) {
	    pattern = defaultPattern;
	  }
	  if (isObject(pattern)) {
	    objectEach(pattern, (function(value, key) {
	      var item = items[typeof value === 'string' ? value : key];
	      if (!item) {
	        item = value;
	      }
	      if (isObject(value)) {
	        extend(item, value);
	      } else if (typeof item === 'string') {
	        item = {name: item};
	      }
	      if (item.key === void 0) {
	        item.key = key;
	      }
	      result.push(item);
	    }));
	  } else {
	    arrayEach(pattern, (function(name, key) {
	      var item = items[name];
	      if (!item && ITEMS.indexOf(name) >= 0) {
	        return;
	      }
	      if (!item) {
	        item = {
	          name: name,
	          key: key + ''
	        };
	      }
	      if (isObject(name)) {
	        extend(item, name);
	      }
	      if (item.key === void 0) {
	        item.key = key;
	      }
	      result.push(item);
	    }));
	  }
	  if (result[0].name === SEPARATOR) {
	    result.shift();
	  }
	  return result;
	}
	;

	//# 
	},{"helpers/array":41,"helpers/object":49,"predefinedItems":68}],67:[function(require,module,exports){
	"use strict";
	Object.defineProperties(exports, {
	  Menu: {get: function() {
	      return Menu;
	    }},
	  __esModule: {value: true}
	});
	var $___46__46__47__46__46__47_helpers_47_dom_47_element__,
	    $___46__46__47__46__46__47_helpers_47_array__,
	    $__cursor__,
	    $___46__46__47__46__46__47_eventManager__,
	    $___46__46__47__46__46__47_helpers_47_object__,
	    $__utils__,
	    $___46__46__47__46__46__47_helpers_47_unicode__,
	    $___46__46__47__46__46__47_pluginHooks__,
	    $__predefinedItems__,
	    $___46__46__47__46__46__47_helpers_47_dom_47_event__;
	var $__0 = ($___46__46__47__46__46__47_helpers_47_dom_47_element__ = require("helpers/dom/element"), $___46__46__47__46__46__47_helpers_47_dom_47_element__ && $___46__46__47__46__46__47_helpers_47_dom_47_element__.__esModule && $___46__46__47__46__46__47_helpers_47_dom_47_element__ || {default: $___46__46__47__46__46__47_helpers_47_dom_47_element__}),
	    addClass = $__0.addClass,
	    empty = $__0.empty,
	    fastInnerHTML = $__0.fastInnerHTML,
	    getComputedStyle = $__0.getComputedStyle,
	    getScrollbarWidth = $__0.getScrollbarWidth,
	    getWindowScrollLeft = $__0.getWindowScrollLeft,
	    getWindowScrollTop = $__0.getWindowScrollTop,
	    hasClass = $__0.hasClass,
	    isChildOf = $__0.isChildOf,
	    removeClass = $__0.removeClass;
	var arrayEach = ($___46__46__47__46__46__47_helpers_47_array__ = require("helpers/array"), $___46__46__47__46__46__47_helpers_47_array__ && $___46__46__47__46__46__47_helpers_47_array__.__esModule && $___46__46__47__46__46__47_helpers_47_array__ || {default: $___46__46__47__46__46__47_helpers_47_array__}).arrayEach;
	var Cursor = ($__cursor__ = require("cursor"), $__cursor__ && $__cursor__.__esModule && $__cursor__ || {default: $__cursor__}).Cursor;
	var EventManager = ($___46__46__47__46__46__47_eventManager__ = require("eventManager"), $___46__46__47__46__46__47_eventManager__ && $___46__46__47__46__46__47_eventManager__.__esModule && $___46__46__47__46__46__47_eventManager__ || {default: $___46__46__47__46__46__47_eventManager__}).EventManager;
	var $__4 = ($___46__46__47__46__46__47_helpers_47_object__ = require("helpers/object"), $___46__46__47__46__46__47_helpers_47_object__ && $___46__46__47__46__46__47_helpers_47_object__.__esModule && $___46__46__47__46__46__47_helpers_47_object__ || {default: $___46__46__47__46__46__47_helpers_47_object__}),
	    extend = $__4.extend,
	    isObject = $__4.isObject,
	    objectEach = $__4.objectEach,
	    mixin = $__4.mixin;
	var $__5 = ($__utils__ = require("utils"), $__utils__ && $__utils__.__esModule && $__utils__ || {default: $__utils__}),
	    isSeparator = $__5.isSeparator,
	    isDisabled = $__5.isDisabled,
	    isSelectionDisabled = $__5.isSelectionDisabled,
	    hasSubMenu = $__5.hasSubMenu,
	    normalizeSelection = $__5.normalizeSelection;
	var KEY_CODES = ($___46__46__47__46__46__47_helpers_47_unicode__ = require("helpers/unicode"), $___46__46__47__46__46__47_helpers_47_unicode__ && $___46__46__47__46__46__47_helpers_47_unicode__.__esModule && $___46__46__47__46__46__47_helpers_47_unicode__ || {default: $___46__46__47__46__46__47_helpers_47_unicode__}).KEY_CODES;
	var localHooks = ($___46__46__47__46__46__47_pluginHooks__ = require("pluginHooks"), $___46__46__47__46__46__47_pluginHooks__ && $___46__46__47__46__46__47_pluginHooks__.__esModule && $___46__46__47__46__46__47_pluginHooks__ || {default: $___46__46__47__46__46__47_pluginHooks__}).localHooks;
	var $__8 = ($__predefinedItems__ = require("predefinedItems"), $__predefinedItems__ && $__predefinedItems__.__esModule && $__predefinedItems__ || {default: $__predefinedItems__}),
	    SEPARATOR = $__8.SEPARATOR,
	    predefinedItems = $__8.predefinedItems;
	var $__9 = ($___46__46__47__46__46__47_helpers_47_dom_47_event__ = require("helpers/dom/event"), $___46__46__47__46__46__47_helpers_47_dom_47_event__ && $___46__46__47__46__46__47_helpers_47_dom_47_event__.__esModule && $___46__46__47__46__46__47_helpers_47_dom_47_event__ || {default: $___46__46__47__46__46__47_helpers_47_dom_47_event__}),
	    stopPropagation = $__9.stopPropagation,
	    stopImmediatePropagation = $__9.stopImmediatePropagation,
	    pageX = $__9.pageX,
	    pageY = $__9.pageY;
	var Menu = function Menu(hotInstance) {
	  var options = arguments[1] !== (void 0) ? arguments[1] : {
	    parent: null,
	    name: null,
	    className: '',
	    keepInViewport: true
	  };
	  this.hot = hotInstance;
	  this.options = options;
	  this.eventManager = new EventManager(this);
	  this.container = this.createContainer(this.options.name);
	  this.hotMenu = null;
	  this.hotSubMenus = {};
	  this.parentMenu = this.options.parent || null;
	  this.menuItems = null;
	  this.origOutsideClickDeselects = null;
	  this._afterScrollCallback = null;
	  this.registerEvents();
	};
	var $Menu = Menu;
	($traceurRuntime.createClass)(Menu, {
	  registerEvents: function() {
	    var $__10 = this;
	    this.eventManager.addEventListener(document.documentElement, 'mousedown', (function(event) {
	      return $__10.onDocumentMouseDown(event);
	    }));
	  },
	  setMenuItems: function(menuItems) {
	    this.menuItems = menuItems;
	  },
	  isSubMenu: function() {
	    return this.parentMenu !== null;
	  },
	  open: function() {
	    var $__10 = this;
	    this.container.removeAttribute('style');
	    this.container.style.display = 'block';
	    var settings = {
	      data: this.menuItems,
	      colHeaders: false,
	      colWidths: [200],
	      autoRowSize: false,
	      readOnly: true,
	      copyPaste: false,
	      columns: [{
	        data: 'name',
	        renderer: (function(hot, TD, row, col, prop, value) {
	          return $__10.menuItemRenderer(hot, TD, row, col, prop, value);
	        })
	      }],
	      renderAllRows: true,
	      beforeKeyDown: (function(event) {
	        return $__10.onBeforeKeyDown(event);
	      }),
	      afterOnCellMouseOver: (function(event, coords, TD) {
	        return $__10.openSubMenu(coords.row);
	      })
	    };
	    this.origOutsideClickDeselects = this.hot.getSettings().outsideClickDeselects;
	    this.hot.getSettings().outsideClickDeselects = false;
	    this.hotMenu = new Handsontable.Core(this.container, settings);
	    this.hotMenu.addHook('afterInit', (function() {
	      return $__10.onAfterInit();
	    }));
	    this.hotMenu.init();
	    this.hotMenu.listen();
	    this.blockMainTableCallbacks();
	    this.runLocalHooks('afterOpen');
	  },
	  close: function() {
	    var closeParent = arguments[0] !== (void 0) ? arguments[0] : false;
	    if (!this.isOpened()) {
	      return;
	    }
	    if (closeParent && this.parentMenu) {
	      this.parentMenu.close();
	    } else {
	      this.closeAllSubMenus();
	      this.container.style.display = 'none';
	      this.releaseMainTableCallbacks();
	      this.hotMenu.destroy();
	      this.hotMenu = null;
	      this.hot.getSettings().outsideClickDeselects = this.origOutsideClickDeselects;
	      this.hot.listen();
	      this.runLocalHooks('afterClose');
	    }
	  },
	  openSubMenu: function(row) {
	    var cell = this.hotMenu.getCell(row, 0);
	    this.closeAllSubMenus();
	    if (!cell || !hasSubMenu(cell)) {
	      return false;
	    }
	    var dataItem = this.hotMenu.getData()[row];
	    var subMenu = new $Menu(this.hot, {
	      parent: this,
	      name: dataItem.name,
	      className: this.options.className
	    });
	    subMenu.setMenuItems(dataItem.submenu.items);
	    subMenu.open();
	    subMenu.setPosition(cell.getBoundingClientRect());
	    this.hotSubMenus[dataItem.key] = subMenu;
	    return subMenu;
	  },
	  closeSubMenu: function(row) {
	    var dataItem = this.hotMenu.getData()[row];
	    var menus = this.hotSubMenus[dataItem.key];
	    if (menus) {
	      menus.destroy();
	      delete this.hotSubMenus[dataItem.key];
	    }
	  },
	  closeAllSubMenus: function() {
	    var $__10 = this;
	    arrayEach(this.hotMenu.getData(), (function(value, row) {
	      return $__10.closeSubMenu(row);
	    }));
	  },
	  isAllSubMenusClosed: function() {
	    return Object.keys(this.hotSubMenus).length === 0;
	  },
	  destroy: function() {
	    this.clearLocalHooks();
	    this.close();
	    this.parentMenu = null;
	    this.eventManager.destroy();
	  },
	  isOpened: function() {
	    return this.hotMenu !== null;
	  },
	  executeCommand: function() {
	    var event = arguments[0];
	    if (!this.isOpened() || !this.hotMenu.getSelected()) {
	      return;
	    }
	    var selectedItem = this.hotMenu.getData()[this.hotMenu.getSelected()[0]];
	    this.runLocalHooks('select', selectedItem, event);
	    if (selectedItem.isCommand === false) {
	      return;
	    }
	    var selRange = this.hot.getSelectedRange();
	    var normalizedSelection = selRange ? normalizeSelection(selRange) : {};
	    this.runLocalHooks('executeCommand', selectedItem.key, normalizedSelection, event);
	    if (this.isSubMenu()) {
	      this.parentMenu.runLocalHooks('executeCommand', selectedItem.key, normalizedSelection, event);
	    }
	    this.close(true);
	  },
	  setPosition: function(coords) {
	    var cursor = new Cursor(coords);
	    if (this.options.keepInViewport) {
	      if (cursor.fitsBelow(this.container)) {
	        this.setPositionBelowCursor(cursor);
	      } else if (cursor.fitsAbove(this.container)) {
	        this.setPositionAboveCursor(cursor);
	      } else {
	        this.setPositionBelowCursor(cursor);
	      }
	      if (cursor.fitsOnRight(this.container)) {
	        this.setPositionOnRightOfCursor(cursor);
	      } else {
	        this.setPositionOnLeftOfCursor(cursor);
	      }
	    } else {
	      this.setPositionBelowCursor(cursor);
	      this.setPositionOnRightOfCursor(cursor);
	    }
	  },
	  setPositionAboveCursor: function(cursor) {
	    var top = cursor.top - this.container.offsetHeight;
	    if (this.isSubMenu()) {
	      top = window.scrollY + cursor.top + cursor.cellHeight - this.container.offsetHeight + 3;
	    }
	    this.container.style.top = top + 'px';
	  },
	  setPositionBelowCursor: function(cursor) {
	    var top = cursor.top - 1;
	    if (this.isSubMenu()) {
	      top = cursor.top + window.scrollY - 1;
	    }
	    this.container.style.top = top + 'px';
	  },
	  setPositionOnRightOfCursor: function(cursor) {
	    var left;
	    if (this.isSubMenu()) {
	      left = window.scrollX + 1 + cursor.left + cursor.cellWidth;
	    } else {
	      left = 1 + cursor.left;
	    }
	    this.container.style.left = left + 'px';
	  },
	  setPositionOnLeftOfCursor: function(cursor) {
	    this.container.style.left = (cursor.left - this.container.offsetWidth + getScrollbarWidth() + 4) + 'px';
	  },
	  selectFirstCell: function() {
	    var cell = this.hotMenu.getCell(0, 0);
	    if (isSeparator(cell) || isDisabled(cell) || isSelectionDisabled(cell)) {
	      this.selectNextCell(0, 0);
	    } else {
	      this.hotMenu.selectCell(0, 0);
	    }
	  },
	  selectLastCell: function() {
	    var lastRow = this.hotMenu.countRows() - 1;
	    var cell = this.hotMenu.getCell(lastRow, 0);
	    if (isSeparator(cell) || isDisabled(cell) || isSelectionDisabled(cell)) {
	      this.selectPrevCell(lastRow, 0);
	    } else {
	      this.hotMenu.selectCell(lastRow, 0);
	    }
	  },
	  selectNextCell: function(row, col) {
	    var nextRow = row + 1;
	    var cell = nextRow < this.hotMenu.countRows() ? this.hotMenu.getCell(nextRow, col) : null;
	    if (!cell) {
	      return;
	    }
	    if (isSeparator(cell) || isDisabled(cell) || isSelectionDisabled(cell)) {
	      this.selectNextCell(nextRow, col);
	    } else {
	      this.hotMenu.selectCell(nextRow, col);
	    }
	  },
	  selectPrevCell: function(row, col) {
	    var prevRow = row - 1;
	    var cell = prevRow >= 0 ? this.hotMenu.getCell(prevRow, col) : null;
	    if (!cell) {
	      return;
	    }
	    if (isSeparator(cell) || isDisabled(cell) || isSelectionDisabled(cell)) {
	      this.selectPrevCell(prevRow, col);
	    } else {
	      this.hotMenu.selectCell(prevRow, col);
	    }
	  },
	  menuItemRenderer: function(hot, TD, row, col, prop, value) {
	    var $__10 = this;
	    var item = hot.getData()[row];
	    var wrapper = document.createElement('div');
	    var isSubMenu = (function(item) {
	      return item.hasOwnProperty('submenu');
	    });
	    var itemIsSeparator = (function(item) {
	      return new RegExp(SEPARATOR, 'i').test(item.name);
	    });
	    var itemIsDisabled = (function(item) {
	      return item.disabled === true || (typeof item.disabled == 'function' && item.disabled.call($__10.hot) === true);
	    });
	    var itemIsSelectionDisabled = (function(item) {
	      return item.disableSelection;
	    });
	    if (typeof value === 'function') {
	      value = value.call(this.hot);
	    }
	    empty(TD);
	    addClass(wrapper, 'htItemWrapper');
	    TD.appendChild(wrapper);
	    if (itemIsSeparator(item)) {
	      addClass(TD, 'htSeparator');
	    } else if (typeof item.renderer === 'function') {
	      addClass(TD, 'htCustomMenuRenderer');
	      TD.appendChild(item.renderer(hot, wrapper, row, col, prop, value));
	    } else {
	      fastInnerHTML(wrapper, value);
	    }
	    if (itemIsDisabled(item)) {
	      addClass(TD, 'htDisabled');
	      this.eventManager.addEventListener(wrapper, 'mouseenter', (function() {
	        return hot.deselectCell();
	      }));
	    } else if (itemIsSelectionDisabled(item)) {
	      addClass(TD, 'htSelectionDisabled');
	      this.eventManager.addEventListener(wrapper, 'mouseenter', (function() {
	        return hot.deselectCell();
	      }));
	    } else if (isSubMenu(item)) {
	      addClass(TD, 'htSubmenu');
	      if (itemIsSelectionDisabled(item)) {
	        this.eventManager.addEventListener(wrapper, 'mouseenter', (function() {
	          return hot.deselectCell();
	        }));
	      } else {
	        this.eventManager.addEventListener(wrapper, 'mouseenter', (function() {
	          return hot.selectCell(row, col);
	        }));
	      }
	    } else {
	      removeClass(TD, 'htSubmenu');
	      removeClass(TD, 'htDisabled');
	      if (itemIsSelectionDisabled(item)) {
	        this.eventManager.addEventListener(wrapper, 'mouseenter', (function() {
	          return hot.deselectCell();
	        }));
	      } else {
	        this.eventManager.addEventListener(wrapper, 'mouseenter', (function() {
	          return hot.selectCell(row, col);
	        }));
	      }
	    }
	  },
	  createContainer: function() {
	    var name = arguments[0] !== (void 0) ? arguments[0] : null;
	    if (name) {
	      name = name.replace(/ /g, '_');
	      name = this.options.className + 'Sub_' + name;
	    }
	    var container;
	    if (name) {
	      container = document.querySelector('.' + this.options.className + '.' + name);
	    } else {
	      container = document.querySelector('.' + this.options.className);
	    }
	    if (!container) {
	      container = document.createElement('div');
	      addClass(container, 'htMenu ' + this.options.className);
	      if (name) {
	        addClass(container, name);
	      }
	      document.getElementsByTagName('body')[0].appendChild(container);
	    }
	    return container;
	  },
	  blockMainTableCallbacks: function() {
	    this._afterScrollCallback = function() {};
	    this.hot.addHook('afterScrollVertically', this._afterScrollCallback);
	    this.hot.addHook('afterScrollHorizontally', this._afterScrollCallback);
	  },
	  releaseMainTableCallbacks: function() {
	    if (this._afterScrollCallback) {
	      this.hot.removeHook('afterScrollVertically', this._afterScrollCallback);
	      this.hot.removeHook('afterScrollHorizontally', this._afterScrollCallback);
	      this._afterScrollCallback = null;
	    }
	  },
	  onBeforeKeyDown: function(event) {
	    var selection = this.hotMenu.getSelected();
	    var stopEvent = false;
	    switch (event.keyCode) {
	      case KEY_CODES.ESCAPE:
	        this.close();
	        stopEvent = true;
	        break;
	      case KEY_CODES.ENTER:
	        if (selection) {
	          if (this.hotMenu.getData()[selection[0]].submenu) {
	            stopEvent = true;
	          } else {
	            this.executeCommand(event);
	            this.close(true);
	          }
	        }
	        break;
	      case KEY_CODES.ARROW_DOWN:
	        if (selection) {
	          this.selectNextCell(selection[0], selection[1]);
	        } else {
	          this.selectFirstCell();
	        }
	        stopEvent = true;
	        break;
	      case KEY_CODES.ARROW_UP:
	        if (selection) {
	          this.selectPrevCell(selection[0], selection[1]);
	        } else {
	          this.selectLastCell();
	        }
	        stopEvent = true;
	        break;
	      case KEY_CODES.ARROW_RIGHT:
	        if (selection) {
	          var menu = this.openSubMenu(selection[0]);
	          if (menu) {
	            menu.selectFirstCell();
	          }
	        }
	        stopEvent = true;
	        break;
	      case KEY_CODES.ARROW_LEFT:
	        if (selection && this.isSubMenu()) {
	          this.close();
	          if (this.parentMenu) {
	            this.parentMenu.hotMenu.listen();
	          }
	          stopEvent = true;
	        }
	        break;
	    }
	    if (stopEvent) {
	      event.preventDefault();
	      stopImmediatePropagation(event);
	    }
	  },
	  onAfterInit: function() {
	    var data = this.hotMenu.getSettings().data;
	    var hiderStyle = this.hotMenu.view.wt.wtTable.hider.style;
	    var holderStyle = this.hotMenu.view.wt.wtTable.holder.style;
	    var currentHiderWidth = parseInt(hiderStyle.width, 10);
	    var realHeight = 0;
	    arrayEach(data, (function(value) {
	      return realHeight += value.name === SEPARATOR ? 1 : 26;
	    }));
	    holderStyle.width = currentHiderWidth + 22 + 'px';
	    holderStyle.height = realHeight + 4 + 'px';
	  },
	  onDocumentMouseDown: function(event) {
	    if (!this.isOpened()) {
	      return;
	    }
	    if (this.container && isChildOf(event.target, this.container)) {
	      this.executeCommand(event);
	    }
	    if ((this.isAllSubMenusClosed() || this.isSubMenu()) && (!isChildOf(event.target, '.htMenu') && isChildOf(event.target, document))) {
	      this.close(true);
	    }
	  }
	}, {});
	mixin(Menu, localHooks);
	;

	//# 
	},{"cursor":65,"eventManager":40,"helpers/array":41,"helpers/dom/element":44,"helpers/dom/event":45,"helpers/object":49,"helpers/unicode":52,"pluginHooks":54,"predefinedItems":68,"utils":69}],68:[function(require,module,exports){
	"use strict";
	var $__4;
	Object.defineProperties(exports, {
	  ROW_ABOVE: {get: function() {
	      return ROW_ABOVE;
	    }},
	  ROW_BELOW: {get: function() {
	      return ROW_BELOW;
	    }},
	  COLUMN_LEFT: {get: function() {
	      return COLUMN_LEFT;
	    }},
	  COLUMN_RIGHT: {get: function() {
	      return COLUMN_RIGHT;
	    }},
	  CLEAR_COLUMN: {get: function() {
	      return CLEAR_COLUMN;
	    }},
	  REMOVE_ROW: {get: function() {
	      return REMOVE_ROW;
	    }},
	  REMOVE_COLUMN: {get: function() {
	      return REMOVE_COLUMN;
	    }},
	  UNDO: {get: function() {
	      return UNDO;
	    }},
	  REDO: {get: function() {
	      return REDO;
	    }},
	  READ_ONLY: {get: function() {
	      return READ_ONLY;
	    }},
	  ALIGNMENT: {get: function() {
	      return ALIGNMENT;
	    }},
	  SEPARATOR: {get: function() {
	      return SEPARATOR;
	    }},
	  ITEMS: {get: function() {
	      return ITEMS;
	    }},
	  predefinedItems: {get: function() {
	      return predefinedItems;
	    }},
	  addItem: {get: function() {
	      return addItem;
	    }},
	  __esModule: {value: true}
	});
	var $___46__46__47__46__46__47_helpers_47_object__,
	    $___46__46__47__46__46__47_helpers_47_number__,
	    $__utils__;
	var $__0 = ($___46__46__47__46__46__47_helpers_47_object__ = require("helpers/object"), $___46__46__47__46__46__47_helpers_47_object__ && $___46__46__47__46__46__47_helpers_47_object__.__esModule && $___46__46__47__46__46__47_helpers_47_object__ || {default: $___46__46__47__46__46__47_helpers_47_object__}),
	    objectEach = $__0.objectEach,
	    clone = $__0.clone;
	var rangeEach = ($___46__46__47__46__46__47_helpers_47_number__ = require("helpers/number"), $___46__46__47__46__46__47_helpers_47_number__ && $___46__46__47__46__46__47_helpers_47_number__.__esModule && $___46__46__47__46__46__47_helpers_47_number__ || {default: $___46__46__47__46__46__47_helpers_47_number__}).rangeEach;
	var $__2 = ($__utils__ = require("utils"), $__utils__ && $__utils__.__esModule && $__utils__ || {default: $__utils__}),
	    align = $__2.align,
	    getAlignmentClasses = $__2.getAlignmentClasses,
	    getValidSelection = $__2.getValidSelection,
	    checkSelectionConsistency = $__2.checkSelectionConsistency,
	    markLabelAsSelected = $__2.markLabelAsSelected;
	var ROW_ABOVE = 'row_above';
	var ROW_BELOW = 'row_below';
	var COLUMN_LEFT = 'col_left';
	var COLUMN_RIGHT = 'col_right';
	var CLEAR_COLUMN = 'clear_column';
	var REMOVE_ROW = 'remove_row';
	var REMOVE_COLUMN = 'remove_col';
	var UNDO = 'undo';
	var REDO = 'redo';
	var READ_ONLY = 'make_read_only';
	var ALIGNMENT = 'alignment';
	var SEPARATOR = '---------';
	var ITEMS = [ROW_ABOVE, ROW_BELOW, COLUMN_LEFT, COLUMN_RIGHT, CLEAR_COLUMN, REMOVE_ROW, REMOVE_COLUMN, UNDO, REDO, READ_ONLY, ALIGNMENT, SEPARATOR];
	function predefinedItems() {
	  var items = {};
	  objectEach(_predefinedItems, (function(value, key) {
	    return items[key] = clone(value);
	  }));
	  return items;
	}
	function addItem(key, item) {
	  if (ITEMS.indexOf(key) === -1) {
	    _predefinedItems[key] = item;
	  }
	}
	var _predefinedItems = ($__4 = {}, Object.defineProperty($__4, SEPARATOR, {
	  value: {name: SEPARATOR},
	  configurable: true,
	  enumerable: true,
	  writable: true
	}), Object.defineProperty($__4, ROW_ABOVE, {
	  value: {
	    key: ROW_ABOVE,
	    name: 'Insert row above',
	    callback: function(key, selection) {
	      this.alter('insert_row', selection.start.row);
	    },
	    disabled: function() {
	      var selected = getValidSelection(this);
	      if (!selected) {
	        return true;
	      }
	      var rowCount = this.countRows();
	      var entireColumnSelection = [0, selected[1], rowCount - 1, selected[1]];
	      return (entireColumnSelection.join(',') === selected.join(',')) && rowCount > 1;
	    },
	    hidden: function() {
	      return !this.getSettings().allowInsertRow;
	    }
	  },
	  configurable: true,
	  enumerable: true,
	  writable: true
	}), Object.defineProperty($__4, ROW_BELOW, {
	  value: {
	    key: ROW_BELOW,
	    name: 'Insert row below',
	    callback: function(key, selection) {
	      this.alter('insert_row', selection.end.row + 1);
	    },
	    disabled: function() {
	      var selected = getValidSelection(this);
	      if (!selected) {
	        return true;
	      }
	      var rowCount = this.countRows();
	      var entireColumnSelection = [0, selected[1], rowCount - 1, selected[1]];
	      return (entireColumnSelection.join(',') === selected.join(',')) && rowCount > 1;
	    },
	    hidden: function() {
	      return !this.getSettings().allowInsertRow;
	    }
	  },
	  configurable: true,
	  enumerable: true,
	  writable: true
	}), Object.defineProperty($__4, COLUMN_LEFT, {
	  value: {
	    key: COLUMN_LEFT,
	    name: 'Insert column on the left',
	    callback: function(key, selection) {
	      this.alter('insert_col', selection.start.col);
	    },
	    disabled: function() {
	      var selected = getValidSelection(this);
	      if (!selected) {
	        return true;
	      }
	      if (!this.isColumnModificationAllowed()) {
	        return true;
	      }
	      var entireRowSelection = [selected[0], 0, selected[0], this.countCols() - 1];
	      var rowSelected = entireRowSelection.join(',') == selected.join(',');
	      return selected[1] < 0 || this.countCols() >= this.getSettings().maxCols || rowSelected;
	    },
	    hidden: function() {
	      return !this.getSettings().allowInsertColumn;
	    }
	  },
	  configurable: true,
	  enumerable: true,
	  writable: true
	}), Object.defineProperty($__4, COLUMN_RIGHT, {
	  value: {
	    key: COLUMN_RIGHT,
	    name: 'Insert column on the right',
	    callback: function(key, selection) {
	      this.alter('insert_col', selection.end.col + 1);
	    },
	    disabled: function() {
	      var selected = getValidSelection(this);
	      if (!selected) {
	        return true;
	      }
	      if (!this.isColumnModificationAllowed()) {
	        return true;
	      }
	      var entireRowSelection = [selected[0], 0, selected[0], this.countCols() - 1];
	      var rowSelected = entireRowSelection.join(',') == selected.join(',');
	      return selected[1] < 0 || this.countCols() >= this.getSettings().maxCols || rowSelected;
	    },
	    hidden: function() {
	      return !this.getSettings().allowInsertColumn;
	    }
	  },
	  configurable: true,
	  enumerable: true,
	  writable: true
	}), Object.defineProperty($__4, CLEAR_COLUMN, {
	  value: {
	    key: CLEAR_COLUMN,
	    name: 'Clear column',
	    callback: function(key, selection) {
	      var column = selection.start.col;
	      this.populateFromArray(0, column, [[null]], Math.max(selection.start.row, selection.end.row), column);
	    },
	    disabled: function() {
	      var selected = getValidSelection(this);
	      if (!selected) {
	        return true;
	      }
	      var entireRowSelection = [selected[0], 0, selected[0], this.countCols() - 1];
	      var rowSelected = entireRowSelection.join(',') == selected.join(',');
	      return selected[1] < 0 || this.countCols() >= this.getSettings().maxCols || rowSelected;
	    }
	  },
	  configurable: true,
	  enumerable: true,
	  writable: true
	}), Object.defineProperty($__4, REMOVE_ROW, {
	  value: {
	    key: REMOVE_ROW,
	    name: 'Remove row',
	    callback: function(key, selection) {
	      var amount = selection.end.row - selection.start.row + 1;
	      this.alter('remove_row', selection.start.row, amount);
	    },
	    disabled: function() {
	      var selected = getValidSelection(this);
	      if (!selected) {
	        return true;
	      }
	      var entireColumnSelection = [0, selected[1], this.countRows() - 1, selected[1]];
	      return entireColumnSelection.join(',') === selected.join(',');
	    },
	    hidden: function() {
	      return !this.getSettings().allowRemoveRow;
	    }
	  },
	  configurable: true,
	  enumerable: true,
	  writable: true
	}), Object.defineProperty($__4, REMOVE_COLUMN, {
	  value: {
	    key: REMOVE_COLUMN,
	    name: 'Remove column',
	    callback: function(key, selection) {
	      var amount = selection.end.col - selection.start.col + 1;
	      this.alter('remove_col', selection.start.col, amount);
	    },
	    disabled: function() {
	      var selected = getValidSelection(this);
	      if (!selected) {
	        return true;
	      }
	      if (!this.isColumnModificationAllowed()) {
	        return true;
	      }
	      var entireRowSelection = [selected[0], 0, selected[0], this.countCols() - 1];
	      var rowSelected = entireRowSelection.join(',') == selected.join(',');
	      return (selected[1] < 0 || rowSelected);
	    },
	    hidden: function() {
	      return !this.getSettings().allowRemoveColumn;
	    }
	  },
	  configurable: true,
	  enumerable: true,
	  writable: true
	}), Object.defineProperty($__4, UNDO, {
	  value: {
	    key: UNDO,
	    name: 'Undo',
	    callback: function() {
	      this.undo();
	    },
	    disabled: function() {
	      return this.undoRedo && !this.undoRedo.isUndoAvailable();
	    }
	  },
	  configurable: true,
	  enumerable: true,
	  writable: true
	}), Object.defineProperty($__4, REDO, {
	  value: {
	    key: REDO,
	    name: 'Redo',
	    callback: function() {
	      this.redo();
	    },
	    disabled: function() {
	      return this.undoRedo && !this.undoRedo.isRedoAvailable();
	    }
	  },
	  configurable: true,
	  enumerable: true,
	  writable: true
	}), Object.defineProperty($__4, READ_ONLY, {
	  value: {
	    key: READ_ONLY,
	    name: function() {
	      var $__3 = this;
	      var label = 'Read only';
	      var atLeastOneReadOnly = checkSelectionConsistency(this.getSelectedRange(), (function(row, col) {
	        return $__3.getCellMeta(row, col).readOnly;
	      }));
	      if (atLeastOneReadOnly) {
	        label = markLabelAsSelected(label);
	      }
	      return label;
	    },
	    callback: function() {
	      var $__3 = this;
	      var range = this.getSelectedRange();
	      var atLeastOneReadOnly = checkSelectionConsistency(range, (function(row, col) {
	        return $__3.getCellMeta(row, col).readOnly;
	      }));
	      range.forAll((function(row, col) {
	        $__3.getCellMeta(row, col).readOnly = atLeastOneReadOnly ? false : true;
	      }));
	      this.render();
	    },
	    disabled: function() {
	      return this.getSelectedRange() ? false : true;
	    }
	  },
	  configurable: true,
	  enumerable: true,
	  writable: true
	}), Object.defineProperty($__4, ALIGNMENT, {
	  value: {
	    key: ALIGNMENT,
	    name: 'Alignment',
	    disabled: function() {
	      return this.getSelectedRange() ? false : true;
	    },
	    submenu: {items: [{
	        key: (ALIGNMENT + ":left"),
	        name: function() {
	          var $__3 = this;
	          var label = 'Left';
	          var hasClass = checkSelectionConsistency(this.getSelectedRange(), (function(row, col) {
	            var className = $__3.getCellMeta(row, col).className;
	            if (className && className.indexOf('htLeft') !== -1) {
	              return true;
	            }
	          }));
	          if (hasClass) {
	            label = markLabelAsSelected(label);
	          }
	          return label;
	        },
	        callback: function() {
	          var $__3 = this;
	          var range = this.getSelectedRange();
	          var stateBefore = getAlignmentClasses(range, (function(row, col) {
	            return $__3.getCellMeta(row, col).className;
	          }));
	          var type = 'horizontal';
	          var alignment = 'htLeft';
	          this.runHooks('beforeCellAlignment', stateBefore, range, type, alignment);
	          align(range, type, alignment, (function(row, col) {
	            return $__3.getCellMeta(row, col);
	          }));
	          this.render();
	        },
	        disabled: false
	      }, {
	        key: (ALIGNMENT + ":center"),
	        name: function() {
	          var $__3 = this;
	          var label = 'Center';
	          var hasClass = checkSelectionConsistency(this.getSelectedRange(), (function(row, col) {
	            var className = $__3.getCellMeta(row, col).className;
	            if (className && className.indexOf('htCenter') !== -1) {
	              return true;
	            }
	          }));
	          if (hasClass) {
	            label = markLabelAsSelected(label);
	          }
	          return label;
	        },
	        callback: function() {
	          var $__3 = this;
	          var range = this.getSelectedRange();
	          var stateBefore = getAlignmentClasses(range, (function(row, col) {
	            return $__3.getCellMeta(row, col).className;
	          }));
	          var type = 'horizontal';
	          var alignment = 'htCenter';
	          this.runHooks('beforeCellAlignment', stateBefore, range, type, alignment);
	          align(range, type, alignment, (function(row, col) {
	            return $__3.getCellMeta(row, col);
	          }));
	          this.render();
	        },
	        disabled: false
	      }, {
	        key: (ALIGNMENT + ":right"),
	        name: function() {
	          var $__3 = this;
	          var label = 'Right';
	          var hasClass = checkSelectionConsistency(this.getSelectedRange(), (function(row, col) {
	            var className = $__3.getCellMeta(row, col).className;
	            if (className && className.indexOf('htRight') !== -1) {
	              return true;
	            }
	          }));
	          if (hasClass) {
	            label = markLabelAsSelected(label);
	          }
	          return label;
	        },
	        callback: function() {
	          var $__3 = this;
	          var range = this.getSelectedRange();
	          var stateBefore = getAlignmentClasses(range, (function(row, col) {
	            return $__3.getCellMeta(row, col).className;
	          }));
	          var type = 'horizontal';
	          var alignment = 'htRight';
	          this.runHooks('beforeCellAlignment', stateBefore, range, type, alignment);
	          align(range, type, alignment, (function(row, col) {
	            return $__3.getCellMeta(row, col);
	          }));
	          this.render();
	        },
	        disabled: false
	      }, {
	        key: (ALIGNMENT + ":justify"),
	        name: function() {
	          var $__3 = this;
	          var label = 'Justify';
	          var hasClass = checkSelectionConsistency(this.getSelectedRange(), (function(row, col) {
	            var className = $__3.getCellMeta(row, col).className;
	            if (className && className.indexOf('htJustify') !== -1) {
	              return true;
	            }
	          }));
	          if (hasClass) {
	            label = markLabelAsSelected(label);
	          }
	          return label;
	        },
	        callback: function() {
	          var $__3 = this;
	          var range = this.getSelectedRange();
	          var stateBefore = getAlignmentClasses(range, (function(row, col) {
	            return $__3.getCellMeta(row, col).className;
	          }));
	          var type = 'horizontal';
	          var alignment = 'htJustify';
	          this.runHooks('beforeCellAlignment', stateBefore, range, type, alignment);
	          align(range, type, alignment, (function(row, col) {
	            return $__3.getCellMeta(row, col);
	          }));
	          this.render();
	        },
	        disabled: false
	      }, {name: SEPARATOR}, {
	        key: (ALIGNMENT + ":top"),
	        name: function() {
	          var $__3 = this;
	          var label = 'Top';
	          var hasClass = checkSelectionConsistency(this.getSelectedRange(), (function(row, col) {
	            var className = $__3.getCellMeta(row, col).className;
	            if (className && className.indexOf('htTop') !== -1) {
	              return true;
	            }
	          }));
	          if (hasClass) {
	            label = markLabelAsSelected(label);
	          }
	          return label;
	        },
	        callback: function() {
	          var $__3 = this;
	          var range = this.getSelectedRange();
	          var stateBefore = getAlignmentClasses(range, (function(row, col) {
	            return $__3.getCellMeta(row, col).className;
	          }));
	          var type = 'vertical';
	          var alignment = 'htTop';
	          this.runHooks('beforeCellAlignment', stateBefore, range, type, alignment);
	          align(range, type, alignment, (function(row, col) {
	            return $__3.getCellMeta(row, col);
	          }));
	          this.render();
	        },
	        disabled: false
	      }, {
	        key: (ALIGNMENT + ":middle"),
	        name: function() {
	          var $__3 = this;
	          var label = 'Middle';
	          var hasClass = checkSelectionConsistency(this.getSelectedRange(), (function(row, col) {
	            var className = $__3.getCellMeta(row, col).className;
	            if (className && className.indexOf('htMiddle') !== -1) {
	              return true;
	            }
	          }));
	          if (hasClass) {
	            label = markLabelAsSelected(label);
	          }
	          return label;
	        },
	        callback: function() {
	          var $__3 = this;
	          var range = this.getSelectedRange();
	          var stateBefore = getAlignmentClasses(range, (function(row, col) {
	            return $__3.getCellMeta(row, col).className;
	          }));
	          var type = 'vertical';
	          var alignment = 'htMiddle';
	          this.runHooks('beforeCellAlignment', stateBefore, range, type, alignment);
	          align(range, type, alignment, (function(row, col) {
	            return $__3.getCellMeta(row, col);
	          }));
	          this.render();
	        },
	        disabled: false
	      }, {
	        key: (ALIGNMENT + ":bottom"),
	        name: function() {
	          var $__3 = this;
	          var label = 'Bottom';
	          var hasClass = checkSelectionConsistency(this.getSelectedRange(), (function(row, col) {
	            var className = $__3.getCellMeta(row, col).className;
	            if (className && className.indexOf('htBottom') !== -1) {
	              return true;
	            }
	          }));
	          if (hasClass) {
	            label = markLabelAsSelected(label);
	          }
	          return label;
	        },
	        callback: function() {
	          var $__3 = this;
	          var range = this.getSelectedRange();
	          var stateBefore = getAlignmentClasses(range, (function(row, col) {
	            return $__3.getCellMeta(row, col).className;
	          }));
	          var type = 'vertical';
	          var alignment = 'htBottom';
	          this.runHooks('beforeCellAlignment', stateBefore, range, type, alignment);
	          align(range, type, alignment, (function(row, col) {
	            return $__3.getCellMeta(row, col);
	          }));
	          this.render();
	        },
	        disabled: false
	      }]}
	  },
	  configurable: true,
	  enumerable: true,
	  writable: true
	}), $__4);

	//# 
	},{"helpers/number":48,"helpers/object":49,"utils":69}],69:[function(require,module,exports){
	"use strict";
	Object.defineProperties(exports, {
	  normalizeSelection: {get: function() {
	      return normalizeSelection;
	    }},
	  isSeparator: {get: function() {
	      return isSeparator;
	    }},
	  hasSubMenu: {get: function() {
	      return hasSubMenu;
	    }},
	  isDisabled: {get: function() {
	      return isDisabled;
	    }},
	  isSelectionDisabled: {get: function() {
	      return isSelectionDisabled;
	    }},
	  getValidSelection: {get: function() {
	      return getValidSelection;
	    }},
	  prepareVerticalAlignClass: {get: function() {
	      return prepareVerticalAlignClass;
	    }},
	  prepareHorizontalAlignClass: {get: function() {
	      return prepareHorizontalAlignClass;
	    }},
	  getAlignmentClasses: {get: function() {
	      return getAlignmentClasses;
	    }},
	  align: {get: function() {
	      return align;
	    }},
	  checkSelectionConsistency: {get: function() {
	      return checkSelectionConsistency;
	    }},
	  markLabelAsSelected: {get: function() {
	      return markLabelAsSelected;
	    }},
	  __esModule: {value: true}
	});
	var $___46__46__47__46__46__47_helpers_47_dom_47_element__;
	var hasClass = ($___46__46__47__46__46__47_helpers_47_dom_47_element__ = require("helpers/dom/element"), $___46__46__47__46__46__47_helpers_47_dom_47_element__ && $___46__46__47__46__46__47_helpers_47_dom_47_element__.__esModule && $___46__46__47__46__46__47_helpers_47_dom_47_element__ || {default: $___46__46__47__46__46__47_helpers_47_dom_47_element__}).hasClass;
	function normalizeSelection(selRange) {
	  return {
	    start: selRange.getTopLeftCorner(),
	    end: selRange.getBottomRightCorner()
	  };
	}
	function isSeparator(cell) {
	  return hasClass(cell, 'htSeparator');
	}
	function hasSubMenu(cell) {
	  return hasClass(cell, 'htSubmenu');
	}
	function isDisabled(cell) {
	  return hasClass(cell, 'htDisabled');
	}
	function isSelectionDisabled(cell) {
	  return hasClass(cell, 'htSelectionDisabled');
	}
	function getValidSelection(hot) {
	  var selected = hot.getSelected();
	  if (!selected) {
	    return null;
	  }
	  if (selected[0] < 0) {
	    return null;
	  }
	  if (hot.countRows() >= hot.getSettings().maxRows) {
	    return null;
	  }
	  return selected;
	}
	function prepareVerticalAlignClass(className, alignment) {
	  if (className.indexOf(alignment) != -1) {
	    return className;
	  }
	  className = className.replace('htTop', '').replace('htMiddle', '').replace('htBottom', '').replace('  ', '');
	  className += ' ' + alignment;
	  return className;
	}
	function prepareHorizontalAlignClass(className, alignment) {
	  if (className.indexOf(alignment) != -1) {
	    return className;
	  }
	  className = className.replace('htLeft', '').replace('htCenter', '').replace('htRight', '').replace('htJustify', '').replace('  ', '');
	  className += ' ' + alignment;
	  return className;
	}
	function getAlignmentClasses(range, callback) {
	  var classes = {};
	  for (var row = range.from.row; row <= range.to.row; row++) {
	    for (var col = range.from.col; col <= range.to.col; col++) {
	      if (!classes[row]) {
	        classes[row] = [];
	      }
	      classes[row][col] = callback(row, col);
	    }
	  }
	  return classes;
	}
	function align(range, type, alignment, cellDescriptor) {
	  if (range.from.row == range.to.row && range.from.col == range.to.col) {
	    applyAlignClassName(range.from.row, range.from.col, type, alignment, cellDescriptor);
	  } else {
	    for (var row = range.from.row; row <= range.to.row; row++) {
	      for (var col = range.from.col; col <= range.to.col; col++) {
	        applyAlignClassName(row, col, type, alignment, cellDescriptor);
	      }
	    }
	  }
	}
	function applyAlignClassName(row, col, type, alignment, cellDescriptor) {
	  var cellMeta = cellDescriptor(row, col);
	  var className = alignment;
	  if (cellMeta.className) {
	    if (type === 'vertical') {
	      className = prepareVerticalAlignClass(cellMeta.className, alignment);
	    } else {
	      className = prepareHorizontalAlignClass(cellMeta.className, alignment);
	    }
	  }
	  cellMeta.className = className;
	}
	function checkSelectionConsistency(range, comparator) {
	  var result = false;
	  if (range) {
	    range.forAll(function(row, col) {
	      if (comparator(row, col)) {
	        result = true;
	        return false;
	      }
	    });
	  }
	  return result;
	}
	function markLabelAsSelected(label) {
	  return '<span class="selected">' + String.fromCharCode(10003) + '</span>' + label;
	}

	//# 
	},{"helpers/dom/element":44}],70:[function(require,module,exports){
	"use strict";
	Object.defineProperties(exports, {
	  ContextMenuCopyPaste: {get: function() {
	      return ContextMenuCopyPaste;
	    }},
	  __esModule: {value: true}
	});
	var $___46__46__47__46__46__47_helpers_47_dom_47_element__,
	    $___46__46__47__46__46__47_helpers_47_array__,
	    $___46__46__47__46__46__47_eventManager__,
	    $___46__46__47__46__46__47_plugins__,
	    $___46__46__47__95_base__,
	    $__zeroclipboard__;
	var removeClass = ($___46__46__47__46__46__47_helpers_47_dom_47_element__ = require("helpers/dom/element"), $___46__46__47__46__46__47_helpers_47_dom_47_element__ && $___46__46__47__46__46__47_helpers_47_dom_47_element__.__esModule && $___46__46__47__46__46__47_helpers_47_dom_47_element__ || {default: $___46__46__47__46__46__47_helpers_47_dom_47_element__}).removeClass;
	var arrayEach = ($___46__46__47__46__46__47_helpers_47_array__ = require("helpers/array"), $___46__46__47__46__46__47_helpers_47_array__ && $___46__46__47__46__46__47_helpers_47_array__.__esModule && $___46__46__47__46__46__47_helpers_47_array__ || {default: $___46__46__47__46__46__47_helpers_47_array__}).arrayEach;
	var EventManager = ($___46__46__47__46__46__47_eventManager__ = require("eventManager"), $___46__46__47__46__46__47_eventManager__ && $___46__46__47__46__46__47_eventManager__.__esModule && $___46__46__47__46__46__47_eventManager__ || {default: $___46__46__47__46__46__47_eventManager__}).EventManager;
	var registerPlugin = ($___46__46__47__46__46__47_plugins__ = require("plugins"), $___46__46__47__46__46__47_plugins__ && $___46__46__47__46__46__47_plugins__.__esModule && $___46__46__47__46__46__47_plugins__ || {default: $___46__46__47__46__46__47_plugins__}).registerPlugin;
	var BasePlugin = ($___46__46__47__95_base__ = require("_base"), $___46__46__47__95_base__ && $___46__46__47__95_base__.__esModule && $___46__46__47__95_base__ || {default: $___46__46__47__95_base__}).default;
	var ZeroClipboard = ($__zeroclipboard__ = require("zeroclipboard"), $__zeroclipboard__ && $__zeroclipboard__.__esModule && $__zeroclipboard__ || {default: $__zeroclipboard__}).default;
	var ContextMenuCopyPaste = function ContextMenuCopyPaste(hotInstance) {
	  $traceurRuntime.superConstructor($ContextMenuCopyPaste).call(this, hotInstance);
	  this.eventManager = new EventManager(this);
	  this.swfPath = null;
	  this.outsideClickDeselectsCache = null;
	};
	var $ContextMenuCopyPaste = ContextMenuCopyPaste;
	($traceurRuntime.createClass)(ContextMenuCopyPaste, {
	  isEnabled: function() {
	    return this.hot.getSettings().contextMenuCopyPaste;
	  },
	  enablePlugin: function() {
	    var $__6 = this;
	    if (this.enabled) {
	      return;
	    }
	    if (typeof this.hot.getSettings().contextMenuCopyPaste === 'object') {
	      this.swfPath = this.hot.getSettings().contextMenuCopyPaste.swfPath;
	    }
	    if (typeof ZeroClipboard === 'undefined') {
	      console.error('To be able to use the Copy/Paste feature from the context menu, you need to manually include ZeroClipboard.js file to your website.');
	    }
	    try {
	      new ActiveXObject('ShockwaveFlash.ShockwaveFlash');
	    } catch (exception) {
	      if (typeof navigator.mimeTypes['application/x-shockwave-flash'] == 'undefined') {
	        console.error('To be able to use the Copy/Paste feature from the context menu, your browser needs to have Flash Plugin installed.');
	      }
	    }
	    if (this.swfPath) {
	      ZeroClipboard.config({swfPath: this.swfPath});
	    }
	    this.hot.addHook('afterContextMenuShow', (function() {
	      return $__6.onAfterContextMenuShow();
	    }));
	    this.hot.addHook('afterContextMenuDefaultOptions', (function(options) {
	      return $__6.onAfterContextMenuDefaultOptions(options);
	    }));
	    this.registerEvents();
	    $traceurRuntime.superGet(this, $ContextMenuCopyPaste.prototype, "enablePlugin").call(this);
	  },
	  disablePlugin: function() {
	    $traceurRuntime.superGet(this, $ContextMenuCopyPaste.prototype, "disablePlugin").call(this);
	  },
	  registerEvents: function() {
	    var $__6 = this;
	    this.eventManager.addEventListener(document, 'mouseenter', (function() {
	      return $__6.removeCurrentClass();
	    }));
	    this.eventManager.addEventListener(document, 'mouseleave', (function() {
	      return $__6.removeZeroClipboardClass();
	    }));
	  },
	  getCopyValue: function() {
	    this.hot.copyPaste.setCopyableText();
	    return this.hot.copyPaste.copyPasteInstance.elTextarea.value;
	  },
	  onAfterContextMenuDefaultOptions: function(defaultOptions) {
	    defaultOptions.items.unshift({
	      key: 'copy',
	      name: 'Copy'
	    }, {
	      key: 'paste',
	      name: 'Paste',
	      callback: function() {
	        this.copyPaste.triggerPaste();
	      }
	    }, Handsontable.plugins.ContextMenu.SEPARATOR);
	  },
	  onAfterContextMenuShow: function() {
	    var $__6 = this;
	    var contextMenu = this.hot.getPlugin('contextMenu');
	    var data = contextMenu.menu.hotMenu.getData();
	    arrayEach(data, (function(item, index) {
	      if (item.key === 'copy') {
	        var zeroClipboardInstance = new ZeroClipboard(contextMenu.menu.hotMenu.getCell(index, 0));
	        zeroClipboardInstance.off();
	        zeroClipboardInstance.on('copy', (function(event) {
	          var clipboard = event.clipboardData;
	          clipboard.setData('text/plain', $__6.getCopyValue());
	          $__6.hot.getSettings().outsideClickDeselects = $__6.outsideClickDeselectsCache;
	        }));
	        return false;
	      }
	    }));
	  },
	  removeCurrentClass: function() {
	    var contextMenu = this.hot.getPlugin('contextMenu');
	    if (contextMenu.menu.isOpened()) {
	      var element = contextMenu.menu.hotMenu.rootElement.querySelector('td.current');
	      if (element) {
	        removeClass(element, 'current');
	      }
	    }
	    this.outsideClickDeselectsCache = this.hot.getSettings().outsideClickDeselects;
	    this.hot.getSettings().outsideClickDeselects = false;
	  },
	  removeZeroClipboardClass: function() {
	    var contextMenu = this.hot.getPlugin('contextMenu');
	    if (contextMenu.menu.isOpened()) {
	      var element = contextMenu.menu.hotMenu.rootElement.querySelector('td.zeroclipboard-is-hover');
	      if (element) {
	        removeClass(element, 'zeroclipboard-is-hover');
	      }
	    }
	    this.hot.getSettings().outsideClickDeselects = this.outsideClickDeselectsCache;
	  }
	}, {}, BasePlugin);
	;
	registerPlugin('contextMenuCopyPaste', ContextMenuCopyPaste);

	//# 
	},{"_base":56,"eventManager":40,"helpers/array":41,"helpers/dom/element":44,"plugins":55,"zeroclipboard":"zeroclipboard"}],71:[function(require,module,exports){
	"use strict";
	Object.defineProperties(exports, {
	  CopyPastePlugin: {get: function() {
	      return CopyPastePlugin;
	    }},
	  __esModule: {value: true}
	});
	var $__copyPaste__,
	    $__SheetClip__,
	    $___46__46__47__46__46__47_helpers_47_unicode__,
	    $___46__46__47__46__46__47_helpers_47_array__,
	    $___46__46__47__46__46__47_helpers_47_number__,
	    $___46__46__47__46__46__47_helpers_47_dom_47_event__,
	    $___46__46__47__46__46__47_helpers_47_function__,
	    $___46__46__47__46__46__47_plugins__,
	    $___46__46__47__46__46__47_3rdparty_47_walkontable_47_src_47_cell_47_coords__,
	    $___46__46__47__46__46__47_3rdparty_47_walkontable_47_src_47_cell_47_range__;
	var copyPaste = ($__copyPaste__ = require("copyPaste"), $__copyPaste__ && $__copyPaste__.__esModule && $__copyPaste__ || {default: $__copyPaste__}).default;
	var SheetClip = ($__SheetClip__ = require("SheetClip"), $__SheetClip__ && $__SheetClip__.__esModule && $__SheetClip__ || {default: $__SheetClip__}).default;
	var $__2 = ($___46__46__47__46__46__47_helpers_47_unicode__ = require("helpers/unicode"), $___46__46__47__46__46__47_helpers_47_unicode__ && $___46__46__47__46__46__47_helpers_47_unicode__.__esModule && $___46__46__47__46__46__47_helpers_47_unicode__ || {default: $___46__46__47__46__46__47_helpers_47_unicode__}),
	    KEY_CODES = $__2.KEY_CODES,
	    isCtrlKey = $__2.isCtrlKey;
	var arrayEach = ($___46__46__47__46__46__47_helpers_47_array__ = require("helpers/array"), $___46__46__47__46__46__47_helpers_47_array__ && $___46__46__47__46__46__47_helpers_47_array__.__esModule && $___46__46__47__46__46__47_helpers_47_array__ || {default: $___46__46__47__46__46__47_helpers_47_array__}).arrayEach;
	var rangeEach = ($___46__46__47__46__46__47_helpers_47_number__ = require("helpers/number"), $___46__46__47__46__46__47_helpers_47_number__ && $___46__46__47__46__46__47_helpers_47_number__.__esModule && $___46__46__47__46__46__47_helpers_47_number__ || {default: $___46__46__47__46__46__47_helpers_47_number__}).rangeEach;
	var stopImmediatePropagation = ($___46__46__47__46__46__47_helpers_47_dom_47_event__ = require("helpers/dom/event"), $___46__46__47__46__46__47_helpers_47_dom_47_event__ && $___46__46__47__46__46__47_helpers_47_dom_47_event__.__esModule && $___46__46__47__46__46__47_helpers_47_dom_47_event__ || {default: $___46__46__47__46__46__47_helpers_47_dom_47_event__}).stopImmediatePropagation;
	var proxy = ($___46__46__47__46__46__47_helpers_47_function__ = require("helpers/function"), $___46__46__47__46__46__47_helpers_47_function__ && $___46__46__47__46__46__47_helpers_47_function__.__esModule && $___46__46__47__46__46__47_helpers_47_function__ || {default: $___46__46__47__46__46__47_helpers_47_function__}).proxy;
	var registerPlugin = ($___46__46__47__46__46__47_plugins__ = require("plugins"), $___46__46__47__46__46__47_plugins__ && $___46__46__47__46__46__47_plugins__.__esModule && $___46__46__47__46__46__47_plugins__ || {default: $___46__46__47__46__46__47_plugins__}).registerPlugin;
	var WalkontableCellCoords = ($___46__46__47__46__46__47_3rdparty_47_walkontable_47_src_47_cell_47_coords__ = require("3rdparty/walkontable/src/cell/coords"), $___46__46__47__46__46__47_3rdparty_47_walkontable_47_src_47_cell_47_coords__ && $___46__46__47__46__46__47_3rdparty_47_walkontable_47_src_47_cell_47_coords__.__esModule && $___46__46__47__46__46__47_3rdparty_47_walkontable_47_src_47_cell_47_coords__ || {default: $___46__46__47__46__46__47_3rdparty_47_walkontable_47_src_47_cell_47_coords__}).WalkontableCellCoords;
	var WalkontableCellRange = ($___46__46__47__46__46__47_3rdparty_47_walkontable_47_src_47_cell_47_range__ = require("3rdparty/walkontable/src/cell/range"), $___46__46__47__46__46__47_3rdparty_47_walkontable_47_src_47_cell_47_range__ && $___46__46__47__46__46__47_3rdparty_47_walkontable_47_src_47_cell_47_range__.__esModule && $___46__46__47__46__46__47_3rdparty_47_walkontable_47_src_47_cell_47_range__ || {default: $___46__46__47__46__46__47_3rdparty_47_walkontable_47_src_47_cell_47_range__}).WalkontableCellRange;
	function CopyPastePlugin(instance) {
	  var _this = this;
	  this.copyPasteInstance = copyPaste();
	  this.copyPasteInstance.onCut(onCut);
	  this.copyPasteInstance.onPaste(onPaste);
	  this.onPaste = onPaste;
	  instance.addHook('beforeKeyDown', onBeforeKeyDown);
	  function onCut() {
	    if (!instance.isListening()) {
	      return;
	    }
	    instance.selection.empty();
	  }
	  function onPaste(str) {
	    var input,
	        inputArray,
	        selected,
	        coordsFrom,
	        coordsTo,
	        cellRange,
	        topLeftCorner,
	        bottomRightCorner,
	        areaStart,
	        areaEnd;
	    if (!instance.isListening() || !instance.selection.isSelected()) {
	      return;
	    }
	    input = str;
	    inputArray = SheetClip.parse(input);
	    selected = instance.getSelected();
	    coordsFrom = new WalkontableCellCoords(selected[0], selected[1]);
	    coordsTo = new WalkontableCellCoords(selected[2], selected[3]);
	    cellRange = new WalkontableCellRange(coordsFrom, coordsFrom, coordsTo);
	    topLeftCorner = cellRange.getTopLeftCorner();
	    bottomRightCorner = cellRange.getBottomRightCorner();
	    areaStart = topLeftCorner;
	    areaEnd = new WalkontableCellCoords(Math.max(bottomRightCorner.row, inputArray.length - 1 + topLeftCorner.row), Math.max(bottomRightCorner.col, inputArray[0].length - 1 + topLeftCorner.col));
	    var isSelRowAreaCoverInputValue = coordsTo.row - coordsFrom.row >= inputArray.length - 1;
	    var isSelColAreaCoverInputValue = coordsTo.col - coordsFrom.col >= inputArray[0].length - 1;
	    instance.addHookOnce('afterChange', (function(changes, source) {
	      var changesLength = changes ? changes.length : 0;
	      if (changesLength) {
	        var offset = {
	          row: 0,
	          col: 0
	        };
	        var highestColumnIndex = -1;
	        arrayEach(changes, (function(change, index) {
	          var nextChange = changesLength > index + 1 ? changes[index + 1] : null;
	          if (nextChange) {
	            if (!isSelRowAreaCoverInputValue) {
	              offset.row = offset.row + Math.max(nextChange[0] - change[0] - 1, 0);
	            }
	            if (!isSelColAreaCoverInputValue && change[1] > highestColumnIndex) {
	              highestColumnIndex = change[1];
	              offset.col = offset.col + Math.max(nextChange[1] - change[1] - 1, 0);
	            }
	          }
	        }));
	        instance.selectCell(areaStart.row, areaStart.col, areaEnd.row + offset.row, areaEnd.col + offset.col);
	      }
	    }));
	    instance.populateFromArray(areaStart.row, areaStart.col, inputArray, areaEnd.row, areaEnd.col, 'paste', instance.getSettings().pasteMode);
	  }
	  function onBeforeKeyDown(event) {
	    if (!instance.getSelected()) {
	      return;
	    }
	    if (instance.getActiveEditor() && instance.getActiveEditor().isOpened()) {
	      return;
	    }
	    if (isCtrlKey(event.keyCode)) {
	      _this.setCopyableText();
	      stopImmediatePropagation(event);
	      return;
	    }
	    var ctrlDown = (event.ctrlKey || event.metaKey) && !event.altKey;
	    if (event.keyCode == KEY_CODES.A && ctrlDown) {
	      instance._registerTimeout(setTimeout(proxy(_this.setCopyableText, _this), 0));
	    }
	  }
	  this.destroy = function() {
	    if (this.copyPasteInstance) {
	      this.copyPasteInstance.removeCallback(onCut);
	      this.copyPasteInstance.removeCallback(onPaste);
	      this.copyPasteInstance.destroy();
	      this.copyPasteInstance = null;
	    }
	    instance.removeHook('beforeKeyDown', onBeforeKeyDown);
	  };
	  instance.addHook('afterDestroy', proxy(this.destroy, this));
	  this.triggerPaste = proxy(this.copyPasteInstance.triggerPaste, this.copyPasteInstance);
	  this.triggerCut = proxy(this.copyPasteInstance.triggerCut, this.copyPasteInstance);
	  this.setCopyableText = function() {
	    var settings = instance.getSettings();
	    var copyRowsLimit = settings.copyRowsLimit;
	    var copyColsLimit = settings.copyColsLimit;
	    var selRange = instance.getSelectedRange();
	    var topLeft = selRange.getTopLeftCorner();
	    var bottomRight = selRange.getBottomRightCorner();
	    var startRow = topLeft.row;
	    var startCol = topLeft.col;
	    var endRow = bottomRight.row;
	    var endCol = bottomRight.col;
	    var finalEndRow = Math.min(endRow, startRow + copyRowsLimit - 1);
	    var finalEndCol = Math.min(endCol, startCol + copyColsLimit - 1);
	    var copyableRanges = [];
	    copyableRanges.push({
	      startRow: startRow,
	      startCol: startCol,
	      endRow: finalEndRow,
	      endCol: finalEndCol
	    });
	    copyableRanges = Handsontable.hooks.run(instance, 'modifyCopyableRange', copyableRanges);
	    var copyableData = this.getRangedCopyableData(copyableRanges);
	    instance.copyPaste.copyPasteInstance.copyable(copyableData);
	    if (endRow !== finalEndRow || endCol !== finalEndCol) {
	      Handsontable.hooks.run(instance, 'afterCopyLimit', endRow - startRow + 1, endCol - startCol + 1, copyRowsLimit, copyColsLimit);
	    }
	  };
	  this.getRangedCopyableData = function(ranges) {
	    var dataSet = [];
	    var copyableRows = [];
	    var copyableColumns = [];
	    arrayEach(ranges, (function(range) {
	      rangeEach(range.startRow, range.endRow, (function(row) {
	        if (copyableRows.indexOf(row) === -1) {
	          copyableRows.push(row);
	        }
	      }));
	      rangeEach(range.startCol, range.endCol, (function(column) {
	        if (copyableColumns.indexOf(column) === -1) {
	          copyableColumns.push(column);
	        }
	      }));
	    }));
	    arrayEach(copyableRows, (function(row) {
	      var rowSet = [];
	      arrayEach(copyableColumns, (function(column) {
	        rowSet.push(instance.getCopyableData(row, column));
	      }));
	      dataSet.push(rowSet);
	    }));
	    return SheetClip.stringify(dataSet);
	  };
	}
	function init() {
	  var instance = this,
	      pluginEnabled = instance.getSettings().copyPaste !== false;
	  if (pluginEnabled && !instance.copyPaste) {
	    instance.copyPaste = new CopyPastePlugin(instance);
	  } else if (!pluginEnabled && instance.copyPaste) {
	    instance.copyPaste.destroy();
	    instance.copyPaste = null;
	  }
	}
	Handsontable.hooks.add('afterInit', init);
	Handsontable.hooks.add('afterUpdateSettings', init);
	Handsontable.hooks.register('afterCopyLimit');
	Handsontable.hooks.register('modifyCopyableRange');
	;

	//# 
	},{"3rdparty/walkontable/src/cell/coords":5,"3rdparty/walkontable/src/cell/range":6,"SheetClip":"SheetClip","copyPaste":"copyPaste","helpers/array":41,"helpers/dom/event":45,"helpers/function":46,"helpers/number":48,"helpers/unicode":52,"plugins":55}],72:[function(require,module,exports){
	"use strict";
	var $___46__46__47__46__46__47_plugins__,
	    $___46__46__47__46__46__47_3rdparty_47_walkontable_47_src_47_cell_47_range__,
	    $___46__46__47__46__46__47_3rdparty_47_walkontable_47_src_47_selection__;
	var registerPlugin = ($___46__46__47__46__46__47_plugins__ = require("plugins"), $___46__46__47__46__46__47_plugins__ && $___46__46__47__46__46__47_plugins__.__esModule && $___46__46__47__46__46__47_plugins__ || {default: $___46__46__47__46__46__47_plugins__}).registerPlugin;
	var WalkontableCellRange = ($___46__46__47__46__46__47_3rdparty_47_walkontable_47_src_47_cell_47_range__ = require("3rdparty/walkontable/src/cell/range"), $___46__46__47__46__46__47_3rdparty_47_walkontable_47_src_47_cell_47_range__ && $___46__46__47__46__46__47_3rdparty_47_walkontable_47_src_47_cell_47_range__.__esModule && $___46__46__47__46__46__47_3rdparty_47_walkontable_47_src_47_cell_47_range__ || {default: $___46__46__47__46__46__47_3rdparty_47_walkontable_47_src_47_cell_47_range__}).WalkontableCellRange;
	var WalkontableSelection = ($___46__46__47__46__46__47_3rdparty_47_walkontable_47_src_47_selection__ = require("3rdparty/walkontable/src/selection"), $___46__46__47__46__46__47_3rdparty_47_walkontable_47_src_47_selection__ && $___46__46__47__46__46__47_3rdparty_47_walkontable_47_src_47_selection__.__esModule && $___46__46__47__46__46__47_3rdparty_47_walkontable_47_src_47_selection__ || {default: $___46__46__47__46__46__47_3rdparty_47_walkontable_47_src_47_selection__}).WalkontableSelection;
	function CustomBorders() {}
	var instance;
	var checkEnable = function(customBorders) {
	  if (typeof customBorders === 'boolean') {
	    if (customBorders === true) {
	      return true;
	    }
	  }
	  if (typeof customBorders === 'object') {
	    if (customBorders.length > 0) {
	      return true;
	    }
	  }
	  return false;
	};
	var init = function() {
	  if (checkEnable(this.getSettings().customBorders)) {
	    if (!this.customBorders) {
	      instance = this;
	      this.customBorders = new CustomBorders();
	    }
	  }
	};
	var getSettingIndex = function(className) {
	  for (var i = 0; i < instance.view.wt.selections.length; i++) {
	    if (instance.view.wt.selections[i].settings.className == className) {
	      return i;
	    }
	  }
	  return -1;
	};
	var insertBorderIntoSettings = function(border) {
	  var coordinates = {
	    row: border.row,
	    col: border.col
	  };
	  var selection = new WalkontableSelection(border, new WalkontableCellRange(coordinates, coordinates, coordinates));
	  var index = getSettingIndex(border.className);
	  if (index >= 0) {
	    instance.view.wt.selections[index] = selection;
	  } else {
	    instance.view.wt.selections.push(selection);
	  }
	};
	var prepareBorderFromCustomAdded = function(row, col, borderObj) {
	  var border = createEmptyBorders(row, col);
	  border = extendDefaultBorder(border, borderObj);
	  this.setCellMeta(row, col, 'borders', border);
	  insertBorderIntoSettings(border);
	};
	var prepareBorderFromCustomAddedRange = function(rowObj) {
	  var range = rowObj.range;
	  for (var row = range.from.row; row <= range.to.row; row++) {
	    for (var col = range.from.col; col <= range.to.col; col++) {
	      var border = createEmptyBorders(row, col);
	      var add = 0;
	      if (row == range.from.row) {
	        add++;
	        if (rowObj.hasOwnProperty('top')) {
	          border.top = rowObj.top;
	        }
	      }
	      if (row == range.to.row) {
	        add++;
	        if (rowObj.hasOwnProperty('bottom')) {
	          border.bottom = rowObj.bottom;
	        }
	      }
	      if (col == range.from.col) {
	        add++;
	        if (rowObj.hasOwnProperty('left')) {
	          border.left = rowObj.left;
	        }
	      }
	      if (col == range.to.col) {
	        add++;
	        if (rowObj.hasOwnProperty('right')) {
	          border.right = rowObj.right;
	        }
	      }
	      if (add > 0) {
	        this.setCellMeta(row, col, 'borders', border);
	        insertBorderIntoSettings(border);
	      }
	    }
	  }
	};
	var createClassName = function(row, col) {
	  return 'border_row' + row + 'col' + col;
	};
	var createDefaultCustomBorder = function() {
	  return {
	    width: 1,
	    color: '#000'
	  };
	};
	var createSingleEmptyBorder = function() {
	  return {hide: true};
	};
	var createDefaultHtBorder = function() {
	  return {
	    width: 1,
	    color: '#000',
	    cornerVisible: false
	  };
	};
	var createEmptyBorders = function(row, col) {
	  return {
	    className: createClassName(row, col),
	    border: createDefaultHtBorder(),
	    row: row,
	    col: col,
	    top: createSingleEmptyBorder(),
	    right: createSingleEmptyBorder(),
	    bottom: createSingleEmptyBorder(),
	    left: createSingleEmptyBorder()
	  };
	};
	var extendDefaultBorder = function(defaultBorder, customBorder) {
	  if (customBorder.hasOwnProperty('border')) {
	    defaultBorder.border = customBorder.border;
	  }
	  if (customBorder.hasOwnProperty('top')) {
	    defaultBorder.top = customBorder.top;
	  }
	  if (customBorder.hasOwnProperty('right')) {
	    defaultBorder.right = customBorder.right;
	  }
	  if (customBorder.hasOwnProperty('bottom')) {
	    defaultBorder.bottom = customBorder.bottom;
	  }
	  if (customBorder.hasOwnProperty('left')) {
	    defaultBorder.left = customBorder.left;
	  }
	  return defaultBorder;
	};
	var removeBordersFromDom = function(borderClassName) {
	  var borders = document.querySelectorAll('.' + borderClassName);
	  for (var i = 0; i < borders.length; i++) {
	    if (borders[i]) {
	      if (borders[i].nodeName != 'TD') {
	        var parent = borders[i].parentNode;
	        if (parent.parentNode) {
	          parent.parentNode.removeChild(parent);
	        }
	      }
	    }
	  }
	};
	var removeAllBorders = function(row, col) {
	  var borderClassName = createClassName(row, col);
	  removeBordersFromDom(borderClassName);
	  this.removeCellMeta(row, col, 'borders');
	};
	var setBorder = function(row, col, place, remove) {
	  var bordersMeta = this.getCellMeta(row, col).borders;
	  if (!bordersMeta || bordersMeta.border == undefined) {
	    bordersMeta = createEmptyBorders(row, col);
	  }
	  if (remove) {
	    bordersMeta[place] = createSingleEmptyBorder();
	  } else {
	    bordersMeta[place] = createDefaultCustomBorder();
	  }
	  this.setCellMeta(row, col, 'borders', bordersMeta);
	  var borderClassName = createClassName(row, col);
	  removeBordersFromDom(borderClassName);
	  insertBorderIntoSettings(bordersMeta);
	  this.render();
	};
	var prepareBorder = function(range, place, remove) {
	  if (range.from.row == range.to.row && range.from.col == range.to.col) {
	    if (place == 'noBorders') {
	      removeAllBorders.call(this, range.from.row, range.from.col);
	    } else {
	      setBorder.call(this, range.from.row, range.from.col, place, remove);
	    }
	  } else {
	    switch (place) {
	      case 'noBorders':
	        for (var column = range.from.col; column <= range.to.col; column++) {
	          for (var row = range.from.row; row <= range.to.row; row++) {
	            removeAllBorders.call(this, row, column);
	          }
	        }
	        break;
	      case 'top':
	        for (var topCol = range.from.col; topCol <= range.to.col; topCol++) {
	          setBorder.call(this, range.from.row, topCol, place, remove);
	        }
	        break;
	      case 'right':
	        for (var rowRight = range.from.row; rowRight <= range.to.row; rowRight++) {
	          setBorder.call(this, rowRight, range.to.col, place);
	        }
	        break;
	      case 'bottom':
	        for (var bottomCol = range.from.col; bottomCol <= range.to.col; bottomCol++) {
	          setBorder.call(this, range.to.row, bottomCol, place);
	        }
	        break;
	      case 'left':
	        for (var rowLeft = range.from.row; rowLeft <= range.to.row; rowLeft++) {
	          setBorder.call(this, rowLeft, range.from.col, place);
	        }
	        break;
	    }
	  }
	};
	var checkSelectionBorders = function(hot, direction) {
	  var atLeastOneHasBorder = false;
	  hot.getSelectedRange().forAll(function(r, c) {
	    var metaBorders = hot.getCellMeta(r, c).borders;
	    if (metaBorders) {
	      if (direction) {
	        if (!metaBorders[direction].hasOwnProperty('hide')) {
	          atLeastOneHasBorder = true;
	          return false;
	        }
	      } else {
	        atLeastOneHasBorder = true;
	        return false;
	      }
	    }
	  });
	  return atLeastOneHasBorder;
	};
	var markSelected = function(label) {
	  return '<span class="selected">' + String.fromCharCode(10003) + '</span>' + label;
	};
	var addBordersOptionsToContextMenu = function(defaultOptions) {
	  if (!this.getSettings().customBorders) {
	    return;
	  }
	  defaultOptions.items.push(Handsontable.plugins.ContextMenu.SEPARATOR);
	  defaultOptions.items.push({
	    key: 'borders',
	    name: 'Borders',
	    submenu: {items: [{
	        key: 'borders:top',
	        name: function() {
	          var label = 'Top';
	          var hasBorder = checkSelectionBorders(this, 'top');
	          if (hasBorder) {
	            label = markSelected(label);
	          }
	          return label;
	        },
	        callback: function() {
	          var hasBorder = checkSelectionBorders(this, 'top');
	          prepareBorder.call(this, this.getSelectedRange(), 'top', hasBorder);
	        },
	        disabled: false
	      }, {
	        key: 'borders:right',
	        name: function() {
	          var label = 'Right';
	          var hasBorder = checkSelectionBorders(this, 'right');
	          if (hasBorder) {
	            label = markSelected(label);
	          }
	          return label;
	        },
	        callback: function() {
	          var hasBorder = checkSelectionBorders(this, 'right');
	          prepareBorder.call(this, this.getSelectedRange(), 'right', hasBorder);
	        },
	        disabled: false
	      }, {
	        key: 'borders:bottom',
	        name: function() {
	          var label = 'Bottom';
	          var hasBorder = checkSelectionBorders(this, 'bottom');
	          if (hasBorder) {
	            label = markSelected(label);
	          }
	          return label;
	        },
	        callback: function() {
	          var hasBorder = checkSelectionBorders(this, 'bottom');
	          prepareBorder.call(this, this.getSelectedRange(), 'bottom', hasBorder);
	        },
	        disabled: false
	      }, {
	        key: 'borders:left',
	        name: function() {
	          var label = 'Left';
	          var hasBorder = checkSelectionBorders(this, 'left');
	          if (hasBorder) {
	            label = markSelected(label);
	          }
	          return label;
	        },
	        callback: function() {
	          var hasBorder = checkSelectionBorders(this, 'left');
	          prepareBorder.call(this, this.getSelectedRange(), 'left', hasBorder);
	        },
	        disabled: false
	      }, {
	        key: 'borders:no_borders',
	        name: 'Remove border(s)',
	        callback: function() {
	          prepareBorder.call(this, this.getSelectedRange(), 'noBorders');
	        },
	        disabled: function() {
	          return !checkSelectionBorders(this);
	        }
	      }]}
	  });
	};
	Handsontable.hooks.add('beforeInit', init);
	Handsontable.hooks.add('afterContextMenuDefaultOptions', addBordersOptionsToContextMenu);
	Handsontable.hooks.add('afterInit', function() {
	  var customBorders = this.getSettings().customBorders;
	  if (customBorders) {
	    for (var i = 0; i < customBorders.length; i++) {
	      if (customBorders[i].range) {
	        prepareBorderFromCustomAddedRange.call(this, customBorders[i]);
	      } else {
	        prepareBorderFromCustomAdded.call(this, customBorders[i].row, customBorders[i].col, customBorders[i]);
	      }
	    }
	    this.render();
	    this.view.wt.draw(true);
	  }
	});
	Handsontable.CustomBorders = CustomBorders;

	//# 
	},{"3rdparty/walkontable/src/cell/range":6,"3rdparty/walkontable/src/selection":18,"plugins":55}],73:[function(require,module,exports){
	"use strict";
	Object.defineProperties(exports, {
	  DragToScroll: {get: function() {
	      return DragToScroll;
	    }},
	  __esModule: {value: true}
	});
	var $___46__46__47__46__46__47_eventManager__,
	    $___46__46__47__46__46__47_plugins__;
	var eventManagerObject = ($___46__46__47__46__46__47_eventManager__ = require("eventManager"), $___46__46__47__46__46__47_eventManager__ && $___46__46__47__46__46__47_eventManager__.__esModule && $___46__46__47__46__46__47_eventManager__ || {default: $___46__46__47__46__46__47_eventManager__}).eventManager;
	var registerPlugin = ($___46__46__47__46__46__47_plugins__ = require("plugins"), $___46__46__47__46__46__47_plugins__ && $___46__46__47__46__46__47_plugins__.__esModule && $___46__46__47__46__46__47_plugins__ || {default: $___46__46__47__46__46__47_plugins__}).registerPlugin;
	;
	Handsontable.plugins.DragToScroll = DragToScroll;
	function DragToScroll() {
	  this.boundaries = null;
	  this.callback = null;
	}
	DragToScroll.prototype.setBoundaries = function(boundaries) {
	  this.boundaries = boundaries;
	};
	DragToScroll.prototype.setCallback = function(callback) {
	  this.callback = callback;
	};
	DragToScroll.prototype.check = function(x, y) {
	  var diffX = 0;
	  var diffY = 0;
	  if (y < this.boundaries.top) {
	    diffY = y - this.boundaries.top;
	  } else if (y > this.boundaries.bottom) {
	    diffY = y - this.boundaries.bottom;
	  }
	  if (x < this.boundaries.left) {
	    diffX = x - this.boundaries.left;
	  } else if (x > this.boundaries.right) {
	    diffX = x - this.boundaries.right;
	  }
	  this.callback(diffX, diffY);
	};
	var dragToScroll;
	var instance;
	var setupListening = function(instance) {
	  instance.dragToScrollListening = false;
	  var scrollHandler = instance.view.wt.wtTable.holder;
	  dragToScroll = new DragToScroll();
	  if (scrollHandler === window) {
	    return;
	  } else {
	    dragToScroll.setBoundaries(scrollHandler.getBoundingClientRect());
	  }
	  dragToScroll.setCallback(function(scrollX, scrollY) {
	    if (scrollX < 0) {
	      scrollHandler.scrollLeft -= 50;
	    } else if (scrollX > 0) {
	      scrollHandler.scrollLeft += 50;
	    }
	    if (scrollY < 0) {
	      scrollHandler.scrollTop -= 20;
	    } else if (scrollY > 0) {
	      scrollHandler.scrollTop += 20;
	    }
	  });
	  instance.dragToScrollListening = true;
	};
	Handsontable.hooks.add('afterInit', function() {
	  var instance = this;
	  var eventManager = eventManagerObject(this);
	  eventManager.addEventListener(document, 'mouseup', function() {
	    instance.dragToScrollListening = false;
	  });
	  eventManager.addEventListener(document, 'mousemove', function(event) {
	    if (instance.dragToScrollListening) {
	      dragToScroll.check(event.clientX, event.clientY);
	    }
	  });
	});
	Handsontable.hooks.add('afterDestroy', function() {
	  eventManagerObject(this).clear();
	});
	Handsontable.hooks.add('afterOnCellMouseDown', function() {
	  setupListening(this);
	});
	Handsontable.hooks.add('afterOnCellCornerMouseDown', function() {
	  setupListening(this);
	});
	Handsontable.plugins.DragToScroll = DragToScroll;

	//# 
	},{"eventManager":40,"plugins":55}],74:[function(require,module,exports){
	"use strict";
	Object.defineProperties(exports, {
	  ManualColumnFreeze: {get: function() {
	      return ManualColumnFreeze;
	    }},
	  __esModule: {value: true}
	});
	var $___46__46__47__95_base__,
	    $___46__46__47__46__46__47_plugins__;
	var BasePlugin = ($___46__46__47__95_base__ = require("_base"), $___46__46__47__95_base__ && $___46__46__47__95_base__.__esModule && $___46__46__47__95_base__ || {default: $___46__46__47__95_base__}).default;
	var registerPlugin = ($___46__46__47__46__46__47_plugins__ = require("plugins"), $___46__46__47__46__46__47_plugins__ && $___46__46__47__46__46__47_plugins__.__esModule && $___46__46__47__46__46__47_plugins__ || {default: $___46__46__47__46__46__47_plugins__}).registerPlugin;
	var ManualColumnFreeze = function ManualColumnFreeze(hotInstance) {
	  $traceurRuntime.superConstructor($ManualColumnFreeze).call(this, hotInstance);
	};
	var $ManualColumnFreeze = ManualColumnFreeze;
	($traceurRuntime.createClass)(ManualColumnFreeze, {
	  isEnabled: function() {
	    return !!this.hot.getSettings().manualColumnFreeze;
	  },
	  enablePlugin: function() {
	    var $__2 = this;
	    if (this.enabled) {
	      return;
	    }
	    this.addHook('modifyCol', (function(col) {
	      return $__2.onModifyCol(col);
	    }));
	    this.addHook('afterContextMenuDefaultOptions', (function(defaultOptions) {
	      return $__2.addContextMenuEntry(defaultOptions);
	    }));
	    $traceurRuntime.superGet(this, $ManualColumnFreeze.prototype, "enablePlugin").call(this);
	  },
	  disablePlugin: function() {
	    $traceurRuntime.superGet(this, $ManualColumnFreeze.prototype, "disablePlugin").call(this);
	  },
	  init: function() {
	    $traceurRuntime.superGet(this, $ManualColumnFreeze.prototype, "init").call(this);
	    if (typeof this.hot.manualColumnPositionsPluginUsages === 'undefined') {
	      this.hot.manualColumnPositionsPluginUsages = ['manualColumnFreeze'];
	    } else {
	      this.hot.manualColumnPositionsPluginUsages.push('manualColumnFreeze');
	    }
	    this.fixedColumnsCount = this.hot.getSettings().fixedColumnsLeft;
	  },
	  onModifyCol: function(column) {
	    if (this.hot.manualColumnPositionsPluginUsages.length > 1) {
	      return column;
	    }
	    return this.getModifiedColumnIndex(column);
	  },
	  getModifiedColumnIndex: function(column) {
	    return this.hot.manualColumnPositions[column];
	  },
	  addContextMenuEntry: function(defaultOptions) {
	    var _this = this;
	    defaultOptions.items.push(Handsontable.plugins.ContextMenu.SEPARATOR, {
	      key: 'freeze_column',
	      name: function() {
	        var selectedColumn = _this.hot.getSelected()[1];
	        if (selectedColumn > _this.fixedColumnsCount - 1) {
	          return 'Freeze this column';
	        } else {
	          return 'Unfreeze this column';
	        }
	      },
	      disabled: function() {
	        var selection = _this.hot.getSelected();
	        return selection[1] !== selection[3];
	      },
	      callback: function() {
	        var selectedColumn = _this.hot.getSelected()[1];
	        if (selectedColumn > _this.fixedColumnsCount - 1) {
	          _this.freezeColumn(selectedColumn);
	        } else {
	          _this.unfreezeColumn(selectedColumn);
	        }
	      }
	    });
	  },
	  freezeColumn: function(column) {
	    if (column <= this.fixedColumnsCount - 1) {
	      return;
	    }
	    var modifiedColumn = this.getModifiedColumnIndex(column) || column;
	    this.checkPositionData(modifiedColumn);
	    this.modifyColumnOrder(modifiedColumn, column, null, 'freeze');
	    this.addFixedColumn();
	    this.hot.view.wt.wtOverlays.leftOverlay.refresh();
	    this.hot.view.wt.wtOverlays.adjustElementsSize();
	  },
	  unfreezeColumn: function(column) {
	    if (column > this.fixedColumnsCount - 1) {
	      return;
	    }
	    var returnCol = this.getBestColumnReturnPosition(column);
	    var modifiedColumn = this.getModifiedColumnIndex(column) || column;
	    this.checkPositionData(modifiedColumn);
	    this.modifyColumnOrder(modifiedColumn, column, returnCol, 'unfreeze');
	    this.removeFixedColumn();
	    this.hot.view.wt.wtOverlays.leftOverlay.refresh();
	    this.hot.view.wt.wtOverlays.adjustElementsSize();
	  },
	  addFixedColumn: function() {
	    this.hot.updateSettings({fixedColumnsLeft: this.fixedColumnsCount + 1});
	    this.fixedColumnsCount++;
	  },
	  removeFixedColumn: function() {
	    this.hot.updateSettings({fixedColumnsLeft: this.fixedColumnsCount - 1});
	    this.fixedColumnsCount--;
	  },
	  checkPositionData: function(column) {
	    if (!this.hot.manualColumnPositions || this.hot.manualColumnPositions.length === 0) {
	      if (!this.hot.manualColumnPositions) {
	        this.hot.manualColumnPositions = [];
	      }
	    }
	    if (column) {
	      if (!this.hot.manualColumnPositions[column]) {
	        this.createPositionData(column + 1);
	      }
	    } else {
	      this.createPositionData(this.hot.countCols());
	    }
	  },
	  createPositionData: function(length) {
	    if (this.hot.manualColumnPositions.length < length) {
	      for (var i = this.hot.manualColumnPositions.length; i < length; i++) {
	        this.hot.manualColumnPositions[i] = i;
	      }
	    }
	  },
	  modifyColumnOrder: function(column, actualColumn, returnColumn, action) {
	    if (returnColumn == null) {
	      returnColumn = column;
	    }
	    if (action === 'freeze') {
	      this.hot.manualColumnPositions.splice(this.fixedColumnsCount, 0, this.hot.manualColumnPositions.splice(actualColumn, 1)[0]);
	    } else if (action === 'unfreeze') {
	      this.hot.manualColumnPositions.splice(returnColumn, 0, this.hot.manualColumnPositions.splice(actualColumn, 1)[0]);
	    }
	  },
	  getBestColumnReturnPosition: function(column) {
	    var i = this.fixedColumnsCount;
	    var j = this.getModifiedColumnIndex(i);
	    var initialCol = this.getModifiedColumnIndex(column);
	    while (j < initialCol) {
	      i++;
	      j = this.getModifiedColumnIndex(i);
	    }
	    return i - 1;
	  }
	}, {}, BasePlugin);
	;
	registerPlugin('manualColumnFreeze', ManualColumnFreeze);

	//# 
	},{"_base":56,"plugins":55}],75:[function(require,module,exports){
	"use strict";
	Object.defineProperties(exports, {
	  ManualColumnMove: {get: function() {
	      return ManualColumnMove;
	    }},
	  __esModule: {value: true}
	});
	var $___46__46__47__46__46__47_helpers_47_dom_47_element__,
	    $___46__46__47__46__46__47_eventManager__,
	    $___46__46__47__46__46__47_helpers_47_dom_47_event__,
	    $___46__46__47__46__46__47_plugins__;
	var $__0 = ($___46__46__47__46__46__47_helpers_47_dom_47_element__ = require("helpers/dom/element"), $___46__46__47__46__46__47_helpers_47_dom_47_element__ && $___46__46__47__46__46__47_helpers_47_dom_47_element__.__esModule && $___46__46__47__46__46__47_helpers_47_dom_47_element__ || {default: $___46__46__47__46__46__47_helpers_47_dom_47_element__}),
	    addClass = $__0.addClass,
	    hasClass = $__0.hasClass,
	    removeClass = $__0.removeClass;
	var eventManagerObject = ($___46__46__47__46__46__47_eventManager__ = require("eventManager"), $___46__46__47__46__46__47_eventManager__ && $___46__46__47__46__46__47_eventManager__.__esModule && $___46__46__47__46__46__47_eventManager__ || {default: $___46__46__47__46__46__47_eventManager__}).eventManager;
	var $__2 = ($___46__46__47__46__46__47_helpers_47_dom_47_event__ = require("helpers/dom/event"), $___46__46__47__46__46__47_helpers_47_dom_47_event__ && $___46__46__47__46__46__47_helpers_47_dom_47_event__.__esModule && $___46__46__47__46__46__47_helpers_47_dom_47_event__ || {default: $___46__46__47__46__46__47_helpers_47_dom_47_event__}),
	    pageX = $__2.pageX,
	    pageY = $__2.pageY;
	var registerPlugin = ($___46__46__47__46__46__47_plugins__ = require("plugins"), $___46__46__47__46__46__47_plugins__ && $___46__46__47__46__46__47_plugins__.__esModule && $___46__46__47__46__46__47_plugins__ || {default: $___46__46__47__46__46__47_plugins__}).registerPlugin;
	;
	function ManualColumnMove() {
	  var startCol,
	      endCol,
	      startX,
	      startOffset,
	      currentCol,
	      instance,
	      currentTH,
	      handle = document.createElement('DIV'),
	      guide = document.createElement('DIV'),
	      eventManager = eventManagerObject(this);
	  handle.className = 'manualColumnMover';
	  guide.className = 'manualColumnMoverGuide';
	  var saveManualColumnPositions = function() {
	    var instance = this;
	    Handsontable.hooks.run(instance, 'persistentStateSave', 'manualColumnPositions', instance.manualColumnPositions);
	  };
	  var loadManualColumnPositions = function() {
	    var instance = this;
	    var storedState = {};
	    Handsontable.hooks.run(instance, 'persistentStateLoad', 'manualColumnPositions', storedState);
	    return storedState.value;
	  };
	  function setupHandlePosition(TH) {
	    instance = this;
	    currentTH = TH;
	    var col = this.view.wt.wtTable.getCoords(TH).col;
	    if (col >= 0) {
	      currentCol = col;
	      var box = currentTH.getBoundingClientRect();
	      startOffset = box.left;
	      handle.style.top = box.top + 'px';
	      handle.style.left = startOffset + 'px';
	      instance.rootElement.appendChild(handle);
	    }
	  }
	  function refreshHandlePosition(TH, delta) {
	    var box = TH.getBoundingClientRect();
	    var handleWidth = 6;
	    if (delta > 0) {
	      handle.style.left = (box.left + box.width - handleWidth) + 'px';
	    } else {
	      handle.style.left = box.left + 'px';
	    }
	  }
	  function setupGuidePosition() {
	    var instance = this;
	    addClass(handle, 'active');
	    addClass(guide, 'active');
	    var box = currentTH.getBoundingClientRect();
	    guide.style.width = box.width + 'px';
	    guide.style.height = instance.view.maximumVisibleElementHeight(0) + 'px';
	    guide.style.top = handle.style.top;
	    guide.style.left = startOffset + 'px';
	    instance.rootElement.appendChild(guide);
	  }
	  function refreshGuidePosition(diff) {
	    guide.style.left = startOffset + diff + 'px';
	  }
	  function hideHandleAndGuide() {
	    removeClass(handle, 'active');
	    removeClass(guide, 'active');
	  }
	  var checkColumnHeader = function(element) {
	    if (element.tagName != 'BODY') {
	      if (element.parentNode.tagName == 'THEAD') {
	        return true;
	      } else {
	        element = element.parentNode;
	        return checkColumnHeader(element);
	      }
	    }
	    return false;
	  };
	  var getTHFromTargetElement = function(element) {
	    if (element.tagName != 'TABLE') {
	      if (element.tagName == 'TH') {
	        return element;
	      } else {
	        return getTHFromTargetElement(element.parentNode);
	      }
	    }
	    return null;
	  };
	  var bindEvents = function() {
	    var instance = this;
	    var pressed;
	    eventManager.addEventListener(instance.rootElement, 'mouseover', function(e) {
	      if (checkColumnHeader(e.target)) {
	        var th = getTHFromTargetElement(e.target);
	        if (th) {
	          if (pressed) {
	            var col = instance.view.wt.wtTable.getCoords(th).col;
	            if (col >= 0) {
	              endCol = col;
	              refreshHandlePosition(e.target, endCol - startCol);
	            }
	          } else {
	            setupHandlePosition.call(instance, th);
	          }
	        }
	      }
	    });
	    eventManager.addEventListener(instance.rootElement, 'mousedown', function(e) {
	      if (hasClass(e.target, 'manualColumnMover')) {
	        startX = pageX(e);
	        setupGuidePosition.call(instance);
	        pressed = instance;
	        startCol = currentCol;
	        endCol = currentCol;
	      }
	    });
	    eventManager.addEventListener(window, 'mousemove', function(e) {
	      if (pressed) {
	        refreshGuidePosition(pageX(e) - startX);
	      }
	    });
	    eventManager.addEventListener(window, 'mouseup', function(e) {
	      if (pressed) {
	        hideHandleAndGuide();
	        pressed = false;
	        createPositionData(instance.manualColumnPositions, instance.countCols());
	        instance.manualColumnPositions.splice(endCol, 0, instance.manualColumnPositions.splice(startCol, 1)[0]);
	        Handsontable.hooks.run(instance, 'beforeColumnMove', startCol, endCol);
	        instance.forceFullRender = true;
	        instance.view.render();
	        saveManualColumnPositions.call(instance);
	        Handsontable.hooks.run(instance, 'afterColumnMove', startCol, endCol);
	        setupHandlePosition.call(instance, currentTH);
	      }
	    });
	    instance.addHook('afterDestroy', unbindEvents);
	  };
	  var unbindEvents = function() {
	    eventManager.clear();
	  };
	  var createPositionData = function(positionArr, len) {
	    if (positionArr.length < len) {
	      for (var i = positionArr.length; i < len; i++) {
	        positionArr[i] = i;
	      }
	    }
	  };
	  this.beforeInit = function() {
	    this.manualColumnPositions = [];
	  };
	  this.init = function(source) {
	    var instance = this;
	    var manualColMoveEnabled = !!(this.getSettings().manualColumnMove);
	    if (manualColMoveEnabled) {
	      var initialManualColumnPositions = this.getSettings().manualColumnMove;
	      var loadedManualColumnPositions = loadManualColumnPositions.call(instance);
	      if (typeof loadedManualColumnPositions != 'undefined') {
	        this.manualColumnPositions = loadedManualColumnPositions;
	      } else if (Array.isArray(initialManualColumnPositions)) {
	        this.manualColumnPositions = initialManualColumnPositions;
	      } else {
	        this.manualColumnPositions = [];
	      }
	      if (source === 'afterInit' || source === 'afterUpdateSettings' && eventManager.context.eventListeners.length === 0) {
	        if (typeof instance.manualColumnPositionsPluginUsages === 'undefined') {
	          instance.manualColumnPositionsPluginUsages = ['manualColumnMove'];
	        } else {
	          instance.manualColumnPositionsPluginUsages.push('manualColumnMove');
	        }
	        bindEvents.call(this);
	        if (this.manualColumnPositions.length > 0) {
	          this.forceFullRender = true;
	          this.render();
	        }
	      }
	    } else {
	      var pluginUsagesIndex = instance.manualColumnPositionsPluginUsages ? instance.manualColumnPositionsPluginUsages.indexOf('manualColumnMove') : -1;
	      if (pluginUsagesIndex > -1) {
	        unbindEvents.call(this);
	        this.manualColumnPositions = [];
	        instance.manualColumnPositionsPluginUsages[pluginUsagesIndex] = void 0;
	      }
	    }
	  };
	  this.modifyCol = function(col) {
	    if (this.getSettings().manualColumnMove) {
	      if (typeof this.manualColumnPositions[col] === 'undefined') {
	        createPositionData(this.manualColumnPositions, col + 1);
	      }
	      return this.manualColumnPositions[col];
	    }
	    return col;
	  };
	  this.afterRemoveCol = function(index, amount) {
	    if (!this.getSettings().manualColumnMove) {
	      return;
	    }
	    var rmindx,
	        colpos = this.manualColumnPositions;
	    rmindx = colpos.splice(index, amount);
	    colpos = colpos.map(function(colpos) {
	      var i,
	          newpos = colpos;
	      for (i = 0; i < rmindx.length; i++) {
	        if (colpos > rmindx[i]) {
	          newpos--;
	        }
	      }
	      return newpos;
	    });
	    this.manualColumnPositions = colpos;
	  };
	  this.afterCreateCol = function(index, amount) {
	    if (!this.getSettings().manualColumnMove) {
	      return;
	    }
	    var colpos = this.manualColumnPositions;
	    if (!colpos.length) {
	      return;
	    }
	    var addindx = [];
	    for (var i = 0; i < amount; i++) {
	      addindx.push(index + i);
	    }
	    if (index >= colpos.length) {
	      colpos.concat(addindx);
	    } else {
	      colpos = colpos.map(function(colpos) {
	        return (colpos >= index) ? (colpos + amount) : colpos;
	      });
	      colpos.splice.apply(colpos, [index, 0].concat(addindx));
	    }
	    this.manualColumnPositions = colpos;
	  };
	}
	var htManualColumnMove = new ManualColumnMove();
	Handsontable.hooks.add('beforeInit', htManualColumnMove.beforeInit);
	Handsontable.hooks.add('afterInit', function() {
	  htManualColumnMove.init.call(this, 'afterInit');
	});
	Handsontable.hooks.add('afterUpdateSettings', function() {
	  htManualColumnMove.init.call(this, 'afterUpdateSettings');
	});
	Handsontable.hooks.add('modifyCol', htManualColumnMove.modifyCol);
	Handsontable.hooks.add('afterRemoveCol', htManualColumnMove.afterRemoveCol);
	Handsontable.hooks.add('afterCreateCol', htManualColumnMove.afterCreateCol);
	Handsontable.hooks.register('beforeColumnMove');
	Handsontable.hooks.register('afterColumnMove');

	//# 
	},{"eventManager":40,"helpers/dom/element":44,"helpers/dom/event":45,"plugins":55}],76:[function(require,module,exports){
	"use strict";
	Object.defineProperties(exports, {
	  ManualColumnResize: {get: function() {
	      return ManualColumnResize;
	    }},
	  __esModule: {value: true}
	});
	var $___46__46__47__95_base_46_js__,
	    $___46__46__47__46__46__47_helpers_47_dom_47_element__,
	    $___46__46__47__46__46__47_eventManager__,
	    $___46__46__47__46__46__47_helpers_47_dom_47_event__,
	    $___46__46__47__46__46__47_plugins__;
	var BasePlugin = ($___46__46__47__95_base_46_js__ = require("_base.js"), $___46__46__47__95_base_46_js__ && $___46__46__47__95_base_46_js__.__esModule && $___46__46__47__95_base_46_js__ || {default: $___46__46__47__95_base_46_js__}).default;
	var $__1 = ($___46__46__47__46__46__47_helpers_47_dom_47_element__ = require("helpers/dom/element"), $___46__46__47__46__46__47_helpers_47_dom_47_element__ && $___46__46__47__46__46__47_helpers_47_dom_47_element__.__esModule && $___46__46__47__46__46__47_helpers_47_dom_47_element__ || {default: $___46__46__47__46__46__47_helpers_47_dom_47_element__}),
	    addClass = $__1.addClass,
	    hasClass = $__1.hasClass,
	    removeClass = $__1.removeClass;
	var eventManagerObject = ($___46__46__47__46__46__47_eventManager__ = require("eventManager"), $___46__46__47__46__46__47_eventManager__ && $___46__46__47__46__46__47_eventManager__.__esModule && $___46__46__47__46__46__47_eventManager__ || {default: $___46__46__47__46__46__47_eventManager__}).eventManager;
	var $__3 = ($___46__46__47__46__46__47_helpers_47_dom_47_event__ = require("helpers/dom/event"), $___46__46__47__46__46__47_helpers_47_dom_47_event__ && $___46__46__47__46__46__47_helpers_47_dom_47_event__.__esModule && $___46__46__47__46__46__47_helpers_47_dom_47_event__ || {default: $___46__46__47__46__46__47_helpers_47_dom_47_event__}),
	    pageX = $__3.pageX,
	    pageY = $__3.pageY;
	var registerPlugin = ($___46__46__47__46__46__47_plugins__ = require("plugins"), $___46__46__47__46__46__47_plugins__ && $___46__46__47__46__46__47_plugins__.__esModule && $___46__46__47__46__46__47_plugins__ || {default: $___46__46__47__46__46__47_plugins__}).registerPlugin;
	var ManualColumnResize = function ManualColumnResize(hotInstance) {
	  $traceurRuntime.superConstructor($ManualColumnResize).call(this, hotInstance);
	  this.currentTH = null;
	  this.currentCol = null;
	  this.currentWidth = null;
	  this.newSize = null;
	  this.startY = null;
	  this.startWidth = null;
	  this.startOffset = null;
	  this.handle = document.createElement('DIV');
	  this.guide = document.createElement('DIV');
	  this.eventManager = eventManagerObject(this);
	  this.pressed = null;
	  this.dblclick = 0;
	  this.autoresizeTimeout = null;
	  this.manualColumnWidths = [];
	  addClass(this.handle, 'manualColumnResizer');
	  addClass(this.guide, 'manualColumnResizerGuide');
	};
	var $ManualColumnResize = ManualColumnResize;
	($traceurRuntime.createClass)(ManualColumnResize, {
	  isEnabled: function() {
	    return this.hot.getSettings().manualColumnResize;
	  },
	  enablePlugin: function() {
	    var $__5 = this;
	    if (this.enabled) {
	      return;
	    }
	    this.manualColumnWidths = [];
	    var initialColumnWidth = this.hot.getSettings().manualColumnResize;
	    var loadedManualColumnWidths = this.loadManualColumnWidths();
	    this.addHook('modifyColWidth', (function(width, col) {
	      return $__5.onModifyColWidth(width, col);
	    }));
	    if (typeof loadedManualColumnWidths != 'undefined') {
	      this.manualColumnWidths = loadedManualColumnWidths;
	    } else if (Array.isArray(initialColumnWidth)) {
	      this.manualColumnWidths = initialColumnWidth;
	    } else {
	      this.manualColumnWidths = [];
	    }
	    Handsontable.hooks.register('beforeColumnResize');
	    Handsontable.hooks.register('afterColumnResize');
	    this.bindEvents();
	    $traceurRuntime.superGet(this, $ManualColumnResize.prototype, "enablePlugin").call(this);
	  },
	  updatePlugin: function() {
	    var initialColumnWidth = this.hot.getSettings().manualColumnResize;
	    if (Array.isArray(initialColumnWidth)) {
	      this.manualColumnWidths = initialColumnWidth;
	    } else {
	      this.manualColumnWidths = [];
	    }
	  },
	  disablePlugin: function() {
	    $traceurRuntime.superGet(this, $ManualColumnResize.prototype, "disablePlugin").call(this);
	  },
	  saveManualColumnWidths: function() {
	    this.hot.runHooks('persistentStateSave', 'manualColumnWidths', this.manualColumnWidths);
	  },
	  loadManualColumnWidths: function() {
	    var storedState = {};
	    this.hot.runHooks('persistentStateLoad', 'manualColumnWidths', storedState);
	    return storedState.value;
	  },
	  setupHandlePosition: function(TH) {
	    this.currentTH = TH;
	    var col = this.hot.view.wt.wtTable.getCoords(TH).col;
	    if (col >= 0) {
	      var box = this.currentTH.getBoundingClientRect();
	      this.currentCol = col;
	      this.startOffset = box.left - 6;
	      this.startWidth = parseInt(box.width, 10);
	      this.handle.style.top = box.top + 'px';
	      this.handle.style.left = this.startOffset + this.startWidth + 'px';
	      this.hot.rootElement.appendChild(this.handle);
	    }
	  },
	  refreshHandlePosition: function() {
	    this.handle.style.left = this.startOffset + this.currentWidth + 'px';
	  },
	  setupGuidePosition: function() {
	    addClass(this.handle, 'active');
	    addClass(this.guide, 'active');
	    this.guide.style.top = this.handle.style.top;
	    this.guide.style.left = this.handle.style.left;
	    this.guide.style.height = this.hot.view.maximumVisibleElementHeight(0) + 'px';
	    this.hot.rootElement.appendChild(this.guide);
	  },
	  refreshGuidePosition: function() {
	    this.guide.style.left = this.handle.style.left;
	  },
	  hideHandleAndGuide: function() {
	    removeClass(this.handle, 'active');
	    removeClass(this.guide, 'active');
	  },
	  checkIfColumnHeader: function(element) {
	    if (element.tagName != 'BODY') {
	      if (element.parentNode.tagName == 'THEAD') {
	        return true;
	      } else {
	        element = element.parentNode;
	        return this.checkIfColumnHeader(element);
	      }
	    }
	    return false;
	  },
	  getTHFromTargetElement: function(element) {
	    if (element.tagName != 'TABLE') {
	      if (element.tagName == 'TH') {
	        return element;
	      } else {
	        return this.getTHFromTargetElement(element.parentNode);
	      }
	    }
	    return null;
	  },
	  onMouseOver: function(event) {
	    if (this.checkIfColumnHeader(event.target)) {
	      var th = this.getTHFromTargetElement(event.target);
	      if (!th) {
	        return;
	      }
	      var colspan = th.getAttribute('colspan');
	      if (th && (colspan === null || colspan === 1)) {
	        if (!this.pressed) {
	          this.setupHandlePosition(th);
	        }
	      }
	    }
	  },
	  afterMouseDownTimeout: function() {
	    if (this.dblclick >= 2) {
	      var hookNewSize = this.hot.runHooks('beforeColumnResize', this.currentCol, this.newSize, true);
	      if (hookNewSize !== void 0) {
	        this.newSize = hookNewSize;
	      }
	      this.setManualSize(this.currentCol, this.newSize);
	      this.hot.forceFullRender = true;
	      this.hot.view.render();
	      this.hot.view.wt.wtOverlays.adjustElementsSize(true);
	      this.hot.runHooks('afterColumnResize', this.currentCol, this.newSize, true);
	    }
	    this.dblclick = 0;
	    this.autoresizeTimeout = null;
	  },
	  onMouseDown: function(event) {
	    var $__5 = this;
	    if (hasClass(event.target, 'manualColumnResizer')) {
	      this.setupGuidePosition();
	      this.pressed = this.hot;
	      if (this.autoresizeTimeout === null) {
	        this.autoresizeTimeout = setTimeout((function() {
	          return $__5.afterMouseDownTimeout();
	        }), 500);
	        this.hot._registerTimeout(this.autoresizeTimeout);
	      }
	      this.dblclick++;
	      this.startX = pageX(event);
	      this.newSize = this.startWidth;
	    }
	  },
	  onMouseMove: function(event) {
	    if (this.pressed) {
	      this.currentWidth = this.startWidth + (pageX(event) - this.startX);
	      this.newSize = this.setManualSize(this.currentCol, this.currentWidth);
	      this.refreshHandlePosition();
	      this.refreshGuidePosition();
	    }
	  },
	  onMouseUp: function(event) {
	    if (this.pressed) {
	      this.hideHandleAndGuide();
	      this.pressed = false;
	      if (this.newSize != this.startWidth) {
	        this.hot.runHooks('beforeColumnResize', this.currentCol, this.newSize);
	        this.hot.forceFullRender = true;
	        this.hot.view.render();
	        this.hot.view.wt.wtOverlays.adjustElementsSize(true);
	        this.saveManualColumnWidths();
	        this.hot.runHooks('afterColumnResize', this.currentCol, this.newSize);
	      }
	      this.setupHandlePosition(this.currentTH);
	    }
	  },
	  bindEvents: function() {
	    var $__5 = this;
	    this.eventManager.addEventListener(this.hot.rootElement, 'mouseover', (function(e) {
	      return $__5.onMouseOver(e);
	    }));
	    this.eventManager.addEventListener(this.hot.rootElement, 'mousedown', (function(e) {
	      return $__5.onMouseDown(e);
	    }));
	    this.eventManager.addEventListener(window, 'mousemove', (function(e) {
	      return $__5.onMouseMove(e);
	    }));
	    this.eventManager.addEventListener(window, 'mouseup', (function(e) {
	      return $__5.onMouseUp(e);
	    }));
	  },
	  setManualSize: function(column, width) {
	    width = Math.max(width, 20);
	    column = this.hot.runHooks('modifyCol', column);
	    this.manualColumnWidths[column] = width;
	    return width;
	  },
	  onModifyColWidth: function(width, column) {
	    if (this.enabled) {
	      column = this.hot.runHooks('modifyCol', column);
	      if (this.hot.getSettings().manualColumnResize && this.manualColumnWidths[column]) {
	        return this.manualColumnWidths[column];
	      }
	    }
	    return width;
	  }
	}, {}, BasePlugin);
	;
	registerPlugin('manualColumnResize', ManualColumnResize);

	//# 
	},{"_base.js":56,"eventManager":40,"helpers/dom/element":44,"helpers/dom/event":45,"plugins":55}],77:[function(require,module,exports){
	"use strict";
	Object.defineProperties(exports, {
	  ManualRowMove: {get: function() {
	      return ManualRowMove;
	    }},
	  __esModule: {value: true}
	});
	var $___46__46__47__46__46__47_helpers_47_dom_47_element__,
	    $___46__46__47__46__46__47_eventManager__,
	    $___46__46__47__46__46__47_helpers_47_dom_47_event__,
	    $___46__46__47__46__46__47_plugins__;
	var $__0 = ($___46__46__47__46__46__47_helpers_47_dom_47_element__ = require("helpers/dom/element"), $___46__46__47__46__46__47_helpers_47_dom_47_element__ && $___46__46__47__46__46__47_helpers_47_dom_47_element__.__esModule && $___46__46__47__46__46__47_helpers_47_dom_47_element__ || {default: $___46__46__47__46__46__47_helpers_47_dom_47_element__}),
	    addClass = $__0.addClass,
	    hasClass = $__0.hasClass,
	    removeClass = $__0.removeClass;
	var eventManagerObject = ($___46__46__47__46__46__47_eventManager__ = require("eventManager"), $___46__46__47__46__46__47_eventManager__ && $___46__46__47__46__46__47_eventManager__.__esModule && $___46__46__47__46__46__47_eventManager__ || {default: $___46__46__47__46__46__47_eventManager__}).eventManager;
	var $__2 = ($___46__46__47__46__46__47_helpers_47_dom_47_event__ = require("helpers/dom/event"), $___46__46__47__46__46__47_helpers_47_dom_47_event__ && $___46__46__47__46__46__47_helpers_47_dom_47_event__.__esModule && $___46__46__47__46__46__47_helpers_47_dom_47_event__ || {default: $___46__46__47__46__46__47_helpers_47_dom_47_event__}),
	    pageX = $__2.pageX,
	    pageY = $__2.pageY;
	var registerPlugin = ($___46__46__47__46__46__47_plugins__ = require("plugins"), $___46__46__47__46__46__47_plugins__ && $___46__46__47__46__46__47_plugins__.__esModule && $___46__46__47__46__46__47_plugins__ || {default: $___46__46__47__46__46__47_plugins__}).registerPlugin;
	;
	function ManualRowMove() {
	  var startRow,
	      endRow,
	      startY,
	      startOffset,
	      currentRow,
	      currentTH,
	      handle = document.createElement('DIV'),
	      guide = document.createElement('DIV'),
	      eventManager = eventManagerObject(this);
	  handle.className = 'manualRowMover';
	  guide.className = 'manualRowMoverGuide';
	  var saveManualRowPositions = function() {
	    var instance = this;
	    Handsontable.hooks.run(instance, 'persistentStateSave', 'manualRowPositions', instance.manualRowPositions);
	  };
	  var loadManualRowPositions = function() {
	    var instance = this,
	        storedState = {};
	    Handsontable.hooks.run(instance, 'persistentStateLoad', 'manualRowPositions', storedState);
	    return storedState.value;
	  };
	  function setupHandlePosition(TH) {
	    var instance = this;
	    currentTH = TH;
	    var row = this.view.wt.wtTable.getCoords(TH).row;
	    if (row >= 0) {
	      currentRow = row;
	      var box = currentTH.getBoundingClientRect();
	      startOffset = box.top;
	      handle.style.top = startOffset + 'px';
	      handle.style.left = box.left + 'px';
	      instance.rootElement.appendChild(handle);
	    }
	  }
	  function refreshHandlePosition(TH, delta) {
	    var box = TH.getBoundingClientRect();
	    var handleHeight = 6;
	    if (delta > 0) {
	      handle.style.top = (box.top + box.height - handleHeight) + 'px';
	    } else {
	      handle.style.top = box.top + 'px';
	    }
	  }
	  function setupGuidePosition() {
	    var instance = this;
	    addClass(handle, 'active');
	    addClass(guide, 'active');
	    var box = currentTH.getBoundingClientRect();
	    guide.style.width = instance.view.maximumVisibleElementWidth(0) + 'px';
	    guide.style.height = box.height + 'px';
	    guide.style.top = startOffset + 'px';
	    guide.style.left = handle.style.left;
	    instance.rootElement.appendChild(guide);
	  }
	  function refreshGuidePosition(diff) {
	    guide.style.top = startOffset + diff + 'px';
	  }
	  function hideHandleAndGuide() {
	    removeClass(handle, 'active');
	    removeClass(guide, 'active');
	  }
	  var checkRowHeader = function(element) {
	    if (element.tagName != 'BODY') {
	      if (element.parentNode.tagName == 'TBODY') {
	        return true;
	      } else {
	        element = element.parentNode;
	        return checkRowHeader(element);
	      }
	    }
	    return false;
	  };
	  var getTHFromTargetElement = function(element) {
	    if (element.tagName != 'TABLE') {
	      if (element.tagName == 'TH') {
	        return element;
	      } else {
	        return getTHFromTargetElement(element.parentNode);
	      }
	    }
	    return null;
	  };
	  var bindEvents = function() {
	    var instance = this;
	    var pressed;
	    eventManager.addEventListener(instance.rootElement, 'mouseover', function(e) {
	      if (checkRowHeader(e.target)) {
	        var th = getTHFromTargetElement(e.target);
	        if (th) {
	          if (pressed) {
	            endRow = instance.view.wt.wtTable.getCoords(th).row;
	            refreshHandlePosition(th, endRow - startRow);
	          } else {
	            setupHandlePosition.call(instance, th);
	          }
	        }
	      }
	    });
	    eventManager.addEventListener(instance.rootElement, 'mousedown', function(e) {
	      if (hasClass(e.target, 'manualRowMover')) {
	        startY = pageY(e);
	        setupGuidePosition.call(instance);
	        pressed = instance;
	        startRow = currentRow;
	        endRow = currentRow;
	      }
	    });
	    eventManager.addEventListener(window, 'mousemove', function(e) {
	      if (pressed) {
	        refreshGuidePosition(pageY(e) - startY);
	      }
	    });
	    eventManager.addEventListener(window, 'mouseup', function(e) {
	      if (pressed) {
	        hideHandleAndGuide();
	        pressed = false;
	        createPositionData(instance.manualRowPositions, instance.countRows());
	        instance.manualRowPositions.splice(endRow, 0, instance.manualRowPositions.splice(startRow, 1)[0]);
	        Handsontable.hooks.run(instance, 'beforeRowMove', startRow, endRow);
	        instance.forceFullRender = true;
	        instance.view.render();
	        saveManualRowPositions.call(instance);
	        Handsontable.hooks.run(instance, 'afterRowMove', startRow, endRow);
	        setupHandlePosition.call(instance, currentTH);
	      }
	    });
	    instance.addHook('afterDestroy', unbindEvents);
	  };
	  var unbindEvents = function() {
	    eventManager.clear();
	  };
	  var createPositionData = function(positionArr, len) {
	    if (positionArr.length < len) {
	      for (var i = positionArr.length; i < len; i++) {
	        positionArr[i] = i;
	      }
	    }
	  };
	  this.beforeInit = function() {
	    this.manualRowPositions = [];
	  };
	  this.init = function(source) {
	    var instance = this;
	    var manualRowMoveEnabled = !!(instance.getSettings().manualRowMove);
	    if (manualRowMoveEnabled) {
	      var initialManualRowPositions = instance.getSettings().manualRowMove;
	      var loadedManualRowPostions = loadManualRowPositions.call(instance);
	      if (typeof instance.manualRowPositionsPluginUsages === 'undefined') {
	        instance.manualRowPositionsPluginUsages = ['manualColumnMove'];
	      } else {
	        instance.manualRowPositionsPluginUsages.push('manualColumnMove');
	      }
	      if (typeof loadedManualRowPostions != 'undefined') {
	        this.manualRowPositions = loadedManualRowPostions;
	      } else if (Array.isArray(initialManualRowPositions)) {
	        this.manualRowPositions = initialManualRowPositions;
	      } else {
	        this.manualRowPositions = [];
	      }
	      if (source === 'afterInit' || source === 'afterUpdateSettings' && eventManager.context.eventListeners.length === 0) {
	        bindEvents.call(this);
	        if (this.manualRowPositions.length > 0) {
	          instance.forceFullRender = true;
	          instance.render();
	        }
	      }
	    } else {
	      var pluginUsagesIndex = instance.manualRowPositionsPluginUsages ? instance.manualRowPositionsPluginUsages.indexOf('manualColumnMove') : -1;
	      if (pluginUsagesIndex > -1) {
	        unbindEvents.call(this);
	        instance.manualRowPositions = [];
	        instance.manualRowPositionsPluginUsages[pluginUsagesIndex] = void 0;
	      }
	    }
	  };
	  this.modifyRow = function(row) {
	    var instance = this;
	    if (instance.getSettings().manualRowMove) {
	      if (typeof instance.manualRowPositions[row] === 'undefined') {
	        createPositionData(this.manualRowPositions, row + 1);
	      }
	      return instance.manualRowPositions[row];
	    }
	    return row;
	  };
	}
	var htManualRowMove = new ManualRowMove();
	Handsontable.hooks.add('beforeInit', htManualRowMove.beforeInit);
	Handsontable.hooks.add('afterInit', function() {
	  htManualRowMove.init.call(this, 'afterInit');
	});
	Handsontable.hooks.add('afterUpdateSettings', function() {
	  htManualRowMove.init.call(this, 'afterUpdateSettings');
	});
	Handsontable.hooks.add('modifyRow', htManualRowMove.modifyRow);
	Handsontable.hooks.register('beforeRowMove');
	Handsontable.hooks.register('afterRowMove');

	//# 
	},{"eventManager":40,"helpers/dom/element":44,"helpers/dom/event":45,"plugins":55}],78:[function(require,module,exports){
	"use strict";
	Object.defineProperties(exports, {
	  ManualRowResize: {get: function() {
	      return ManualRowResize;
	    }},
	  __esModule: {value: true}
	});
	var $___46__46__47__95_base_46_js__,
	    $___46__46__47__46__46__47_helpers_47_dom_47_element__,
	    $___46__46__47__46__46__47_eventManager__,
	    $___46__46__47__46__46__47_helpers_47_dom_47_event__,
	    $___46__46__47__46__46__47_plugins__;
	var BasePlugin = ($___46__46__47__95_base_46_js__ = require("_base.js"), $___46__46__47__95_base_46_js__ && $___46__46__47__95_base_46_js__.__esModule && $___46__46__47__95_base_46_js__ || {default: $___46__46__47__95_base_46_js__}).default;
	var $__1 = ($___46__46__47__46__46__47_helpers_47_dom_47_element__ = require("helpers/dom/element"), $___46__46__47__46__46__47_helpers_47_dom_47_element__ && $___46__46__47__46__46__47_helpers_47_dom_47_element__.__esModule && $___46__46__47__46__46__47_helpers_47_dom_47_element__ || {default: $___46__46__47__46__46__47_helpers_47_dom_47_element__}),
	    addClass = $__1.addClass,
	    hasClass = $__1.hasClass,
	    removeClass = $__1.removeClass;
	var eventManagerObject = ($___46__46__47__46__46__47_eventManager__ = require("eventManager"), $___46__46__47__46__46__47_eventManager__ && $___46__46__47__46__46__47_eventManager__.__esModule && $___46__46__47__46__46__47_eventManager__ || {default: $___46__46__47__46__46__47_eventManager__}).eventManager;
	var $__3 = ($___46__46__47__46__46__47_helpers_47_dom_47_event__ = require("helpers/dom/event"), $___46__46__47__46__46__47_helpers_47_dom_47_event__ && $___46__46__47__46__46__47_helpers_47_dom_47_event__.__esModule && $___46__46__47__46__46__47_helpers_47_dom_47_event__ || {default: $___46__46__47__46__46__47_helpers_47_dom_47_event__}),
	    pageX = $__3.pageX,
	    pageY = $__3.pageY;
	var registerPlugin = ($___46__46__47__46__46__47_plugins__ = require("plugins"), $___46__46__47__46__46__47_plugins__ && $___46__46__47__46__46__47_plugins__.__esModule && $___46__46__47__46__46__47_plugins__ || {default: $___46__46__47__46__46__47_plugins__}).registerPlugin;
	var ManualRowResize = function ManualRowResize(hotInstance) {
	  $traceurRuntime.superConstructor($ManualRowResize).call(this, hotInstance);
	  this.currentTH = null;
	  this.currentRow = null;
	  this.currentHeight = null;
	  this.newSize = null;
	  this.startY = null;
	  this.startHeight = null;
	  this.startOffset = null;
	  this.handle = document.createElement('DIV');
	  this.guide = document.createElement('DIV');
	  this.eventManager = eventManagerObject(this);
	  this.pressed = null;
	  this.dblclick = 0;
	  this.autoresizeTimeout = null;
	  this.manualRowHeights = [];
	  addClass(this.handle, 'manualRowResizer');
	  addClass(this.guide, 'manualRowResizerGuide');
	};
	var $ManualRowResize = ManualRowResize;
	($traceurRuntime.createClass)(ManualRowResize, {
	  isEnabled: function() {
	    return this.hot.getSettings().manualRowResize;
	  },
	  enablePlugin: function() {
	    var $__5 = this;
	    if (this.enabled) {
	      return;
	    }
	    this.manualRowHeights = [];
	    var initialRowHeights = this.hot.getSettings().manualRowResize;
	    var loadedManualRowHeights = this.loadManualRowHeights();
	    if (typeof loadedManualRowHeights != 'undefined') {
	      this.manualRowHeights = loadedManualRowHeights;
	    } else if (Array.isArray(initialRowHeights)) {
	      this.manualRowHeights = initialRowHeights;
	    } else {
	      this.manualRowHeights = [];
	    }
	    this.addHook('modifyRowHeight', (function(height, row) {
	      return $__5.onModifyRowHeight(height, row);
	    }));
	    Handsontable.hooks.register('beforeRowResize');
	    Handsontable.hooks.register('afterRowResize');
	    this.bindEvents();
	    $traceurRuntime.superGet(this, $ManualRowResize.prototype, "enablePlugin").call(this);
	  },
	  updatePlugin: function() {
	    var initialRowHeights = this.hot.getSettings().manualRowResize;
	    if (Array.isArray(initialRowHeights)) {
	      this.manualRowHeights = initialRowHeights;
	    } else {
	      this.manualRowHeights = [];
	    }
	  },
	  disablePlugin: function() {
	    $traceurRuntime.superGet(this, $ManualRowResize.prototype, "disablePlugin").call(this);
	  },
	  saveManualRowHeights: function() {
	    this.hot.runHooks('persistentStateSave', 'manualRowHeights', this.manualRowHeights);
	  },
	  loadManualRowHeights: function() {
	    var storedState = {};
	    this.hot.runHooks('persistentStateLoad', 'manualRowHeights', storedState);
	    return storedState.value;
	  },
	  setupHandlePosition: function(TH) {
	    this.currentTH = TH;
	    var row = this.hot.view.wt.wtTable.getCoords(TH).row;
	    if (row >= 0) {
	      var box = this.currentTH.getBoundingClientRect();
	      this.currentRow = row;
	      this.startOffset = box.top - 6;
	      this.startHeight = parseInt(box.height, 10);
	      this.handle.style.left = box.left + 'px';
	      this.handle.style.top = this.startOffset + this.startHeight + 'px';
	      this.hot.rootElement.appendChild(this.handle);
	    }
	  },
	  refreshHandlePosition: function() {
	    this.handle.style.top = this.startOffset + this.currentHeight + 'px';
	  },
	  setupGuidePosition: function() {
	    addClass(this.handle, 'active');
	    addClass(this.guide, 'active');
	    this.guide.style.top = this.handle.style.top;
	    this.guide.style.left = this.handle.style.left;
	    this.guide.style.width = this.hot.view.maximumVisibleElementWidth(0) + 'px';
	    this.hot.rootElement.appendChild(this.guide);
	  },
	  refreshGuidePosition: function() {
	    this.guide.style.top = this.handle.style.top;
	  },
	  hideHandleAndGuide: function() {
	    removeClass(this.handle, 'active');
	    removeClass(this.guide, 'active');
	  },
	  checkIfRowHeader: function(element) {
	    if (element.tagName != 'BODY') {
	      if (element.parentNode.tagName == 'TBODY') {
	        return true;
	      } else {
	        element = element.parentNode;
	        return this.checkIfRowHeader(element);
	      }
	    }
	    return false;
	  },
	  getTHFromTargetElement: function(element) {
	    if (element.tagName != 'TABLE') {
	      if (element.tagName == 'TH') {
	        return element;
	      } else {
	        return this.getTHFromTargetElement(element.parentNode);
	      }
	    }
	    return null;
	  },
	  onMouseOver: function(event) {
	    if (this.checkIfRowHeader(event.target)) {
	      var th = this.getTHFromTargetElement(event.target);
	      if (th) {
	        if (!this.pressed) {
	          this.setupHandlePosition(th);
	        }
	      }
	    }
	  },
	  afterMouseDownTimeout: function() {
	    if (this.dblclick >= 2) {
	      var hookNewSize = this.hot.runHooks('beforeRowResize', this.currentRow, this.newSize, true);
	      if (hookNewSize !== void 0) {
	        this.newSize = hookNewSize;
	      }
	      this.setManualSize(this.currentRow, this.newSize);
	      this.hot.forceFullRender = true;
	      this.hot.view.render();
	      this.hot.view.wt.wtOverlays.adjustElementsSize(true);
	      this.hot.runHooks('afterRowResize', this.currentRow, this.newSize, true);
	    }
	    this.dblclick = 0;
	    this.autoresizeTimeout = null;
	  },
	  onMouseDown: function(event) {
	    var $__5 = this;
	    if (hasClass(event.target, 'manualRowResizer')) {
	      this.setupGuidePosition();
	      this.pressed = this.hot;
	      if (this.autoresizeTimeout == null) {
	        this.autoresizeTimeout = setTimeout((function() {
	          return $__5.afterMouseDownTimeout();
	        }), 500);
	        this.hot._registerTimeout(this.autoresizeTimeout);
	      }
	      this.dblclick++;
	      this.startY = pageY(event);
	      this.newSize = this.startHeight;
	    }
	  },
	  onMouseMove: function(event) {
	    if (this.pressed) {
	      this.currentHeight = this.startHeight + (pageY(event) - this.startY);
	      this.newSize = this.setManualSize(this.currentRow, this.currentHeight);
	      this.refreshHandlePosition();
	      this.refreshGuidePosition();
	    }
	  },
	  onMouseUp: function(event) {
	    if (this.pressed) {
	      this.hideHandleAndGuide();
	      this.pressed = false;
	      if (this.newSize != this.startHeight) {
	        this.hot.runHooks('beforeRowResize', this.currentRow, this.newSize);
	        this.hot.forceFullRender = true;
	        this.hot.view.render();
	        this.hot.view.wt.wtOverlays.adjustElementsSize(true);
	        this.saveManualRowHeights();
	        this.hot.runHooks('afterRowResize', this.currentRow, this.newSize);
	      }
	      this.setupHandlePosition(this.currentTH);
	    }
	  },
	  bindEvents: function() {
	    var $__5 = this;
	    this.eventManager.addEventListener(this.hot.rootElement, 'mouseover', (function(e) {
	      return $__5.onMouseOver(e);
	    }));
	    this.eventManager.addEventListener(this.hot.rootElement, 'mousedown', (function(e) {
	      return $__5.onMouseDown(e);
	    }));
	    this.eventManager.addEventListener(window, 'mousemove', (function(e) {
	      return $__5.onMouseMove(e);
	    }));
	    this.eventManager.addEventListener(window, 'mouseup', (function(e) {
	      return $__5.onMouseUp(e);
	    }));
	  },
	  setManualSize: function(row, height) {
	    row = this.hot.runHooks('modifyRow', row);
	    this.manualRowHeights[row] = height;
	    return height;
	  },
	  onModifyRowHeight: function(height, row) {
	    if (this.enabled) {
	      var autoRowSizePlugin = this.hot.getPlugin('autoRowSize');
	      var autoRowHeightResult = autoRowSizePlugin ? autoRowSizePlugin.heights[row] : null;
	      row = this.hot.runHooks('modifyRow', row);
	      var manualRowHeight = this.manualRowHeights[row];
	      if (manualRowHeight !== void 0 && (manualRowHeight === autoRowHeightResult || manualRowHeight > (height || 0))) {
	        return manualRowHeight;
	      }
	    }
	    return height;
	  }
	}, {}, BasePlugin);
	;
	registerPlugin('manualRowResize', ManualRowResize);

	//# 
	},{"_base.js":56,"eventManager":40,"helpers/dom/element":44,"helpers/dom/event":45,"plugins":55}],79:[function(require,module,exports){
	"use strict";
	Object.defineProperties(exports, {
	  MergeCells: {get: function() {
	      return MergeCells;
	    }},
	  __esModule: {value: true}
	});
	var $___46__46__47__46__46__47_plugins__,
	    $___46__46__47__46__46__47_helpers_47_dom_47_event__,
	    $___46__46__47__46__46__47_3rdparty_47_walkontable_47_src_47_cell_47_coords__,
	    $___46__46__47__46__46__47_3rdparty_47_walkontable_47_src_47_cell_47_range__,
	    $___46__46__47__46__46__47_3rdparty_47_walkontable_47_src_47_table__;
	var registerPlugin = ($___46__46__47__46__46__47_plugins__ = require("plugins"), $___46__46__47__46__46__47_plugins__ && $___46__46__47__46__46__47_plugins__.__esModule && $___46__46__47__46__46__47_plugins__ || {default: $___46__46__47__46__46__47_plugins__}).registerPlugin;
	var stopImmediatePropagation = ($___46__46__47__46__46__47_helpers_47_dom_47_event__ = require("helpers/dom/event"), $___46__46__47__46__46__47_helpers_47_dom_47_event__ && $___46__46__47__46__46__47_helpers_47_dom_47_event__.__esModule && $___46__46__47__46__46__47_helpers_47_dom_47_event__ || {default: $___46__46__47__46__46__47_helpers_47_dom_47_event__}).stopImmediatePropagation;
	var WalkontableCellCoords = ($___46__46__47__46__46__47_3rdparty_47_walkontable_47_src_47_cell_47_coords__ = require("3rdparty/walkontable/src/cell/coords"), $___46__46__47__46__46__47_3rdparty_47_walkontable_47_src_47_cell_47_coords__ && $___46__46__47__46__46__47_3rdparty_47_walkontable_47_src_47_cell_47_coords__.__esModule && $___46__46__47__46__46__47_3rdparty_47_walkontable_47_src_47_cell_47_coords__ || {default: $___46__46__47__46__46__47_3rdparty_47_walkontable_47_src_47_cell_47_coords__}).WalkontableCellCoords;
	var WalkontableCellRange = ($___46__46__47__46__46__47_3rdparty_47_walkontable_47_src_47_cell_47_range__ = require("3rdparty/walkontable/src/cell/range"), $___46__46__47__46__46__47_3rdparty_47_walkontable_47_src_47_cell_47_range__ && $___46__46__47__46__46__47_3rdparty_47_walkontable_47_src_47_cell_47_range__.__esModule && $___46__46__47__46__46__47_3rdparty_47_walkontable_47_src_47_cell_47_range__ || {default: $___46__46__47__46__46__47_3rdparty_47_walkontable_47_src_47_cell_47_range__}).WalkontableCellRange;
	var WalkontableTable = ($___46__46__47__46__46__47_3rdparty_47_walkontable_47_src_47_table__ = require("3rdparty/walkontable/src/table"), $___46__46__47__46__46__47_3rdparty_47_walkontable_47_src_47_table__ && $___46__46__47__46__46__47_3rdparty_47_walkontable_47_src_47_table__.__esModule && $___46__46__47__46__46__47_3rdparty_47_walkontable_47_src_47_table__ || {default: $___46__46__47__46__46__47_3rdparty_47_walkontable_47_src_47_table__}).WalkontableTable;
	;
	function CellInfoCollection() {
	  var collection = [];
	  collection.getInfo = function(row, col) {
	    for (var i = 0,
	        ilen = this.length; i < ilen; i++) {
	      if (this[i].row <= row && this[i].row + this[i].rowspan - 1 >= row && this[i].col <= col && this[i].col + this[i].colspan - 1 >= col) {
	        return this[i];
	      }
	    }
	  };
	  collection.setInfo = function(info) {
	    for (var i = 0,
	        ilen = this.length; i < ilen; i++) {
	      if (this[i].row === info.row && this[i].col === info.col) {
	        this[i] = info;
	        return;
	      }
	    }
	    this.push(info);
	  };
	  collection.removeInfo = function(row, col) {
	    for (var i = 0,
	        ilen = this.length; i < ilen; i++) {
	      if (this[i].row === row && this[i].col === col) {
	        this.splice(i, 1);
	        break;
	      }
	    }
	  };
	  return collection;
	}
	function MergeCells(mergeCellsSetting) {
	  this.mergedCellInfoCollection = new CellInfoCollection();
	  if (Array.isArray(mergeCellsSetting)) {
	    for (var i = 0,
	        ilen = mergeCellsSetting.length; i < ilen; i++) {
	      this.mergedCellInfoCollection.setInfo(mergeCellsSetting[i]);
	    }
	  }
	}
	MergeCells.prototype.canMergeRange = function(cellRange) {
	  return !cellRange.isSingle();
	};
	MergeCells.prototype.mergeRange = function(cellRange) {
	  if (!this.canMergeRange(cellRange)) {
	    return;
	  }
	  var topLeft = cellRange.getTopLeftCorner();
	  var bottomRight = cellRange.getBottomRightCorner();
	  var mergeParent = {};
	  mergeParent.row = topLeft.row;
	  mergeParent.col = topLeft.col;
	  mergeParent.rowspan = bottomRight.row - topLeft.row + 1;
	  mergeParent.colspan = bottomRight.col - topLeft.col + 1;
	  this.mergedCellInfoCollection.setInfo(mergeParent);
	};
	MergeCells.prototype.mergeOrUnmergeSelection = function(cellRange) {
	  var info = this.mergedCellInfoCollection.getInfo(cellRange.from.row, cellRange.from.col);
	  if (info) {
	    this.unmergeSelection(cellRange.from);
	  } else {
	    this.mergeSelection(cellRange);
	  }
	};
	MergeCells.prototype.mergeSelection = function(cellRange) {
	  this.mergeRange(cellRange);
	};
	MergeCells.prototype.unmergeSelection = function(cellRange) {
	  var info = this.mergedCellInfoCollection.getInfo(cellRange.row, cellRange.col);
	  this.mergedCellInfoCollection.removeInfo(info.row, info.col);
	};
	MergeCells.prototype.applySpanProperties = function(TD, row, col) {
	  var info = this.mergedCellInfoCollection.getInfo(row, col);
	  if (info) {
	    if (info.row === row && info.col === col) {
	      TD.setAttribute('rowspan', info.rowspan);
	      TD.setAttribute('colspan', info.colspan);
	    } else {
	      TD.removeAttribute('rowspan');
	      TD.removeAttribute('colspan');
	      TD.style.display = 'none';
	    }
	  } else {
	    TD.removeAttribute('rowspan');
	    TD.removeAttribute('colspan');
	  }
	};
	MergeCells.prototype.modifyTransform = function(hook, currentSelectedRange, delta) {
	  var sameRowspan = function(merged, coords) {
	    if (coords.row >= merged.row && coords.row <= (merged.row + merged.rowspan - 1)) {
	      return true;
	    }
	    return false;
	  },
	      sameColspan = function(merged, coords) {
	        if (coords.col >= merged.col && coords.col <= (merged.col + merged.colspan - 1)) {
	          return true;
	        }
	        return false;
	      },
	      getNextPosition = function(newDelta) {
	        return new WalkontableCellCoords(currentSelectedRange.to.row + newDelta.row, currentSelectedRange.to.col + newDelta.col);
	      };
	  var newDelta = {
	    row: delta.row,
	    col: delta.col
	  };
	  if (hook == 'modifyTransformStart') {
	    if (!this.lastDesiredCoords) {
	      this.lastDesiredCoords = new WalkontableCellCoords(null, null);
	    }
	    var currentPosition = new WalkontableCellCoords(currentSelectedRange.highlight.row, currentSelectedRange.highlight.col),
	        mergedParent = this.mergedCellInfoCollection.getInfo(currentPosition.row, currentPosition.col),
	        currentRangeContainsMerge;
	    for (var i = 0,
	        mergesLength = this.mergedCellInfoCollection.length; i < mergesLength; i++) {
	      var range = this.mergedCellInfoCollection[i];
	      range = new WalkontableCellCoords(range.row + range.rowspan - 1, range.col + range.colspan - 1);
	      if (currentSelectedRange.includes(range)) {
	        currentRangeContainsMerge = true;
	        break;
	      }
	    }
	    if (mergedParent) {
	      var mergeTopLeft = new WalkontableCellCoords(mergedParent.row, mergedParent.col),
	          mergeBottomRight = new WalkontableCellCoords(mergedParent.row + mergedParent.rowspan - 1, mergedParent.col + mergedParent.colspan - 1),
	          mergeRange = new WalkontableCellRange(mergeTopLeft, mergeTopLeft, mergeBottomRight);
	      if (!mergeRange.includes(this.lastDesiredCoords)) {
	        this.lastDesiredCoords = new WalkontableCellCoords(null, null);
	      }
	      newDelta.row = this.lastDesiredCoords.row ? this.lastDesiredCoords.row - currentPosition.row : newDelta.row;
	      newDelta.col = this.lastDesiredCoords.col ? this.lastDesiredCoords.col - currentPosition.col : newDelta.col;
	      if (delta.row > 0) {
	        newDelta.row = mergedParent.row + mergedParent.rowspan - 1 - currentPosition.row + delta.row;
	      } else if (delta.row < 0) {
	        newDelta.row = currentPosition.row - mergedParent.row + delta.row;
	      }
	      if (delta.col > 0) {
	        newDelta.col = mergedParent.col + mergedParent.colspan - 1 - currentPosition.col + delta.col;
	      } else if (delta.col < 0) {
	        newDelta.col = currentPosition.col - mergedParent.col + delta.col;
	      }
	    }
	    var nextPosition = new WalkontableCellCoords(currentSelectedRange.highlight.row + newDelta.row, currentSelectedRange.highlight.col + newDelta.col),
	        nextParentIsMerged = this.mergedCellInfoCollection.getInfo(nextPosition.row, nextPosition.col);
	    if (nextParentIsMerged) {
	      this.lastDesiredCoords = nextPosition;
	      newDelta = {
	        row: nextParentIsMerged.row - currentPosition.row,
	        col: nextParentIsMerged.col - currentPosition.col
	      };
	    }
	  } else if (hook == 'modifyTransformEnd') {
	    for (var i = 0,
	        mergesLength = this.mergedCellInfoCollection.length; i < mergesLength; i++) {
	      var currentMerge = this.mergedCellInfoCollection[i],
	          mergeTopLeft = new WalkontableCellCoords(currentMerge.row, currentMerge.col),
	          mergeBottomRight = new WalkontableCellCoords(currentMerge.row + currentMerge.rowspan - 1, currentMerge.col + currentMerge.colspan - 1),
	          mergedRange = new WalkontableCellRange(mergeTopLeft, mergeTopLeft, mergeBottomRight),
	          sharedBorders = currentSelectedRange.getBordersSharedWith(mergedRange);
	      if (mergedRange.isEqual(currentSelectedRange)) {
	        currentSelectedRange.setDirection('NW-SE');
	      } else if (sharedBorders.length > 0) {
	        var mergeHighlighted = (currentSelectedRange.highlight.isEqual(mergedRange.from));
	        if (sharedBorders.indexOf('top') > -1) {
	          if (currentSelectedRange.to.isSouthEastOf(mergedRange.from) && mergeHighlighted) {
	            currentSelectedRange.setDirection('NW-SE');
	          } else if (currentSelectedRange.to.isSouthWestOf(mergedRange.from) && mergeHighlighted) {
	            currentSelectedRange.setDirection('NE-SW');
	          }
	        } else if (sharedBorders.indexOf('bottom') > -1) {
	          if (currentSelectedRange.to.isNorthEastOf(mergedRange.from) && mergeHighlighted) {
	            currentSelectedRange.setDirection('SW-NE');
	          } else if (currentSelectedRange.to.isNorthWestOf(mergedRange.from) && mergeHighlighted) {
	            currentSelectedRange.setDirection('SE-NW');
	          }
	        }
	      }
	      var nextPosition = getNextPosition(newDelta),
	          withinRowspan = sameRowspan(currentMerge, nextPosition),
	          withinColspan = sameColspan(currentMerge, nextPosition);
	      if (currentSelectedRange.includesRange(mergedRange) && (mergedRange.includes(nextPosition) || withinRowspan || withinColspan)) {
	        if (withinRowspan) {
	          if (newDelta.row < 0) {
	            newDelta.row -= currentMerge.rowspan - 1;
	          } else if (newDelta.row > 0) {
	            newDelta.row += currentMerge.rowspan - 1;
	          }
	        }
	        if (withinColspan) {
	          if (newDelta.col < 0) {
	            newDelta.col -= currentMerge.colspan - 1;
	          } else if (newDelta.col > 0) {
	            newDelta.col += currentMerge.colspan - 1;
	          }
	        }
	      }
	    }
	  }
	  if (newDelta.row !== 0) {
	    delta.row = newDelta.row;
	  }
	  if (newDelta.col !== 0) {
	    delta.col = newDelta.col;
	  }
	};
	MergeCells.prototype.shiftCollection = function(direction, index, count) {
	  var shiftVector = [0, 0];
	  switch (direction) {
	    case 'right':
	      shiftVector[0] += 1;
	      break;
	    case 'left':
	      shiftVector[0] -= 1;
	      break;
	    case 'down':
	      shiftVector[1] += 1;
	      break;
	    case 'up':
	      shiftVector[1] -= 1;
	      break;
	  }
	  for (var i = 0; i < this.mergedCellInfoCollection.length; i++) {
	    var currentMerge = this.mergedCellInfoCollection[i];
	    if (direction === 'right' || direction === 'left') {
	      if (index <= currentMerge.col) {
	        currentMerge.col += shiftVector[0];
	      }
	    } else {
	      if (index <= currentMerge.row) {
	        currentMerge.row += shiftVector[1];
	      }
	    }
	  }
	};
	var beforeInit = function() {
	  var instance = this;
	  var mergeCellsSetting = instance.getSettings().mergeCells;
	  if (mergeCellsSetting) {
	    if (!instance.mergeCells) {
	      instance.mergeCells = new MergeCells(mergeCellsSetting);
	    }
	  }
	};
	var afterInit = function() {
	  var instance = this;
	  if (instance.mergeCells) {
	    instance.view.wt.wtTable.getCell = function(coords) {
	      if (instance.getSettings().mergeCells) {
	        var mergeParent = instance.mergeCells.mergedCellInfoCollection.getInfo(coords.row, coords.col);
	        if (mergeParent) {
	          coords = mergeParent;
	        }
	      }
	      return WalkontableTable.prototype.getCell.call(this, coords);
	    };
	  }
	};
	var afterUpdateSettings = function() {
	  var instance = this;
	  var mergeCellsSetting = instance.getSettings().mergeCells;
	  if (mergeCellsSetting) {
	    if (instance.mergeCells) {
	      instance.mergeCells.mergedCellInfoCollection = new CellInfoCollection();
	      if (Array.isArray(mergeCellsSetting)) {
	        for (var i = 0,
	            ilen = mergeCellsSetting.length; i < ilen; i++) {
	          instance.mergeCells.mergedCellInfoCollection.setInfo(mergeCellsSetting[i]);
	        }
	      }
	    } else {
	      instance.mergeCells = new MergeCells(mergeCellsSetting);
	    }
	  } else {
	    if (instance.mergeCells) {
	      instance.mergeCells.mergedCellInfoCollection = new CellInfoCollection();
	    }
	  }
	};
	var onBeforeKeyDown = function(event) {
	  if (!this.mergeCells) {
	    return;
	  }
	  var ctrlDown = (event.ctrlKey || event.metaKey) && !event.altKey;
	  if (ctrlDown) {
	    if (event.keyCode === 77) {
	      this.mergeCells.mergeOrUnmergeSelection(this.getSelectedRange());
	      this.render();
	      stopImmediatePropagation(event);
	    }
	  }
	};
	var addMergeActionsToContextMenu = function(defaultOptions) {
	  if (!this.getSettings().mergeCells) {
	    return;
	  }
	  defaultOptions.items.push(Handsontable.plugins.ContextMenu.SEPARATOR);
	  defaultOptions.items.push({
	    key: 'mergeCells',
	    name: function() {
	      var sel = this.getSelected();
	      var info = this.mergeCells.mergedCellInfoCollection.getInfo(sel[0], sel[1]);
	      if (info) {
	        return 'Unmerge cells';
	      } else {
	        return 'Merge cells';
	      }
	    },
	    callback: function() {
	      this.mergeCells.mergeOrUnmergeSelection(this.getSelectedRange());
	      this.render();
	    },
	    disabled: function() {
	      return false;
	    }
	  });
	};
	var afterRenderer = function(TD, row, col, prop, value, cellProperties) {
	  if (this.mergeCells) {
	    this.mergeCells.applySpanProperties(TD, row, col);
	  }
	};
	var modifyTransformFactory = function(hook) {
	  return function(delta) {
	    var mergeCellsSetting = this.getSettings().mergeCells;
	    if (mergeCellsSetting) {
	      var currentSelectedRange = this.getSelectedRange();
	      this.mergeCells.modifyTransform(hook, currentSelectedRange, delta);
	      if (hook === 'modifyTransformEnd') {
	        var totalRows = this.countRows();
	        var totalCols = this.countCols();
	        if (currentSelectedRange.from.row < 0) {
	          currentSelectedRange.from.row = 0;
	        } else if (currentSelectedRange.from.row > 0 && currentSelectedRange.from.row >= totalRows) {
	          currentSelectedRange.from.row = currentSelectedRange.from - 1;
	        }
	        if (currentSelectedRange.from.col < 0) {
	          currentSelectedRange.from.col = 0;
	        } else if (currentSelectedRange.from.col > 0 && currentSelectedRange.from.col >= totalCols) {
	          currentSelectedRange.from.col = totalCols - 1;
	        }
	      }
	    }
	  };
	};
	var beforeSetRangeEnd = function(coords) {
	  this.lastDesiredCoords = null;
	  var mergeCellsSetting = this.getSettings().mergeCells;
	  if (mergeCellsSetting) {
	    var selRange = this.getSelectedRange();
	    selRange.highlight = new WalkontableCellCoords(selRange.highlight.row, selRange.highlight.col);
	    selRange.to = coords;
	    var rangeExpanded = false;
	    do {
	      rangeExpanded = false;
	      for (var i = 0,
	          ilen = this.mergeCells.mergedCellInfoCollection.length; i < ilen; i++) {
	        var cellInfo = this.mergeCells.mergedCellInfoCollection[i];
	        var mergedCellTopLeft = new WalkontableCellCoords(cellInfo.row, cellInfo.col);
	        var mergedCellBottomRight = new WalkontableCellCoords(cellInfo.row + cellInfo.rowspan - 1, cellInfo.col + cellInfo.colspan - 1);
	        var mergedCellRange = new WalkontableCellRange(mergedCellTopLeft, mergedCellTopLeft, mergedCellBottomRight);
	        if (selRange.expandByRange(mergedCellRange)) {
	          coords.row = selRange.to.row;
	          coords.col = selRange.to.col;
	          rangeExpanded = true;
	        }
	      }
	    } while (rangeExpanded);
	  }
	};
	var beforeDrawAreaBorders = function(corners, className) {
	  if (className && className == 'area') {
	    var mergeCellsSetting = this.getSettings().mergeCells;
	    if (mergeCellsSetting) {
	      var selRange = this.getSelectedRange();
	      var startRange = new WalkontableCellRange(selRange.from, selRange.from, selRange.from);
	      var stopRange = new WalkontableCellRange(selRange.to, selRange.to, selRange.to);
	      for (var i = 0,
	          ilen = this.mergeCells.mergedCellInfoCollection.length; i < ilen; i++) {
	        var cellInfo = this.mergeCells.mergedCellInfoCollection[i];
	        var mergedCellTopLeft = new WalkontableCellCoords(cellInfo.row, cellInfo.col);
	        var mergedCellBottomRight = new WalkontableCellCoords(cellInfo.row + cellInfo.rowspan - 1, cellInfo.col + cellInfo.colspan - 1);
	        var mergedCellRange = new WalkontableCellRange(mergedCellTopLeft, mergedCellTopLeft, mergedCellBottomRight);
	        if (startRange.expandByRange(mergedCellRange)) {
	          corners[0] = startRange.from.row;
	          corners[1] = startRange.from.col;
	        }
	        if (stopRange.expandByRange(mergedCellRange)) {
	          corners[2] = stopRange.from.row;
	          corners[3] = stopRange.from.col;
	        }
	      }
	    }
	  }
	};
	var afterGetCellMeta = function(row, col, cellProperties) {
	  var mergeCellsSetting = this.getSettings().mergeCells;
	  if (mergeCellsSetting) {
	    var mergeParent = this.mergeCells.mergedCellInfoCollection.getInfo(row, col);
	    if (mergeParent && (mergeParent.row != row || mergeParent.col != col)) {
	      cellProperties.copyable = false;
	    }
	  }
	};
	var afterViewportRowCalculatorOverride = function(calc) {
	  var mergeCellsSetting = this.getSettings().mergeCells;
	  if (mergeCellsSetting) {
	    var colCount = this.countCols();
	    var mergeParent;
	    for (var c = 0; c < colCount; c++) {
	      mergeParent = this.mergeCells.mergedCellInfoCollection.getInfo(calc.startRow, c);
	      if (mergeParent) {
	        if (mergeParent.row < calc.startRow) {
	          calc.startRow = mergeParent.row;
	          return afterViewportRowCalculatorOverride.call(this, calc);
	        }
	      }
	      mergeParent = this.mergeCells.mergedCellInfoCollection.getInfo(calc.endRow, c);
	      if (mergeParent) {
	        var mergeEnd = mergeParent.row + mergeParent.rowspan - 1;
	        if (mergeEnd > calc.endRow) {
	          calc.endRow = mergeEnd;
	          return afterViewportRowCalculatorOverride.call(this, calc);
	        }
	      }
	    }
	  }
	};
	var afterViewportColumnCalculatorOverride = function(calc) {
	  var mergeCellsSetting = this.getSettings().mergeCells;
	  if (mergeCellsSetting) {
	    var rowCount = this.countRows();
	    var mergeParent;
	    for (var r = 0; r < rowCount; r++) {
	      mergeParent = this.mergeCells.mergedCellInfoCollection.getInfo(r, calc.startColumn);
	      if (mergeParent) {
	        if (mergeParent.col < calc.startColumn) {
	          calc.startColumn = mergeParent.col;
	          return afterViewportColumnCalculatorOverride.call(this, calc);
	        }
	      }
	      mergeParent = this.mergeCells.mergedCellInfoCollection.getInfo(r, calc.endColumn);
	      if (mergeParent) {
	        var mergeEnd = mergeParent.col + mergeParent.colspan - 1;
	        if (mergeEnd > calc.endColumn) {
	          calc.endColumn = mergeEnd;
	          return afterViewportColumnCalculatorOverride.call(this, calc);
	        }
	      }
	    }
	  }
	};
	var isMultipleSelection = function(isMultiple) {
	  if (isMultiple && this.mergeCells) {
	    var mergedCells = this.mergeCells.mergedCellInfoCollection,
	        selectionRange = this.getSelectedRange();
	    for (var group in mergedCells) {
	      if (selectionRange.highlight.row == mergedCells[group].row && selectionRange.highlight.col == mergedCells[group].col && selectionRange.to.row == mergedCells[group].row + mergedCells[group].rowspan - 1 && selectionRange.to.col == mergedCells[group].col + mergedCells[group].colspan - 1) {
	        return false;
	      }
	    }
	  }
	  return isMultiple;
	};
	function afterAutofillApplyValues(select, drag) {
	  var mergeCellsSetting = this.getSettings().mergeCells;
	  if (!mergeCellsSetting || this.selection.isMultiple()) {
	    return;
	  }
	  var info = this.mergeCells.mergedCellInfoCollection.getInfo(select[0], select[1]);
	  if (info) {
	    select[0] = info.row;
	    select[1] = info.col;
	    select[2] = info.row + info.rowspan - 1;
	    select[3] = info.col + info.colspan - 1;
	  }
	}
	function onAfterCreateCol(col, count) {
	  if (this.mergeCells) {
	    this.mergeCells.shiftCollection('right', col, count);
	  }
	}
	function onAfterRemoveCol(col, count) {
	  if (this.mergeCells) {
	    this.mergeCells.shiftCollection('left', col, count);
	  }
	}
	function onAfterCreateRow(row, count) {
	  if (this.mergeCells) {
	    this.mergeCells.shiftCollection('down', row, count);
	  }
	}
	function onAfterRemoveRow(row, count) {
	  if (this.mergeCells) {
	    this.mergeCells.shiftCollection('up', row, count);
	  }
	}
	Handsontable.hooks.add('beforeInit', beforeInit);
	Handsontable.hooks.add('afterInit', afterInit);
	Handsontable.hooks.add('afterUpdateSettings', afterUpdateSettings);
	Handsontable.hooks.add('beforeKeyDown', onBeforeKeyDown);
	Handsontable.hooks.add('modifyTransformStart', modifyTransformFactory('modifyTransformStart'));
	Handsontable.hooks.add('modifyTransformEnd', modifyTransformFactory('modifyTransformEnd'));
	Handsontable.hooks.add('beforeSetRangeEnd', beforeSetRangeEnd);
	Handsontable.hooks.add('beforeDrawBorders', beforeDrawAreaBorders);
	Handsontable.hooks.add('afterIsMultipleSelection', isMultipleSelection);
	Handsontable.hooks.add('afterRenderer', afterRenderer);
	Handsontable.hooks.add('afterContextMenuDefaultOptions', addMergeActionsToContextMenu);
	Handsontable.hooks.add('afterGetCellMeta', afterGetCellMeta);
	Handsontable.hooks.add('afterViewportRowCalculatorOverride', afterViewportRowCalculatorOverride);
	Handsontable.hooks.add('afterViewportColumnCalculatorOverride', afterViewportColumnCalculatorOverride);
	Handsontable.hooks.add('afterAutofillApplyValues', afterAutofillApplyValues);
	Handsontable.hooks.add('afterCreateCol', onAfterCreateCol);
	Handsontable.hooks.add('afterRemoveCol', onAfterRemoveCol);
	Handsontable.hooks.add('afterCreateRow', onAfterCreateRow);
	Handsontable.hooks.add('afterRemoveRow', onAfterRemoveRow);
	Handsontable.MergeCells = MergeCells;

	//# 
	},{"3rdparty/walkontable/src/cell/coords":5,"3rdparty/walkontable/src/cell/range":6,"3rdparty/walkontable/src/table":20,"helpers/dom/event":45,"plugins":55}],80:[function(require,module,exports){
	"use strict";
	Object.defineProperties(exports, {
	  MultipleSelectionHandles: {get: function() {
	      return MultipleSelectionHandles;
	    }},
	  __esModule: {value: true}
	});
	var $___46__46__47__46__46__47_helpers_47_dom_47_element__,
	    $___46__46__47__95_base__,
	    $___46__46__47__46__46__47_eventManager__,
	    $___46__46__47__46__46__47_plugins__;
	var $__0 = ($___46__46__47__46__46__47_helpers_47_dom_47_element__ = require("helpers/dom/element"), $___46__46__47__46__46__47_helpers_47_dom_47_element__ && $___46__46__47__46__46__47_helpers_47_dom_47_element__.__esModule && $___46__46__47__46__46__47_helpers_47_dom_47_element__ || {default: $___46__46__47__46__46__47_helpers_47_dom_47_element__}),
	    getWindowScrollTop = $__0.getWindowScrollTop,
	    hasClass = $__0.hasClass,
	    getWindowScrollLeft = $__0.getWindowScrollLeft;
	var BasePlugin = ($___46__46__47__95_base__ = require("_base"), $___46__46__47__95_base__ && $___46__46__47__95_base__.__esModule && $___46__46__47__95_base__ || {default: $___46__46__47__95_base__}).default;
	var EventManager = ($___46__46__47__46__46__47_eventManager__ = require("eventManager"), $___46__46__47__46__46__47_eventManager__ && $___46__46__47__46__46__47_eventManager__.__esModule && $___46__46__47__46__46__47_eventManager__ || {default: $___46__46__47__46__46__47_eventManager__}).EventManager;
	var registerPlugin = ($___46__46__47__46__46__47_plugins__ = require("plugins"), $___46__46__47__46__46__47_plugins__ && $___46__46__47__46__46__47_plugins__.__esModule && $___46__46__47__46__46__47_plugins__ || {default: $___46__46__47__46__46__47_plugins__}).registerPlugin;
	var MultipleSelectionHandles = function MultipleSelectionHandles(hotInstance) {
	  $traceurRuntime.superConstructor($MultipleSelectionHandles).call(this, hotInstance);
	  this.dragged = [];
	  this.eventManager = null;
	  this.lastSetCell = null;
	};
	var $MultipleSelectionHandles = MultipleSelectionHandles;
	($traceurRuntime.createClass)(MultipleSelectionHandles, {
	  isEnabled: function() {
	    return Handsontable.mobileBrowser;
	  },
	  enablePlugin: function() {
	    if (this.enabled) {
	      return;
	    }
	    if (!this.eventManager) {
	      this.eventManager = new EventManager(this);
	    }
	    this.registerListeners();
	    $traceurRuntime.superGet(this, $MultipleSelectionHandles.prototype, "enablePlugin").call(this);
	  },
	  registerListeners: function() {
	    var _this = this;
	    function removeFromDragged(query) {
	      if (_this.dragged.length === 1) {
	        _this.dragged.splice(0, _this.dragged.length);
	        return true;
	      }
	      var entryPosition = _this.dragged.indexOf(query);
	      if (entryPosition == -1) {
	        return false;
	      } else if (entryPosition === 0) {
	        _this.dragged = _this.dragged.slice(0, 1);
	      } else if (entryPosition == 1) {
	        _this.dragged = _this.dragged.slice(-1);
	      }
	    }
	    this.eventManager.addEventListener(this.hot.rootElement, 'touchstart', function(event) {
	      var selectedRange;
	      if (hasClass(event.target, 'topLeftSelectionHandle-HitArea')) {
	        selectedRange = _this.hot.getSelectedRange();
	        _this.dragged.push('topLeft');
	        _this.touchStartRange = {
	          width: selectedRange.getWidth(),
	          height: selectedRange.getHeight(),
	          direction: selectedRange.getDirection()
	        };
	        event.preventDefault();
	        return false;
	      } else if (hasClass(event.target, 'bottomRightSelectionHandle-HitArea')) {
	        selectedRange = _this.hot.getSelectedRange();
	        _this.dragged.push('bottomRight');
	        _this.touchStartRange = {
	          width: selectedRange.getWidth(),
	          height: selectedRange.getHeight(),
	          direction: selectedRange.getDirection()
	        };
	        event.preventDefault();
	        return false;
	      }
	    });
	    this.eventManager.addEventListener(this.hot.rootElement, 'touchend', function(event) {
	      if (hasClass(event.target, 'topLeftSelectionHandle-HitArea')) {
	        removeFromDragged.call(_this, 'topLeft');
	        _this.touchStartRange = void 0;
	        event.preventDefault();
	        return false;
	      } else if (hasClass(event.target, 'bottomRightSelectionHandle-HitArea')) {
	        removeFromDragged.call(_this, 'bottomRight');
	        _this.touchStartRange = void 0;
	        event.preventDefault();
	        return false;
	      }
	    });
	    this.eventManager.addEventListener(this.hot.rootElement, 'touchmove', function(event) {
	      var scrollTop = getWindowScrollTop(),
	          scrollLeft = getWindowScrollLeft(),
	          endTarget,
	          targetCoords,
	          selectedRange,
	          rangeWidth,
	          rangeHeight,
	          rangeDirection,
	          newRangeCoords;
	      if (_this.dragged.length === 0) {
	        return;
	      }
	      endTarget = document.elementFromPoint(event.touches[0].screenX - scrollLeft, event.touches[0].screenY - scrollTop);
	      if (!endTarget || endTarget === _this.lastSetCell) {
	        return;
	      }
	      if (endTarget.nodeName == 'TD' || endTarget.nodeName == 'TH') {
	        targetCoords = _this.hot.getCoords(endTarget);
	        if (targetCoords.col == -1) {
	          targetCoords.col = 0;
	        }
	        selectedRange = _this.hot.getSelectedRange();
	        rangeWidth = selectedRange.getWidth();
	        rangeHeight = selectedRange.getHeight();
	        rangeDirection = selectedRange.getDirection();
	        if (rangeWidth == 1 && rangeHeight == 1) {
	          _this.hot.selection.setRangeEnd(targetCoords);
	        }
	        newRangeCoords = _this.getCurrentRangeCoords(selectedRange, targetCoords, _this.touchStartRange.direction, rangeDirection, _this.dragged[0]);
	        if (newRangeCoords.start !== null) {
	          _this.hot.selection.setRangeStart(newRangeCoords.start);
	        }
	        _this.hot.selection.setRangeEnd(newRangeCoords.end);
	        _this.lastSetCell = endTarget;
	      }
	      event.preventDefault();
	    });
	  },
	  getCurrentRangeCoords: function(selectedRange, currentTouch, touchStartDirection, currentDirection, draggedHandle) {
	    var topLeftCorner = selectedRange.getTopLeftCorner(),
	        bottomRightCorner = selectedRange.getBottomRightCorner(),
	        bottomLeftCorner = selectedRange.getBottomLeftCorner(),
	        topRightCorner = selectedRange.getTopRightCorner();
	    var newCoords = {
	      start: null,
	      end: null
	    };
	    switch (touchStartDirection) {
	      case 'NE-SW':
	        switch (currentDirection) {
	          case 'NE-SW':
	          case 'NW-SE':
	            if (draggedHandle == 'topLeft') {
	              newCoords = {
	                start: new WalkontableCellCoords(currentTouch.row, selectedRange.highlight.col),
	                end: new WalkontableCellCoords(bottomLeftCorner.row, currentTouch.col)
	              };
	            } else {
	              newCoords = {
	                start: new WalkontableCellCoords(selectedRange.highlight.row, currentTouch.col),
	                end: new WalkontableCellCoords(currentTouch.row, topLeftCorner.col)
	              };
	            }
	            break;
	          case 'SE-NW':
	            if (draggedHandle == 'bottomRight') {
	              newCoords = {
	                start: new WalkontableCellCoords(bottomRightCorner.row, currentTouch.col),
	                end: new WalkontableCellCoords(currentTouch.row, topLeftCorner.col)
	              };
	            }
	            break;
	        }
	        break;
	      case 'NW-SE':
	        switch (currentDirection) {
	          case 'NE-SW':
	            if (draggedHandle == 'topLeft') {
	              newCoords = {
	                start: currentTouch,
	                end: bottomLeftCorner
	              };
	            } else {
	              newCoords.end = currentTouch;
	            }
	            break;
	          case 'NW-SE':
	            if (draggedHandle == 'topLeft') {
	              newCoords = {
	                start: currentTouch,
	                end: bottomRightCorner
	              };
	            } else {
	              newCoords.end = currentTouch;
	            }
	            break;
	          case 'SE-NW':
	            if (draggedHandle == 'topLeft') {
	              newCoords = {
	                start: currentTouch,
	                end: topLeftCorner
	              };
	            } else {
	              newCoords.end = currentTouch;
	            }
	            break;
	          case 'SW-NE':
	            if (draggedHandle == 'topLeft') {
	              newCoords = {
	                start: currentTouch,
	                end: topRightCorner
	              };
	            } else {
	              newCoords.end = currentTouch;
	            }
	            break;
	        }
	        break;
	      case 'SW-NE':
	        switch (currentDirection) {
	          case 'NW-SE':
	            if (draggedHandle == 'bottomRight') {
	              newCoords = {
	                start: new WalkontableCellCoords(currentTouch.row, topLeftCorner.col),
	                end: new WalkontableCellCoords(bottomLeftCorner.row, currentTouch.col)
	              };
	            } else {
	              newCoords = {
	                start: new WalkontableCellCoords(topLeftCorner.row, currentTouch.col),
	                end: new WalkontableCellCoords(currentTouch.row, bottomRightCorner.col)
	              };
	            }
	            break;
	          case 'SW-NE':
	            if (draggedHandle == 'topLeft') {
	              newCoords = {
	                start: new WalkontableCellCoords(selectedRange.highlight.row, currentTouch.col),
	                end: new WalkontableCellCoords(currentTouch.row, bottomRightCorner.col)
	              };
	            } else {
	              newCoords = {
	                start: new WalkontableCellCoords(currentTouch.row, topLeftCorner.col),
	                end: new WalkontableCellCoords(topLeftCorner.row, currentTouch.col)
	              };
	            }
	            break;
	          case 'SE-NW':
	            if (draggedHandle == 'bottomRight') {
	              newCoords = {
	                start: new WalkontableCellCoords(currentTouch.row, topRightCorner.col),
	                end: new WalkontableCellCoords(topLeftCorner.row, currentTouch.col)
	              };
	            } else if (draggedHandle == 'topLeft') {
	              newCoords = {
	                start: bottomLeftCorner,
	                end: currentTouch
	              };
	            }
	            break;
	        }
	        break;
	      case 'SE-NW':
	        switch (currentDirection) {
	          case 'NW-SE':
	          case 'NE-SW':
	          case 'SW-NE':
	            if (draggedHandle == 'topLeft') {
	              newCoords.end = currentTouch;
	            }
	            break;
	          case 'SE-NW':
	            if (draggedHandle == 'topLeft') {
	              newCoords.end = currentTouch;
	            } else {
	              newCoords = {
	                start: currentTouch,
	                end: topLeftCorner
	              };
	            }
	            break;
	        }
	        break;
	    }
	    return newCoords;
	  },
	  isDragged: function() {
	    return this.dragged.length > 0;
	  }
	}, {}, BasePlugin);
	;
	registerPlugin('multipleSelectionHandles', MultipleSelectionHandles);

	//# 
	},{"_base":56,"eventManager":40,"helpers/dom/element":44,"plugins":55}],81:[function(require,module,exports){
	"use strict";
	Object.defineProperties(exports, {
	  ObserveChanges: {get: function() {
	      return ObserveChanges;
	    }},
	  __esModule: {value: true}
	});
	var $___46__46__47__46__46__47_plugins__,
	    $__jsonpatch__;
	var registerPlugin = ($___46__46__47__46__46__47_plugins__ = require("plugins"), $___46__46__47__46__46__47_plugins__ && $___46__46__47__46__46__47_plugins__.__esModule && $___46__46__47__46__46__47_plugins__ || {default: $___46__46__47__46__46__47_plugins__}).registerPlugin;
	var jsonpatch = ($__jsonpatch__ = require("jsonpatch"), $__jsonpatch__ && $__jsonpatch__.__esModule && $__jsonpatch__ || {default: $__jsonpatch__}).default;
	;
	function ObserveChanges() {}
	Handsontable.hooks.add('afterLoadData', init);
	Handsontable.hooks.add('afterUpdateSettings', init);
	Handsontable.hooks.register('afterChangesObserved');
	function init() {
	  var instance = this;
	  var pluginEnabled = instance.getSettings().observeChanges;
	  if (pluginEnabled) {
	    if (instance.observer) {
	      destroy.call(instance);
	    }
	    createObserver.call(instance);
	    bindEvents.call(instance);
	  } else if (!pluginEnabled) {
	    destroy.call(instance);
	  }
	}
	function createObserver() {
	  var instance = this;
	  instance.observeChangesActive = true;
	  instance.pauseObservingChanges = function() {
	    instance.observeChangesActive = false;
	  };
	  instance.resumeObservingChanges = function() {
	    instance.observeChangesActive = true;
	  };
	  instance.observedData = instance.getData();
	  instance.observer = jsonpatch.observe(instance.observedData, function(patches) {
	    if (instance.observeChangesActive) {
	      runHookForOperation.call(instance, patches);
	      instance.render();
	    }
	    instance.runHooks('afterChangesObserved');
	  });
	}
	function runHookForOperation(rawPatches) {
	  var instance = this;
	  var patches = cleanPatches(rawPatches);
	  for (var i = 0,
	      len = patches.length; i < len; i++) {
	    var patch = patches[i];
	    var parsedPath = parsePath(patch.path);
	    switch (patch.op) {
	      case 'add':
	        if (isNaN(parsedPath.col)) {
	          instance.runHooks('afterCreateRow', parsedPath.row);
	        } else {
	          instance.runHooks('afterCreateCol', parsedPath.col);
	        }
	        break;
	      case 'remove':
	        if (isNaN(parsedPath.col)) {
	          instance.runHooks('afterRemoveRow', parsedPath.row, 1);
	        } else {
	          instance.runHooks('afterRemoveCol', parsedPath.col, 1);
	        }
	        break;
	      case 'replace':
	        instance.runHooks('afterChange', [parsedPath.row, parsedPath.col, null, patch.value], 'external');
	        break;
	    }
	  }
	  function cleanPatches(rawPatches) {
	    var patches;
	    patches = removeLengthRelatedPatches(rawPatches);
	    patches = removeMultipleAddOrRemoveColPatches(patches);
	    return patches;
	  }
	  function removeMultipleAddOrRemoveColPatches(rawPatches) {
	    var newOrRemovedColumns = [];
	    return rawPatches.filter(function(patch) {
	      var parsedPath = parsePath(patch.path);
	      if (['add', 'remove'].indexOf(patch.op) != -1 && !isNaN(parsedPath.col)) {
	        if (newOrRemovedColumns.indexOf(parsedPath.col) != -1) {
	          return false;
	        } else {
	          newOrRemovedColumns.push(parsedPath.col);
	        }
	      }
	      return true;
	    });
	  }
	  function removeLengthRelatedPatches(rawPatches) {
	    return rawPatches.filter(function(patch) {
	      return !/[/]length/ig.test(patch.path);
	    });
	  }
	  function parsePath(path) {
	    var match = path.match(/^\/(\d+)\/?(.*)?$/);
	    return {
	      row: parseInt(match[1], 10),
	      col: /^\d*$/.test(match[2]) ? parseInt(match[2], 10) : match[2]
	    };
	  }
	}
	function destroy() {
	  var instance = this;
	  if (instance.observer) {
	    destroyObserver.call(instance);
	    unbindEvents.call(instance);
	  }
	}
	function destroyObserver() {
	  var instance = this;
	  jsonpatch.unobserve(instance.observedData, instance.observer);
	  delete instance.observedData;
	  delete instance.observeChangesActive;
	  delete instance.pauseObservingChanges;
	  delete instance.resumeObservingChanges;
	}
	function bindEvents() {
	  var instance = this;
	  instance.addHook('afterDestroy', destroy);
	  instance.addHook('afterCreateRow', afterTableAlter);
	  instance.addHook('afterRemoveRow', afterTableAlter);
	  instance.addHook('afterCreateCol', afterTableAlter);
	  instance.addHook('afterRemoveCol', afterTableAlter);
	  instance.addHook('afterChange', function(changes, source) {
	    if (source != 'loadData') {
	      afterTableAlter.call(this);
	    }
	  });
	}
	function unbindEvents() {
	  var instance = this;
	  instance.removeHook('afterDestroy', destroy);
	  instance.removeHook('afterCreateRow', afterTableAlter);
	  instance.removeHook('afterRemoveRow', afterTableAlter);
	  instance.removeHook('afterCreateCol', afterTableAlter);
	  instance.removeHook('afterRemoveCol', afterTableAlter);
	  instance.removeHook('afterChange', afterTableAlter);
	}
	function afterTableAlter() {
	  var instance = this;
	  instance.pauseObservingChanges();
	  instance.addHookOnce('afterChangesObserved', function() {
	    instance.resumeObservingChanges();
	  });
	}

	//# 
	},{"jsonpatch":"jsonpatch","plugins":55}],82:[function(require,module,exports){
	"use strict";
	Object.defineProperties(exports, {
	  HandsontablePersistentState: {get: function() {
	      return HandsontablePersistentState;
	    }},
	  __esModule: {value: true}
	});
	var $___46__46__47__46__46__47_plugins__;
	var registerPlugin = ($___46__46__47__46__46__47_plugins__ = require("plugins"), $___46__46__47__46__46__47_plugins__ && $___46__46__47__46__46__47_plugins__.__esModule && $___46__46__47__46__46__47_plugins__ || {default: $___46__46__47__46__46__47_plugins__}).registerPlugin;
	;
	function Storage(prefix) {
	  var savedKeys;
	  var saveSavedKeys = function() {
	    window.localStorage[prefix + '__' + 'persistentStateKeys'] = JSON.stringify(savedKeys);
	  };
	  var loadSavedKeys = function() {
	    var keysJSON = window.localStorage[prefix + '__' + 'persistentStateKeys'];
	    var keys = typeof keysJSON == 'string' ? JSON.parse(keysJSON) : void 0;
	    savedKeys = keys ? keys : [];
	  };
	  var clearSavedKeys = function() {
	    savedKeys = [];
	    saveSavedKeys();
	  };
	  loadSavedKeys();
	  this.saveValue = function(key, value) {
	    window.localStorage[prefix + '_' + key] = JSON.stringify(value);
	    if (savedKeys.indexOf(key) == -1) {
	      savedKeys.push(key);
	      saveSavedKeys();
	    }
	  };
	  this.loadValue = function(key, defaultValue) {
	    key = typeof key === 'undefined' ? defaultValue : key;
	    var value = window.localStorage[prefix + '_' + key];
	    return typeof value == 'undefined' ? void 0 : JSON.parse(value);
	  };
	  this.reset = function(key) {
	    window.localStorage.removeItem(prefix + '_' + key);
	  };
	  this.resetAll = function() {
	    for (var index = 0; index < savedKeys.length; index++) {
	      window.localStorage.removeItem(prefix + '_' + savedKeys[index]);
	    }
	    clearSavedKeys();
	  };
	}
	function HandsontablePersistentState() {
	  var plugin = this;
	  this.init = function() {
	    var instance = this,
	        pluginSettings = instance.getSettings().persistentState;
	    plugin.enabled = !!(pluginSettings);
	    if (!plugin.enabled) {
	      removeHooks.call(instance);
	      return;
	    }
	    if (!instance.storage) {
	      instance.storage = new Storage(instance.rootElement.id);
	    }
	    instance.resetState = plugin.resetValue;
	    addHooks.call(instance);
	  };
	  this.saveValue = function(key, value) {
	    var instance = this;
	    instance.storage.saveValue(key, value);
	  };
	  this.loadValue = function(key, saveTo) {
	    var instance = this;
	    saveTo.value = instance.storage.loadValue(key);
	  };
	  this.resetValue = function(key) {
	    var instance = this;
	    if (typeof key === 'undefined') {
	      instance.storage.resetAll();
	    } else {
	      instance.storage.reset(key);
	    }
	  };
	  var hooks = {
	    persistentStateSave: plugin.saveValue,
	    persistentStateLoad: plugin.loadValue,
	    persistentStateReset: plugin.resetValue
	  };
	  for (var hookName in hooks) {
	    if (hooks.hasOwnProperty(hookName)) {
	      Handsontable.hooks.register(hookName);
	    }
	  }
	  function addHooks() {
	    var instance = this;
	    for (var hookName in hooks) {
	      if (hooks.hasOwnProperty(hookName)) {
	        instance.addHook(hookName, hooks[hookName]);
	      }
	    }
	  }
	  function removeHooks() {
	    var instance = this;
	    for (var hookName in hooks) {
	      if (hooks.hasOwnProperty(hookName)) {
	        instance.removeHook(hookName, hooks[hookName]);
	      }
	    }
	  }
	}
	var htPersistentState = new HandsontablePersistentState();
	Handsontable.hooks.add('beforeInit', htPersistentState.init);
	Handsontable.hooks.add('afterUpdateSettings', htPersistentState.init);

	//# 
	},{"plugins":55}],83:[function(require,module,exports){
	"use strict";
	var $___46__46__47__46__46__47_helpers_47_dom_47_element__,
	    $___46__46__47__46__46__47_renderers__;
	var $__0 = ($___46__46__47__46__46__47_helpers_47_dom_47_element__ = require("helpers/dom/element"), $___46__46__47__46__46__47_helpers_47_dom_47_element__ && $___46__46__47__46__46__47_helpers_47_dom_47_element__.__esModule && $___46__46__47__46__46__47_helpers_47_dom_47_element__ || {default: $___46__46__47__46__46__47_helpers_47_dom_47_element__}),
	    addClass = $__0.addClass,
	    removeClass = $__0.removeClass;
	var $__1 = ($___46__46__47__46__46__47_renderers__ = require("renderers"), $___46__46__47__46__46__47_renderers__ && $___46__46__47__46__46__47_renderers__.__esModule && $___46__46__47__46__46__47_renderers__ || {default: $___46__46__47__46__46__47_renderers__}),
	    registerRenderer = $__1.registerRenderer,
	    getRenderer = $__1.getRenderer;
	Handsontable.Search = function Search(instance) {
	  this.query = function(queryStr, callback, queryMethod) {
	    var rowCount = instance.countRows();
	    var colCount = instance.countCols();
	    var queryResult = [];
	    if (!callback) {
	      callback = Handsontable.Search.global.getDefaultCallback();
	    }
	    if (!queryMethod) {
	      queryMethod = Handsontable.Search.global.getDefaultQueryMethod();
	    }
	    for (var rowIndex = 0; rowIndex < rowCount; rowIndex++) {
	      for (var colIndex = 0; colIndex < colCount; colIndex++) {
	        var cellData = instance.getDataAtCell(rowIndex, colIndex);
	        var cellProperties = instance.getCellMeta(rowIndex, colIndex);
	        var cellCallback = cellProperties.search.callback || callback;
	        var cellQueryMethod = cellProperties.search.queryMethod || queryMethod;
	        var testResult = cellQueryMethod(queryStr, cellData);
	        if (testResult) {
	          var singleResult = {
	            row: rowIndex,
	            col: colIndex,
	            data: cellData
	          };
	          queryResult.push(singleResult);
	        }
	        if (cellCallback) {
	          cellCallback(instance, rowIndex, colIndex, cellData, testResult);
	        }
	      }
	    }
	    return queryResult;
	  };
	};
	Handsontable.Search.DEFAULT_CALLBACK = function(instance, row, col, data, testResult) {
	  instance.getCellMeta(row, col).isSearchResult = testResult;
	};
	Handsontable.Search.DEFAULT_QUERY_METHOD = function(query, value) {
	  if (typeof query == 'undefined' || query == null || !query.toLowerCase || query.length === 0) {
	    return false;
	  }
	  if (typeof value == 'undefined' || value == null) {
	    return false;
	  }
	  return value.toString().toLowerCase().indexOf(query.toLowerCase()) != -1;
	};
	Handsontable.Search.DEFAULT_SEARCH_RESULT_CLASS = 'htSearchResult';
	Handsontable.Search.global = (function() {
	  var defaultCallback = Handsontable.Search.DEFAULT_CALLBACK;
	  var defaultQueryMethod = Handsontable.Search.DEFAULT_QUERY_METHOD;
	  var defaultSearchResultClass = Handsontable.Search.DEFAULT_SEARCH_RESULT_CLASS;
	  return {
	    getDefaultCallback: function() {
	      return defaultCallback;
	    },
	    setDefaultCallback: function(newDefaultCallback) {
	      defaultCallback = newDefaultCallback;
	    },
	    getDefaultQueryMethod: function() {
	      return defaultQueryMethod;
	    },
	    setDefaultQueryMethod: function(newDefaultQueryMethod) {
	      defaultQueryMethod = newDefaultQueryMethod;
	    },
	    getDefaultSearchResultClass: function() {
	      return defaultSearchResultClass;
	    },
	    setDefaultSearchResultClass: function(newSearchResultClass) {
	      defaultSearchResultClass = newSearchResultClass;
	    }
	  };
	})();
	Handsontable.SearchCellDecorator = function(instance, TD, row, col, prop, value, cellProperties) {
	  var searchResultClass = (cellProperties.search !== null && typeof cellProperties.search == 'object' && cellProperties.search.searchResultClass) || Handsontable.Search.global.getDefaultSearchResultClass();
	  if (cellProperties.isSearchResult) {
	    addClass(TD, searchResultClass);
	  } else {
	    removeClass(TD, searchResultClass);
	  }
	};
	var originalBaseRenderer = getRenderer('base');
	registerRenderer('base', function(instance, TD, row, col, prop, value, cellProperties) {
	  originalBaseRenderer.apply(this, arguments);
	  Handsontable.SearchCellDecorator.apply(this, arguments);
	});
	function init() {
	  var instance = this;
	  var pluginEnabled = !!instance.getSettings().search;
	  if (pluginEnabled) {
	    instance.search = new Handsontable.Search(instance);
	  } else {
	    delete instance.search;
	  }
	}
	Handsontable.hooks.add('afterInit', init);
	Handsontable.hooks.add('afterUpdateSettings', init);

	//# 
	},{"helpers/dom/element":44,"renderers":86}],84:[function(require,module,exports){
	"use strict";
	Object.defineProperties(exports, {
	  TouchScroll: {get: function() {
	      return TouchScroll;
	    }},
	  __esModule: {value: true}
	});
	var $___46__46__47__46__46__47_helpers_47_dom_47_element__,
	    $___46__46__47__95_base__,
	    $___46__46__47__46__46__47_plugins__;
	var $__0 = ($___46__46__47__46__46__47_helpers_47_dom_47_element__ = require("helpers/dom/element"), $___46__46__47__46__46__47_helpers_47_dom_47_element__ && $___46__46__47__46__46__47_helpers_47_dom_47_element__.__esModule && $___46__46__47__46__46__47_helpers_47_dom_47_element__ || {default: $___46__46__47__46__46__47_helpers_47_dom_47_element__}),
	    addClass = $__0.addClass,
	    removeClass = $__0.removeClass;
	var BasePlugin = ($___46__46__47__95_base__ = require("_base"), $___46__46__47__95_base__ && $___46__46__47__95_base__.__esModule && $___46__46__47__95_base__ || {default: $___46__46__47__95_base__}).default;
	var registerPlugin = ($___46__46__47__46__46__47_plugins__ = require("plugins"), $___46__46__47__46__46__47_plugins__ && $___46__46__47__46__46__47_plugins__.__esModule && $___46__46__47__46__46__47_plugins__ || {default: $___46__46__47__46__46__47_plugins__}).registerPlugin;
	var TouchScroll = function TouchScroll(hotInstance) {
	  var $__3 = this;
	  $traceurRuntime.superConstructor($TouchScroll).call(this, hotInstance);
	  this.hot.addHook('afterInit', (function() {
	    return $__3.afterInit();
	  }));
	  this.hot.addHook('afterUpdateSettings', (function() {
	    return $__3.onAfterUpdateSettings();
	  }));
	  this.scrollbars = [];
	  this.clones = [];
	};
	var $TouchScroll = TouchScroll;
	($traceurRuntime.createClass)(TouchScroll, {
	  afterInit: function() {
	    this.registerEvents();
	    this.onAfterUpdateSettings();
	  },
	  onAfterUpdateSettings: function() {
	    var _this = this;
	    this.hot.addHookOnce('afterRender', function() {
	      var wtOverlays = _this.hot.view.wt.wtOverlays;
	      _this.scrollbars = [];
	      _this.scrollbars.push(wtOverlays.topOverlay);
	      if (wtOverlays.bottomOverlay.clone) {
	        _this.scrollbars.push(wtOverlays.bottomOverlay);
	      }
	      _this.scrollbars.push(wtOverlays.leftOverlay);
	      if (wtOverlays.topLeftCornerOverlay) {
	        _this.scrollbars.push(wtOverlays.topLeftCornerOverlay);
	      }
	      if (wtOverlays.bottomLeftCornerOverlay && wtOverlays.bottomLeftCornerOverlay.clone) {
	        _this.scrollbars.push(wtOverlays.bottomLeftCornerOverlay);
	      }
	      _this.clones = [];
	      if (wtOverlays.topOverlay.needFullRender) {
	        _this.clones.push(wtOverlays.topOverlay.clone.wtTable.holder.parentNode);
	      }
	      if (wtOverlays.bottomOverlay.needFullRender) {
	        _this.clones.push(wtOverlays.bottomOverlay.clone.wtTable.holder.parentNode);
	      }
	      if (wtOverlays.leftOverlay.needFullRender) {
	        _this.clones.push(wtOverlays.leftOverlay.clone.wtTable.holder.parentNode);
	      }
	      if (wtOverlays.topLeftCornerOverlay) {
	        _this.clones.push(wtOverlays.topLeftCornerOverlay.clone.wtTable.holder.parentNode);
	      }
	      if (wtOverlays.bottomLeftCornerOverlay && wtOverlays.bottomLeftCornerOverlay.clone) {
	        _this.clones.push(wtOverlays.bottomLeftCornerOverlay.clone.wtTable.holder.parentNode);
	      }
	    });
	  },
	  registerEvents: function() {
	    var $__3 = this;
	    this.hot.addHook('beforeTouchScroll', (function() {
	      return $__3.onBeforeTouchScroll();
	    }));
	    this.hot.addHook('afterMomentumScroll', (function() {
	      return $__3.onAfterMomentumScroll();
	    }));
	  },
	  onBeforeTouchScroll: function() {
	    Handsontable.freezeOverlays = true;
	    for (var i = 0,
	        cloneCount = this.clones.length; i < cloneCount; i++) {
	      addClass(this.clones[i], 'hide-tween');
	    }
	  },
	  onAfterMomentumScroll: function() {
	    Handsontable.freezeOverlays = false;
	    var _that = this;
	    for (var i = 0,
	        cloneCount = this.clones.length; i < cloneCount; i++) {
	      removeClass(this.clones[i], 'hide-tween');
	    }
	    for (var i$__5 = 0,
	        cloneCount$__6 = this.clones.length; i$__5 < cloneCount$__6; i$__5++) {
	      addClass(this.clones[i$__5], 'show-tween');
	    }
	    setTimeout(function() {
	      for (var i = 0,
	          cloneCount = _that.clones.length; i < cloneCount; i++) {
	        removeClass(_that.clones[i], 'show-tween');
	      }
	    }, 400);
	    for (var i$__7 = 0,
	        cloneCount$__8 = this.scrollbars.length; i$__7 < cloneCount$__8; i$__7++) {
	      this.scrollbars[i$__7].refresh();
	      this.scrollbars[i$__7].resetFixedPosition();
	    }
	    this.hot.view.wt.wtOverlays.syncScrollWithMaster();
	  }
	}, {}, BasePlugin);
	;
	registerPlugin('touchScroll', TouchScroll);

	//# 
	},{"_base":56,"helpers/dom/element":44,"plugins":55}],85:[function(require,module,exports){
	"use strict";
	var $___46__46__47__46__46__47_helpers_47_object__,
	    $___46__46__47__46__46__47_helpers_47_dom_47_event__;
	var $__0 = ($___46__46__47__46__46__47_helpers_47_object__ = require("helpers/object"), $___46__46__47__46__46__47_helpers_47_object__ && $___46__46__47__46__46__47_helpers_47_object__.__esModule && $___46__46__47__46__46__47_helpers_47_object__ || {default: $___46__46__47__46__46__47_helpers_47_object__}),
	    inherit = $__0.inherit,
	    deepClone = $__0.deepClone;
	var stopImmediatePropagation = ($___46__46__47__46__46__47_helpers_47_dom_47_event__ = require("helpers/dom/event"), $___46__46__47__46__46__47_helpers_47_dom_47_event__ && $___46__46__47__46__46__47_helpers_47_dom_47_event__.__esModule && $___46__46__47__46__46__47_helpers_47_dom_47_event__ || {default: $___46__46__47__46__46__47_helpers_47_dom_47_event__}).stopImmediatePropagation;
	Handsontable.UndoRedo = function(instance) {
	  var plugin = this;
	  this.instance = instance;
	  this.doneActions = [];
	  this.undoneActions = [];
	  this.ignoreNewActions = false;
	  instance.addHook('afterChange', function(changes, origin) {
	    if (changes) {
	      var action = new Handsontable.UndoRedo.ChangeAction(changes);
	      plugin.done(action);
	    }
	  });
	  instance.addHook('afterCreateRow', function(index, amount, createdAutomatically) {
	    if (createdAutomatically) {
	      return;
	    }
	    var action = new Handsontable.UndoRedo.CreateRowAction(index, amount);
	    plugin.done(action);
	  });
	  instance.addHook('beforeRemoveRow', function(index, amount) {
	    var originalData = plugin.instance.getData();
	    index = (originalData.length + index) % originalData.length;
	    var removedData = originalData.slice(index, index + amount);
	    var action = new Handsontable.UndoRedo.RemoveRowAction(index, removedData);
	    plugin.done(action);
	  });
	  instance.addHook('afterCreateCol', function(index, amount, createdAutomatically) {
	    if (createdAutomatically) {
	      return;
	    }
	    var action = new Handsontable.UndoRedo.CreateColumnAction(index, amount);
	    plugin.done(action);
	  });
	  instance.addHook('beforeRemoveCol', function(index, amount) {
	    var originalData = plugin.instance.getData();
	    index = (plugin.instance.countCols() + index) % plugin.instance.countCols();
	    var removedData = [];
	    for (var i = 0,
	        len = originalData.length; i < len; i++) {
	      removedData[i] = originalData[i].slice(index, index + amount);
	    }
	    var headers;
	    if (Array.isArray(instance.getSettings().colHeaders)) {
	      headers = instance.getSettings().colHeaders.slice(index, index + removedData.length);
	    }
	    var action = new Handsontable.UndoRedo.RemoveColumnAction(index, removedData, headers);
	    plugin.done(action);
	  });
	  instance.addHook('beforeCellAlignment', function(stateBefore, range, type, alignment) {
	    var action = new Handsontable.UndoRedo.CellAlignmentAction(stateBefore, range, type, alignment);
	    plugin.done(action);
	  });
	};
	Handsontable.UndoRedo.prototype.done = function(action) {
	  if (!this.ignoreNewActions) {
	    this.doneActions.push(action);
	    this.undoneActions.length = 0;
	  }
	};
	Handsontable.UndoRedo.prototype.undo = function() {
	  if (this.isUndoAvailable()) {
	    var action = this.doneActions.pop();
	    this.ignoreNewActions = true;
	    var that = this;
	    action.undo(this.instance, function() {
	      that.ignoreNewActions = false;
	      that.undoneActions.push(action);
	    });
	  }
	};
	Handsontable.UndoRedo.prototype.redo = function() {
	  if (this.isRedoAvailable()) {
	    var action = this.undoneActions.pop();
	    this.ignoreNewActions = true;
	    var that = this;
	    action.redo(this.instance, function() {
	      that.ignoreNewActions = false;
	      that.doneActions.push(action);
	    });
	  }
	};
	Handsontable.UndoRedo.prototype.isUndoAvailable = function() {
	  return this.doneActions.length > 0;
	};
	Handsontable.UndoRedo.prototype.isRedoAvailable = function() {
	  return this.undoneActions.length > 0;
	};
	Handsontable.UndoRedo.prototype.clear = function() {
	  this.doneActions.length = 0;
	  this.undoneActions.length = 0;
	};
	Handsontable.UndoRedo.Action = function() {};
	Handsontable.UndoRedo.Action.prototype.undo = function() {};
	Handsontable.UndoRedo.Action.prototype.redo = function() {};
	Handsontable.UndoRedo.ChangeAction = function(changes) {
	  this.changes = changes;
	};
	inherit(Handsontable.UndoRedo.ChangeAction, Handsontable.UndoRedo.Action);
	Handsontable.UndoRedo.ChangeAction.prototype.undo = function(instance, undoneCallback) {
	  var data = deepClone(this.changes),
	      emptyRowsAtTheEnd = instance.countEmptyRows(true),
	      emptyColsAtTheEnd = instance.countEmptyCols(true);
	  for (var i = 0,
	      len = data.length; i < len; i++) {
	    data[i].splice(3, 1);
	  }
	  instance.addHookOnce('afterChange', undoneCallback);
	  instance.setDataAtRowProp(data, null, null, 'undo');
	  for (var i = 0,
	      len = data.length; i < len; i++) {
	    if (instance.getSettings().minSpareRows && data[i][0] + 1 + instance.getSettings().minSpareRows === instance.countRows() && emptyRowsAtTheEnd == instance.getSettings().minSpareRows) {
	      instance.alter('remove_row', parseInt(data[i][0] + 1, 10), instance.getSettings().minSpareRows);
	      instance.undoRedo.doneActions.pop();
	    }
	    if (instance.getSettings().minSpareCols && data[i][1] + 1 + instance.getSettings().minSpareCols === instance.countCols() && emptyColsAtTheEnd == instance.getSettings().minSpareCols) {
	      instance.alter('remove_col', parseInt(data[i][1] + 1, 10), instance.getSettings().minSpareCols);
	      instance.undoRedo.doneActions.pop();
	    }
	  }
	};
	Handsontable.UndoRedo.ChangeAction.prototype.redo = function(instance, onFinishCallback) {
	  var data = deepClone(this.changes);
	  for (var i = 0,
	      len = data.length; i < len; i++) {
	    data[i].splice(2, 1);
	  }
	  instance.addHookOnce('afterChange', onFinishCallback);
	  instance.setDataAtRowProp(data, null, null, 'redo');
	};
	Handsontable.UndoRedo.CreateRowAction = function(index, amount) {
	  this.index = index;
	  this.amount = amount;
	};
	inherit(Handsontable.UndoRedo.CreateRowAction, Handsontable.UndoRedo.Action);
	Handsontable.UndoRedo.CreateRowAction.prototype.undo = function(instance, undoneCallback) {
	  var rowCount = instance.countRows(),
	      minSpareRows = instance.getSettings().minSpareRows;
	  if (this.index >= rowCount && this.index - minSpareRows < rowCount) {
	    this.index -= minSpareRows;
	  }
	  instance.addHookOnce('afterRemoveRow', undoneCallback);
	  instance.alter('remove_row', this.index, this.amount);
	};
	Handsontable.UndoRedo.CreateRowAction.prototype.redo = function(instance, redoneCallback) {
	  instance.addHookOnce('afterCreateRow', redoneCallback);
	  instance.alter('insert_row', this.index + 1, this.amount);
	};
	Handsontable.UndoRedo.RemoveRowAction = function(index, data) {
	  this.index = index;
	  this.data = data;
	};
	inherit(Handsontable.UndoRedo.RemoveRowAction, Handsontable.UndoRedo.Action);
	Handsontable.UndoRedo.RemoveRowAction.prototype.undo = function(instance, undoneCallback) {
	  var spliceArgs = [this.index, 0];
	  Array.prototype.push.apply(spliceArgs, this.data);
	  Array.prototype.splice.apply(instance.getData(), spliceArgs);
	  instance.addHookOnce('afterRender', undoneCallback);
	  instance.render();
	};
	Handsontable.UndoRedo.RemoveRowAction.prototype.redo = function(instance, redoneCallback) {
	  instance.addHookOnce('afterRemoveRow', redoneCallback);
	  instance.alter('remove_row', this.index, this.data.length);
	};
	Handsontable.UndoRedo.CreateColumnAction = function(index, amount) {
	  this.index = index;
	  this.amount = amount;
	};
	inherit(Handsontable.UndoRedo.CreateColumnAction, Handsontable.UndoRedo.Action);
	Handsontable.UndoRedo.CreateColumnAction.prototype.undo = function(instance, undoneCallback) {
	  instance.addHookOnce('afterRemoveCol', undoneCallback);
	  instance.alter('remove_col', this.index, this.amount);
	};
	Handsontable.UndoRedo.CreateColumnAction.prototype.redo = function(instance, redoneCallback) {
	  instance.addHookOnce('afterCreateCol', redoneCallback);
	  instance.alter('insert_col', this.index + 1, this.amount);
	};
	Handsontable.UndoRedo.CellAlignmentAction = function(stateBefore, range, type, alignment) {
	  this.stateBefore = stateBefore;
	  this.range = range;
	  this.type = type;
	  this.alignment = alignment;
	};
	Handsontable.UndoRedo.CellAlignmentAction.prototype.undo = function(instance, undoneCallback) {
	  if (!instance.getPlugin('contextMenu').isEnabled()) {
	    return;
	  }
	  for (var row = this.range.from.row; row <= this.range.to.row; row++) {
	    for (var col = this.range.from.col; col <= this.range.to.col; col++) {
	      instance.setCellMeta(row, col, 'className', this.stateBefore[row][col] || ' htLeft');
	    }
	  }
	  instance.addHookOnce('afterRender', undoneCallback);
	  instance.render();
	};
	Handsontable.UndoRedo.CellAlignmentAction.prototype.redo = function(instance, undoneCallback) {
	  if (!instance.getPlugin('contextMenu').isEnabled()) {
	    return;
	  }
	  instance.selectCell(this.range.from.row, this.range.from.col, this.range.to.row, this.range.to.col);
	  instance.getPlugin('contextMenu').executeCommand('alignment:' + this.alignment.replace('ht', '').toLowerCase());
	  instance.addHookOnce('afterRender', undoneCallback);
	  instance.render();
	};
	Handsontable.UndoRedo.RemoveColumnAction = function(index, data, headers) {
	  this.index = index;
	  this.data = data;
	  this.amount = this.data[0].length;
	  this.headers = headers;
	};
	inherit(Handsontable.UndoRedo.RemoveColumnAction, Handsontable.UndoRedo.Action);
	Handsontable.UndoRedo.RemoveColumnAction.prototype.undo = function(instance, undoneCallback) {
	  var row,
	      spliceArgs;
	  for (var i = 0,
	      len = instance.getData().length; i < len; i++) {
	    row = instance.getSourceDataAtRow(i);
	    spliceArgs = [this.index, 0];
	    Array.prototype.push.apply(spliceArgs, this.data[i]);
	    Array.prototype.splice.apply(row, spliceArgs);
	  }
	  if (typeof this.headers != 'undefined') {
	    spliceArgs = [this.index, 0];
	    Array.prototype.push.apply(spliceArgs, this.headers);
	    Array.prototype.splice.apply(instance.getSettings().colHeaders, spliceArgs);
	  }
	  instance.addHookOnce('afterRender', undoneCallback);
	  instance.render();
	};
	Handsontable.UndoRedo.RemoveColumnAction.prototype.redo = function(instance, redoneCallback) {
	  instance.addHookOnce('afterRemoveCol', redoneCallback);
	  instance.alter('remove_col', this.index, this.amount);
	};
	function init() {
	  var instance = this;
	  var pluginEnabled = typeof instance.getSettings().undo == 'undefined' || instance.getSettings().undo;
	  if (pluginEnabled) {
	    if (!instance.undoRedo) {
	      instance.undoRedo = new Handsontable.UndoRedo(instance);
	      exposeUndoRedoMethods(instance);
	      instance.addHook('beforeKeyDown', onBeforeKeyDown);
	      instance.addHook('afterChange', onAfterChange);
	    }
	  } else {
	    if (instance.undoRedo) {
	      delete instance.undoRedo;
	      removeExposedUndoRedoMethods(instance);
	      instance.removeHook('beforeKeyDown', onBeforeKeyDown);
	      instance.removeHook('afterChange', onAfterChange);
	    }
	  }
	}
	function onBeforeKeyDown(event) {
	  var instance = this;
	  var ctrlDown = (event.ctrlKey || event.metaKey) && !event.altKey;
	  if (ctrlDown) {
	    if (event.keyCode === 89 || (event.shiftKey && event.keyCode === 90)) {
	      instance.undoRedo.redo();
	      stopImmediatePropagation(event);
	    } else if (event.keyCode === 90) {
	      instance.undoRedo.undo();
	      stopImmediatePropagation(event);
	    }
	  }
	}
	function onAfterChange(changes, source) {
	  var instance = this;
	  if (source == 'loadData') {
	    return instance.undoRedo.clear();
	  }
	}
	function exposeUndoRedoMethods(instance) {
	  instance.undo = function() {
	    return instance.undoRedo.undo();
	  };
	  instance.redo = function() {
	    return instance.undoRedo.redo();
	  };
	  instance.isUndoAvailable = function() {
	    return instance.undoRedo.isUndoAvailable();
	  };
	  instance.isRedoAvailable = function() {
	    return instance.undoRedo.isRedoAvailable();
	  };
	  instance.clearUndo = function() {
	    return instance.undoRedo.clear();
	  };
	}
	function removeExposedUndoRedoMethods(instance) {
	  delete instance.undo;
	  delete instance.redo;
	  delete instance.isUndoAvailable;
	  delete instance.isRedoAvailable;
	  delete instance.clearUndo;
	}
	Handsontable.hooks.add('afterInit', init);
	Handsontable.hooks.add('afterUpdateSettings', init);

	//# 
	},{"helpers/dom/event":45,"helpers/object":49}],86:[function(require,module,exports){
	"use strict";
	Object.defineProperties(exports, {
	  registerRenderer: {get: function() {
	      return registerRenderer;
	    }},
	  getRenderer: {get: function() {
	      return getRenderer;
	    }},
	  hasRenderer: {get: function() {
	      return hasRenderer;
	    }},
	  __esModule: {value: true}
	});
	var $__helpers_47_string__;
	var toUpperCaseFirst = ($__helpers_47_string__ = require("helpers/string"), $__helpers_47_string__ && $__helpers_47_string__.__esModule && $__helpers_47_string__ || {default: $__helpers_47_string__}).toUpperCaseFirst;
	var registeredRenderers = {};
	Handsontable.renderers = Handsontable.renderers || {};
	Handsontable.renderers.registerRenderer = registerRenderer;
	Handsontable.renderers.getRenderer = getRenderer;
	function registerRenderer(rendererName, rendererFunction) {
	  var registerName;
	  registeredRenderers[rendererName] = rendererFunction;
	  registerName = toUpperCaseFirst(rendererName) + 'Renderer';
	  Handsontable.renderers[registerName] = rendererFunction;
	  Handsontable[registerName] = rendererFunction;
	}
	function getRenderer(rendererName) {
	  if (typeof rendererName == 'function') {
	    return rendererName;
	  }
	  if (typeof rendererName != 'string') {
	    throw Error('Only strings and functions can be passed as "renderer" parameter');
	  }
	  if (!(rendererName in registeredRenderers)) {
	    throw Error('No editor registered under name "' + rendererName + '"');
	  }
	  return registeredRenderers[rendererName];
	}
	function hasRenderer(rendererName) {
	  return rendererName in registeredRenderers;
	}
	;

	//# 
	},{"helpers/string":51}],87:[function(require,module,exports){
	"use strict";
	Object.defineProperties(exports, {
	  cellDecorator: {get: function() {
	      return cellDecorator;
	    }},
	  __esModule: {value: true}
	});
	var $___46__46__47_helpers_47_dom_47_element__,
	    $___46__46__47_renderers__;
	var $__0 = ($___46__46__47_helpers_47_dom_47_element__ = require("helpers/dom/element"), $___46__46__47_helpers_47_dom_47_element__ && $___46__46__47_helpers_47_dom_47_element__.__esModule && $___46__46__47_helpers_47_dom_47_element__ || {default: $___46__46__47_helpers_47_dom_47_element__}),
	    addClass = $__0.addClass,
	    removeClass = $__0.removeClass;
	var registerRenderer = ($___46__46__47_renderers__ = require("renderers"), $___46__46__47_renderers__ && $___46__46__47_renderers__.__esModule && $___46__46__47_renderers__ || {default: $___46__46__47_renderers__}).registerRenderer;
	;
	registerRenderer('base', cellDecorator);
	Handsontable.renderers.cellDecorator = cellDecorator;
	function cellDecorator(instance, TD, row, col, prop, value, cellProperties) {
	  if (cellProperties.className) {
	    if (TD.className) {
	      TD.className = TD.className + ' ' + cellProperties.className;
	    } else {
	      TD.className = cellProperties.className;
	    }
	  }
	  if (cellProperties.readOnly) {
	    addClass(TD, cellProperties.readOnlyCellClassName);
	  }
	  if (cellProperties.valid === false && cellProperties.invalidCellClassName) {
	    addClass(TD, cellProperties.invalidCellClassName);
	  } else {
	    removeClass(TD, cellProperties.invalidCellClassName);
	  }
	  if (cellProperties.wordWrap === false && cellProperties.noWordWrapClassName) {
	    addClass(TD, cellProperties.noWordWrapClassName);
	  }
	  if (!value && cellProperties.placeholder) {
	    addClass(TD, cellProperties.placeholderCellClassName);
	  }
	}

	//# 
	},{"helpers/dom/element":44,"renderers":86}],88:[function(require,module,exports){
	"use strict";
	Object.defineProperties(exports, {
	  autocompleteRenderer: {get: function() {
	      return autocompleteRenderer;
	    }},
	  __esModule: {value: true}
	});
	var $___46__46__47_helpers_47_dom_47_element__,
	    $___46__46__47_eventManager__,
	    $___46__46__47_renderers__,
	    $___46__46__47_3rdparty_47_walkontable_47_src_47_cell_47_coords__;
	var $__0 = ($___46__46__47_helpers_47_dom_47_element__ = require("helpers/dom/element"), $___46__46__47_helpers_47_dom_47_element__ && $___46__46__47_helpers_47_dom_47_element__.__esModule && $___46__46__47_helpers_47_dom_47_element__ || {default: $___46__46__47_helpers_47_dom_47_element__}),
	    addClass = $__0.addClass,
	    hasClass = $__0.hasClass,
	    empty = $__0.empty;
	var eventManagerObject = ($___46__46__47_eventManager__ = require("eventManager"), $___46__46__47_eventManager__ && $___46__46__47_eventManager__.__esModule && $___46__46__47_eventManager__ || {default: $___46__46__47_eventManager__}).eventManager;
	var $__2 = ($___46__46__47_renderers__ = require("renderers"), $___46__46__47_renderers__ && $___46__46__47_renderers__.__esModule && $___46__46__47_renderers__ || {default: $___46__46__47_renderers__}),
	    getRenderer = $__2.getRenderer,
	    registerRenderer = $__2.registerRenderer;
	var WalkontableCellCoords = ($___46__46__47_3rdparty_47_walkontable_47_src_47_cell_47_coords__ = require("3rdparty/walkontable/src/cell/coords"), $___46__46__47_3rdparty_47_walkontable_47_src_47_cell_47_coords__ && $___46__46__47_3rdparty_47_walkontable_47_src_47_cell_47_coords__.__esModule && $___46__46__47_3rdparty_47_walkontable_47_src_47_cell_47_coords__ || {default: $___46__46__47_3rdparty_47_walkontable_47_src_47_cell_47_coords__}).WalkontableCellCoords;
	var clonableWRAPPER = document.createElement('DIV');
	clonableWRAPPER.className = 'htAutocompleteWrapper';
	var clonableARROW = document.createElement('DIV');
	clonableARROW.className = 'htAutocompleteArrow';
	clonableARROW.appendChild(document.createTextNode(String.fromCharCode(9660)));
	var wrapTdContentWithWrapper = function(TD, WRAPPER) {
	  WRAPPER.innerHTML = TD.innerHTML;
	  empty(TD);
	  TD.appendChild(WRAPPER);
	};
	function autocompleteRenderer(instance, TD, row, col, prop, value, cellProperties) {
	  var WRAPPER = clonableWRAPPER.cloneNode(true);
	  var ARROW = clonableARROW.cloneNode(true);
	  getRenderer('text')(instance, TD, row, col, prop, value, cellProperties);
	  TD.appendChild(ARROW);
	  addClass(TD, 'htAutocomplete');
	  if (!TD.firstChild) {
	    TD.appendChild(document.createTextNode(String.fromCharCode(160)));
	  }
	  if (!instance.acArrowListener) {
	    var eventManager = eventManagerObject(instance);
	    instance.acArrowListener = function(event) {
	      if (hasClass(event.target, 'htAutocompleteArrow')) {
	        instance.view.wt.getSetting('onCellDblClick', null, new WalkontableCellCoords(row, col), TD);
	      }
	    };
	    eventManager.addEventListener(instance.rootElement, 'mousedown', instance.acArrowListener);
	    instance.addHookOnce('afterDestroy', function() {
	      eventManager.destroy();
	    });
	  }
	}
	;
	registerRenderer('autocomplete', autocompleteRenderer);

	//# 
	},{"3rdparty/walkontable/src/cell/coords":5,"eventManager":40,"helpers/dom/element":44,"renderers":86}],89:[function(require,module,exports){
	"use strict";
	Object.defineProperties(exports, {
	  checkboxRenderer: {get: function() {
	      return checkboxRenderer;
	    }},
	  __esModule: {value: true}
	});
	var $___46__46__47_helpers_47_dom_47_element__,
	    $___46__46__47_helpers_47_string__,
	    $___46__46__47_eventManager__,
	    $___46__46__47_renderers__,
	    $___46__46__47_helpers_47_unicode__,
	    $___46__46__47_helpers_47_dom_47_event__;
	var $__0 = ($___46__46__47_helpers_47_dom_47_element__ = require("helpers/dom/element"), $___46__46__47_helpers_47_dom_47_element__ && $___46__46__47_helpers_47_dom_47_element__.__esModule && $___46__46__47_helpers_47_dom_47_element__ || {default: $___46__46__47_helpers_47_dom_47_element__}),
	    empty = $__0.empty,
	    addClass = $__0.addClass,
	    hasClass = $__0.hasClass;
	var equalsIgnoreCase = ($___46__46__47_helpers_47_string__ = require("helpers/string"), $___46__46__47_helpers_47_string__ && $___46__46__47_helpers_47_string__.__esModule && $___46__46__47_helpers_47_string__ || {default: $___46__46__47_helpers_47_string__}).equalsIgnoreCase;
	var EventManager = ($___46__46__47_eventManager__ = require("eventManager"), $___46__46__47_eventManager__ && $___46__46__47_eventManager__.__esModule && $___46__46__47_eventManager__ || {default: $___46__46__47_eventManager__}).EventManager;
	var $__3 = ($___46__46__47_renderers__ = require("renderers"), $___46__46__47_renderers__ && $___46__46__47_renderers__.__esModule && $___46__46__47_renderers__ || {default: $___46__46__47_renderers__}),
	    getRenderer = $__3.getRenderer,
	    registerRenderer = $__3.registerRenderer;
	var KEY_CODES = ($___46__46__47_helpers_47_unicode__ = require("helpers/unicode"), $___46__46__47_helpers_47_unicode__ && $___46__46__47_helpers_47_unicode__.__esModule && $___46__46__47_helpers_47_unicode__ || {default: $___46__46__47_helpers_47_unicode__}).KEY_CODES;
	var $__5 = ($___46__46__47_helpers_47_dom_47_event__ = require("helpers/dom/event"), $___46__46__47_helpers_47_dom_47_event__ && $___46__46__47_helpers_47_dom_47_event__.__esModule && $___46__46__47_helpers_47_dom_47_event__ || {default: $___46__46__47_helpers_47_dom_47_event__}),
	    stopPropagation = $__5.stopPropagation,
	    stopImmediatePropagation = $__5.stopImmediatePropagation,
	    isImmediatePropagationStopped = $__5.isImmediatePropagationStopped;
	var isListeningKeyDownEvent = new WeakMap();
	var BAD_VALUE_CLASS = 'htBadValue';
	function checkboxRenderer(instance, TD, row, col, prop, value, cellProperties) {
	  var eventManager = new EventManager(instance);
	  var input = createInput();
	  var labelOptions = cellProperties.label;
	  var badValue = false;
	  if (typeof cellProperties.checkedTemplate === 'undefined') {
	    cellProperties.checkedTemplate = true;
	  }
	  if (typeof cellProperties.uncheckedTemplate === 'undefined') {
	    cellProperties.uncheckedTemplate = false;
	  }
	  empty(TD);
	  if (value === cellProperties.checkedTemplate || equalsIgnoreCase(value, cellProperties.checkedTemplate)) {
	    input.checked = true;
	  } else if (value === cellProperties.uncheckedTemplate || equalsIgnoreCase(value, cellProperties.uncheckedTemplate)) {
	    input.checked = false;
	  } else if (value === null) {
	    addClass(input, 'noValue');
	  } else {
	    input.style.display = 'none';
	    addClass(input, BAD_VALUE_CLASS);
	    badValue = true;
	  }
	  if (!badValue && labelOptions) {
	    var labelText = '';
	    if (labelOptions.value) {
	      labelText = typeof labelOptions.value === 'function' ? labelOptions.value.call(this, row, col, prop, value) : labelOptions.value;
	    } else if (labelOptions.property) {
	      labelText = instance.getDataAtRowProp(row, labelOptions.property);
	    }
	    var label = createLabel(labelText);
	    if (labelOptions.position === 'before') {
	      label.appendChild(input);
	    } else {
	      label.insertBefore(input, label.firstChild);
	    }
	    input = label;
	  }
	  TD.appendChild(input);
	  if (badValue) {
	    TD.appendChild(document.createTextNode('#bad-value#'));
	  }
	  if (cellProperties.readOnly) {
	    eventManager.addEventListener(input, 'click', preventDefault);
	  } else {
	    eventManager.addEventListener(input, 'mousedown', stopPropagation);
	    eventManager.addEventListener(input, 'mouseup', stopPropagation);
	    eventManager.addEventListener(input, 'change', (function(event) {
	      instance.setDataAtRowProp(row, prop, event.target.checked ? cellProperties.checkedTemplate : cellProperties.uncheckedTemplate);
	    }));
	  }
	  if (!isListeningKeyDownEvent.has(instance)) {
	    isListeningKeyDownEvent.set(instance, true);
	    instance.addHook('beforeKeyDown', onBeforeKeyDown);
	  }
	  function onBeforeKeyDown(event) {
	    var allowedKeys = [KEY_CODES.SPACE, KEY_CODES.ENTER, KEY_CODES.DELETE, KEY_CODES.BACKSPACE];
	    if (allowedKeys.indexOf(event.keyCode) !== -1 && !isImmediatePropagationStopped(event)) {
	      eachSelectedCheckboxCell(function() {
	        stopImmediatePropagation(event);
	        event.preventDefault();
	      });
	    }
	    if (event.keyCode == KEY_CODES.SPACE || event.keyCode == KEY_CODES.ENTER) {
	      toggleSelected();
	    }
	    if (event.keyCode == KEY_CODES.DELETE || event.keyCode == KEY_CODES.BACKSPACE) {
	      toggleSelected(false);
	    }
	  }
	  function toggleSelected() {
	    var checked = arguments[0] !== (void 0) ? arguments[0] : null;
	    eachSelectedCheckboxCell(function(checkboxes) {
	      for (var i = 0,
	          len = checkboxes.length; i < len; i++) {
	        if (hasClass(checkboxes[i], BAD_VALUE_CLASS) && checked === null) {
	          return;
	        }
	        toggleCheckbox(checkboxes[i], checked);
	      }
	    });
	  }
	  function toggleCheckbox(checkbox) {
	    var checked = arguments[1] !== (void 0) ? arguments[1] : null;
	    if (checked === null) {
	      checkbox.checked = !checkbox.checked;
	    } else {
	      checkbox.checked = checked;
	    }
	    eventManager.fireEvent(checkbox, 'change');
	  }
	  function eachSelectedCheckboxCell(callback) {
	    var selRange = instance.getSelectedRange();
	    var topLeft = selRange.getTopLeftCorner();
	    var bottomRight = selRange.getBottomRightCorner();
	    for (var row = topLeft.row; row <= bottomRight.row; row++) {
	      for (var col = topLeft.col; col <= bottomRight.col; col++) {
	        var cell = instance.getCell(row, col);
	        var cellProperties$__6 = instance.getCellMeta(row, col);
	        var checkboxes = cell.querySelectorAll('input[type=checkbox]');
	        if (checkboxes.length > 0 && !cellProperties$__6.readOnly) {
	          callback(checkboxes);
	        }
	      }
	    }
	  }
	}
	;
	registerRenderer('checkbox', checkboxRenderer);
	function createInput() {
	  var input = document.createElement('input');
	  input.className = 'htCheckboxRendererInput';
	  input.type = 'checkbox';
	  input.setAttribute('autocomplete', 'off');
	  return input.cloneNode(false);
	}
	function createLabel(text) {
	  var label = document.createElement('label');
	  label.className = 'htCheckboxRendererLabel';
	  label.appendChild(document.createTextNode(text));
	  return label.cloneNode(true);
	}
	function preventDefault(event) {
	  event.preventDefault();
	}

	//# 
	},{"eventManager":40,"helpers/dom/element":44,"helpers/dom/event":45,"helpers/string":51,"helpers/unicode":52,"renderers":86}],90:[function(require,module,exports){
	"use strict";
	Object.defineProperties(exports, {
	  htmlRenderer: {get: function() {
	      return htmlRenderer;
	    }},
	  __esModule: {value: true}
	});
	var $___46__46__47_helpers_47_dom_47_element__,
	    $___46__46__47_renderers__;
	var fastInnerHTML = ($___46__46__47_helpers_47_dom_47_element__ = require("helpers/dom/element"), $___46__46__47_helpers_47_dom_47_element__ && $___46__46__47_helpers_47_dom_47_element__.__esModule && $___46__46__47_helpers_47_dom_47_element__ || {default: $___46__46__47_helpers_47_dom_47_element__}).fastInnerHTML;
	var $__1 = ($___46__46__47_renderers__ = require("renderers"), $___46__46__47_renderers__ && $___46__46__47_renderers__.__esModule && $___46__46__47_renderers__ || {default: $___46__46__47_renderers__}),
	    getRenderer = $__1.getRenderer,
	    registerRenderer = $__1.registerRenderer;
	function htmlRenderer(instance, TD, row, col, prop, value, cellProperties) {
	  getRenderer('base').apply(this, arguments);
	  fastInnerHTML(TD, value);
	}
	;
	registerRenderer('html', htmlRenderer);

	//# 
	},{"helpers/dom/element":44,"renderers":86}],91:[function(require,module,exports){
	"use strict";
	Object.defineProperties(exports, {
	  numericRenderer: {get: function() {
	      return numericRenderer;
	    }},
	  __esModule: {value: true}
	});
	var $__numeral__,
	    $___46__46__47_helpers_47_dom_47_element__,
	    $___46__46__47_renderers__,
	    $___46__46__47_helpers_47_number__;
	var numeral = ($__numeral__ = require("numeral"), $__numeral__ && $__numeral__.__esModule && $__numeral__ || {default: $__numeral__}).default;
	var addClass = ($___46__46__47_helpers_47_dom_47_element__ = require("helpers/dom/element"), $___46__46__47_helpers_47_dom_47_element__ && $___46__46__47_helpers_47_dom_47_element__.__esModule && $___46__46__47_helpers_47_dom_47_element__ || {default: $___46__46__47_helpers_47_dom_47_element__}).addClass;
	var $__2 = ($___46__46__47_renderers__ = require("renderers"), $___46__46__47_renderers__ && $___46__46__47_renderers__.__esModule && $___46__46__47_renderers__ || {default: $___46__46__47_renderers__}),
	    getRenderer = $__2.getRenderer,
	    registerRenderer = $__2.registerRenderer;
	var isNumeric = ($___46__46__47_helpers_47_number__ = require("helpers/number"), $___46__46__47_helpers_47_number__ && $___46__46__47_helpers_47_number__.__esModule && $___46__46__47_helpers_47_number__ || {default: $___46__46__47_helpers_47_number__}).isNumeric;
	function numericRenderer(instance, TD, row, col, prop, value, cellProperties) {
	  if (isNumeric(value)) {
	    if (typeof cellProperties.language !== 'undefined') {
	      numeral.language(cellProperties.language);
	    }
	    value = numeral(value).format(cellProperties.format || '0');
	    addClass(TD, 'htNumeric');
	  }
	  getRenderer('text')(instance, TD, row, col, prop, value, cellProperties);
	}
	;
	registerRenderer('numeric', numericRenderer);

	//# 
	},{"helpers/dom/element":44,"helpers/number":48,"numeral":"numeral","renderers":86}],92:[function(require,module,exports){
	"use strict";
	Object.defineProperties(exports, {
	  passwordRenderer: {get: function() {
	      return passwordRenderer;
	    }},
	  __esModule: {value: true}
	});
	var $___46__46__47_helpers_47_dom_47_element__,
	    $___46__46__47_renderers__;
	var fastInnerHTML = ($___46__46__47_helpers_47_dom_47_element__ = require("helpers/dom/element"), $___46__46__47_helpers_47_dom_47_element__ && $___46__46__47_helpers_47_dom_47_element__.__esModule && $___46__46__47_helpers_47_dom_47_element__ || {default: $___46__46__47_helpers_47_dom_47_element__}).fastInnerHTML;
	var $__1 = ($___46__46__47_renderers__ = require("renderers"), $___46__46__47_renderers__ && $___46__46__47_renderers__.__esModule && $___46__46__47_renderers__ || {default: $___46__46__47_renderers__}),
	    getRenderer = $__1.getRenderer,
	    registerRenderer = $__1.registerRenderer;
	function passwordRenderer(instance, TD, row, col, prop, value, cellProperties) {
	  getRenderer('text').apply(this, arguments);
	  value = TD.innerHTML;
	  var hash;
	  var hashLength = cellProperties.hashLength || value.length;
	  var hashSymbol = cellProperties.hashSymbol || '*';
	  for (hash = ''; hash.split(hashSymbol).length - 1 < hashLength; hash += hashSymbol) {}
	  fastInnerHTML(TD, hash);
	}
	;
	registerRenderer('password', passwordRenderer);

	//# 
	},{"helpers/dom/element":44,"renderers":86}],93:[function(require,module,exports){
	"use strict";
	Object.defineProperties(exports, {
	  textRenderer: {get: function() {
	      return textRenderer;
	    }},
	  __esModule: {value: true}
	});
	var $___46__46__47_helpers_47_dom_47_element__,
	    $___46__46__47_helpers_47_mixed__,
	    $___46__46__47_renderers__;
	var $__0 = ($___46__46__47_helpers_47_dom_47_element__ = require("helpers/dom/element"), $___46__46__47_helpers_47_dom_47_element__ && $___46__46__47_helpers_47_dom_47_element__.__esModule && $___46__46__47_helpers_47_dom_47_element__ || {default: $___46__46__47_helpers_47_dom_47_element__}),
	    empty = $__0.empty,
	    fastInnerText = $__0.fastInnerText;
	var stringify = ($___46__46__47_helpers_47_mixed__ = require("helpers/mixed"), $___46__46__47_helpers_47_mixed__ && $___46__46__47_helpers_47_mixed__.__esModule && $___46__46__47_helpers_47_mixed__ || {default: $___46__46__47_helpers_47_mixed__}).stringify;
	var $__2 = ($___46__46__47_renderers__ = require("renderers"), $___46__46__47_renderers__ && $___46__46__47_renderers__.__esModule && $___46__46__47_renderers__ || {default: $___46__46__47_renderers__}),
	    getRenderer = $__2.getRenderer,
	    registerRenderer = $__2.registerRenderer;
	function textRenderer(instance, TD, row, col, prop, value, cellProperties) {
	  getRenderer('base').apply(this, arguments);
	  if (!value && cellProperties.placeholder) {
	    value = cellProperties.placeholder;
	  }
	  var escaped = stringify(value);
	  if (!instance.getSettings().trimWhitespace) {
	    escaped = escaped.replace(/ /g, String.fromCharCode(160));
	  }
	  if (cellProperties.rendererTemplate) {
	    empty(TD);
	    var TEMPLATE = document.createElement('TEMPLATE');
	    TEMPLATE.setAttribute('bind', '{{}}');
	    TEMPLATE.innerHTML = cellProperties.rendererTemplate;
	    HTMLTemplateElement.decorate(TEMPLATE);
	    TEMPLATE.model = instance.getSourceDataAtRow(row);
	    TD.appendChild(TEMPLATE);
	  } else {
	    fastInnerText(TD, escaped);
	  }
	}
	;
	registerRenderer('text', textRenderer);

	//# 
	},{"helpers/dom/element":44,"helpers/mixed":47,"renderers":86}],94:[function(require,module,exports){
	"use strict";
	(function(global) {
	  'use strict';
	  if (global.$traceurRuntime) {
	    return;
	  }
	  var $Object = Object;
	  var $TypeError = TypeError;
	  var $create = $Object.create;
	  var $defineProperties = $Object.defineProperties;
	  var $defineProperty = $Object.defineProperty;
	  var $freeze = $Object.freeze;
	  var $getOwnPropertyDescriptor = $Object.getOwnPropertyDescriptor;
	  var $getOwnPropertyNames = $Object.getOwnPropertyNames;
	  var $keys = $Object.keys;
	  var $hasOwnProperty = $Object.prototype.hasOwnProperty;
	  var $preventExtensions = Object.preventExtensions;
	  var $seal = Object.seal;
	  var $isExtensible = Object.isExtensible;
	  function nonEnum(value) {
	    return {
	      configurable: true,
	      enumerable: false,
	      value: value,
	      writable: true
	    };
	  }
	  var method = nonEnum;
	  var counter = 0;
	  function newUniqueString() {
	    return '__$' + Math.floor(Math.random() * 1e9) + '$' + ++counter + '$__';
	  }
	  var symbolInternalProperty = newUniqueString();
	  var symbolDescriptionProperty = newUniqueString();
	  var symbolDataProperty = newUniqueString();
	  var symbolValues = $create(null);
	  var privateNames = $create(null);
	  function isPrivateName(s) {
	    return privateNames[s];
	  }
	  function createPrivateName() {
	    var s = newUniqueString();
	    privateNames[s] = true;
	    return s;
	  }
	  function isShimSymbol(symbol) {
	    return typeof symbol === 'object' && symbol instanceof SymbolValue;
	  }
	  function typeOf(v) {
	    if (isShimSymbol(v))
	      return 'symbol';
	    return typeof v;
	  }
	  function Symbol(description) {
	    var value = new SymbolValue(description);
	    if (!(this instanceof Symbol))
	      return value;
	    throw new TypeError('Symbol cannot be new\'ed');
	  }
	  $defineProperty(Symbol.prototype, 'constructor', nonEnum(Symbol));
	  $defineProperty(Symbol.prototype, 'toString', method(function() {
	    var symbolValue = this[symbolDataProperty];
	    if (!getOption('symbols'))
	      return symbolValue[symbolInternalProperty];
	    if (!symbolValue)
	      throw TypeError('Conversion from symbol to string');
	    var desc = symbolValue[symbolDescriptionProperty];
	    if (desc === undefined)
	      desc = '';
	    return 'Symbol(' + desc + ')';
	  }));
	  $defineProperty(Symbol.prototype, 'valueOf', method(function() {
	    var symbolValue = this[symbolDataProperty];
	    if (!symbolValue)
	      throw TypeError('Conversion from symbol to string');
	    if (!getOption('symbols'))
	      return symbolValue[symbolInternalProperty];
	    return symbolValue;
	  }));
	  function SymbolValue(description) {
	    var key = newUniqueString();
	    $defineProperty(this, symbolDataProperty, {value: this});
	    $defineProperty(this, symbolInternalProperty, {value: key});
	    $defineProperty(this, symbolDescriptionProperty, {value: description});
	    freeze(this);
	    symbolValues[key] = this;
	  }
	  $defineProperty(SymbolValue.prototype, 'constructor', nonEnum(Symbol));
	  $defineProperty(SymbolValue.prototype, 'toString', {
	    value: Symbol.prototype.toString,
	    enumerable: false
	  });
	  $defineProperty(SymbolValue.prototype, 'valueOf', {
	    value: Symbol.prototype.valueOf,
	    enumerable: false
	  });
	  var hashProperty = createPrivateName();
	  var hashPropertyDescriptor = {value: undefined};
	  var hashObjectProperties = {
	    hash: {value: undefined},
	    self: {value: undefined}
	  };
	  var hashCounter = 0;
	  function getOwnHashObject(object) {
	    var hashObject = object[hashProperty];
	    if (hashObject && hashObject.self === object)
	      return hashObject;
	    if ($isExtensible(object)) {
	      hashObjectProperties.hash.value = hashCounter++;
	      hashObjectProperties.self.value = object;
	      hashPropertyDescriptor.value = $create(null, hashObjectProperties);
	      $defineProperty(object, hashProperty, hashPropertyDescriptor);
	      return hashPropertyDescriptor.value;
	    }
	    return undefined;
	  }
	  function freeze(object) {
	    getOwnHashObject(object);
	    return $freeze.apply(this, arguments);
	  }
	  function preventExtensions(object) {
	    getOwnHashObject(object);
	    return $preventExtensions.apply(this, arguments);
	  }
	  function seal(object) {
	    getOwnHashObject(object);
	    return $seal.apply(this, arguments);
	  }
	  freeze(SymbolValue.prototype);
	  function isSymbolString(s) {
	    return symbolValues[s] || privateNames[s];
	  }
	  function toProperty(name) {
	    if (isShimSymbol(name))
	      return name[symbolInternalProperty];
	    return name;
	  }
	  function removeSymbolKeys(array) {
	    var rv = [];
	    for (var i = 0; i < array.length; i++) {
	      if (!isSymbolString(array[i])) {
	        rv.push(array[i]);
	      }
	    }
	    return rv;
	  }
	  function getOwnPropertyNames(object) {
	    return removeSymbolKeys($getOwnPropertyNames(object));
	  }
	  function keys(object) {
	    return removeSymbolKeys($keys(object));
	  }
	  function getOwnPropertySymbols(object) {
	    var rv = [];
	    var names = $getOwnPropertyNames(object);
	    for (var i = 0; i < names.length; i++) {
	      var symbol = symbolValues[names[i]];
	      if (symbol) {
	        rv.push(symbol);
	      }
	    }
	    return rv;
	  }
	  function getOwnPropertyDescriptor(object, name) {
	    return $getOwnPropertyDescriptor(object, toProperty(name));
	  }
	  function hasOwnProperty(name) {
	    return $hasOwnProperty.call(this, toProperty(name));
	  }
	  function getOption(name) {
	    return global.traceur && global.traceur.options[name];
	  }
	  function defineProperty(object, name, descriptor) {
	    if (isShimSymbol(name)) {
	      name = name[symbolInternalProperty];
	    }
	    $defineProperty(object, name, descriptor);
	    return object;
	  }
	  function polyfillObject(Object) {
	    $defineProperty(Object, 'defineProperty', {value: defineProperty});
	    $defineProperty(Object, 'getOwnPropertyNames', {value: getOwnPropertyNames});
	    $defineProperty(Object, 'getOwnPropertyDescriptor', {value: getOwnPropertyDescriptor});
	    $defineProperty(Object.prototype, 'hasOwnProperty', {value: hasOwnProperty});
	    $defineProperty(Object, 'freeze', {value: freeze});
	    $defineProperty(Object, 'preventExtensions', {value: preventExtensions});
	    $defineProperty(Object, 'seal', {value: seal});
	    $defineProperty(Object, 'keys', {value: keys});
	  }
	  function exportStar(object) {
	    for (var i = 1; i < arguments.length; i++) {
	      var names = $getOwnPropertyNames(arguments[i]);
	      for (var j = 0; j < names.length; j++) {
	        var name = names[j];
	        if (isSymbolString(name))
	          continue;
	        (function(mod, name) {
	          $defineProperty(object, name, {
	            get: function() {
	              return mod[name];
	            },
	            enumerable: true
	          });
	        })(arguments[i], names[j]);
	      }
	    }
	    return object;
	  }
	  function isObject(x) {
	    return x != null && (typeof x === 'object' || typeof x === 'function');
	  }
	  function toObject(x) {
	    if (x == null)
	      throw $TypeError();
	    return $Object(x);
	  }
	  function checkObjectCoercible(argument) {
	    if (argument == null) {
	      throw new TypeError('Value cannot be converted to an Object');
	    }
	    return argument;
	  }
	  function polyfillSymbol(global, Symbol) {
	    if (!global.Symbol) {
	      global.Symbol = Symbol;
	      Object.getOwnPropertySymbols = getOwnPropertySymbols;
	    }
	    if (!global.Symbol.iterator) {
	      global.Symbol.iterator = Symbol('Symbol.iterator');
	    }
	  }
	  function setupGlobals(global) {
	    polyfillSymbol(global, Symbol);
	    global.Reflect = global.Reflect || {};
	    global.Reflect.global = global.Reflect.global || global;
	    polyfillObject(global.Object);
	  }
	  setupGlobals(global);
	  global.$traceurRuntime = {
	    checkObjectCoercible: checkObjectCoercible,
	    createPrivateName: createPrivateName,
	    defineProperties: $defineProperties,
	    defineProperty: $defineProperty,
	    exportStar: exportStar,
	    getOwnHashObject: getOwnHashObject,
	    getOwnPropertyDescriptor: $getOwnPropertyDescriptor,
	    getOwnPropertyNames: $getOwnPropertyNames,
	    isObject: isObject,
	    isPrivateName: isPrivateName,
	    isSymbolString: isSymbolString,
	    keys: $keys,
	    setupGlobals: setupGlobals,
	    toObject: toObject,
	    toProperty: toProperty,
	    typeof: typeOf
	  };
	})(window);
	(function() {
	  'use strict';
	  var $toProperty = $traceurRuntime.toProperty;
	  function spread() {
	    var rv = [],
	        j = 0,
	        iterResult;
	    for (var i = 0; i < arguments.length; i++) {
	      var valueToSpread = $traceurRuntime.checkObjectCoercible(arguments[i]);
	      if (typeof valueToSpread[$toProperty(Symbol.iterator)] !== 'function') {
	        throw new TypeError('Cannot spread non-iterable object.');
	      }
	      var iter = valueToSpread[$toProperty(Symbol.iterator)]();
	      while (!(iterResult = iter.next()).done) {
	        rv[j++] = iterResult.value;
	      }
	    }
	    return rv;
	  }
	  $traceurRuntime.spread = spread;
	})();
	(function() {
	  'use strict';
	  var $Object = Object;
	  var $TypeError = TypeError;
	  var $create = $Object.create;
	  var $defineProperties = $traceurRuntime.defineProperties;
	  var $defineProperty = $traceurRuntime.defineProperty;
	  var $getOwnPropertyDescriptor = $traceurRuntime.getOwnPropertyDescriptor;
	  var $getPrototypeOf = Object.getPrototypeOf;
	  var $toProperty = $traceurRuntime.toProperty;
	  var $__0 = Object,
	      getOwnPropertyNames = $__0.getOwnPropertyNames,
	      getOwnPropertySymbols = $__0.getOwnPropertySymbols;
	  function superDescriptor(homeObject, name) {
	    var proto = $getPrototypeOf(homeObject);
	    do {
	      var result = $getOwnPropertyDescriptor(proto, name);
	      if (result)
	        return result;
	      proto = $getPrototypeOf(proto);
	    } while (proto);
	    return undefined;
	  }
	  function superConstructor(ctor) {
	    return ctor.__proto__;
	  }
	  function superCall(self, homeObject, name, args) {
	    return superGet(self, homeObject, name).apply(self, args);
	  }
	  function superGet(self, homeObject, name) {
	    var descriptor = superDescriptor(homeObject, name);
	    if (descriptor) {
	      if (!descriptor.get)
	        return descriptor.value;
	      return descriptor.get.call(self);
	    }
	    return undefined;
	  }
	  function superSet(self, homeObject, name, value) {
	    var descriptor = superDescriptor(homeObject, name);
	    if (descriptor && descriptor.set) {
	      descriptor.set.call(self, value);
	      return value;
	    }
	    throw $TypeError(("super has no setter '" + name + "'."));
	  }
	  function getDescriptors(object) {
	    var descriptors = {};
	    var names = getOwnPropertyNames(object);
	    for (var i = 0; i < names.length; i++) {
	      var name = names[i];
	      descriptors[name] = $getOwnPropertyDescriptor(object, name);
	    }
	    var symbols = getOwnPropertySymbols(object);
	    for (var i = 0; i < symbols.length; i++) {
	      var symbol = symbols[i];
	      descriptors[$toProperty(symbol)] = $getOwnPropertyDescriptor(object, $toProperty(symbol));
	    }
	    return descriptors;
	  }
	  function createClass(ctor, object, staticObject, superClass) {
	    $defineProperty(object, 'constructor', {
	      value: ctor,
	      configurable: true,
	      enumerable: false,
	      writable: true
	    });
	    if (arguments.length > 3) {
	      if (typeof superClass === 'function')
	        ctor.__proto__ = superClass;
	      ctor.prototype = $create(getProtoParent(superClass), getDescriptors(object));
	    } else {
	      ctor.prototype = object;
	    }
	    $defineProperty(ctor, 'prototype', {
	      configurable: false,
	      writable: false
	    });
	    return $defineProperties(ctor, getDescriptors(staticObject));
	  }
	  function getProtoParent(superClass) {
	    if (typeof superClass === 'function') {
	      var prototype = superClass.prototype;
	      if ($Object(prototype) === prototype || prototype === null)
	        return superClass.prototype;
	      throw new $TypeError('super prototype must be an Object or null');
	    }
	    if (superClass === null)
	      return null;
	    throw new $TypeError(("Super expression must either be null or a function, not " + typeof superClass + "."));
	  }
	  function defaultSuperCall(self, homeObject, args) {
	    if ($getPrototypeOf(homeObject) !== null)
	      superCall(self, homeObject, 'constructor', args);
	  }
	  $traceurRuntime.createClass = createClass;
	  $traceurRuntime.defaultSuperCall = defaultSuperCall;
	  $traceurRuntime.superCall = superCall;
	  $traceurRuntime.superConstructor = superConstructor;
	  $traceurRuntime.superGet = superGet;
	  $traceurRuntime.superSet = superSet;
	})();

	//# 
	},{}],95:[function(require,module,exports){
	"use strict";
	Object.defineProperties(exports, {
	  TableView: {get: function() {
	      return TableView;
	    }},
	  __esModule: {value: true}
	});
	var $__helpers_47_dom_47_element__,
	    $__eventManager__,
	    $__helpers_47_dom_47_event__,
	    $__3rdparty_47_walkontable_47_src_47_cell_47_coords__,
	    $__3rdparty_47_walkontable_47_src_47_selection__,
	    $__3rdparty_47_walkontable_47_src_47_core__;
	var $__0 = ($__helpers_47_dom_47_element__ = require("helpers/dom/element"), $__helpers_47_dom_47_element__ && $__helpers_47_dom_47_element__.__esModule && $__helpers_47_dom_47_element__ || {default: $__helpers_47_dom_47_element__}),
	    addClass = $__0.addClass,
	    empty = $__0.empty,
	    fastInnerHTML = $__0.fastInnerHTML,
	    fastInnerText = $__0.fastInnerText,
	    getScrollbarWidth = $__0.getScrollbarWidth,
	    hasClass = $__0.hasClass,
	    isChildOf = $__0.isChildOf,
	    isInput = $__0.isInput,
	    isOutsideInput = $__0.isOutsideInput;
	var eventManagerObject = ($__eventManager__ = require("eventManager"), $__eventManager__ && $__eventManager__.__esModule && $__eventManager__ || {default: $__eventManager__}).eventManager;
	var $__2 = ($__helpers_47_dom_47_event__ = require("helpers/dom/event"), $__helpers_47_dom_47_event__ && $__helpers_47_dom_47_event__.__esModule && $__helpers_47_dom_47_event__ || {default: $__helpers_47_dom_47_event__}),
	    stopPropagation = $__2.stopPropagation,
	    isImmediatePropagationStopped = $__2.isImmediatePropagationStopped;
	var WalkontableCellCoords = ($__3rdparty_47_walkontable_47_src_47_cell_47_coords__ = require("3rdparty/walkontable/src/cell/coords"), $__3rdparty_47_walkontable_47_src_47_cell_47_coords__ && $__3rdparty_47_walkontable_47_src_47_cell_47_coords__.__esModule && $__3rdparty_47_walkontable_47_src_47_cell_47_coords__ || {default: $__3rdparty_47_walkontable_47_src_47_cell_47_coords__}).WalkontableCellCoords;
	var WalkontableSelection = ($__3rdparty_47_walkontable_47_src_47_selection__ = require("3rdparty/walkontable/src/selection"), $__3rdparty_47_walkontable_47_src_47_selection__ && $__3rdparty_47_walkontable_47_src_47_selection__.__esModule && $__3rdparty_47_walkontable_47_src_47_selection__ || {default: $__3rdparty_47_walkontable_47_src_47_selection__}).WalkontableSelection;
	var Walkontable = ($__3rdparty_47_walkontable_47_src_47_core__ = require("3rdparty/walkontable/src/core"), $__3rdparty_47_walkontable_47_src_47_core__ && $__3rdparty_47_walkontable_47_src_47_core__.__esModule && $__3rdparty_47_walkontable_47_src_47_core__ || {default: $__3rdparty_47_walkontable_47_src_47_core__}).Walkontable;
	Handsontable.TableView = TableView;
	function TableView(instance) {
	  var that = this;
	  this.eventManager = eventManagerObject(instance);
	  this.instance = instance;
	  this.settings = instance.getSettings();
	  var originalStyle = instance.rootElement.getAttribute('style');
	  if (originalStyle) {
	    instance.rootElement.setAttribute('data-originalstyle', originalStyle);
	  }
	  addClass(instance.rootElement, 'handsontable');
	  var table = document.createElement('TABLE');
	  addClass(table, 'htCore');
	  if (instance.getSettings().tableClassName) {
	    addClass(table, instance.getSettings().tableClassName);
	  }
	  this.THEAD = document.createElement('THEAD');
	  table.appendChild(this.THEAD);
	  this.TBODY = document.createElement('TBODY');
	  table.appendChild(this.TBODY);
	  instance.table = table;
	  instance.container.insertBefore(table, instance.container.firstChild);
	  this.eventManager.addEventListener(instance.rootElement, 'mousedown', function(event) {
	    if (!that.isTextSelectionAllowed(event.target)) {
	      clearTextSelection();
	      event.preventDefault();
	      window.focus();
	    }
	  });
	  this.eventManager.addEventListener(document.documentElement, 'keyup', function(event) {
	    if (instance.selection.isInProgress() && !event.shiftKey) {
	      instance.selection.finish();
	    }
	  });
	  var isMouseDown;
	  this.isMouseDown = function() {
	    return isMouseDown;
	  };
	  this.eventManager.addEventListener(document.documentElement, 'mouseup', function(event) {
	    if (instance.selection.isInProgress() && event.which === 1) {
	      instance.selection.finish();
	    }
	    isMouseDown = false;
	    if (isOutsideInput(document.activeElement)) {
	      instance.unlisten();
	    }
	  });
	  this.eventManager.addEventListener(document.documentElement, 'mousedown', function(event) {
	    var next = event.target;
	    var eventX = event.x || event.clientX;
	    var eventY = event.y || event.clientY;
	    if (isMouseDown || !instance.rootElement) {
	      return;
	    }
	    if (next === instance.view.wt.wtTable.holder) {
	      var scrollbarWidth = getScrollbarWidth();
	      if (document.elementFromPoint(eventX + scrollbarWidth, eventY) !== instance.view.wt.wtTable.holder || document.elementFromPoint(eventX, eventY + scrollbarWidth) !== instance.view.wt.wtTable.holder) {
	        return;
	      }
	    } else {
	      while (next !== document.documentElement) {
	        if (next === null) {
	          if (event.isTargetWebComponent) {
	            break;
	          }
	          return;
	        }
	        if (next === instance.rootElement) {
	          return;
	        }
	        next = next.parentNode;
	      }
	    }
	    if (that.settings.outsideClickDeselects) {
	      instance.deselectCell();
	    } else {
	      instance.destroyEditor();
	    }
	  });
	  this.eventManager.addEventListener(table, 'selectstart', function(event) {
	    if (that.settings.fragmentSelection) {
	      return;
	    }
	    event.preventDefault();
	  });
	  var clearTextSelection = function() {
	    if (window.getSelection) {
	      if (window.getSelection().empty) {
	        window.getSelection().empty();
	      } else if (window.getSelection().removeAllRanges) {
	        window.getSelection().removeAllRanges();
	      }
	    } else if (document.selection) {
	      document.selection.empty();
	    }
	  };
	  var selections = [new WalkontableSelection({
	    className: 'current',
	    border: {
	      width: 2,
	      color: '#5292F7',
	      cornerVisible: function() {
	        return that.settings.fillHandle && !that.isCellEdited() && !instance.selection.isMultiple();
	      },
	      multipleSelectionHandlesVisible: function() {
	        return !that.isCellEdited() && !instance.selection.isMultiple();
	      }
	    }
	  }), new WalkontableSelection({
	    className: 'area',
	    border: {
	      width: 1,
	      color: '#89AFF9',
	      cornerVisible: function() {
	        return that.settings.fillHandle && !that.isCellEdited() && instance.selection.isMultiple();
	      },
	      multipleSelectionHandlesVisible: function() {
	        return !that.isCellEdited() && instance.selection.isMultiple();
	      }
	    }
	  }), new WalkontableSelection({
	    className: 'highlight',
	    highlightRowClassName: that.settings.currentRowClassName,
	    highlightColumnClassName: that.settings.currentColClassName
	  }), new WalkontableSelection({
	    className: 'fill',
	    border: {
	      width: 1,
	      color: 'red'
	    }
	  })];
	  selections.current = selections[0];
	  selections.area = selections[1];
	  selections.highlight = selections[2];
	  selections.fill = selections[3];
	  var walkontableConfig = {
	    debug: function() {
	      return that.settings.debug;
	    },
	    externalRowCalculator: this.instance.getPlugin('autoRowSize') && this.instance.getPlugin('autoRowSize').isEnabled(),
	    table: table,
	    stretchH: this.settings.stretchH,
	    data: instance.getDataAtCell,
	    totalRows: instance.countRows,
	    totalColumns: instance.countCols,
	    fixedColumnsLeft: function() {
	      return that.settings.fixedColumnsLeft;
	    },
	    fixedRowsTop: function() {
	      return that.settings.fixedRowsTop;
	    },
	    fixedRowsBottom: function() {
	      return that.settings.fixedRowsBottom;
	    },
	    minSpareRows: function() {
	      return that.settings.minSpareRows;
	    },
	    renderAllRows: that.settings.renderAllRows,
	    rowHeaders: function() {
	      var arr = [];
	      if (instance.hasRowHeaders()) {
	        arr.push(function(index, TH) {
	          that.appendRowHeader(index, TH);
	        });
	      }
	      Handsontable.hooks.run(instance, 'afterGetRowHeaderRenderers', arr);
	      return arr;
	    },
	    columnHeaders: function() {
	      var arr = [];
	      if (instance.hasColHeaders()) {
	        arr.push(function(index, TH) {
	          that.appendColHeader(index, TH);
	        });
	      }
	      Handsontable.hooks.run(instance, 'afterGetColumnHeaderRenderers', arr);
	      return arr;
	    },
	    columnWidth: instance.getColWidth,
	    rowHeight: instance.getRowHeight,
	    cellRenderer: function(row, col, TD) {
	      var prop = that.instance.colToProp(col),
	          cellProperties = that.instance.getCellMeta(row, col),
	          renderer = that.instance.getCellRenderer(cellProperties);
	      var value = that.instance.getDataAtRowProp(row, prop);
	      renderer(that.instance, TD, row, col, prop, value, cellProperties);
	      Handsontable.hooks.run(that.instance, 'afterRenderer', TD, row, col, prop, value, cellProperties);
	    },
	    selections: selections,
	    hideBorderOnMouseDownOver: function() {
	      return that.settings.fragmentSelection;
	    },
	    onCellMouseDown: function(event, coords, TD, wt) {
	      var colspanOffset;
	      var TR = TD.parentNode;
	      var THEAD = TR.parentNode;
	      var headerLevel;
	      var headerColspan;
	      instance.listen();
	      that.activeWt = wt;
	      isMouseDown = true;
	      Handsontable.hooks.run(instance, 'beforeOnCellMouseDown', event, coords, TD);
	      instance.selection.setSelectedHeaders(false, false);
	      if (!isImmediatePropagationStopped(event)) {
	        if (event.button === 2 && instance.selection.inInSelection(coords)) {
	          var nothing = 1;
	        } else if (event.shiftKey) {
	          if (coords.row >= 0 && coords.col >= 0) {
	            instance.selection.setRangeEnd(coords);
	          }
	        } else {
	          if ((coords.row < 0 || coords.col < 0) && (coords.row >= 0 || coords.col >= 0)) {
	            if (coords.row < 0) {
	              headerLevel = THEAD.childNodes.length - Array.prototype.indexOf.call(THEAD.childNodes, TR) - 1;
	              headerColspan = instance.getHeaderColspan(coords.col, headerLevel);
	              instance.selection.setSelectedHeaders(false, true);
	              instance.selectCell(0, coords.col, instance.countRows() - 1, coords.col + Math.max(0, headerColspan - 1));
	            }
	            if (coords.col < 0) {
	              instance.selection.setSelectedHeaders(true, false);
	              instance.selectCell(coords.row, 0, coords.row, instance.countCols() - 1);
	            }
	          } else {
	            coords.row = coords.row < 0 ? 0 : coords.row;
	            coords.col = coords.col < 0 ? 0 : coords.col;
	            instance.selection.setRangeStart(coords);
	          }
	        }
	        Handsontable.hooks.run(instance, 'afterOnCellMouseDown', event, coords, TD);
	        that.activeWt = that.wt;
	      }
	    },
	    onCellMouseOver: function(event, coords, TD, wt) {
	      that.activeWt = wt;
	      if (coords.row >= 0 && coords.col >= 0) {
	        if (isMouseDown) {
	          instance.selection.setRangeEnd(coords);
	        }
	      } else {
	        if (isMouseDown) {
	          if (coords.row < 0) {
	            if (instance.selection.selectedHeader.cols) {
	              instance.selection.setRangeEnd(new WalkontableCellCoords(instance.countRows() - 1, coords.col));
	              instance.selection.setSelectedHeaders(false, true);
	            } else {
	              instance.selection.setRangeEnd(new WalkontableCellCoords(coords.row, coords.col));
	            }
	          }
	          if (coords.col < 0) {
	            if (instance.selection.selectedHeader.rows) {
	              instance.selection.setRangeEnd(new WalkontableCellCoords(coords.row, instance.countCols() - 1));
	              instance.selection.setSelectedHeaders(true, false);
	            } else {
	              instance.selection.setRangeEnd(new WalkontableCellCoords(coords.row, coords.col));
	            }
	          }
	        }
	      }
	      Handsontable.hooks.run(instance, 'afterOnCellMouseOver', event, coords, TD);
	      that.activeWt = that.wt;
	    },
	    onCellCornerMouseDown: function(event) {
	      event.preventDefault();
	      Handsontable.hooks.run(instance, 'afterOnCellCornerMouseDown', event);
	    },
	    beforeDraw: function(force) {
	      that.beforeRender(force);
	    },
	    onDraw: function(force) {
	      that.onDraw(force);
	    },
	    onScrollVertically: function() {
	      instance.runHooks('afterScrollVertically');
	    },
	    onScrollHorizontally: function() {
	      instance.runHooks('afterScrollHorizontally');
	    },
	    onBeforeDrawBorders: function(corners, borderClassName) {
	      instance.runHooks('beforeDrawBorders', corners, borderClassName);
	    },
	    onBeforeTouchScroll: function() {
	      instance.runHooks('beforeTouchScroll');
	    },
	    onAfterMomentumScroll: function() {
	      instance.runHooks('afterMomentumScroll');
	    },
	    viewportRowCalculatorOverride: function(calc) {
	      var rows = instance.countRows();
	      var viewportOffset = that.settings.viewportRowRenderingOffset;
	      if (viewportOffset === 'auto' && that.settings.fixedRowsTop) {
	        viewportOffset = 10;
	      }
	      if (typeof viewportOffset === 'number') {
	        calc.startRow = Math.max(calc.startRow - viewportOffset, 0);
	        calc.endRow = Math.min(calc.endRow + viewportOffset, rows - 1);
	      }
	      if (viewportOffset === 'auto') {
	        var center = calc.startRow + calc.endRow - calc.startRow;
	        var offset = Math.ceil(center / rows * 12);
	        calc.startRow = Math.max(calc.startRow - offset, 0);
	        calc.endRow = Math.min(calc.endRow + offset, rows - 1);
	      }
	      instance.runHooks('afterViewportRowCalculatorOverride', calc);
	    },
	    viewportColumnCalculatorOverride: function(calc) {
	      var cols = instance.countCols();
	      var viewportOffset = that.settings.viewportColumnRenderingOffset;
	      if (viewportOffset === 'auto' && that.settings.fixedColumnsLeft) {
	        viewportOffset = 10;
	      }
	      if (typeof viewportOffset === 'number') {
	        calc.startColumn = Math.max(calc.startColumn - viewportOffset, 0);
	        calc.endColumn = Math.min(calc.endColumn + viewportOffset, cols - 1);
	      }
	      if (viewportOffset === 'auto') {
	        var center = calc.startColumn + calc.endColumn - calc.startColumn;
	        var offset = Math.ceil(center / cols * 12);
	        calc.startRow = Math.max(calc.startColumn - offset, 0);
	        calc.endColumn = Math.min(calc.endColumn + offset, cols - 1);
	      }
	      instance.runHooks('afterViewportColumnCalculatorOverride', calc);
	    }
	  };
	  Handsontable.hooks.run(instance, 'beforeInitWalkontable', walkontableConfig);
	  this.wt = new Walkontable(walkontableConfig);
	  this.activeWt = this.wt;
	  this.eventManager.addEventListener(that.wt.wtTable.spreader, 'mousedown', function(event) {
	    if (event.target === that.wt.wtTable.spreader && event.which === 3) {
	      stopPropagation(event);
	    }
	  });
	  this.eventManager.addEventListener(that.wt.wtTable.spreader, 'contextmenu', function(event) {
	    if (event.target === that.wt.wtTable.spreader && event.which === 3) {
	      stopPropagation(event);
	    }
	  });
	  this.eventManager.addEventListener(document.documentElement, 'click', function() {
	    if (that.settings.observeDOMVisibility) {
	      if (that.wt.drawInterrupted) {
	        that.instance.forceFullRender = true;
	        that.render();
	      }
	    }
	  });
	}
	TableView.prototype.isTextSelectionAllowed = function(el) {
	  if (isInput(el)) {
	    return true;
	  }
	  if (this.settings.fragmentSelection && isChildOf(el, this.TBODY)) {
	    return true;
	  }
	  return false;
	};
	TableView.prototype.isCellEdited = function() {
	  var activeEditor = this.instance.getActiveEditor();
	  return activeEditor && activeEditor.isOpened();
	};
	TableView.prototype.beforeRender = function(force) {
	  if (force) {
	    Handsontable.hooks.run(this.instance, 'beforeRender', this.instance.forceFullRender);
	  }
	};
	TableView.prototype.onDraw = function(force) {
	  if (force) {
	    Handsontable.hooks.run(this.instance, 'afterRender', this.instance.forceFullRender);
	  }
	};
	TableView.prototype.render = function() {
	  this.wt.draw(!this.instance.forceFullRender);
	  this.instance.forceFullRender = false;
	  this.instance.renderCall = false;
	};
	TableView.prototype.getCellAtCoords = function(coords, topmost) {
	  var td = this.wt.getCell(coords, topmost);
	  if (td < 0) {
	    return null;
	  } else {
	    return td;
	  }
	};
	TableView.prototype.scrollViewport = function(coords) {
	  this.wt.scrollViewport(coords);
	};
	TableView.prototype.appendRowHeader = function(row, TH) {
	  if (TH.firstChild) {
	    var container = TH.firstChild;
	    if (!hasClass(container, 'relative')) {
	      empty(TH);
	      this.appendRowHeader(row, TH);
	      return;
	    }
	    this.updateCellHeader(container.querySelector('.rowHeader'), row, this.instance.getRowHeader);
	  } else {
	    var div = document.createElement('div');
	    var span = document.createElement('span');
	    div.className = 'relative';
	    span.className = 'rowHeader';
	    this.updateCellHeader(span, row, this.instance.getRowHeader);
	    div.appendChild(span);
	    TH.appendChild(div);
	  }
	  Handsontable.hooks.run(this.instance, 'afterGetRowHeader', row, TH);
	};
	TableView.prototype.appendColHeader = function(col, TH) {
	  if (TH.firstChild) {
	    var container = TH.firstChild;
	    if (!hasClass(container, 'relative')) {
	      empty(TH);
	      this.appendRowHeader(col, TH);
	      return;
	    }
	    this.updateCellHeader(container.querySelector('.colHeader'), col, this.instance.getColHeader);
	  } else {
	    var div = document.createElement('div');
	    var span = document.createElement('span');
	    div.className = 'relative';
	    span.className = 'colHeader';
	    this.updateCellHeader(span, col, this.instance.getColHeader);
	    div.appendChild(span);
	    TH.appendChild(div);
	  }
	  Handsontable.hooks.run(this.instance, 'afterGetColHeader', col, TH);
	};
	TableView.prototype.updateCellHeader = function(element, index, content) {
	  if (index > -1) {
	    fastInnerHTML(element, content(index));
	  } else {
	    fastInnerText(element, String.fromCharCode(160));
	    addClass(element, 'cornerHeader');
	  }
	};
	TableView.prototype.maximumVisibleElementWidth = function(leftOffset) {
	  var workspaceWidth = this.wt.wtViewport.getWorkspaceWidth();
	  var maxWidth = workspaceWidth - leftOffset;
	  return maxWidth > 0 ? maxWidth : 0;
	};
	TableView.prototype.maximumVisibleElementHeight = function(topOffset) {
	  var workspaceHeight = this.wt.wtViewport.getWorkspaceHeight();
	  var maxHeight = workspaceHeight - topOffset;
	  return maxHeight > 0 ? maxHeight : 0;
	};
	TableView.prototype.mainViewIsActive = function() {
	  return this.wt === this.activeWt;
	};
	TableView.prototype.destroy = function() {
	  this.wt.destroy();
	  this.eventManager.destroy();
	};
	;

	//# 
	},{"3rdparty/walkontable/src/cell/coords":5,"3rdparty/walkontable/src/core":7,"3rdparty/walkontable/src/selection":18,"eventManager":40,"helpers/dom/element":44,"helpers/dom/event":45}],96:[function(require,module,exports){
	"use strict";
	Object.defineProperties(exports, {
	  GhostTable: {get: function() {
	      return GhostTable;
	    }},
	  __esModule: {value: true}
	});
	var $___46__46__47_helpers_47_dom_47_element__,
	    $___46__46__47_helpers_47_array__,
	    $___46__46__47_helpers_47_object__,
	    $___46__46__47_helpers_47_number__,
	    $___46__46__47_helpers_47_mixed__;
	var $__0 = ($___46__46__47_helpers_47_dom_47_element__ = require("helpers/dom/element"), $___46__46__47_helpers_47_dom_47_element__ && $___46__46__47_helpers_47_dom_47_element__.__esModule && $___46__46__47_helpers_47_dom_47_element__ || {default: $___46__46__47_helpers_47_dom_47_element__}),
	    addClass = $__0.addClass,
	    outerHeight = $__0.outerHeight,
	    outerWidth = $__0.outerWidth;
	var arrayEach = ($___46__46__47_helpers_47_array__ = require("helpers/array"), $___46__46__47_helpers_47_array__ && $___46__46__47_helpers_47_array__.__esModule && $___46__46__47_helpers_47_array__ || {default: $___46__46__47_helpers_47_array__}).arrayEach;
	var objectEach = ($___46__46__47_helpers_47_object__ = require("helpers/object"), $___46__46__47_helpers_47_object__ && $___46__46__47_helpers_47_object__.__esModule && $___46__46__47_helpers_47_object__ || {default: $___46__46__47_helpers_47_object__}).objectEach;
	var rangeEach = ($___46__46__47_helpers_47_number__ = require("helpers/number"), $___46__46__47_helpers_47_number__ && $___46__46__47_helpers_47_number__.__esModule && $___46__46__47_helpers_47_number__ || {default: $___46__46__47_helpers_47_number__}).rangeEach;
	var stringify = ($___46__46__47_helpers_47_mixed__ = require("helpers/mixed"), $___46__46__47_helpers_47_mixed__ && $___46__46__47_helpers_47_mixed__.__esModule && $___46__46__47_helpers_47_mixed__ || {default: $___46__46__47_helpers_47_mixed__}).stringify;
	var GhostTable = function GhostTable(hotInstance) {
	  this.hot = hotInstance;
	  this.container = null;
	  this.injected = false;
	  this.rows = [];
	  this.columns = [];
	  this.samples = null;
	};
	($traceurRuntime.createClass)(GhostTable, {
	  addRow: function(row, samples) {
	    if (this.columns.length) {
	      throw new Error('Doesn\'t support multi-dimensional table');
	    }
	    if (!this.rows.length) {
	      this.container = this.createContainer(this.hot.rootElement.className);
	    }
	    var rowObject = {row: row};
	    this.rows.push(rowObject);
	    this.samples = samples;
	    this.table = this.createTable(this.hot.table.className);
	    this.table.colGroup.appendChild(this.createColGroupsCol());
	    this.table.tr.appendChild(this.createRow(row));
	    this.container.container.appendChild(this.table.fragment);
	    rowObject.table = this.table.table;
	  },
	  addColumn: function(column, samples) {
	    if (this.rows.length) {
	      throw new Error('Doesn\'t support multi-dimensional table');
	    }
	    if (!this.columns.length) {
	      this.container = this.createContainer(this.hot.rootElement.className);
	    }
	    var columnObject = {col: column};
	    this.columns.push(columnObject);
	    this.samples = samples;
	    this.table = this.createTable(this.hot.table.className);
	    if (this.hot.getColHeader(column) !== null) {
	      this.hot.view.appendColHeader(column, this.table.th);
	    }
	    this.table.tBody.appendChild(this.createCol(column));
	    this.container.container.appendChild(this.table.fragment);
	    columnObject.table = this.table.table;
	  },
	  getHeights: function(callback) {
	    if (!this.injected) {
	      this.injectTable();
	    }
	    arrayEach(this.rows, (function(row) {
	      callback(row.row, outerHeight(row.table) - 1);
	    }));
	  },
	  getWidths: function(callback) {
	    if (!this.injected) {
	      this.injectTable();
	    }
	    arrayEach(this.columns, (function(column) {
	      callback(column.col, outerWidth(column.table));
	    }));
	  },
	  createColGroupsCol: function() {
	    var $__5 = this;
	    var d = document;
	    var fragment = d.createDocumentFragment();
	    fragment.appendChild(this.createColElement(-1));
	    this.samples.forEach((function(sample) {
	      arrayEach(sample.strings, (function(string) {
	        fragment.appendChild($__5.createColElement(string.col));
	      }));
	    }));
	    return fragment;
	  },
	  createRow: function(row) {
	    var $__5 = this;
	    var d = document;
	    var fragment = d.createDocumentFragment();
	    var th = d.createElement('th');
	    if (this.hot.getRowHeader(row) !== null) {
	      this.hot.view.appendRowHeader(row, th);
	    }
	    fragment.appendChild(th);
	    this.samples.forEach((function(sample) {
	      arrayEach(sample.strings, (function(string) {
	        var column = string.col;
	        var cellProperties = $__5.hot.getCellMeta(row, column);
	        cellProperties.col = column;
	        cellProperties.row = row;
	        var renderer = $__5.hot.getCellRenderer(cellProperties);
	        var td = d.createElement('td');
	        renderer($__5.hot, td, row, column, $__5.hot.colToProp(column), string.value, cellProperties);
	        fragment.appendChild(td);
	      }));
	    }));
	    return fragment;
	  },
	  createCol: function(column) {
	    var $__5 = this;
	    var d = document;
	    var fragment = d.createDocumentFragment();
	    this.samples.forEach((function(sample) {
	      arrayEach(sample.strings, (function(string) {
	        var row = string.row;
	        var cellProperties = $__5.hot.getCellMeta(row, column);
	        cellProperties.col = column;
	        cellProperties.row = row;
	        var renderer = $__5.hot.getCellRenderer(cellProperties);
	        var td = d.createElement('td');
	        var tr = d.createElement('tr');
	        renderer($__5.hot, td, row, column, $__5.hot.colToProp(row), string.value, cellProperties);
	        tr.appendChild(td);
	        fragment.appendChild(tr);
	      }));
	    }));
	    return fragment;
	  },
	  clean: function() {
	    this.rows.length = 0;
	    this.columns.length = 0;
	    if (this.samples) {
	      this.samples.clear();
	    }
	    this.samples = null;
	    this.removeTable();
	  },
	  injectTable: function() {
	    var parent = arguments[0] !== (void 0) ? arguments[0] : null;
	    if (!this.injected) {
	      (parent || this.hot.rootElement).appendChild(this.container.fragment);
	      this.injected = true;
	    }
	  },
	  removeTable: function() {
	    if (this.injected && this.container.container.parentNode) {
	      this.container.container.parentNode.removeChild(this.container.container);
	      this.container = null;
	      this.injected = false;
	    }
	  },
	  createColElement: function(column) {
	    var d = document;
	    var col = d.createElement('col');
	    col.style.width = this.hot.view.wt.wtTable.getStretchedColumnWidth(column) + 'px';
	    return col;
	  },
	  createTable: function() {
	    var className = arguments[0] !== (void 0) ? arguments[0] : '';
	    var d = document;
	    var fragment = d.createDocumentFragment();
	    var table = d.createElement('table');
	    var tHead = d.createElement('thead');
	    var tBody = d.createElement('tbody');
	    var colGroup = d.createElement('colgroup');
	    var tr = d.createElement('tr');
	    var th = d.createElement('th');
	    if (this.isVertical()) {
	      table.appendChild(colGroup);
	    }
	    if (this.isHorizontal()) {
	      tr.appendChild(th);
	      tHead.appendChild(tr);
	      table.style.tableLayout = 'auto';
	      table.style.width = 'auto';
	    }
	    table.appendChild(tHead);
	    if (this.isVertical()) {
	      tBody.appendChild(tr);
	    }
	    table.appendChild(tBody);
	    addClass(table, className);
	    fragment.appendChild(table);
	    return {
	      fragment: fragment,
	      table: table,
	      tHead: tHead,
	      tBody: tBody,
	      colGroup: colGroup,
	      tr: tr,
	      th: th
	    };
	  },
	  createContainer: function() {
	    var className = arguments[0] !== (void 0) ? arguments[0] : '';
	    var d = document;
	    var fragment = d.createDocumentFragment();
	    var container = d.createElement('div');
	    className = 'htGhostTable htAutoSize ' + className.trim();
	    addClass(container, className);
	    fragment.appendChild(container);
	    return {
	      fragment: fragment,
	      container: container
	    };
	  },
	  isVertical: function() {
	    return this.rows.length && !this.columns.length ? true : false;
	  },
	  isHorizontal: function() {
	    return this.columns.length && !this.rows.length ? true : false;
	  }
	}, {});
	;
	Handsontable.utils = Handsontable.utils || {};
	Handsontable.utils.GhostTable = GhostTable;

	//# 
	},{"helpers/array":41,"helpers/dom/element":44,"helpers/mixed":47,"helpers/number":48,"helpers/object":49}],97:[function(require,module,exports){
	"use strict";
	var $__7;
	Object.defineProperties(exports, {
	  SamplesGenerator: {get: function() {
	      return SamplesGenerator;
	    }},
	  __esModule: {value: true}
	});
	var $___46__46__47_helpers_47_dom_47_element__,
	    $___46__46__47_helpers_47_array__,
	    $___46__46__47_helpers_47_object__,
	    $___46__46__47_helpers_47_number__,
	    $___46__46__47_helpers_47_mixed__;
	var $__0 = ($___46__46__47_helpers_47_dom_47_element__ = require("helpers/dom/element"), $___46__46__47_helpers_47_dom_47_element__ && $___46__46__47_helpers_47_dom_47_element__.__esModule && $___46__46__47_helpers_47_dom_47_element__ || {default: $___46__46__47_helpers_47_dom_47_element__}),
	    addClass = $__0.addClass,
	    outerHeight = $__0.outerHeight,
	    outerWidth = $__0.outerWidth;
	var arrayEach = ($___46__46__47_helpers_47_array__ = require("helpers/array"), $___46__46__47_helpers_47_array__ && $___46__46__47_helpers_47_array__.__esModule && $___46__46__47_helpers_47_array__ || {default: $___46__46__47_helpers_47_array__}).arrayEach;
	var objectEach = ($___46__46__47_helpers_47_object__ = require("helpers/object"), $___46__46__47_helpers_47_object__ && $___46__46__47_helpers_47_object__.__esModule && $___46__46__47_helpers_47_object__ || {default: $___46__46__47_helpers_47_object__}).objectEach;
	var rangeEach = ($___46__46__47_helpers_47_number__ = require("helpers/number"), $___46__46__47_helpers_47_number__ && $___46__46__47_helpers_47_number__.__esModule && $___46__46__47_helpers_47_number__ || {default: $___46__46__47_helpers_47_number__}).rangeEach;
	var stringify = ($___46__46__47_helpers_47_mixed__ = require("helpers/mixed"), $___46__46__47_helpers_47_mixed__ && $___46__46__47_helpers_47_mixed__.__esModule && $___46__46__47_helpers_47_mixed__ || {default: $___46__46__47_helpers_47_mixed__}).stringify;
	var SamplesGenerator = function SamplesGenerator(dataFactory) {
	  this.samples = null;
	  this.dataFactory = dataFactory;
	};
	var $SamplesGenerator = SamplesGenerator;
	($traceurRuntime.createClass)(SamplesGenerator, ($__7 = {}, Object.defineProperty($__7, "generateRowSamples", {
	  value: function(rowRange, colRange) {
	    return this.generateSamples('row', colRange, rowRange);
	  },
	  configurable: true,
	  enumerable: true,
	  writable: true
	}), Object.defineProperty($__7, "generateColumnSamples", {
	  value: function(colRange, rowRange) {
	    return this.generateSamples('col', rowRange, colRange);
	  },
	  configurable: true,
	  enumerable: true,
	  writable: true
	}), Object.defineProperty($__7, "generateSamples", {
	  value: function(type, range, specifierRange) {
	    var $__5 = this;
	    var samples = new Map();
	    if (typeof specifierRange === 'number') {
	      specifierRange = {
	        from: specifierRange,
	        to: specifierRange
	      };
	    }
	    rangeEach(specifierRange.from, specifierRange.to, (function(index) {
	      var sample = $__5.generateSample(type, range, index);
	      samples.set(index, sample);
	    }));
	    return samples;
	  },
	  configurable: true,
	  enumerable: true,
	  writable: true
	}), Object.defineProperty($__7, "generateSample", {
	  value: function(type, range, specifierValue) {
	    var $__5 = this;
	    var samples = new Map();
	    rangeEach(range.from, range.to, (function(index) {
	      var $__7;
	      var value;
	      if (type === 'row') {
	        value = $__5.dataFactory(specifierValue, index);
	      } else if (type === 'col') {
	        value = $__5.dataFactory(index, specifierValue);
	      } else {
	        throw new Error('Unsupported sample type');
	      }
	      if (!Array.isArray(value)) {
	        value = stringify(value);
	      }
	      var len = value.length;
	      if (!samples.has(len)) {
	        samples.set(len, {
	          needed: $SamplesGenerator.SAMPLE_COUNT,
	          strings: []
	        });
	      }
	      var sample = samples.get(len);
	      if (sample.needed) {
	        var computedKey = type === 'row' ? 'col' : 'row';
	        sample.strings.push(($__7 = {}, Object.defineProperty($__7, "value", {
	          value: value,
	          configurable: true,
	          enumerable: true,
	          writable: true
	        }), Object.defineProperty($__7, computedKey, {
	          value: index,
	          configurable: true,
	          enumerable: true,
	          writable: true
	        }), $__7));
	        sample.needed--;
	      }
	    }));
	    return samples;
	  },
	  configurable: true,
	  enumerable: true,
	  writable: true
	}), $__7), {get SAMPLE_COUNT() {
	    return 3;
	  }});
	;
	Handsontable.utils = Handsontable.utils || {};
	Handsontable.utils.SamplesGenerator = SamplesGenerator;

	//# 
	},{"helpers/array":41,"helpers/dom/element":44,"helpers/mixed":47,"helpers/number":48,"helpers/object":49}],98:[function(require,module,exports){
	"use strict";
	var $___46__46__47_helpers_47_mixed__;
	var stringify = ($___46__46__47_helpers_47_mixed__ = require("helpers/mixed"), $___46__46__47_helpers_47_mixed__ && $___46__46__47_helpers_47_mixed__.__esModule && $___46__46__47_helpers_47_mixed__ || {default: $___46__46__47_helpers_47_mixed__}).stringify;
	Handsontable.AutocompleteValidator = function(value, callback) {
	  if (this.strict && this.source) {
	    if (typeof this.source === 'function') {
	      this.source(value, process(value, callback));
	    } else {
	      process(value, callback)(this.source);
	    }
	  } else {
	    callback(true);
	  }
	};
	function process(value, callback) {
	  var originalVal = value;
	  var lowercaseVal = typeof originalVal === 'string' ? originalVal.toLowerCase() : null;
	  return function(source) {
	    var found = false;
	    for (var s = 0,
	        slen = source.length; s < slen; s++) {
	      if (originalVal === source[s]) {
	        found = true;
	        break;
	      } else if (lowercaseVal === stringify(source[s]).toLowerCase()) {
	        found = true;
	        break;
	      }
	    }
	    callback(found);
	  };
	}

	//# 
	},{"helpers/mixed":47}],99:[function(require,module,exports){
	"use strict";
	var $__moment__,
	    $___46__46__47_editors__;
	var moment = ($__moment__ = require("moment"), $__moment__ && $__moment__.__esModule && $__moment__ || {default: $__moment__}).default;
	var getEditor = ($___46__46__47_editors__ = require("editors"), $___46__46__47_editors__ && $___46__46__47_editors__.__esModule && $___46__46__47_editors__ || {default: $___46__46__47_editors__}).getEditor;
	Handsontable.DateValidator = function(value, callback) {
	  var valid = true;
	  var dateEditor = getEditor('date', this.instance);
	  if (value === null) {
	    value = '';
	  }
	  var isValidDate = moment(new Date(value)).isValid();
	  var isValidFormat = moment(value, this.dateFormat || dateEditor.defaultDateFormat, true).isValid();
	  if (!isValidDate) {
	    valid = false;
	  }
	  if (!isValidDate && isValidFormat) {
	    valid = true;
	  }
	  if (isValidDate && !isValidFormat) {
	    if (this.correctFormat === true) {
	      var correctedValue = correctFormat(value, this.dateFormat);
	      this.instance.setDataAtCell(this.row, this.col, correctedValue, 'dateValidator');
	      valid = true;
	    } else {
	      valid = false;
	    }
	  }
	  callback(valid);
	};
	var correctFormat = function correctFormat(value, dateFormat) {
	  var date = moment(new Date(value));
	  var year = date.format('YYYY');
	  var yearNow = moment().format('YYYY');
	  if (year.substr(0, 2) !== yearNow.substr(0, 2)) {
	    if (!value.match(new RegExp(year))) {
	      date.year(year.replace(year.substr(0, 2), yearNow.substr(0, 2)));
	    }
	  } else if (year.length > 4) {
	    date.year((date.year() + '').substr(0, 4));
	  }
	  return date.format(dateFormat);
	};

	//# 
	},{"editors":28,"moment":"moment"}],100:[function(require,module,exports){
	"use strict";
	Handsontable.NumericValidator = function(value, callback) {
	  if (value === null) {
	    value = '';
	  }
	  callback(/^-?\d*(\.|\,)?\d*$/.test(value));
	};

	//# 
	},{}],"SheetClip":[function(require,module,exports){
	"use strict";
	(function(global) {
	  "use strict";
	  function countQuotes(str) {
	    return str.split('"').length - 1;
	  }
	  var SheetClip = {
	    parse: function(str) {
	      var r,
	          rLen,
	          rows,
	          arr = [],
	          a = 0,
	          c,
	          cLen,
	          multiline,
	          last;
	      rows = str.split('\n');
	      if (rows.length > 1 && rows[rows.length - 1] === '') {
	        rows.pop();
	      }
	      for (r = 0, rLen = rows.length; r < rLen; r += 1) {
	        rows[r] = rows[r].split('\t');
	        for (c = 0, cLen = rows[r].length; c < cLen; c += 1) {
	          if (!arr[a]) {
	            arr[a] = [];
	          }
	          if (multiline && c === 0) {
	            last = arr[a].length - 1;
	            arr[a][last] = arr[a][last] + '\n' + rows[r][0];
	            if (multiline && (countQuotes(rows[r][0]) & 1)) {
	              multiline = false;
	              arr[a][last] = arr[a][last].substring(0, arr[a][last].length - 1).replace(/""/g, '"');
	            }
	          } else {
	            if (c === cLen - 1 && rows[r][c].indexOf('"') === 0 && (countQuotes(rows[r][c]) & 1)) {
	              arr[a].push(rows[r][c].substring(1).replace(/""/g, '"'));
	              multiline = true;
	            } else {
	              arr[a].push(rows[r][c].replace(/""/g, '"'));
	              multiline = false;
	            }
	          }
	        }
	        if (!multiline) {
	          a += 1;
	        }
	      }
	      return arr;
	    },
	    stringify: function(arr) {
	      var r,
	          rLen,
	          c,
	          cLen,
	          str = '',
	          val;
	      for (r = 0, rLen = arr.length; r < rLen; r += 1) {
	        cLen = arr[r].length;
	        for (c = 0; c < cLen; c += 1) {
	          if (c > 0) {
	            str += '\t';
	          }
	          val = arr[r][c];
	          if (typeof val === 'string') {
	            if (val.indexOf('\n') > -1) {
	              str += '"' + val.replace(/"/g, '""') + '"';
	            } else {
	              str += val;
	            }
	          } else if (val === null || val === void 0) {
	            str += '';
	          } else {
	            str += val;
	          }
	        }
	        str += '\n';
	      }
	      return str;
	    }
	  };
	  if (typeof exports !== 'undefined') {
	    exports.parse = SheetClip.parse;
	    exports.stringify = SheetClip.stringify;
	  } else {
	    global.SheetClip = SheetClip;
	  }
	}(window));

	//# 
	},{}],"autoResize":[function(require,module,exports){
	"use strict";
	function autoResize() {
	  var defaults = {
	    minHeight: 200,
	    maxHeight: 300,
	    minWidth: 100,
	    maxWidth: 300
	  },
	      el,
	      body = document.body,
	      text = document.createTextNode(''),
	      span = document.createElement('SPAN'),
	      observe = function(element, event, handler) {
	        if (window.attachEvent) {
	          element.attachEvent('on' + event, handler);
	        } else {
	          element.addEventListener(event, handler, false);
	        }
	      },
	      unObserve = function(element, event, handler) {
	        if (window.removeEventListener) {
	          element.removeEventListener(event, handler, false);
	        } else {
	          element.detachEvent('on' + event, handler);
	        }
	      },
	      resize = function(newChar) {
	        var width,
	            scrollHeight;
	        if (!newChar) {
	          newChar = "";
	        } else if (!/^[a-zA-Z \.,\\\/\|0-9]$/.test(newChar)) {
	          newChar = ".";
	        }
	        if (text.textContent !== void 0) {
	          text.textContent = el.value + newChar;
	        } else {
	          text.data = el.value + newChar;
	        }
	        span.style.fontSize = Handsontable.Dom.getComputedStyle(el).fontSize;
	        span.style.fontFamily = Handsontable.Dom.getComputedStyle(el).fontFamily;
	        span.style.whiteSpace = "pre";
	        body.appendChild(span);
	        width = span.clientWidth + 2;
	        body.removeChild(span);
	        el.style.height = defaults.minHeight + 'px';
	        if (defaults.minWidth > width) {
	          el.style.width = defaults.minWidth + 'px';
	        } else if (width > defaults.maxWidth) {
	          el.style.width = defaults.maxWidth + 'px';
	        } else {
	          el.style.width = width + 'px';
	        }
	        scrollHeight = el.scrollHeight ? el.scrollHeight - 1 : 0;
	        if (defaults.minHeight > scrollHeight) {
	          el.style.height = defaults.minHeight + 'px';
	        } else if (defaults.maxHeight < scrollHeight) {
	          el.style.height = defaults.maxHeight + 'px';
	          el.style.overflowY = 'visible';
	        } else {
	          el.style.height = scrollHeight + 'px';
	        }
	      },
	      delayedResize = function() {
	        window.setTimeout(resize, 0);
	      },
	      extendDefaults = function(config) {
	        if (config && config.minHeight) {
	          if (config.minHeight == 'inherit') {
	            defaults.minHeight = el.clientHeight;
	          } else {
	            var minHeight = parseInt(config.minHeight);
	            if (!isNaN(minHeight)) {
	              defaults.minHeight = minHeight;
	            }
	          }
	        }
	        if (config && config.maxHeight) {
	          if (config.maxHeight == 'inherit') {
	            defaults.maxHeight = el.clientHeight;
	          } else {
	            var maxHeight = parseInt(config.maxHeight);
	            if (!isNaN(maxHeight)) {
	              defaults.maxHeight = maxHeight;
	            }
	          }
	        }
	        if (config && config.minWidth) {
	          if (config.minWidth == 'inherit') {
	            defaults.minWidth = el.clientWidth;
	          } else {
	            var minWidth = parseInt(config.minWidth);
	            if (!isNaN(minWidth)) {
	              defaults.minWidth = minWidth;
	            }
	          }
	        }
	        if (config && config.maxWidth) {
	          if (config.maxWidth == 'inherit') {
	            defaults.maxWidth = el.clientWidth;
	          } else {
	            var maxWidth = parseInt(config.maxWidth);
	            if (!isNaN(maxWidth)) {
	              defaults.maxWidth = maxWidth;
	            }
	          }
	        }
	        if (!span.firstChild) {
	          span.className = "autoResize";
	          span.style.display = 'inline-block';
	          span.appendChild(text);
	        }
	      },
	      init = function(el_, config, doObserve) {
	        el = el_;
	        extendDefaults(config);
	        if (el.nodeName == 'TEXTAREA') {
	          el.style.resize = 'none';
	          el.style.overflowY = '';
	          el.style.height = defaults.minHeight + 'px';
	          el.style.minWidth = defaults.minWidth + 'px';
	          el.style.maxWidth = defaults.maxWidth + 'px';
	          el.style.overflowY = 'hidden';
	        }
	        if (doObserve) {
	          observe(el, 'change', resize);
	          observe(el, 'cut', delayedResize);
	          observe(el, 'paste', delayedResize);
	          observe(el, 'drop', delayedResize);
	          observe(el, 'keydown', delayedResize);
	        }
	        resize();
	      };
	  return {
	    init: function(el_, config, doObserve) {
	      init(el_, config, doObserve);
	    },
	    unObserve: function() {
	      unObserve(el, 'change', resize);
	      unObserve(el, 'cut', delayedResize);
	      unObserve(el, 'paste', delayedResize);
	      unObserve(el, 'drop', delayedResize);
	      unObserve(el, 'keydown', delayedResize);
	    },
	    resize: resize
	  };
	}
	if (typeof exports !== 'undefined') {
	  module.exports = autoResize;
	}

	//# 
	},{}],"copyPaste":[function(require,module,exports){
	"use strict";
	var instance;
	function copyPaste() {
	  if (!instance) {
	    instance = new CopyPasteClass();
	  } else if (instance.hasBeenDestroyed()) {
	    instance.init();
	  }
	  instance.refCounter++;
	  return instance;
	}
	if (typeof exports !== 'undefined') {
	  module.exports = copyPaste;
	}
	function CopyPasteClass() {
	  this.refCounter = 0;
	  this.init();
	}
	CopyPasteClass.prototype.init = function() {
	  var style,
	      parent;
	  this.copyCallbacks = [];
	  this.cutCallbacks = [];
	  this.pasteCallbacks = [];
	  parent = document.body;
	  if (document.getElementById('CopyPasteDiv')) {
	    this.elDiv = document.getElementById('CopyPasteDiv');
	    this.elTextarea = this.elDiv.firstChild;
	  } else {
	    this.elDiv = document.createElement('div');
	    this.elDiv.id = 'CopyPasteDiv';
	    style = this.elDiv.style;
	    style.position = 'fixed';
	    style.top = '-10000px';
	    style.left = '-10000px';
	    parent.appendChild(this.elDiv);
	    this.elTextarea = document.createElement('textarea');
	    this.elTextarea.className = 'copyPaste';
	    this.elTextarea.onpaste = function(event) {
	      var clipboardContents,
	          temp;
	      if ('WebkitAppearance' in document.documentElement.style) {
	        clipboardContents = event.clipboardData.getData("Text");
	        if (navigator.userAgent.indexOf('Safari') !== -1 && navigator.userAgent.indexOf('Chrome') === -1) {
	          temp = clipboardContents.split('\n');
	          if (temp[temp.length - 1] === '') {
	            temp.pop();
	          }
	          clipboardContents = temp.join('\n');
	        }
	        this.value = clipboardContents;
	        return false;
	      }
	    };
	    style = this.elTextarea.style;
	    style.width = '10000px';
	    style.height = '10000px';
	    style.overflow = 'hidden';
	    this.elDiv.appendChild(this.elTextarea);
	    if (typeof style.opacity !== 'undefined') {
	      style.opacity = 0;
	    }
	  }
	  this.onKeyDownRef = this.onKeyDown.bind(this);
	  document.documentElement.addEventListener('keydown', this.onKeyDownRef, false);
	};
	CopyPasteClass.prototype.onKeyDown = function(event) {
	  var _this = this,
	      isCtrlDown = false;
	  function isActiveElementEditable() {
	    var element = document.activeElement;
	    if (element.shadowRoot && element.shadowRoot.activeElement) {
	      element = element.shadowRoot.activeElement;
	    }
	    return ['INPUT', 'SELECT', 'TEXTAREA'].indexOf(element.nodeName) > -1 || element.contentEditable === 'true';
	  }
	  if (event.metaKey) {
	    isCtrlDown = true;
	  } else if (event.ctrlKey && navigator.userAgent.indexOf('Mac') === -1) {
	    isCtrlDown = true;
	  }
	  if (isCtrlDown) {
	    if (document.activeElement !== this.elTextarea && (this.getSelectionText() !== '' || isActiveElementEditable())) {
	      return;
	    }
	    this.selectNodeText(this.elTextarea);
	    setTimeout(function() {
	      if (document.activeElement !== _this.elTextarea) {
	        _this.selectNodeText(_this.elTextarea);
	      }
	    }, 0);
	  }
	  if (isCtrlDown && (event.keyCode === 67 || event.keyCode === 86 || event.keyCode === 88)) {
	    if (event.keyCode === 88) {
	      setTimeout(function() {
	        _this.triggerCut(event);
	      }, 0);
	    } else if (event.keyCode === 86) {
	      setTimeout(function() {
	        _this.triggerPaste(event);
	      }, 0);
	    }
	  }
	};
	CopyPasteClass.prototype.selectNodeText = function(element) {
	  if (element) {
	    element.select();
	  }
	};
	CopyPasteClass.prototype.getSelectionText = function() {
	  var text = '';
	  if (window.getSelection) {
	    text = window.getSelection().toString();
	  } else if (document.selection && document.selection.type !== 'Control') {
	    text = document.selection.createRange().text;
	  }
	  return text;
	};
	CopyPasteClass.prototype.copyable = function(string) {
	  if (typeof string !== 'string' && string.toString === void 0) {
	    throw new Error('copyable requires string parameter');
	  }
	  this.elTextarea.value = string;
	  this.selectNodeText(this.elTextarea);
	};
	CopyPasteClass.prototype.onCut = function(callback) {
	  this.cutCallbacks.push(callback);
	};
	CopyPasteClass.prototype.onPaste = function(callback) {
	  this.pasteCallbacks.push(callback);
	};
	CopyPasteClass.prototype.removeCallback = function(callback) {
	  var i,
	      len;
	  for (i = 0, len = this.copyCallbacks.length; i < len; i++) {
	    if (this.copyCallbacks[i] === callback) {
	      this.copyCallbacks.splice(i, 1);
	      return true;
	    }
	  }
	  for (i = 0, len = this.cutCallbacks.length; i < len; i++) {
	    if (this.cutCallbacks[i] === callback) {
	      this.cutCallbacks.splice(i, 1);
	      return true;
	    }
	  }
	  for (i = 0, len = this.pasteCallbacks.length; i < len; i++) {
	    if (this.pasteCallbacks[i] === callback) {
	      this.pasteCallbacks.splice(i, 1);
	      return true;
	    }
	  }
	  return false;
	};
	CopyPasteClass.prototype.triggerCut = function(event) {
	  var _this = this;
	  if (_this.cutCallbacks) {
	    setTimeout(function() {
	      for (var i = 0,
	          len = _this.cutCallbacks.length; i < len; i++) {
	        _this.cutCallbacks[i](event);
	      }
	    }, 50);
	  }
	};
	CopyPasteClass.prototype.triggerPaste = function(event, string) {
	  var _this = this;
	  if (_this.pasteCallbacks) {
	    setTimeout(function() {
	      var val = string || _this.elTextarea.value;
	      for (var i = 0,
	          len = _this.pasteCallbacks.length; i < len; i++) {
	        _this.pasteCallbacks[i](val, event);
	      }
	    }, 50);
	  }
	};
	CopyPasteClass.prototype.destroy = function() {
	  if (!this.hasBeenDestroyed() && --this.refCounter === 0) {
	    if (this.elDiv && this.elDiv.parentNode) {
	      this.elDiv.parentNode.removeChild(this.elDiv);
	      this.elDiv = null;
	      this.elTextarea = null;
	    }
	    document.documentElement.removeEventListener('keydown', this.onKeyDownRef);
	    this.onKeyDownRef = null;
	  }
	};
	CopyPasteClass.prototype.hasBeenDestroyed = function() {
	  return !this.refCounter;
	};

	//# 
	},{}],"es6collections":[function(require,module,exports){
	"use strict";
	(function(exports) {
	  'use strict';
	  var i;
	  var defineProperty = Object.defineProperty,
	      is = function(a, b) {
	        return isNaN(a) ? isNaN(b) : a === b;
	      };
	  if (typeof WeakMap == 'undefined') {
	    exports.WeakMap = createCollection({
	      'delete': sharedDelete,
	      clear: sharedClear,
	      get: sharedGet,
	      has: mapHas,
	      set: sharedSet
	    }, true);
	  }
	  if (typeof Map == 'undefined') {
	    exports.Map = createCollection({
	      'delete': sharedDelete,
	      has: mapHas,
	      get: sharedGet,
	      set: sharedSet,
	      keys: sharedKeys,
	      values: sharedValues,
	      entries: mapEntries,
	      forEach: sharedForEach,
	      clear: sharedClear
	    });
	  }
	  if (typeof Set == 'undefined') {
	    exports.Set = createCollection({
	      has: setHas,
	      add: sharedAdd,
	      'delete': sharedDelete,
	      clear: sharedClear,
	      keys: sharedValues,
	      values: sharedValues,
	      entries: setEntries,
	      forEach: sharedForEach
	    });
	  }
	  if (typeof WeakSet == 'undefined') {
	    exports.WeakSet = createCollection({
	      'delete': sharedDelete,
	      add: sharedAdd,
	      clear: sharedClear,
	      has: setHas
	    }, true);
	  }
	  function createCollection(proto, objectOnly) {
	    function Collection(a) {
	      if (!this || this.constructor !== Collection)
	        return new Collection(a);
	      this._keys = [];
	      this._values = [];
	      this._itp = [];
	      this.objectOnly = objectOnly;
	      if (a)
	        init.call(this, a);
	    }
	    if (!objectOnly) {
	      defineProperty(proto, 'size', {get: sharedSize});
	    }
	    proto.constructor = Collection;
	    Collection.prototype = proto;
	    return Collection;
	  }
	  function init(a) {
	    var i;
	    if (this.add)
	      a.forEach(this.add, this);
	    else
	      a.forEach(function(a) {
	        this.set(a[0], a[1]);
	      }, this);
	  }
	  function sharedDelete(key) {
	    if (this.has(key)) {
	      this._keys.splice(i, 1);
	      this._values.splice(i, 1);
	      this._itp.forEach(function(p) {
	        if (i < p[0])
	          p[0]--;
	      });
	    }
	    return -1 < i;
	  }
	  ;
	  function sharedGet(key) {
	    return this.has(key) ? this._values[i] : undefined;
	  }
	  function has(list, key) {
	    if (this.objectOnly && key !== Object(key))
	      throw new TypeError("Invalid value used as weak collection key");
	    if (key != key || key === 0)
	      for (i = list.length; i-- && !is(list[i], key); ) {}
	    else
	      i = list.indexOf(key);
	    return -1 < i;
	  }
	  function setHas(value) {
	    return has.call(this, this._values, value);
	  }
	  function mapHas(value) {
	    return has.call(this, this._keys, value);
	  }
	  function sharedSet(key, value) {
	    this.has(key) ? this._values[i] = value : this._values[this._keys.push(key) - 1] = value;
	    return this;
	  }
	  function sharedAdd(value) {
	    if (!this.has(value))
	      this._values.push(value);
	    return this;
	  }
	  function sharedClear() {
	    this._values.length = 0;
	  }
	  function sharedKeys() {
	    return sharedIterator(this._itp, this._keys);
	  }
	  function sharedValues() {
	    return sharedIterator(this._itp, this._values);
	  }
	  function mapEntries() {
	    return sharedIterator(this._itp, this._keys, this._values);
	  }
	  function setEntries() {
	    return sharedIterator(this._itp, this._values, this._values);
	  }
	  function sharedIterator(itp, array, array2) {
	    var p = [0],
	        done = false;
	    itp.push(p);
	    return {next: function() {
	        var v,
	            k = p[0];
	        if (!done && k < array.length) {
	          v = array2 ? [array[k], array2[k]] : array[k];
	          p[0]++;
	        } else {
	          done = true;
	          itp.splice(itp.indexOf(p), 1);
	        }
	        return {
	          done: done,
	          value: v
	        };
	      }};
	  }
	  function sharedSize() {
	    return this._values.length;
	  }
	  function sharedForEach(callback, context) {
	    var it = this.entries();
	    for (; ; ) {
	      var r = it.next();
	      if (r.done)
	        break;
	      callback.call(context, r.value[1], r.value[0], this);
	    }
	  }
	})(typeof exports != 'undefined' && typeof global != 'undefined' ? global : window);

	//# 
	},{}],"jsonpatch":[function(require,module,exports){
	"use strict";
	var jsonpatch;
	(function(jsonpatch) {
	  var objOps = {
	    add: function(obj, key) {
	      obj[key] = this.value;
	      return true;
	    },
	    remove: function(obj, key) {
	      delete obj[key];
	      return true;
	    },
	    replace: function(obj, key) {
	      obj[key] = this.value;
	      return true;
	    },
	    move: function(obj, key, tree) {
	      var temp = {
	        op: "_get",
	        path: this.from
	      };
	      apply(tree, [temp]);
	      apply(tree, [{
	        op: "remove",
	        path: this.from
	      }]);
	      apply(tree, [{
	        op: "add",
	        path: this.path,
	        value: temp.value
	      }]);
	      return true;
	    },
	    copy: function(obj, key, tree) {
	      var temp = {
	        op: "_get",
	        path: this.from
	      };
	      apply(tree, [temp]);
	      apply(tree, [{
	        op: "add",
	        path: this.path,
	        value: temp.value
	      }]);
	      return true;
	    },
	    test: function(obj, key) {
	      return (JSON.stringify(obj[key]) === JSON.stringify(this.value));
	    },
	    _get: function(obj, key) {
	      this.value = obj[key];
	    }
	  };
	  var arrOps = {
	    add: function(arr, i) {
	      arr.splice(i, 0, this.value);
	      return true;
	    },
	    remove: function(arr, i) {
	      arr.splice(i, 1);
	      return true;
	    },
	    replace: function(arr, i) {
	      arr[i] = this.value;
	      return true;
	    },
	    move: objOps.move,
	    copy: objOps.copy,
	    test: objOps.test,
	    _get: objOps._get
	  };
	  var observeOps = {
	    add: function(patches, path) {
	      var patch = {
	        op: "add",
	        path: path + escapePathComponent(this.name),
	        value: this.object[this.name]
	      };
	      patches.push(patch);
	    },
	    'delete': function(patches, path) {
	      var patch = {
	        op: "remove",
	        path: path + escapePathComponent(this.name)
	      };
	      patches.push(patch);
	    },
	    update: function(patches, path) {
	      var patch = {
	        op: "replace",
	        path: path + escapePathComponent(this.name),
	        value: this.object[this.name]
	      };
	      patches.push(patch);
	    }
	  };
	  function escapePathComponent(str) {
	    if (str.indexOf('/') === -1 && str.indexOf('~') === -1) {
	      return str;
	    }
	    return str.replace(/~/g, '~0').replace(/\//g, '~1');
	  }
	  function _getPathRecursive(root, obj) {
	    var found;
	    for (var key in root) {
	      if (root.hasOwnProperty(key)) {
	        if (root[key] === obj) {
	          return escapePathComponent(key) + '/';
	        } else if (typeof root[key] === 'object') {
	          found = _getPathRecursive(root[key], obj);
	          if (found != '') {
	            return escapePathComponent(key) + '/' + found;
	          }
	        }
	      }
	    }
	    return '';
	  }
	  function getPath(root, obj) {
	    if (root === obj) {
	      return '/';
	    }
	    var path = _getPathRecursive(root, obj);
	    if (path === '') {
	      throw new Error("Object not found in root");
	    }
	    return '/' + path;
	  }
	  var beforeDict = [];
	  jsonpatch.intervals;
	  var Mirror = (function() {
	    function Mirror(obj) {
	      this.observers = [];
	      this.obj = obj;
	    }
	    return Mirror;
	  })();
	  var ObserverInfo = (function() {
	    function ObserverInfo(callback, observer) {
	      this.callback = callback;
	      this.observer = observer;
	    }
	    return ObserverInfo;
	  })();
	  function getMirror(obj) {
	    for (var i = 0,
	        ilen = beforeDict.length; i < ilen; i++) {
	      if (beforeDict[i].obj === obj) {
	        return beforeDict[i];
	      }
	    }
	  }
	  function removeMirror(obj) {
	    for (var i = 0,
	        ilen = beforeDict.length; i < ilen; i++) {
	      if (beforeDict[i] === obj) {
	        beforeDict.splice(i, 1);
	      }
	    }
	  }
	  function getObserverFromMirror(mirror, callback) {
	    for (var j = 0,
	        jlen = mirror.observers.length; j < jlen; j++) {
	      if (mirror.observers[j].callback === callback) {
	        return mirror.observers[j].observer;
	      }
	    }
	  }
	  function removeObserverFromMirror(mirror, observer) {
	    for (var j = 0,
	        jlen = mirror.observers.length; j < jlen; j++) {
	      if (mirror.observers[j].observer === observer) {
	        mirror.observers.splice(j, 1);
	        if (!mirror.observers.length) {
	          removeMirror(mirror);
	        }
	        return;
	      }
	    }
	  }
	  function unobserve(root, observer) {
	    generate(observer);
	    if (Object.observe) {
	      _unobserve(observer, root);
	    } else {
	      clearTimeout(observer.next);
	    }
	    var mirror = getMirror(root);
	    removeObserverFromMirror(mirror, observer);
	  }
	  jsonpatch.unobserve = unobserve;
	  function observe(obj, callback) {
	    var patches = [];
	    var root = obj;
	    var observer;
	    var mirror = getMirror(obj);
	    if (!mirror) {
	      mirror = new Mirror(obj);
	      beforeDict.push(mirror);
	    } else {
	      observer = getObserverFromMirror(mirror, callback);
	    }
	    if (observer) {
	      return observer;
	    }
	    if (Object.observe) {
	      observer = function(arr) {
	        _unobserve(observer, obj);
	        _observe(observer, obj);
	        var a = 0,
	            alen = arr.length;
	        while (a < alen) {
	          if (!(arr[a].name === 'length' && _isArray(arr[a].object)) && !(arr[a].name === '__Jasmine_been_here_before__')) {
	            var type = arr[a].type;
	            switch (type) {
	              case 'new':
	                type = 'add';
	                break;
	              case 'deleted':
	                type = 'delete';
	                break;
	              case 'updated':
	                type = 'update';
	                break;
	            }
	            observeOps[type].call(arr[a], patches, getPath(root, arr[a].object));
	          }
	          a++;
	        }
	        if (patches) {
	          if (callback) {
	            callback(patches);
	          }
	        }
	        observer.patches = patches;
	        patches = [];
	      };
	    } else {
	      observer = {};
	      mirror.value = JSON.parse(JSON.stringify(obj));
	      if (callback) {
	        observer.callback = callback;
	        observer.next = null;
	        var intervals = this.intervals || [100, 1000, 10000, 60000];
	        var currentInterval = 0;
	        var dirtyCheck = function() {
	          generate(observer);
	        };
	        var fastCheck = function() {
	          clearTimeout(observer.next);
	          observer.next = setTimeout(function() {
	            dirtyCheck();
	            currentInterval = 0;
	            observer.next = setTimeout(slowCheck, intervals[currentInterval++]);
	          }, 0);
	        };
	        var slowCheck = function() {
	          dirtyCheck();
	          if (currentInterval == intervals.length) {
	            currentInterval = intervals.length - 1;
	          }
	          observer.next = setTimeout(slowCheck, intervals[currentInterval++]);
	        };
	        if (typeof window !== 'undefined') {
	          if (window.addEventListener) {
	            window.addEventListener('mousedown', fastCheck);
	            window.addEventListener('mouseup', fastCheck);
	            window.addEventListener('keydown', fastCheck);
	          } else {
	            window.attachEvent('onmousedown', fastCheck);
	            window.attachEvent('onmouseup', fastCheck);
	            window.attachEvent('onkeydown', fastCheck);
	          }
	        }
	        observer.next = setTimeout(slowCheck, intervals[currentInterval++]);
	      }
	    }
	    observer.patches = patches;
	    observer.object = obj;
	    mirror.observers.push(new ObserverInfo(callback, observer));
	    return _observe(observer, obj);
	  }
	  jsonpatch.observe = observe;
	  function _observe(observer, obj) {
	    if (Object.observe) {
	      Object.observe(obj, observer);
	      for (var key in obj) {
	        if (obj.hasOwnProperty(key)) {
	          var v = obj[key];
	          if (v && typeof(v) === "object") {
	            _observe(observer, v);
	          }
	        }
	      }
	    }
	    return observer;
	  }
	  function _unobserve(observer, obj) {
	    if (Object.observe) {
	      Object.unobserve(obj, observer);
	      for (var key in obj) {
	        if (obj.hasOwnProperty(key)) {
	          var v = obj[key];
	          if (v && typeof(v) === "object") {
	            _unobserve(observer, v);
	          }
	        }
	      }
	    }
	    return observer;
	  }
	  function generate(observer) {
	    if (Object.observe) {
	      Object.deliverChangeRecords(observer);
	    } else {
	      var mirror;
	      for (var i = 0,
	          ilen = beforeDict.length; i < ilen; i++) {
	        if (beforeDict[i].obj === observer.object) {
	          mirror = beforeDict[i];
	          break;
	        }
	      }
	      if (mirror) {
	        _generate(mirror.value, observer.object, observer.patches, "");
	      }
	    }
	    var temp = observer.patches;
	    if (temp.length > 0) {
	      observer.patches = [];
	      if (observer.callback) {
	        observer.callback(temp);
	      }
	    }
	    return temp;
	  }
	  jsonpatch.generate = generate;
	  var _objectKeys;
	  if (Object.keys) {
	    _objectKeys = Object.keys;
	  } else {
	    _objectKeys = function(obj) {
	      var keys = [];
	      for (var o in obj) {
	        if (obj.hasOwnProperty(o)) {
	          keys.push(o);
	        }
	      }
	      return keys;
	    };
	  }
	  function _generate(mirror, obj, patches, path) {
	    var newKeys = _objectKeys(obj);
	    var oldKeys = _objectKeys(mirror);
	    var changed = false;
	    var deleted = false;
	    for (var t = oldKeys.length - 1; t >= 0; t--) {
	      var key = oldKeys[t];
	      var oldVal = mirror[key];
	      if (obj.hasOwnProperty(key)) {
	        var newVal = obj[key];
	        if (oldVal instanceof Object) {
	          _generate(oldVal, newVal, patches, path + "/" + escapePathComponent(key));
	        } else {
	          if (oldVal != newVal) {
	            changed = true;
	            patches.push({
	              op: "replace",
	              path: path + "/" + escapePathComponent(key),
	              value: newVal
	            });
	            mirror[key] = newVal;
	          }
	        }
	      } else {
	        patches.push({
	          op: "remove",
	          path: path + "/" + escapePathComponent(key)
	        });
	        delete mirror[key];
	        deleted = true;
	      }
	    }
	    if (!deleted && newKeys.length == oldKeys.length) {
	      return;
	    }
	    for (var t = 0; t < newKeys.length; t++) {
	      var key = newKeys[t];
	      if (!mirror.hasOwnProperty(key)) {
	        patches.push({
	          op: "add",
	          path: path + "/" + escapePathComponent(key),
	          value: obj[key]
	        });
	        mirror[key] = JSON.parse(JSON.stringify(obj[key]));
	      }
	    }
	  }
	  var _isArray;
	  if (Array.isArray) {
	    _isArray = Array.isArray;
	  } else {
	    _isArray = function(obj) {
	      return obj.push && typeof obj.length === 'number';
	    };
	  }
	  function apply(tree, patches) {
	    var result = false,
	        p = 0,
	        plen = patches.length,
	        patch;
	    while (p < plen) {
	      patch = patches[p];
	      var keys = patch.path.split('/');
	      var obj = tree;
	      var t = 1;
	      var len = keys.length;
	      while (true) {
	        if (_isArray(obj)) {
	          var index = parseInt(keys[t], 10);
	          t++;
	          if (t >= len) {
	            result = arrOps[patch.op].call(patch, obj, index, tree);
	            break;
	          }
	          obj = obj[index];
	        } else {
	          var key = keys[t];
	          if (key.indexOf('~') != -1) {
	            key = key.replace(/~1/g, '/').replace(/~0/g, '~');
	          }
	          t++;
	          if (t >= len) {
	            result = objOps[patch.op].call(patch, obj, key, tree);
	            break;
	          }
	          obj = obj[key];
	        }
	      }
	      p++;
	    }
	    return result;
	  }
	  jsonpatch.apply = apply;
	})(jsonpatch || (jsonpatch = {}));
	if (typeof exports !== "undefined") {
	  exports.apply = jsonpatch.apply;
	  exports.observe = jsonpatch.observe;
	  exports.unobserve = jsonpatch.unobserve;
	  exports.generate = jsonpatch.generate;
	}

	//# 
	},{}],"moment":[function(require,module,exports){
	//! moment.js
	//! version : 2.10.6
	//! authors : Tim Wood, Iskren Chernev, Moment.js contributors
	//! license : MIT
	//! momentjs.com

	(function (global, factory) {
	    typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :
	    typeof define === 'function' && define.amd ? define(factory) :
	    global.moment = factory()
	}(this, function () { 'use strict';

	    var hookCallback;

	    function utils_hooks__hooks () {
	        return hookCallback.apply(null, arguments);
	    }

	    // This is done to register the method called with moment()
	    // without creating circular dependencies.
	    function setHookCallback (callback) {
	        hookCallback = callback;
	    }

	    function isArray(input) {
	        return Object.prototype.toString.call(input) === '[object Array]';
	    }

	    function isDate(input) {
	        return input instanceof Date || Object.prototype.toString.call(input) === '[object Date]';
	    }

	    function map(arr, fn) {
	        var res = [], i;
	        for (i = 0; i < arr.length; ++i) {
	            res.push(fn(arr[i], i));
	        }
	        return res;
	    }

	    function hasOwnProp(a, b) {
	        return Object.prototype.hasOwnProperty.call(a, b);
	    }

	    function extend(a, b) {
	        for (var i in b) {
	            if (hasOwnProp(b, i)) {
	                a[i] = b[i];
	            }
	        }

	        if (hasOwnProp(b, 'toString')) {
	            a.toString = b.toString;
	        }

	        if (hasOwnProp(b, 'valueOf')) {
	            a.valueOf = b.valueOf;
	        }

	        return a;
	    }

	    function create_utc__createUTC (input, format, locale, strict) {
	        return createLocalOrUTC(input, format, locale, strict, true).utc();
	    }

	    function defaultParsingFlags() {
	        // We need to deep clone this object.
	        return {
	            empty           : false,
	            unusedTokens    : [],
	            unusedInput     : [],
	            overflow        : -2,
	            charsLeftOver   : 0,
	            nullInput       : false,
	            invalidMonth    : null,
	            invalidFormat   : false,
	            userInvalidated : false,
	            iso             : false
	        };
	    }

	    function getParsingFlags(m) {
	        if (m._pf == null) {
	            m._pf = defaultParsingFlags();
	        }
	        return m._pf;
	    }

	    function valid__isValid(m) {
	        if (m._isValid == null) {
	            var flags = getParsingFlags(m);
	            m._isValid = !isNaN(m._d.getTime()) &&
	                flags.overflow < 0 &&
	                !flags.empty &&
	                !flags.invalidMonth &&
	                !flags.invalidWeekday &&
	                !flags.nullInput &&
	                !flags.invalidFormat &&
	                !flags.userInvalidated;

	            if (m._strict) {
	                m._isValid = m._isValid &&
	                    flags.charsLeftOver === 0 &&
	                    flags.unusedTokens.length === 0 &&
	                    flags.bigHour === undefined;
	            }
	        }
	        return m._isValid;
	    }

	    function valid__createInvalid (flags) {
	        var m = create_utc__createUTC(NaN);
	        if (flags != null) {
	            extend(getParsingFlags(m), flags);
	        }
	        else {
	            getParsingFlags(m).userInvalidated = true;
	        }

	        return m;
	    }

	    var momentProperties = utils_hooks__hooks.momentProperties = [];

	    function copyConfig(to, from) {
	        var i, prop, val;

	        if (typeof from._isAMomentObject !== 'undefined') {
	            to._isAMomentObject = from._isAMomentObject;
	        }
	        if (typeof from._i !== 'undefined') {
	            to._i = from._i;
	        }
	        if (typeof from._f !== 'undefined') {
	            to._f = from._f;
	        }
	        if (typeof from._l !== 'undefined') {
	            to._l = from._l;
	        }
	        if (typeof from._strict !== 'undefined') {
	            to._strict = from._strict;
	        }
	        if (typeof from._tzm !== 'undefined') {
	            to._tzm = from._tzm;
	        }
	        if (typeof from._isUTC !== 'undefined') {
	            to._isUTC = from._isUTC;
	        }
	        if (typeof from._offset !== 'undefined') {
	            to._offset = from._offset;
	        }
	        if (typeof from._pf !== 'undefined') {
	            to._pf = getParsingFlags(from);
	        }
	        if (typeof from._locale !== 'undefined') {
	            to._locale = from._locale;
	        }

	        if (momentProperties.length > 0) {
	            for (i in momentProperties) {
	                prop = momentProperties[i];
	                val = from[prop];
	                if (typeof val !== 'undefined') {
	                    to[prop] = val;
	                }
	            }
	        }

	        return to;
	    }

	    var updateInProgress = false;

	    // Moment prototype object
	    function Moment(config) {
	        copyConfig(this, config);
	        this._d = new Date(config._d != null ? config._d.getTime() : NaN);
	        // Prevent infinite loop in case updateOffset creates new moment
	        // objects.
	        if (updateInProgress === false) {
	            updateInProgress = true;
	            utils_hooks__hooks.updateOffset(this);
	            updateInProgress = false;
	        }
	    }

	    function isMoment (obj) {
	        return obj instanceof Moment || (obj != null && obj._isAMomentObject != null);
	    }

	    function absFloor (number) {
	        if (number < 0) {
	            return Math.ceil(number);
	        } else {
	            return Math.floor(number);
	        }
	    }

	    function toInt(argumentForCoercion) {
	        var coercedNumber = +argumentForCoercion,
	            value = 0;

	        if (coercedNumber !== 0 && isFinite(coercedNumber)) {
	            value = absFloor(coercedNumber);
	        }

	        return value;
	    }

	    function compareArrays(array1, array2, dontConvert) {
	        var len = Math.min(array1.length, array2.length),
	            lengthDiff = Math.abs(array1.length - array2.length),
	            diffs = 0,
	            i;
	        for (i = 0; i < len; i++) {
	            if ((dontConvert && array1[i] !== array2[i]) ||
	                (!dontConvert && toInt(array1[i]) !== toInt(array2[i]))) {
	                diffs++;
	            }
	        }
	        return diffs + lengthDiff;
	    }

	    function Locale() {
	    }

	    var locales = {};
	    var globalLocale;

	    function normalizeLocale(key) {
	        return key ? key.toLowerCase().replace('_', '-') : key;
	    }

	    // pick the locale from the array
	    // try ['en-au', 'en-gb'] as 'en-au', 'en-gb', 'en', as in move through the list trying each
	    // substring from most specific to least, but move to the next array item if it's a more specific variant than the current root
	    function chooseLocale(names) {
	        var i = 0, j, next, locale, split;

	        while (i < names.length) {
	            split = normalizeLocale(names[i]).split('-');
	            j = split.length;
	            next = normalizeLocale(names[i + 1]);
	            next = next ? next.split('-') : null;
	            while (j > 0) {
	                locale = loadLocale(split.slice(0, j).join('-'));
	                if (locale) {
	                    return locale;
	                }
	                if (next && next.length >= j && compareArrays(split, next, true) >= j - 1) {
	                    //the next array item is better than a shallower substring of this one
	                    break;
	                }
	                j--;
	            }
	            i++;
	        }
	        return null;
	    }

	    function loadLocale(name) {
	        var oldLocale = null;
	        // TODO: Find a better way to register and load all the locales in Node
	        if (!locales[name] && typeof module !== 'undefined' &&
	                module && module.exports) {
	            try {
	                oldLocale = globalLocale._abbr;
	                require('./locale/' + name);
	                // because defineLocale currently also sets the global locale, we
	                // want to undo that for lazy loaded locales
	                locale_locales__getSetGlobalLocale(oldLocale);
	            } catch (e) { }
	        }
	        return locales[name];
	    }

	    // This function will load locale and then set the global locale.  If
	    // no arguments are passed in, it will simply return the current global
	    // locale key.
	    function locale_locales__getSetGlobalLocale (key, values) {
	        var data;
	        if (key) {
	            if (typeof values === 'undefined') {
	                data = locale_locales__getLocale(key);
	            }
	            else {
	                data = defineLocale(key, values);
	            }

	            if (data) {
	                // moment.duration._locale = moment._locale = data;
	                globalLocale = data;
	            }
	        }

	        return globalLocale._abbr;
	    }

	    function defineLocale (name, values) {
	        if (values !== null) {
	            values.abbr = name;
	            locales[name] = locales[name] || new Locale();
	            locales[name].set(values);

	            // backwards compat for now: also set the locale
	            locale_locales__getSetGlobalLocale(name);

	            return locales[name];
	        } else {
	            // useful for testing
	            delete locales[name];
	            return null;
	        }
	    }

	    // returns locale data
	    function locale_locales__getLocale (key) {
	        var locale;

	        if (key && key._locale && key._locale._abbr) {
	            key = key._locale._abbr;
	        }

	        if (!key) {
	            return globalLocale;
	        }

	        if (!isArray(key)) {
	            //short-circuit everything else
	            locale = loadLocale(key);
	            if (locale) {
	                return locale;
	            }
	            key = [key];
	        }

	        return chooseLocale(key);
	    }

	    var aliases = {};

	    function addUnitAlias (unit, shorthand) {
	        var lowerCase = unit.toLowerCase();
	        aliases[lowerCase] = aliases[lowerCase + 's'] = aliases[shorthand] = unit;
	    }

	    function normalizeUnits(units) {
	        return typeof units === 'string' ? aliases[units] || aliases[units.toLowerCase()] : undefined;
	    }

	    function normalizeObjectUnits(inputObject) {
	        var normalizedInput = {},
	            normalizedProp,
	            prop;

	        for (prop in inputObject) {
	            if (hasOwnProp(inputObject, prop)) {
	                normalizedProp = normalizeUnits(prop);
	                if (normalizedProp) {
	                    normalizedInput[normalizedProp] = inputObject[prop];
	                }
	            }
	        }

	        return normalizedInput;
	    }

	    function makeGetSet (unit, keepTime) {
	        return function (value) {
	            if (value != null) {
	                get_set__set(this, unit, value);
	                utils_hooks__hooks.updateOffset(this, keepTime);
	                return this;
	            } else {
	                return get_set__get(this, unit);
	            }
	        };
	    }

	    function get_set__get (mom, unit) {
	        return mom._d['get' + (mom._isUTC ? 'UTC' : '') + unit]();
	    }

	    function get_set__set (mom, unit, value) {
	        return mom._d['set' + (mom._isUTC ? 'UTC' : '') + unit](value);
	    }

	    // MOMENTS

	    function getSet (units, value) {
	        var unit;
	        if (typeof units === 'object') {
	            for (unit in units) {
	                this.set(unit, units[unit]);
	            }
	        } else {
	            units = normalizeUnits(units);
	            if (typeof this[units] === 'function') {
	                return this[units](value);
	            }
	        }
	        return this;
	    }

	    function zeroFill(number, targetLength, forceSign) {
	        var absNumber = '' + Math.abs(number),
	            zerosToFill = targetLength - absNumber.length,
	            sign = number >= 0;
	        return (sign ? (forceSign ? '+' : '') : '-') +
	            Math.pow(10, Math.max(0, zerosToFill)).toString().substr(1) + absNumber;
	    }

	    var formattingTokens = /(\[[^\[]*\])|(\\)?(Mo|MM?M?M?|Do|DDDo|DD?D?D?|ddd?d?|do?|w[o|w]?|W[o|W]?|Q|YYYYYY|YYYYY|YYYY|YY|gg(ggg?)?|GG(GGG?)?|e|E|a|A|hh?|HH?|mm?|ss?|S{1,9}|x|X|zz?|ZZ?|.)/g;

	    var localFormattingTokens = /(\[[^\[]*\])|(\\)?(LTS|LT|LL?L?L?|l{1,4})/g;

	    var formatFunctions = {};

	    var formatTokenFunctions = {};

	    // token:    'M'
	    // padded:   ['MM', 2]
	    // ordinal:  'Mo'
	    // callback: function () { this.month() + 1 }
	    function addFormatToken (token, padded, ordinal, callback) {
	        var func = callback;
	        if (typeof callback === 'string') {
	            func = function () {
	                return this[callback]();
	            };
	        }
	        if (token) {
	            formatTokenFunctions[token] = func;
	        }
	        if (padded) {
	            formatTokenFunctions[padded[0]] = function () {
	                return zeroFill(func.apply(this, arguments), padded[1], padded[2]);
	            };
	        }
	        if (ordinal) {
	            formatTokenFunctions[ordinal] = function () {
	                return this.localeData().ordinal(func.apply(this, arguments), token);
	            };
	        }
	    }

	    function removeFormattingTokens(input) {
	        if (input.match(/\[[\s\S]/)) {
	            return input.replace(/^\[|\]$/g, '');
	        }
	        return input.replace(/\\/g, '');
	    }

	    function makeFormatFunction(format) {
	        var array = format.match(formattingTokens), i, length;

	        for (i = 0, length = array.length; i < length; i++) {
	            if (formatTokenFunctions[array[i]]) {
	                array[i] = formatTokenFunctions[array[i]];
	            } else {
	                array[i] = removeFormattingTokens(array[i]);
	            }
	        }

	        return function (mom) {
	            var output = '';
	            for (i = 0; i < length; i++) {
	                output += array[i] instanceof Function ? array[i].call(mom, format) : array[i];
	            }
	            return output;
	        };
	    }

	    // format date using native date object
	    function formatMoment(m, format) {
	        if (!m.isValid()) {
	            return m.localeData().invalidDate();
	        }

	        format = expandFormat(format, m.localeData());
	        formatFunctions[format] = formatFunctions[format] || makeFormatFunction(format);

	        return formatFunctions[format](m);
	    }

	    function expandFormat(format, locale) {
	        var i = 5;

	        function replaceLongDateFormatTokens(input) {
	            return locale.longDateFormat(input) || input;
	        }

	        localFormattingTokens.lastIndex = 0;
	        while (i >= 0 && localFormattingTokens.test(format)) {
	            format = format.replace(localFormattingTokens, replaceLongDateFormatTokens);
	            localFormattingTokens.lastIndex = 0;
	            i -= 1;
	        }

	        return format;
	    }

	    var match1         = /\d/;            //       0 - 9
	    var match2         = /\d\d/;          //      00 - 99
	    var match3         = /\d{3}/;         //     000 - 999
	    var match4         = /\d{4}/;         //    0000 - 9999
	    var match6         = /[+-]?\d{6}/;    // -999999 - 999999
	    var match1to2      = /\d\d?/;         //       0 - 99
	    var match1to3      = /\d{1,3}/;       //       0 - 999
	    var match1to4      = /\d{1,4}/;       //       0 - 9999
	    var match1to6      = /[+-]?\d{1,6}/;  // -999999 - 999999

	    var matchUnsigned  = /\d+/;           //       0 - inf
	    var matchSigned    = /[+-]?\d+/;      //    -inf - inf

	    var matchOffset    = /Z|[+-]\d\d:?\d\d/gi; // +00:00 -00:00 +0000 -0000 or Z

	    var matchTimestamp = /[+-]?\d+(\.\d{1,3})?/; // 123456789 123456789.123

	    // any word (or two) characters or numbers including two/three word month in arabic.
	    var matchWord = /[0-9]*['a-z\u00A0-\u05FF\u0700-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]+|[\u0600-\u06FF\/]+(\s*?[\u0600-\u06FF]+){1,2}/i;

	    var regexes = {};

	    function isFunction (sth) {
	        // https://github.com/moment/moment/issues/2325
	        return typeof sth === 'function' &&
	            Object.prototype.toString.call(sth) === '[object Function]';
	    }


	    function addRegexToken (token, regex, strictRegex) {
	        regexes[token] = isFunction(regex) ? regex : function (isStrict) {
	            return (isStrict && strictRegex) ? strictRegex : regex;
	        };
	    }

	    function getParseRegexForToken (token, config) {
	        if (!hasOwnProp(regexes, token)) {
	            return new RegExp(unescapeFormat(token));
	        }

	        return regexes[token](config._strict, config._locale);
	    }

	    // Code from http://stackoverflow.com/questions/3561493/is-there-a-regexp-escape-function-in-javascript
	    function unescapeFormat(s) {
	        return s.replace('\\', '').replace(/\\(\[)|\\(\])|\[([^\]\[]*)\]|\\(.)/g, function (matched, p1, p2, p3, p4) {
	            return p1 || p2 || p3 || p4;
	        }).replace(/[-\/\\^$*+?.()|[\]{}]/g, '\\$&');
	    }

	    var tokens = {};

	    function addParseToken (token, callback) {
	        var i, func = callback;
	        if (typeof token === 'string') {
	            token = [token];
	        }
	        if (typeof callback === 'number') {
	            func = function (input, array) {
	                array[callback] = toInt(input);
	            };
	        }
	        for (i = 0; i < token.length; i++) {
	            tokens[token[i]] = func;
	        }
	    }

	    function addWeekParseToken (token, callback) {
	        addParseToken(token, function (input, array, config, token) {
	            config._w = config._w || {};
	            callback(input, config._w, config, token);
	        });
	    }

	    function addTimeToArrayFromToken(token, input, config) {
	        if (input != null && hasOwnProp(tokens, token)) {
	            tokens[token](input, config._a, config, token);
	        }
	    }

	    var YEAR = 0;
	    var MONTH = 1;
	    var DATE = 2;
	    var HOUR = 3;
	    var MINUTE = 4;
	    var SECOND = 5;
	    var MILLISECOND = 6;

	    function daysInMonth(year, month) {
	        return new Date(Date.UTC(year, month + 1, 0)).getUTCDate();
	    }

	    // FORMATTING

	    addFormatToken('M', ['MM', 2], 'Mo', function () {
	        return this.month() + 1;
	    });

	    addFormatToken('MMM', 0, 0, function (format) {
	        return this.localeData().monthsShort(this, format);
	    });

	    addFormatToken('MMMM', 0, 0, function (format) {
	        return this.localeData().months(this, format);
	    });

	    // ALIASES

	    addUnitAlias('month', 'M');

	    // PARSING

	    addRegexToken('M',    match1to2);
	    addRegexToken('MM',   match1to2, match2);
	    addRegexToken('MMM',  matchWord);
	    addRegexToken('MMMM', matchWord);

	    addParseToken(['M', 'MM'], function (input, array) {
	        array[MONTH] = toInt(input) - 1;
	    });

	    addParseToken(['MMM', 'MMMM'], function (input, array, config, token) {
	        var month = config._locale.monthsParse(input, token, config._strict);
	        // if we didn't find a month name, mark the date as invalid.
	        if (month != null) {
	            array[MONTH] = month;
	        } else {
	            getParsingFlags(config).invalidMonth = input;
	        }
	    });

	    // LOCALES

	    var defaultLocaleMonths = 'January_February_March_April_May_June_July_August_September_October_November_December'.split('_');
	    function localeMonths (m) {
	        return this._months[m.month()];
	    }

	    var defaultLocaleMonthsShort = 'Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec'.split('_');
	    function localeMonthsShort (m) {
	        return this._monthsShort[m.month()];
	    }

	    function localeMonthsParse (monthName, format, strict) {
	        var i, mom, regex;

	        if (!this._monthsParse) {
	            this._monthsParse = [];
	            this._longMonthsParse = [];
	            this._shortMonthsParse = [];
	        }

	        for (i = 0; i < 12; i++) {
	            // make the regex if we don't have it already
	            mom = create_utc__createUTC([2000, i]);
	            if (strict && !this._longMonthsParse[i]) {
	                this._longMonthsParse[i] = new RegExp('^' + this.months(mom, '').replace('.', '') + '$', 'i');
	                this._shortMonthsParse[i] = new RegExp('^' + this.monthsShort(mom, '').replace('.', '') + '$', 'i');
	            }
	            if (!strict && !this._monthsParse[i]) {
	                regex = '^' + this.months(mom, '') + '|^' + this.monthsShort(mom, '');
	                this._monthsParse[i] = new RegExp(regex.replace('.', ''), 'i');
	            }
	            // test the regex
	            if (strict && format === 'MMMM' && this._longMonthsParse[i].test(monthName)) {
	                return i;
	            } else if (strict && format === 'MMM' && this._shortMonthsParse[i].test(monthName)) {
	                return i;
	            } else if (!strict && this._monthsParse[i].test(monthName)) {
	                return i;
	            }
	        }
	    }

	    // MOMENTS

	    function setMonth (mom, value) {
	        var dayOfMonth;

	        // TODO: Move this out of here!
	        if (typeof value === 'string') {
	            value = mom.localeData().monthsParse(value);
	            // TODO: Another silent failure?
	            if (typeof value !== 'number') {
	                return mom;
	            }
	        }

	        dayOfMonth = Math.min(mom.date(), daysInMonth(mom.year(), value));
	        mom._d['set' + (mom._isUTC ? 'UTC' : '') + 'Month'](value, dayOfMonth);
	        return mom;
	    }

	    function getSetMonth (value) {
	        if (value != null) {
	            setMonth(this, value);
	            utils_hooks__hooks.updateOffset(this, true);
	            return this;
	        } else {
	            return get_set__get(this, 'Month');
	        }
	    }

	    function getDaysInMonth () {
	        return daysInMonth(this.year(), this.month());
	    }

	    function checkOverflow (m) {
	        var overflow;
	        var a = m._a;

	        if (a && getParsingFlags(m).overflow === -2) {
	            overflow =
	                a[MONTH]       < 0 || a[MONTH]       > 11  ? MONTH :
	                a[DATE]        < 1 || a[DATE]        > daysInMonth(a[YEAR], a[MONTH]) ? DATE :
	                a[HOUR]        < 0 || a[HOUR]        > 24 || (a[HOUR] === 24 && (a[MINUTE] !== 0 || a[SECOND] !== 0 || a[MILLISECOND] !== 0)) ? HOUR :
	                a[MINUTE]      < 0 || a[MINUTE]      > 59  ? MINUTE :
	                a[SECOND]      < 0 || a[SECOND]      > 59  ? SECOND :
	                a[MILLISECOND] < 0 || a[MILLISECOND] > 999 ? MILLISECOND :
	                -1;

	            if (getParsingFlags(m)._overflowDayOfYear && (overflow < YEAR || overflow > DATE)) {
	                overflow = DATE;
	            }

	            getParsingFlags(m).overflow = overflow;
	        }

	        return m;
	    }

	    function warn(msg) {
	        if (utils_hooks__hooks.suppressDeprecationWarnings === false && typeof console !== 'undefined' && console.warn) {
	            console.warn('Deprecation warning: ' + msg);
	        }
	    }

	    function deprecate(msg, fn) {
	        var firstTime = true;

	        return extend(function () {
	            if (firstTime) {
	                warn(msg + '\n' + (new Error()).stack);
	                firstTime = false;
	            }
	            return fn.apply(this, arguments);
	        }, fn);
	    }

	    var deprecations = {};

	    function deprecateSimple(name, msg) {
	        if (!deprecations[name]) {
	            warn(msg);
	            deprecations[name] = true;
	        }
	    }

	    utils_hooks__hooks.suppressDeprecationWarnings = false;

	    var from_string__isoRegex = /^\s*(?:[+-]\d{6}|\d{4})-(?:(\d\d-\d\d)|(W\d\d$)|(W\d\d-\d)|(\d\d\d))((T| )(\d\d(:\d\d(:\d\d(\.\d+)?)?)?)?([\+\-]\d\d(?::?\d\d)?|\s*Z)?)?$/;

	    var isoDates = [
	        ['YYYYYY-MM-DD', /[+-]\d{6}-\d{2}-\d{2}/],
	        ['YYYY-MM-DD', /\d{4}-\d{2}-\d{2}/],
	        ['GGGG-[W]WW-E', /\d{4}-W\d{2}-\d/],
	        ['GGGG-[W]WW', /\d{4}-W\d{2}/],
	        ['YYYY-DDD', /\d{4}-\d{3}/]
	    ];

	    // iso time formats and regexes
	    var isoTimes = [
	        ['HH:mm:ss.SSSS', /(T| )\d\d:\d\d:\d\d\.\d+/],
	        ['HH:mm:ss', /(T| )\d\d:\d\d:\d\d/],
	        ['HH:mm', /(T| )\d\d:\d\d/],
	        ['HH', /(T| )\d\d/]
	    ];

	    var aspNetJsonRegex = /^\/?Date\((\-?\d+)/i;

	    // date from iso format
	    function configFromISO(config) {
	        var i, l,
	            string = config._i,
	            match = from_string__isoRegex.exec(string);

	        if (match) {
	            getParsingFlags(config).iso = true;
	            for (i = 0, l = isoDates.length; i < l; i++) {
	                if (isoDates[i][1].exec(string)) {
	                    config._f = isoDates[i][0];
	                    break;
	                }
	            }
	            for (i = 0, l = isoTimes.length; i < l; i++) {
	                if (isoTimes[i][1].exec(string)) {
	                    // match[6] should be 'T' or space
	                    config._f += (match[6] || ' ') + isoTimes[i][0];
	                    break;
	                }
	            }
	            if (string.match(matchOffset)) {
	                config._f += 'Z';
	            }
	            configFromStringAndFormat(config);
	        } else {
	            config._isValid = false;
	        }
	    }

	    // date from iso format or fallback
	    function configFromString(config) {
	        var matched = aspNetJsonRegex.exec(config._i);

	        if (matched !== null) {
	            config._d = new Date(+matched[1]);
	            return;
	        }

	        configFromISO(config);
	        if (config._isValid === false) {
	            delete config._isValid;
	            utils_hooks__hooks.createFromInputFallback(config);
	        }
	    }

	    utils_hooks__hooks.createFromInputFallback = deprecate(
	        'moment construction falls back to js Date. This is ' +
	        'discouraged and will be removed in upcoming major ' +
	        'release. Please refer to ' +
	        'https://github.com/moment/moment/issues/1407 for more info.',
	        function (config) {
	            config._d = new Date(config._i + (config._useUTC ? ' UTC' : ''));
	        }
	    );

	    function createDate (y, m, d, h, M, s, ms) {
	        //can't just apply() to create a date:
	        //http://stackoverflow.com/questions/181348/instantiating-a-javascript-object-by-calling-prototype-constructor-apply
	        var date = new Date(y, m, d, h, M, s, ms);

	        //the date constructor doesn't accept years < 1970
	        if (y < 1970) {
	            date.setFullYear(y);
	        }
	        return date;
	    }

	    function createUTCDate (y) {
	        var date = new Date(Date.UTC.apply(null, arguments));
	        if (y < 1970) {
	            date.setUTCFullYear(y);
	        }
	        return date;
	    }

	    addFormatToken(0, ['YY', 2], 0, function () {
	        return this.year() % 100;
	    });

	    addFormatToken(0, ['YYYY',   4],       0, 'year');
	    addFormatToken(0, ['YYYYY',  5],       0, 'year');
	    addFormatToken(0, ['YYYYYY', 6, true], 0, 'year');

	    // ALIASES

	    addUnitAlias('year', 'y');

	    // PARSING

	    addRegexToken('Y',      matchSigned);
	    addRegexToken('YY',     match1to2, match2);
	    addRegexToken('YYYY',   match1to4, match4);
	    addRegexToken('YYYYY',  match1to6, match6);
	    addRegexToken('YYYYYY', match1to6, match6);

	    addParseToken(['YYYYY', 'YYYYYY'], YEAR);
	    addParseToken('YYYY', function (input, array) {
	        array[YEAR] = input.length === 2 ? utils_hooks__hooks.parseTwoDigitYear(input) : toInt(input);
	    });
	    addParseToken('YY', function (input, array) {
	        array[YEAR] = utils_hooks__hooks.parseTwoDigitYear(input);
	    });

	    // HELPERS

	    function daysInYear(year) {
	        return isLeapYear(year) ? 366 : 365;
	    }

	    function isLeapYear(year) {
	        return (year % 4 === 0 && year % 100 !== 0) || year % 400 === 0;
	    }

	    // HOOKS

	    utils_hooks__hooks.parseTwoDigitYear = function (input) {
	        return toInt(input) + (toInt(input) > 68 ? 1900 : 2000);
	    };

	    // MOMENTS

	    var getSetYear = makeGetSet('FullYear', false);

	    function getIsLeapYear () {
	        return isLeapYear(this.year());
	    }

	    addFormatToken('w', ['ww', 2], 'wo', 'week');
	    addFormatToken('W', ['WW', 2], 'Wo', 'isoWeek');

	    // ALIASES

	    addUnitAlias('week', 'w');
	    addUnitAlias('isoWeek', 'W');

	    // PARSING

	    addRegexToken('w',  match1to2);
	    addRegexToken('ww', match1to2, match2);
	    addRegexToken('W',  match1to2);
	    addRegexToken('WW', match1to2, match2);

	    addWeekParseToken(['w', 'ww', 'W', 'WW'], function (input, week, config, token) {
	        week[token.substr(0, 1)] = toInt(input);
	    });

	    // HELPERS

	    // firstDayOfWeek       0 = sun, 6 = sat
	    //                      the day of the week that starts the week
	    //                      (usually sunday or monday)
	    // firstDayOfWeekOfYear 0 = sun, 6 = sat
	    //                      the first week is the week that contains the first
	    //                      of this day of the week
	    //                      (eg. ISO weeks use thursday (4))
	    function weekOfYear(mom, firstDayOfWeek, firstDayOfWeekOfYear) {
	        var end = firstDayOfWeekOfYear - firstDayOfWeek,
	            daysToDayOfWeek = firstDayOfWeekOfYear - mom.day(),
	            adjustedMoment;


	        if (daysToDayOfWeek > end) {
	            daysToDayOfWeek -= 7;
	        }

	        if (daysToDayOfWeek < end - 7) {
	            daysToDayOfWeek += 7;
	        }

	        adjustedMoment = local__createLocal(mom).add(daysToDayOfWeek, 'd');
	        return {
	            week: Math.ceil(adjustedMoment.dayOfYear() / 7),
	            year: adjustedMoment.year()
	        };
	    }

	    // LOCALES

	    function localeWeek (mom) {
	        return weekOfYear(mom, this._week.dow, this._week.doy).week;
	    }

	    var defaultLocaleWeek = {
	        dow : 0, // Sunday is the first day of the week.
	        doy : 6  // The week that contains Jan 1st is the first week of the year.
	    };

	    function localeFirstDayOfWeek () {
	        return this._week.dow;
	    }

	    function localeFirstDayOfYear () {
	        return this._week.doy;
	    }

	    // MOMENTS

	    function getSetWeek (input) {
	        var week = this.localeData().week(this);
	        return input == null ? week : this.add((input - week) * 7, 'd');
	    }

	    function getSetISOWeek (input) {
	        var week = weekOfYear(this, 1, 4).week;
	        return input == null ? week : this.add((input - week) * 7, 'd');
	    }

	    addFormatToken('DDD', ['DDDD', 3], 'DDDo', 'dayOfYear');

	    // ALIASES

	    addUnitAlias('dayOfYear', 'DDD');

	    // PARSING

	    addRegexToken('DDD',  match1to3);
	    addRegexToken('DDDD', match3);
	    addParseToken(['DDD', 'DDDD'], function (input, array, config) {
	        config._dayOfYear = toInt(input);
	    });

	    // HELPERS

	    //http://en.wikipedia.org/wiki/ISO_week_date#Calculating_a_date_given_the_year.2C_week_number_and_weekday
	    function dayOfYearFromWeeks(year, week, weekday, firstDayOfWeekOfYear, firstDayOfWeek) {
	        var week1Jan = 6 + firstDayOfWeek - firstDayOfWeekOfYear, janX = createUTCDate(year, 0, 1 + week1Jan), d = janX.getUTCDay(), dayOfYear;
	        if (d < firstDayOfWeek) {
	            d += 7;
	        }

	        weekday = weekday != null ? 1 * weekday : firstDayOfWeek;

	        dayOfYear = 1 + week1Jan + 7 * (week - 1) - d + weekday;

	        return {
	            year: dayOfYear > 0 ? year : year - 1,
	            dayOfYear: dayOfYear > 0 ?  dayOfYear : daysInYear(year - 1) + dayOfYear
	        };
	    }

	    // MOMENTS

	    function getSetDayOfYear (input) {
	        var dayOfYear = Math.round((this.clone().startOf('day') - this.clone().startOf('year')) / 864e5) + 1;
	        return input == null ? dayOfYear : this.add((input - dayOfYear), 'd');
	    }

	    // Pick the first defined of two or three arguments.
	    function defaults(a, b, c) {
	        if (a != null) {
	            return a;
	        }
	        if (b != null) {
	            return b;
	        }
	        return c;
	    }

	    function currentDateArray(config) {
	        var now = new Date();
	        if (config._useUTC) {
	            return [now.getUTCFullYear(), now.getUTCMonth(), now.getUTCDate()];
	        }
	        return [now.getFullYear(), now.getMonth(), now.getDate()];
	    }

	    // convert an array to a date.
	    // the array should mirror the parameters below
	    // note: all values past the year are optional and will default to the lowest possible value.
	    // [year, month, day , hour, minute, second, millisecond]
	    function configFromArray (config) {
	        var i, date, input = [], currentDate, yearToUse;

	        if (config._d) {
	            return;
	        }

	        currentDate = currentDateArray(config);

	        //compute day of the year from weeks and weekdays
	        if (config._w && config._a[DATE] == null && config._a[MONTH] == null) {
	            dayOfYearFromWeekInfo(config);
	        }

	        //if the day of the year is set, figure out what it is
	        if (config._dayOfYear) {
	            yearToUse = defaults(config._a[YEAR], currentDate[YEAR]);

	            if (config._dayOfYear > daysInYear(yearToUse)) {
	                getParsingFlags(config)._overflowDayOfYear = true;
	            }

	            date = createUTCDate(yearToUse, 0, config._dayOfYear);
	            config._a[MONTH] = date.getUTCMonth();
	            config._a[DATE] = date.getUTCDate();
	        }

	        // Default to current date.
	        // * if no year, month, day of month are given, default to today
	        // * if day of month is given, default month and year
	        // * if month is given, default only year
	        // * if year is given, don't default anything
	        for (i = 0; i < 3 && config._a[i] == null; ++i) {
	            config._a[i] = input[i] = currentDate[i];
	        }

	        // Zero out whatever was not defaulted, including time
	        for (; i < 7; i++) {
	            config._a[i] = input[i] = (config._a[i] == null) ? (i === 2 ? 1 : 0) : config._a[i];
	        }

	        // Check for 24:00:00.000
	        if (config._a[HOUR] === 24 &&
	                config._a[MINUTE] === 0 &&
	                config._a[SECOND] === 0 &&
	                config._a[MILLISECOND] === 0) {
	            config._nextDay = true;
	            config._a[HOUR] = 0;
	        }

	        config._d = (config._useUTC ? createUTCDate : createDate).apply(null, input);
	        // Apply timezone offset from input. The actual utcOffset can be changed
	        // with parseZone.
	        if (config._tzm != null) {
	            config._d.setUTCMinutes(config._d.getUTCMinutes() - config._tzm);
	        }

	        if (config._nextDay) {
	            config._a[HOUR] = 24;
	        }
	    }

	    function dayOfYearFromWeekInfo(config) {
	        var w, weekYear, week, weekday, dow, doy, temp;

	        w = config._w;
	        if (w.GG != null || w.W != null || w.E != null) {
	            dow = 1;
	            doy = 4;

	            // TODO: We need to take the current isoWeekYear, but that depends on
	            // how we interpret now (local, utc, fixed offset). So create
	            // a now version of current config (take local/utc/offset flags, and
	            // create now).
	            weekYear = defaults(w.GG, config._a[YEAR], weekOfYear(local__createLocal(), 1, 4).year);
	            week = defaults(w.W, 1);
	            weekday = defaults(w.E, 1);
	        } else {
	            dow = config._locale._week.dow;
	            doy = config._locale._week.doy;

	            weekYear = defaults(w.gg, config._a[YEAR], weekOfYear(local__createLocal(), dow, doy).year);
	            week = defaults(w.w, 1);

	            if (w.d != null) {
	                // weekday -- low day numbers are considered next week
	                weekday = w.d;
	                if (weekday < dow) {
	                    ++week;
	                }
	            } else if (w.e != null) {
	                // local weekday -- counting starts from begining of week
	                weekday = w.e + dow;
	            } else {
	                // default to begining of week
	                weekday = dow;
	            }
	        }
	        temp = dayOfYearFromWeeks(weekYear, week, weekday, doy, dow);

	        config._a[YEAR] = temp.year;
	        config._dayOfYear = temp.dayOfYear;
	    }

	    utils_hooks__hooks.ISO_8601 = function () {};

	    // date from string and format string
	    function configFromStringAndFormat(config) {
	        // TODO: Move this to another part of the creation flow to prevent circular deps
	        if (config._f === utils_hooks__hooks.ISO_8601) {
	            configFromISO(config);
	            return;
	        }

	        config._a = [];
	        getParsingFlags(config).empty = true;

	        // This array is used to make a Date, either with `new Date` or `Date.UTC`
	        var string = '' + config._i,
	            i, parsedInput, tokens, token, skipped,
	            stringLength = string.length,
	            totalParsedInputLength = 0;

	        tokens = expandFormat(config._f, config._locale).match(formattingTokens) || [];

	        for (i = 0; i < tokens.length; i++) {
	            token = tokens[i];
	            parsedInput = (string.match(getParseRegexForToken(token, config)) || [])[0];
	            if (parsedInput) {
	                skipped = string.substr(0, string.indexOf(parsedInput));
	                if (skipped.length > 0) {
	                    getParsingFlags(config).unusedInput.push(skipped);
	                }
	                string = string.slice(string.indexOf(parsedInput) + parsedInput.length);
	                totalParsedInputLength += parsedInput.length;
	            }
	            // don't parse if it's not a known token
	            if (formatTokenFunctions[token]) {
	                if (parsedInput) {
	                    getParsingFlags(config).empty = false;
	                }
	                else {
	                    getParsingFlags(config).unusedTokens.push(token);
	                }
	                addTimeToArrayFromToken(token, parsedInput, config);
	            }
	            else if (config._strict && !parsedInput) {
	                getParsingFlags(config).unusedTokens.push(token);
	            }
	        }

	        // add remaining unparsed input length to the string
	        getParsingFlags(config).charsLeftOver = stringLength - totalParsedInputLength;
	        if (string.length > 0) {
	            getParsingFlags(config).unusedInput.push(string);
	        }

	        // clear _12h flag if hour is <= 12
	        if (getParsingFlags(config).bigHour === true &&
	                config._a[HOUR] <= 12 &&
	                config._a[HOUR] > 0) {
	            getParsingFlags(config).bigHour = undefined;
	        }
	        // handle meridiem
	        config._a[HOUR] = meridiemFixWrap(config._locale, config._a[HOUR], config._meridiem);

	        configFromArray(config);
	        checkOverflow(config);
	    }


	    function meridiemFixWrap (locale, hour, meridiem) {
	        var isPm;

	        if (meridiem == null) {
	            // nothing to do
	            return hour;
	        }
	        if (locale.meridiemHour != null) {
	            return locale.meridiemHour(hour, meridiem);
	        } else if (locale.isPM != null) {
	            // Fallback
	            isPm = locale.isPM(meridiem);
	            if (isPm && hour < 12) {
	                hour += 12;
	            }
	            if (!isPm && hour === 12) {
	                hour = 0;
	            }
	            return hour;
	        } else {
	            // this is not supposed to happen
	            return hour;
	        }
	    }

	    function configFromStringAndArray(config) {
	        var tempConfig,
	            bestMoment,

	            scoreToBeat,
	            i,
	            currentScore;

	        if (config._f.length === 0) {
	            getParsingFlags(config).invalidFormat = true;
	            config._d = new Date(NaN);
	            return;
	        }

	        for (i = 0; i < config._f.length; i++) {
	            currentScore = 0;
	            tempConfig = copyConfig({}, config);
	            if (config._useUTC != null) {
	                tempConfig._useUTC = config._useUTC;
	            }
	            tempConfig._f = config._f[i];
	            configFromStringAndFormat(tempConfig);

	            if (!valid__isValid(tempConfig)) {
	                continue;
	            }

	            // if there is any input that was not parsed add a penalty for that format
	            currentScore += getParsingFlags(tempConfig).charsLeftOver;

	            //or tokens
	            currentScore += getParsingFlags(tempConfig).unusedTokens.length * 10;

	            getParsingFlags(tempConfig).score = currentScore;

	            if (scoreToBeat == null || currentScore < scoreToBeat) {
	                scoreToBeat = currentScore;
	                bestMoment = tempConfig;
	            }
	        }

	        extend(config, bestMoment || tempConfig);
	    }

	    function configFromObject(config) {
	        if (config._d) {
	            return;
	        }

	        var i = normalizeObjectUnits(config._i);
	        config._a = [i.year, i.month, i.day || i.date, i.hour, i.minute, i.second, i.millisecond];

	        configFromArray(config);
	    }

	    function createFromConfig (config) {
	        var res = new Moment(checkOverflow(prepareConfig(config)));
	        if (res._nextDay) {
	            // Adding is smart enough around DST
	            res.add(1, 'd');
	            res._nextDay = undefined;
	        }

	        return res;
	    }

	    function prepareConfig (config) {
	        var input = config._i,
	            format = config._f;

	        config._locale = config._locale || locale_locales__getLocale(config._l);

	        if (input === null || (format === undefined && input === '')) {
	            return valid__createInvalid({nullInput: true});
	        }

	        if (typeof input === 'string') {
	            config._i = input = config._locale.preparse(input);
	        }

	        if (isMoment(input)) {
	            return new Moment(checkOverflow(input));
	        } else if (isArray(format)) {
	            configFromStringAndArray(config);
	        } else if (format) {
	            configFromStringAndFormat(config);
	        } else if (isDate(input)) {
	            config._d = input;
	        } else {
	            configFromInput(config);
	        }

	        return config;
	    }

	    function configFromInput(config) {
	        var input = config._i;
	        if (input === undefined) {
	            config._d = new Date();
	        } else if (isDate(input)) {
	            config._d = new Date(+input);
	        } else if (typeof input === 'string') {
	            configFromString(config);
	        } else if (isArray(input)) {
	            config._a = map(input.slice(0), function (obj) {
	                return parseInt(obj, 10);
	            });
	            configFromArray(config);
	        } else if (typeof(input) === 'object') {
	            configFromObject(config);
	        } else if (typeof(input) === 'number') {
	            // from milliseconds
	            config._d = new Date(input);
	        } else {
	            utils_hooks__hooks.createFromInputFallback(config);
	        }
	    }

	    function createLocalOrUTC (input, format, locale, strict, isUTC) {
	        var c = {};

	        if (typeof(locale) === 'boolean') {
	            strict = locale;
	            locale = undefined;
	        }
	        // object construction must be done this way.
	        // https://github.com/moment/moment/issues/1423
	        c._isAMomentObject = true;
	        c._useUTC = c._isUTC = isUTC;
	        c._l = locale;
	        c._i = input;
	        c._f = format;
	        c._strict = strict;

	        return createFromConfig(c);
	    }

	    function local__createLocal (input, format, locale, strict) {
	        return createLocalOrUTC(input, format, locale, strict, false);
	    }

	    var prototypeMin = deprecate(
	         'moment().min is deprecated, use moment.min instead. https://github.com/moment/moment/issues/1548',
	         function () {
	             var other = local__createLocal.apply(null, arguments);
	             return other < this ? this : other;
	         }
	     );

	    var prototypeMax = deprecate(
	        'moment().max is deprecated, use moment.max instead. https://github.com/moment/moment/issues/1548',
	        function () {
	            var other = local__createLocal.apply(null, arguments);
	            return other > this ? this : other;
	        }
	    );

	    // Pick a moment m from moments so that m[fn](other) is true for all
	    // other. This relies on the function fn to be transitive.
	    //
	    // moments should either be an array of moment objects or an array, whose
	    // first element is an array of moment objects.
	    function pickBy(fn, moments) {
	        var res, i;
	        if (moments.length === 1 && isArray(moments[0])) {
	            moments = moments[0];
	        }
	        if (!moments.length) {
	            return local__createLocal();
	        }
	        res = moments[0];
	        for (i = 1; i < moments.length; ++i) {
	            if (!moments[i].isValid() || moments[i][fn](res)) {
	                res = moments[i];
	            }
	        }
	        return res;
	    }

	    // TODO: Use [].sort instead?
	    function min () {
	        var args = [].slice.call(arguments, 0);

	        return pickBy('isBefore', args);
	    }

	    function max () {
	        var args = [].slice.call(arguments, 0);

	        return pickBy('isAfter', args);
	    }

	    function Duration (duration) {
	        var normalizedInput = normalizeObjectUnits(duration),
	            years = normalizedInput.year || 0,
	            quarters = normalizedInput.quarter || 0,
	            months = normalizedInput.month || 0,
	            weeks = normalizedInput.week || 0,
	            days = normalizedInput.day || 0,
	            hours = normalizedInput.hour || 0,
	            minutes = normalizedInput.minute || 0,
	            seconds = normalizedInput.second || 0,
	            milliseconds = normalizedInput.millisecond || 0;

	        // representation for dateAddRemove
	        this._milliseconds = +milliseconds +
	            seconds * 1e3 + // 1000
	            minutes * 6e4 + // 1000 * 60
	            hours * 36e5; // 1000 * 60 * 60
	        // Because of dateAddRemove treats 24 hours as different from a
	        // day when working around DST, we need to store them separately
	        this._days = +days +
	            weeks * 7;
	        // It is impossible translate months into days without knowing
	        // which months you are are talking about, so we have to store
	        // it separately.
	        this._months = +months +
	            quarters * 3 +
	            years * 12;

	        this._data = {};

	        this._locale = locale_locales__getLocale();

	        this._bubble();
	    }

	    function isDuration (obj) {
	        return obj instanceof Duration;
	    }

	    function offset (token, separator) {
	        addFormatToken(token, 0, 0, function () {
	            var offset = this.utcOffset();
	            var sign = '+';
	            if (offset < 0) {
	                offset = -offset;
	                sign = '-';
	            }
	            return sign + zeroFill(~~(offset / 60), 2) + separator + zeroFill(~~(offset) % 60, 2);
	        });
	    }

	    offset('Z', ':');
	    offset('ZZ', '');

	    // PARSING

	    addRegexToken('Z',  matchOffset);
	    addRegexToken('ZZ', matchOffset);
	    addParseToken(['Z', 'ZZ'], function (input, array, config) {
	        config._useUTC = true;
	        config._tzm = offsetFromString(input);
	    });

	    // HELPERS

	    // timezone chunker
	    // '+10:00' > ['10',  '00']
	    // '-1530'  > ['-15', '30']
	    var chunkOffset = /([\+\-]|\d\d)/gi;

	    function offsetFromString(string) {
	        var matches = ((string || '').match(matchOffset) || []);
	        var chunk   = matches[matches.length - 1] || [];
	        var parts   = (chunk + '').match(chunkOffset) || ['-', 0, 0];
	        var minutes = +(parts[1] * 60) + toInt(parts[2]);

	        return parts[0] === '+' ? minutes : -minutes;
	    }

	    // Return a moment from input, that is local/utc/zone equivalent to model.
	    function cloneWithOffset(input, model) {
	        var res, diff;
	        if (model._isUTC) {
	            res = model.clone();
	            diff = (isMoment(input) || isDate(input) ? +input : +local__createLocal(input)) - (+res);
	            // Use low-level api, because this fn is low-level api.
	            res._d.setTime(+res._d + diff);
	            utils_hooks__hooks.updateOffset(res, false);
	            return res;
	        } else {
	            return local__createLocal(input).local();
	        }
	    }

	    function getDateOffset (m) {
	        // On Firefox.24 Date#getTimezoneOffset returns a floating point.
	        // https://github.com/moment/moment/pull/1871
	        return -Math.round(m._d.getTimezoneOffset() / 15) * 15;
	    }

	    // HOOKS

	    // This function will be called whenever a moment is mutated.
	    // It is intended to keep the offset in sync with the timezone.
	    utils_hooks__hooks.updateOffset = function () {};

	    // MOMENTS

	    // keepLocalTime = true means only change the timezone, without
	    // affecting the local hour. So 5:31:26 +0300 --[utcOffset(2, true)]-->
	    // 5:31:26 +0200 It is possible that 5:31:26 doesn't exist with offset
	    // +0200, so we adjust the time as needed, to be valid.
	    //
	    // Keeping the time actually adds/subtracts (one hour)
	    // from the actual represented time. That is why we call updateOffset
	    // a second time. In case it wants us to change the offset again
	    // _changeInProgress == true case, then we have to adjust, because
	    // there is no such time in the given timezone.
	    function getSetOffset (input, keepLocalTime) {
	        var offset = this._offset || 0,
	            localAdjust;
	        if (input != null) {
	            if (typeof input === 'string') {
	                input = offsetFromString(input);
	            }
	            if (Math.abs(input) < 16) {
	                input = input * 60;
	            }
	            if (!this._isUTC && keepLocalTime) {
	                localAdjust = getDateOffset(this);
	            }
	            this._offset = input;
	            this._isUTC = true;
	            if (localAdjust != null) {
	                this.add(localAdjust, 'm');
	            }
	            if (offset !== input) {
	                if (!keepLocalTime || this._changeInProgress) {
	                    add_subtract__addSubtract(this, create__createDuration(input - offset, 'm'), 1, false);
	                } else if (!this._changeInProgress) {
	                    this._changeInProgress = true;
	                    utils_hooks__hooks.updateOffset(this, true);
	                    this._changeInProgress = null;
	                }
	            }
	            return this;
	        } else {
	            return this._isUTC ? offset : getDateOffset(this);
	        }
	    }

	    function getSetZone (input, keepLocalTime) {
	        if (input != null) {
	            if (typeof input !== 'string') {
	                input = -input;
	            }

	            this.utcOffset(input, keepLocalTime);

	            return this;
	        } else {
	            return -this.utcOffset();
	        }
	    }

	    function setOffsetToUTC (keepLocalTime) {
	        return this.utcOffset(0, keepLocalTime);
	    }

	    function setOffsetToLocal (keepLocalTime) {
	        if (this._isUTC) {
	            this.utcOffset(0, keepLocalTime);
	            this._isUTC = false;

	            if (keepLocalTime) {
	                this.subtract(getDateOffset(this), 'm');
	            }
	        }
	        return this;
	    }

	    function setOffsetToParsedOffset () {
	        if (this._tzm) {
	            this.utcOffset(this._tzm);
	        } else if (typeof this._i === 'string') {
	            this.utcOffset(offsetFromString(this._i));
	        }
	        return this;
	    }

	    function hasAlignedHourOffset (input) {
	        input = input ? local__createLocal(input).utcOffset() : 0;

	        return (this.utcOffset() - input) % 60 === 0;
	    }

	    function isDaylightSavingTime () {
	        return (
	            this.utcOffset() > this.clone().month(0).utcOffset() ||
	            this.utcOffset() > this.clone().month(5).utcOffset()
	        );
	    }

	    function isDaylightSavingTimeShifted () {
	        if (typeof this._isDSTShifted !== 'undefined') {
	            return this._isDSTShifted;
	        }

	        var c = {};

	        copyConfig(c, this);
	        c = prepareConfig(c);

	        if (c._a) {
	            var other = c._isUTC ? create_utc__createUTC(c._a) : local__createLocal(c._a);
	            this._isDSTShifted = this.isValid() &&
	                compareArrays(c._a, other.toArray()) > 0;
	        } else {
	            this._isDSTShifted = false;
	        }

	        return this._isDSTShifted;
	    }

	    function isLocal () {
	        return !this._isUTC;
	    }

	    function isUtcOffset () {
	        return this._isUTC;
	    }

	    function isUtc () {
	        return this._isUTC && this._offset === 0;
	    }

	    var aspNetRegex = /(\-)?(?:(\d*)\.)?(\d+)\:(\d+)(?:\:(\d+)\.?(\d{3})?)?/;

	    // from http://docs.closure-library.googlecode.com/git/closure_goog_date_date.js.source.html
	    // somewhat more in line with 4.4.3.2 2004 spec, but allows decimal anywhere
	    var create__isoRegex = /^(-)?P(?:(?:([0-9,.]*)Y)?(?:([0-9,.]*)M)?(?:([0-9,.]*)D)?(?:T(?:([0-9,.]*)H)?(?:([0-9,.]*)M)?(?:([0-9,.]*)S)?)?|([0-9,.]*)W)$/;

	    function create__createDuration (input, key) {
	        var duration = input,
	            // matching against regexp is expensive, do it on demand
	            match = null,
	            sign,
	            ret,
	            diffRes;

	        if (isDuration(input)) {
	            duration = {
	                ms : input._milliseconds,
	                d  : input._days,
	                M  : input._months
	            };
	        } else if (typeof input === 'number') {
	            duration = {};
	            if (key) {
	                duration[key] = input;
	            } else {
	                duration.milliseconds = input;
	            }
	        } else if (!!(match = aspNetRegex.exec(input))) {
	            sign = (match[1] === '-') ? -1 : 1;
	            duration = {
	                y  : 0,
	                d  : toInt(match[DATE])        * sign,
	                h  : toInt(match[HOUR])        * sign,
	                m  : toInt(match[MINUTE])      * sign,
	                s  : toInt(match[SECOND])      * sign,
	                ms : toInt(match[MILLISECOND]) * sign
	            };
	        } else if (!!(match = create__isoRegex.exec(input))) {
	            sign = (match[1] === '-') ? -1 : 1;
	            duration = {
	                y : parseIso(match[2], sign),
	                M : parseIso(match[3], sign),
	                d : parseIso(match[4], sign),
	                h : parseIso(match[5], sign),
	                m : parseIso(match[6], sign),
	                s : parseIso(match[7], sign),
	                w : parseIso(match[8], sign)
	            };
	        } else if (duration == null) {// checks for null or undefined
	            duration = {};
	        } else if (typeof duration === 'object' && ('from' in duration || 'to' in duration)) {
	            diffRes = momentsDifference(local__createLocal(duration.from), local__createLocal(duration.to));

	            duration = {};
	            duration.ms = diffRes.milliseconds;
	            duration.M = diffRes.months;
	        }

	        ret = new Duration(duration);

	        if (isDuration(input) && hasOwnProp(input, '_locale')) {
	            ret._locale = input._locale;
	        }

	        return ret;
	    }

	    create__createDuration.fn = Duration.prototype;

	    function parseIso (inp, sign) {
	        // We'd normally use ~~inp for this, but unfortunately it also
	        // converts floats to ints.
	        // inp may be undefined, so careful calling replace on it.
	        var res = inp && parseFloat(inp.replace(',', '.'));
	        // apply sign while we're at it
	        return (isNaN(res) ? 0 : res) * sign;
	    }

	    function positiveMomentsDifference(base, other) {
	        var res = {milliseconds: 0, months: 0};

	        res.months = other.month() - base.month() +
	            (other.year() - base.year()) * 12;
	        if (base.clone().add(res.months, 'M').isAfter(other)) {
	            --res.months;
	        }

	        res.milliseconds = +other - +(base.clone().add(res.months, 'M'));

	        return res;
	    }

	    function momentsDifference(base, other) {
	        var res;
	        other = cloneWithOffset(other, base);
	        if (base.isBefore(other)) {
	            res = positiveMomentsDifference(base, other);
	        } else {
	            res = positiveMomentsDifference(other, base);
	            res.milliseconds = -res.milliseconds;
	            res.months = -res.months;
	        }

	        return res;
	    }

	    function createAdder(direction, name) {
	        return function (val, period) {
	            var dur, tmp;
	            //invert the arguments, but complain about it
	            if (period !== null && !isNaN(+period)) {
	                deprecateSimple(name, 'moment().' + name  + '(period, number) is deprecated. Please use moment().' + name + '(number, period).');
	                tmp = val; val = period; period = tmp;
	            }

	            val = typeof val === 'string' ? +val : val;
	            dur = create__createDuration(val, period);
	            add_subtract__addSubtract(this, dur, direction);
	            return this;
	        };
	    }

	    function add_subtract__addSubtract (mom, duration, isAdding, updateOffset) {
	        var milliseconds = duration._milliseconds,
	            days = duration._days,
	            months = duration._months;
	        updateOffset = updateOffset == null ? true : updateOffset;

	        if (milliseconds) {
	            mom._d.setTime(+mom._d + milliseconds * isAdding);
	        }
	        if (days) {
	            get_set__set(mom, 'Date', get_set__get(mom, 'Date') + days * isAdding);
	        }
	        if (months) {
	            setMonth(mom, get_set__get(mom, 'Month') + months * isAdding);
	        }
	        if (updateOffset) {
	            utils_hooks__hooks.updateOffset(mom, days || months);
	        }
	    }

	    var add_subtract__add      = createAdder(1, 'add');
	    var add_subtract__subtract = createAdder(-1, 'subtract');

	    function moment_calendar__calendar (time, formats) {
	        // We want to compare the start of today, vs this.
	        // Getting start-of-today depends on whether we're local/utc/offset or not.
	        var now = time || local__createLocal(),
	            sod = cloneWithOffset(now, this).startOf('day'),
	            diff = this.diff(sod, 'days', true),
	            format = diff < -6 ? 'sameElse' :
	                diff < -1 ? 'lastWeek' :
	                diff < 0 ? 'lastDay' :
	                diff < 1 ? 'sameDay' :
	                diff < 2 ? 'nextDay' :
	                diff < 7 ? 'nextWeek' : 'sameElse';
	        return this.format(formats && formats[format] || this.localeData().calendar(format, this, local__createLocal(now)));
	    }

	    function clone () {
	        return new Moment(this);
	    }

	    function isAfter (input, units) {
	        var inputMs;
	        units = normalizeUnits(typeof units !== 'undefined' ? units : 'millisecond');
	        if (units === 'millisecond') {
	            input = isMoment(input) ? input : local__createLocal(input);
	            return +this > +input;
	        } else {
	            inputMs = isMoment(input) ? +input : +local__createLocal(input);
	            return inputMs < +this.clone().startOf(units);
	        }
	    }

	    function isBefore (input, units) {
	        var inputMs;
	        units = normalizeUnits(typeof units !== 'undefined' ? units : 'millisecond');
	        if (units === 'millisecond') {
	            input = isMoment(input) ? input : local__createLocal(input);
	            return +this < +input;
	        } else {
	            inputMs = isMoment(input) ? +input : +local__createLocal(input);
	            return +this.clone().endOf(units) < inputMs;
	        }
	    }

	    function isBetween (from, to, units) {
	        return this.isAfter(from, units) && this.isBefore(to, units);
	    }

	    function isSame (input, units) {
	        var inputMs;
	        units = normalizeUnits(units || 'millisecond');
	        if (units === 'millisecond') {
	            input = isMoment(input) ? input : local__createLocal(input);
	            return +this === +input;
	        } else {
	            inputMs = +local__createLocal(input);
	            return +(this.clone().startOf(units)) <= inputMs && inputMs <= +(this.clone().endOf(units));
	        }
	    }

	    function diff (input, units, asFloat) {
	        var that = cloneWithOffset(input, this),
	            zoneDelta = (that.utcOffset() - this.utcOffset()) * 6e4,
	            delta, output;

	        units = normalizeUnits(units);

	        if (units === 'year' || units === 'month' || units === 'quarter') {
	            output = monthDiff(this, that);
	            if (units === 'quarter') {
	                output = output / 3;
	            } else if (units === 'year') {
	                output = output / 12;
	            }
	        } else {
	            delta = this - that;
	            output = units === 'second' ? delta / 1e3 : // 1000
	                units === 'minute' ? delta / 6e4 : // 1000 * 60
	                units === 'hour' ? delta / 36e5 : // 1000 * 60 * 60
	                units === 'day' ? (delta - zoneDelta) / 864e5 : // 1000 * 60 * 60 * 24, negate dst
	                units === 'week' ? (delta - zoneDelta) / 6048e5 : // 1000 * 60 * 60 * 24 * 7, negate dst
	                delta;
	        }
	        return asFloat ? output : absFloor(output);
	    }

	    function monthDiff (a, b) {
	        // difference in months
	        var wholeMonthDiff = ((b.year() - a.year()) * 12) + (b.month() - a.month()),
	            // b is in (anchor - 1 month, anchor + 1 month)
	            anchor = a.clone().add(wholeMonthDiff, 'months'),
	            anchor2, adjust;

	        if (b - anchor < 0) {
	            anchor2 = a.clone().add(wholeMonthDiff - 1, 'months');
	            // linear across the month
	            adjust = (b - anchor) / (anchor - anchor2);
	        } else {
	            anchor2 = a.clone().add(wholeMonthDiff + 1, 'months');
	            // linear across the month
	            adjust = (b - anchor) / (anchor2 - anchor);
	        }

	        return -(wholeMonthDiff + adjust);
	    }

	    utils_hooks__hooks.defaultFormat = 'YYYY-MM-DDTHH:mm:ssZ';

	    function toString () {
	        return this.clone().locale('en').format('ddd MMM DD YYYY HH:mm:ss [GMT]ZZ');
	    }

	    function moment_format__toISOString () {
	        var m = this.clone().utc();
	        if (0 < m.year() && m.year() <= 9999) {
	            if ('function' === typeof Date.prototype.toISOString) {
	                // native implementation is ~50x faster, use it when we can
	                return this.toDate().toISOString();
	            } else {
	                return formatMoment(m, 'YYYY-MM-DD[T]HH:mm:ss.SSS[Z]');
	            }
	        } else {
	            return formatMoment(m, 'YYYYYY-MM-DD[T]HH:mm:ss.SSS[Z]');
	        }
	    }

	    function format (inputString) {
	        var output = formatMoment(this, inputString || utils_hooks__hooks.defaultFormat);
	        return this.localeData().postformat(output);
	    }

	    function from (time, withoutSuffix) {
	        if (!this.isValid()) {
	            return this.localeData().invalidDate();
	        }
	        return create__createDuration({to: this, from: time}).locale(this.locale()).humanize(!withoutSuffix);
	    }

	    function fromNow (withoutSuffix) {
	        return this.from(local__createLocal(), withoutSuffix);
	    }

	    function to (time, withoutSuffix) {
	        if (!this.isValid()) {
	            return this.localeData().invalidDate();
	        }
	        return create__createDuration({from: this, to: time}).locale(this.locale()).humanize(!withoutSuffix);
	    }

	    function toNow (withoutSuffix) {
	        return this.to(local__createLocal(), withoutSuffix);
	    }

	    function locale (key) {
	        var newLocaleData;

	        if (key === undefined) {
	            return this._locale._abbr;
	        } else {
	            newLocaleData = locale_locales__getLocale(key);
	            if (newLocaleData != null) {
	                this._locale = newLocaleData;
	            }
	            return this;
	        }
	    }

	    var lang = deprecate(
	        'moment().lang() is deprecated. Instead, use moment().localeData() to get the language configuration. Use moment().locale() to change languages.',
	        function (key) {
	            if (key === undefined) {
	                return this.localeData();
	            } else {
	                return this.locale(key);
	            }
	        }
	    );

	    function localeData () {
	        return this._locale;
	    }

	    function startOf (units) {
	        units = normalizeUnits(units);
	        // the following switch intentionally omits break keywords
	        // to utilize falling through the cases.
	        switch (units) {
	        case 'year':
	            this.month(0);
	            /* falls through */
	        case 'quarter':
	        case 'month':
	            this.date(1);
	            /* falls through */
	        case 'week':
	        case 'isoWeek':
	        case 'day':
	            this.hours(0);
	            /* falls through */
	        case 'hour':
	            this.minutes(0);
	            /* falls through */
	        case 'minute':
	            this.seconds(0);
	            /* falls through */
	        case 'second':
	            this.milliseconds(0);
	        }

	        // weeks are a special case
	        if (units === 'week') {
	            this.weekday(0);
	        }
	        if (units === 'isoWeek') {
	            this.isoWeekday(1);
	        }

	        // quarters are also special
	        if (units === 'quarter') {
	            this.month(Math.floor(this.month() / 3) * 3);
	        }

	        return this;
	    }

	    function endOf (units) {
	        units = normalizeUnits(units);
	        if (units === undefined || units === 'millisecond') {
	            return this;
	        }
	        return this.startOf(units).add(1, (units === 'isoWeek' ? 'week' : units)).subtract(1, 'ms');
	    }

	    function to_type__valueOf () {
	        return +this._d - ((this._offset || 0) * 60000);
	    }

	    function unix () {
	        return Math.floor(+this / 1000);
	    }

	    function toDate () {
	        return this._offset ? new Date(+this) : this._d;
	    }

	    function toArray () {
	        var m = this;
	        return [m.year(), m.month(), m.date(), m.hour(), m.minute(), m.second(), m.millisecond()];
	    }

	    function toObject () {
	        var m = this;
	        return {
	            years: m.year(),
	            months: m.month(),
	            date: m.date(),
	            hours: m.hours(),
	            minutes: m.minutes(),
	            seconds: m.seconds(),
	            milliseconds: m.milliseconds()
	        };
	    }

	    function moment_valid__isValid () {
	        return valid__isValid(this);
	    }

	    function parsingFlags () {
	        return extend({}, getParsingFlags(this));
	    }

	    function invalidAt () {
	        return getParsingFlags(this).overflow;
	    }

	    addFormatToken(0, ['gg', 2], 0, function () {
	        return this.weekYear() % 100;
	    });

	    addFormatToken(0, ['GG', 2], 0, function () {
	        return this.isoWeekYear() % 100;
	    });

	    function addWeekYearFormatToken (token, getter) {
	        addFormatToken(0, [token, token.length], 0, getter);
	    }

	    addWeekYearFormatToken('gggg',     'weekYear');
	    addWeekYearFormatToken('ggggg',    'weekYear');
	    addWeekYearFormatToken('GGGG',  'isoWeekYear');
	    addWeekYearFormatToken('GGGGG', 'isoWeekYear');

	    // ALIASES

	    addUnitAlias('weekYear', 'gg');
	    addUnitAlias('isoWeekYear', 'GG');

	    // PARSING

	    addRegexToken('G',      matchSigned);
	    addRegexToken('g',      matchSigned);
	    addRegexToken('GG',     match1to2, match2);
	    addRegexToken('gg',     match1to2, match2);
	    addRegexToken('GGGG',   match1to4, match4);
	    addRegexToken('gggg',   match1to4, match4);
	    addRegexToken('GGGGG',  match1to6, match6);
	    addRegexToken('ggggg',  match1to6, match6);

	    addWeekParseToken(['gggg', 'ggggg', 'GGGG', 'GGGGG'], function (input, week, config, token) {
	        week[token.substr(0, 2)] = toInt(input);
	    });

	    addWeekParseToken(['gg', 'GG'], function (input, week, config, token) {
	        week[token] = utils_hooks__hooks.parseTwoDigitYear(input);
	    });

	    // HELPERS

	    function weeksInYear(year, dow, doy) {
	        return weekOfYear(local__createLocal([year, 11, 31 + dow - doy]), dow, doy).week;
	    }

	    // MOMENTS

	    function getSetWeekYear (input) {
	        var year = weekOfYear(this, this.localeData()._week.dow, this.localeData()._week.doy).year;
	        return input == null ? year : this.add((input - year), 'y');
	    }

	    function getSetISOWeekYear (input) {
	        var year = weekOfYear(this, 1, 4).year;
	        return input == null ? year : this.add((input - year), 'y');
	    }

	    function getISOWeeksInYear () {
	        return weeksInYear(this.year(), 1, 4);
	    }

	    function getWeeksInYear () {
	        var weekInfo = this.localeData()._week;
	        return weeksInYear(this.year(), weekInfo.dow, weekInfo.doy);
	    }

	    addFormatToken('Q', 0, 0, 'quarter');

	    // ALIASES

	    addUnitAlias('quarter', 'Q');

	    // PARSING

	    addRegexToken('Q', match1);
	    addParseToken('Q', function (input, array) {
	        array[MONTH] = (toInt(input) - 1) * 3;
	    });

	    // MOMENTS

	    function getSetQuarter (input) {
	        return input == null ? Math.ceil((this.month() + 1) / 3) : this.month((input - 1) * 3 + this.month() % 3);
	    }

	    addFormatToken('D', ['DD', 2], 'Do', 'date');

	    // ALIASES

	    addUnitAlias('date', 'D');

	    // PARSING

	    addRegexToken('D',  match1to2);
	    addRegexToken('DD', match1to2, match2);
	    addRegexToken('Do', function (isStrict, locale) {
	        return isStrict ? locale._ordinalParse : locale._ordinalParseLenient;
	    });

	    addParseToken(['D', 'DD'], DATE);
	    addParseToken('Do', function (input, array) {
	        array[DATE] = toInt(input.match(match1to2)[0], 10);
	    });

	    // MOMENTS

	    var getSetDayOfMonth = makeGetSet('Date', true);

	    addFormatToken('d', 0, 'do', 'day');

	    addFormatToken('dd', 0, 0, function (format) {
	        return this.localeData().weekdaysMin(this, format);
	    });

	    addFormatToken('ddd', 0, 0, function (format) {
	        return this.localeData().weekdaysShort(this, format);
	    });

	    addFormatToken('dddd', 0, 0, function (format) {
	        return this.localeData().weekdays(this, format);
	    });

	    addFormatToken('e', 0, 0, 'weekday');
	    addFormatToken('E', 0, 0, 'isoWeekday');

	    // ALIASES

	    addUnitAlias('day', 'd');
	    addUnitAlias('weekday', 'e');
	    addUnitAlias('isoWeekday', 'E');

	    // PARSING

	    addRegexToken('d',    match1to2);
	    addRegexToken('e',    match1to2);
	    addRegexToken('E',    match1to2);
	    addRegexToken('dd',   matchWord);
	    addRegexToken('ddd',  matchWord);
	    addRegexToken('dddd', matchWord);

	    addWeekParseToken(['dd', 'ddd', 'dddd'], function (input, week, config) {
	        var weekday = config._locale.weekdaysParse(input);
	        // if we didn't get a weekday name, mark the date as invalid
	        if (weekday != null) {
	            week.d = weekday;
	        } else {
	            getParsingFlags(config).invalidWeekday = input;
	        }
	    });

	    addWeekParseToken(['d', 'e', 'E'], function (input, week, config, token) {
	        week[token] = toInt(input);
	    });

	    // HELPERS

	    function parseWeekday(input, locale) {
	        if (typeof input !== 'string') {
	            return input;
	        }

	        if (!isNaN(input)) {
	            return parseInt(input, 10);
	        }

	        input = locale.weekdaysParse(input);
	        if (typeof input === 'number') {
	            return input;
	        }

	        return null;
	    }

	    // LOCALES

	    var defaultLocaleWeekdays = 'Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday'.split('_');
	    function localeWeekdays (m) {
	        return this._weekdays[m.day()];
	    }

	    var defaultLocaleWeekdaysShort = 'Sun_Mon_Tue_Wed_Thu_Fri_Sat'.split('_');
	    function localeWeekdaysShort (m) {
	        return this._weekdaysShort[m.day()];
	    }

	    var defaultLocaleWeekdaysMin = 'Su_Mo_Tu_We_Th_Fr_Sa'.split('_');
	    function localeWeekdaysMin (m) {
	        return this._weekdaysMin[m.day()];
	    }

	    function localeWeekdaysParse (weekdayName) {
	        var i, mom, regex;

	        this._weekdaysParse = this._weekdaysParse || [];

	        for (i = 0; i < 7; i++) {
	            // make the regex if we don't have it already
	            if (!this._weekdaysParse[i]) {
	                mom = local__createLocal([2000, 1]).day(i);
	                regex = '^' + this.weekdays(mom, '') + '|^' + this.weekdaysShort(mom, '') + '|^' + this.weekdaysMin(mom, '');
	                this._weekdaysParse[i] = new RegExp(regex.replace('.', ''), 'i');
	            }
	            // test the regex
	            if (this._weekdaysParse[i].test(weekdayName)) {
	                return i;
	            }
	        }
	    }

	    // MOMENTS

	    function getSetDayOfWeek (input) {
	        var day = this._isUTC ? this._d.getUTCDay() : this._d.getDay();
	        if (input != null) {
	            input = parseWeekday(input, this.localeData());
	            return this.add(input - day, 'd');
	        } else {
	            return day;
	        }
	    }

	    function getSetLocaleDayOfWeek (input) {
	        var weekday = (this.day() + 7 - this.localeData()._week.dow) % 7;
	        return input == null ? weekday : this.add(input - weekday, 'd');
	    }

	    function getSetISODayOfWeek (input) {
	        // behaves the same as moment#day except
	        // as a getter, returns 7 instead of 0 (1-7 range instead of 0-6)
	        // as a setter, sunday should belong to the previous week.
	        return input == null ? this.day() || 7 : this.day(this.day() % 7 ? input : input - 7);
	    }

	    addFormatToken('H', ['HH', 2], 0, 'hour');
	    addFormatToken('h', ['hh', 2], 0, function () {
	        return this.hours() % 12 || 12;
	    });

	    function meridiem (token, lowercase) {
	        addFormatToken(token, 0, 0, function () {
	            return this.localeData().meridiem(this.hours(), this.minutes(), lowercase);
	        });
	    }

	    meridiem('a', true);
	    meridiem('A', false);

	    // ALIASES

	    addUnitAlias('hour', 'h');

	    // PARSING

	    function matchMeridiem (isStrict, locale) {
	        return locale._meridiemParse;
	    }

	    addRegexToken('a',  matchMeridiem);
	    addRegexToken('A',  matchMeridiem);
	    addRegexToken('H',  match1to2);
	    addRegexToken('h',  match1to2);
	    addRegexToken('HH', match1to2, match2);
	    addRegexToken('hh', match1to2, match2);

	    addParseToken(['H', 'HH'], HOUR);
	    addParseToken(['a', 'A'], function (input, array, config) {
	        config._isPm = config._locale.isPM(input);
	        config._meridiem = input;
	    });
	    addParseToken(['h', 'hh'], function (input, array, config) {
	        array[HOUR] = toInt(input);
	        getParsingFlags(config).bigHour = true;
	    });

	    // LOCALES

	    function localeIsPM (input) {
	        // IE8 Quirks Mode & IE7 Standards Mode do not allow accessing strings like arrays
	        // Using charAt should be more compatible.
	        return ((input + '').toLowerCase().charAt(0) === 'p');
	    }

	    var defaultLocaleMeridiemParse = /[ap]\.?m?\.?/i;
	    function localeMeridiem (hours, minutes, isLower) {
	        if (hours > 11) {
	            return isLower ? 'pm' : 'PM';
	        } else {
	            return isLower ? 'am' : 'AM';
	        }
	    }


	    // MOMENTS

	    // Setting the hour should keep the time, because the user explicitly
	    // specified which hour he wants. So trying to maintain the same hour (in
	    // a new timezone) makes sense. Adding/subtracting hours does not follow
	    // this rule.
	    var getSetHour = makeGetSet('Hours', true);

	    addFormatToken('m', ['mm', 2], 0, 'minute');

	    // ALIASES

	    addUnitAlias('minute', 'm');

	    // PARSING

	    addRegexToken('m',  match1to2);
	    addRegexToken('mm', match1to2, match2);
	    addParseToken(['m', 'mm'], MINUTE);

	    // MOMENTS

	    var getSetMinute = makeGetSet('Minutes', false);

	    addFormatToken('s', ['ss', 2], 0, 'second');

	    // ALIASES

	    addUnitAlias('second', 's');

	    // PARSING

	    addRegexToken('s',  match1to2);
	    addRegexToken('ss', match1to2, match2);
	    addParseToken(['s', 'ss'], SECOND);

	    // MOMENTS

	    var getSetSecond = makeGetSet('Seconds', false);

	    addFormatToken('S', 0, 0, function () {
	        return ~~(this.millisecond() / 100);
	    });

	    addFormatToken(0, ['SS', 2], 0, function () {
	        return ~~(this.millisecond() / 10);
	    });

	    addFormatToken(0, ['SSS', 3], 0, 'millisecond');
	    addFormatToken(0, ['SSSS', 4], 0, function () {
	        return this.millisecond() * 10;
	    });
	    addFormatToken(0, ['SSSSS', 5], 0, function () {
	        return this.millisecond() * 100;
	    });
	    addFormatToken(0, ['SSSSSS', 6], 0, function () {
	        return this.millisecond() * 1000;
	    });
	    addFormatToken(0, ['SSSSSSS', 7], 0, function () {
	        return this.millisecond() * 10000;
	    });
	    addFormatToken(0, ['SSSSSSSS', 8], 0, function () {
	        return this.millisecond() * 100000;
	    });
	    addFormatToken(0, ['SSSSSSSSS', 9], 0, function () {
	        return this.millisecond() * 1000000;
	    });


	    // ALIASES

	    addUnitAlias('millisecond', 'ms');

	    // PARSING

	    addRegexToken('S',    match1to3, match1);
	    addRegexToken('SS',   match1to3, match2);
	    addRegexToken('SSS',  match1to3, match3);

	    var token;
	    for (token = 'SSSS'; token.length <= 9; token += 'S') {
	        addRegexToken(token, matchUnsigned);
	    }

	    function parseMs(input, array) {
	        array[MILLISECOND] = toInt(('0.' + input) * 1000);
	    }

	    for (token = 'S'; token.length <= 9; token += 'S') {
	        addParseToken(token, parseMs);
	    }
	    // MOMENTS

	    var getSetMillisecond = makeGetSet('Milliseconds', false);

	    addFormatToken('z',  0, 0, 'zoneAbbr');
	    addFormatToken('zz', 0, 0, 'zoneName');

	    // MOMENTS

	    function getZoneAbbr () {
	        return this._isUTC ? 'UTC' : '';
	    }

	    function getZoneName () {
	        return this._isUTC ? 'Coordinated Universal Time' : '';
	    }

	    var momentPrototype__proto = Moment.prototype;

	    momentPrototype__proto.add          = add_subtract__add;
	    momentPrototype__proto.calendar     = moment_calendar__calendar;
	    momentPrototype__proto.clone        = clone;
	    momentPrototype__proto.diff         = diff;
	    momentPrototype__proto.endOf        = endOf;
	    momentPrototype__proto.format       = format;
	    momentPrototype__proto.from         = from;
	    momentPrototype__proto.fromNow      = fromNow;
	    momentPrototype__proto.to           = to;
	    momentPrototype__proto.toNow        = toNow;
	    momentPrototype__proto.get          = getSet;
	    momentPrototype__proto.invalidAt    = invalidAt;
	    momentPrototype__proto.isAfter      = isAfter;
	    momentPrototype__proto.isBefore     = isBefore;
	    momentPrototype__proto.isBetween    = isBetween;
	    momentPrototype__proto.isSame       = isSame;
	    momentPrototype__proto.isValid      = moment_valid__isValid;
	    momentPrototype__proto.lang         = lang;
	    momentPrototype__proto.locale       = locale;
	    momentPrototype__proto.localeData   = localeData;
	    momentPrototype__proto.max          = prototypeMax;
	    momentPrototype__proto.min          = prototypeMin;
	    momentPrototype__proto.parsingFlags = parsingFlags;
	    momentPrototype__proto.set          = getSet;
	    momentPrototype__proto.startOf      = startOf;
	    momentPrototype__proto.subtract     = add_subtract__subtract;
	    momentPrototype__proto.toArray      = toArray;
	    momentPrototype__proto.toObject     = toObject;
	    momentPrototype__proto.toDate       = toDate;
	    momentPrototype__proto.toISOString  = moment_format__toISOString;
	    momentPrototype__proto.toJSON       = moment_format__toISOString;
	    momentPrototype__proto.toString     = toString;
	    momentPrototype__proto.unix         = unix;
	    momentPrototype__proto.valueOf      = to_type__valueOf;

	    // Year
	    momentPrototype__proto.year       = getSetYear;
	    momentPrototype__proto.isLeapYear = getIsLeapYear;

	    // Week Year
	    momentPrototype__proto.weekYear    = getSetWeekYear;
	    momentPrototype__proto.isoWeekYear = getSetISOWeekYear;

	    // Quarter
	    momentPrototype__proto.quarter = momentPrototype__proto.quarters = getSetQuarter;

	    // Month
	    momentPrototype__proto.month       = getSetMonth;
	    momentPrototype__proto.daysInMonth = getDaysInMonth;

	    // Week
	    momentPrototype__proto.week           = momentPrototype__proto.weeks        = getSetWeek;
	    momentPrototype__proto.isoWeek        = momentPrototype__proto.isoWeeks     = getSetISOWeek;
	    momentPrototype__proto.weeksInYear    = getWeeksInYear;
	    momentPrototype__proto.isoWeeksInYear = getISOWeeksInYear;

	    // Day
	    momentPrototype__proto.date       = getSetDayOfMonth;
	    momentPrototype__proto.day        = momentPrototype__proto.days             = getSetDayOfWeek;
	    momentPrototype__proto.weekday    = getSetLocaleDayOfWeek;
	    momentPrototype__proto.isoWeekday = getSetISODayOfWeek;
	    momentPrototype__proto.dayOfYear  = getSetDayOfYear;

	    // Hour
	    momentPrototype__proto.hour = momentPrototype__proto.hours = getSetHour;

	    // Minute
	    momentPrototype__proto.minute = momentPrototype__proto.minutes = getSetMinute;

	    // Second
	    momentPrototype__proto.second = momentPrototype__proto.seconds = getSetSecond;

	    // Millisecond
	    momentPrototype__proto.millisecond = momentPrototype__proto.milliseconds = getSetMillisecond;

	    // Offset
	    momentPrototype__proto.utcOffset            = getSetOffset;
	    momentPrototype__proto.utc                  = setOffsetToUTC;
	    momentPrototype__proto.local                = setOffsetToLocal;
	    momentPrototype__proto.parseZone            = setOffsetToParsedOffset;
	    momentPrototype__proto.hasAlignedHourOffset = hasAlignedHourOffset;
	    momentPrototype__proto.isDST                = isDaylightSavingTime;
	    momentPrototype__proto.isDSTShifted         = isDaylightSavingTimeShifted;
	    momentPrototype__proto.isLocal              = isLocal;
	    momentPrototype__proto.isUtcOffset          = isUtcOffset;
	    momentPrototype__proto.isUtc                = isUtc;
	    momentPrototype__proto.isUTC                = isUtc;

	    // Timezone
	    momentPrototype__proto.zoneAbbr = getZoneAbbr;
	    momentPrototype__proto.zoneName = getZoneName;

	    // Deprecations
	    momentPrototype__proto.dates  = deprecate('dates accessor is deprecated. Use date instead.', getSetDayOfMonth);
	    momentPrototype__proto.months = deprecate('months accessor is deprecated. Use month instead', getSetMonth);
	    momentPrototype__proto.years  = deprecate('years accessor is deprecated. Use year instead', getSetYear);
	    momentPrototype__proto.zone   = deprecate('moment().zone is deprecated, use moment().utcOffset instead. https://github.com/moment/moment/issues/1779', getSetZone);

	    var momentPrototype = momentPrototype__proto;

	    function moment__createUnix (input) {
	        return local__createLocal(input * 1000);
	    }

	    function moment__createInZone () {
	        return local__createLocal.apply(null, arguments).parseZone();
	    }

	    var defaultCalendar = {
	        sameDay : '[Today at] LT',
	        nextDay : '[Tomorrow at] LT',
	        nextWeek : 'dddd [at] LT',
	        lastDay : '[Yesterday at] LT',
	        lastWeek : '[Last] dddd [at] LT',
	        sameElse : 'L'
	    };

	    function locale_calendar__calendar (key, mom, now) {
	        var output = this._calendar[key];
	        return typeof output === 'function' ? output.call(mom, now) : output;
	    }

	    var defaultLongDateFormat = {
	        LTS  : 'h:mm:ss A',
	        LT   : 'h:mm A',
	        L    : 'MM/DD/YYYY',
	        LL   : 'MMMM D, YYYY',
	        LLL  : 'MMMM D, YYYY h:mm A',
	        LLLL : 'dddd, MMMM D, YYYY h:mm A'
	    };

	    function longDateFormat (key) {
	        var format = this._longDateFormat[key],
	            formatUpper = this._longDateFormat[key.toUpperCase()];

	        if (format || !formatUpper) {
	            return format;
	        }

	        this._longDateFormat[key] = formatUpper.replace(/MMMM|MM|DD|dddd/g, function (val) {
	            return val.slice(1);
	        });

	        return this._longDateFormat[key];
	    }

	    var defaultInvalidDate = 'Invalid date';

	    function invalidDate () {
	        return this._invalidDate;
	    }

	    var defaultOrdinal = '%d';
	    var defaultOrdinalParse = /\d{1,2}/;

	    function ordinal (number) {
	        return this._ordinal.replace('%d', number);
	    }

	    function preParsePostFormat (string) {
	        return string;
	    }

	    var defaultRelativeTime = {
	        future : 'in %s',
	        past   : '%s ago',
	        s  : 'a few seconds',
	        m  : 'a minute',
	        mm : '%d minutes',
	        h  : 'an hour',
	        hh : '%d hours',
	        d  : 'a day',
	        dd : '%d days',
	        M  : 'a month',
	        MM : '%d months',
	        y  : 'a year',
	        yy : '%d years'
	    };

	    function relative__relativeTime (number, withoutSuffix, string, isFuture) {
	        var output = this._relativeTime[string];
	        return (typeof output === 'function') ?
	            output(number, withoutSuffix, string, isFuture) :
	            output.replace(/%d/i, number);
	    }

	    function pastFuture (diff, output) {
	        var format = this._relativeTime[diff > 0 ? 'future' : 'past'];
	        return typeof format === 'function' ? format(output) : format.replace(/%s/i, output);
	    }

	    function locale_set__set (config) {
	        var prop, i;
	        for (i in config) {
	            prop = config[i];
	            if (typeof prop === 'function') {
	                this[i] = prop;
	            } else {
	                this['_' + i] = prop;
	            }
	        }
	        // Lenient ordinal parsing accepts just a number in addition to
	        // number + (possibly) stuff coming from _ordinalParseLenient.
	        this._ordinalParseLenient = new RegExp(this._ordinalParse.source + '|' + (/\d{1,2}/).source);
	    }

	    var prototype__proto = Locale.prototype;

	    prototype__proto._calendar       = defaultCalendar;
	    prototype__proto.calendar        = locale_calendar__calendar;
	    prototype__proto._longDateFormat = defaultLongDateFormat;
	    prototype__proto.longDateFormat  = longDateFormat;
	    prototype__proto._invalidDate    = defaultInvalidDate;
	    prototype__proto.invalidDate     = invalidDate;
	    prototype__proto._ordinal        = defaultOrdinal;
	    prototype__proto.ordinal         = ordinal;
	    prototype__proto._ordinalParse   = defaultOrdinalParse;
	    prototype__proto.preparse        = preParsePostFormat;
	    prototype__proto.postformat      = preParsePostFormat;
	    prototype__proto._relativeTime   = defaultRelativeTime;
	    prototype__proto.relativeTime    = relative__relativeTime;
	    prototype__proto.pastFuture      = pastFuture;
	    prototype__proto.set             = locale_set__set;

	    // Month
	    prototype__proto.months       =        localeMonths;
	    prototype__proto._months      = defaultLocaleMonths;
	    prototype__proto.monthsShort  =        localeMonthsShort;
	    prototype__proto._monthsShort = defaultLocaleMonthsShort;
	    prototype__proto.monthsParse  =        localeMonthsParse;

	    // Week
	    prototype__proto.week = localeWeek;
	    prototype__proto._week = defaultLocaleWeek;
	    prototype__proto.firstDayOfYear = localeFirstDayOfYear;
	    prototype__proto.firstDayOfWeek = localeFirstDayOfWeek;

	    // Day of Week
	    prototype__proto.weekdays       =        localeWeekdays;
	    prototype__proto._weekdays      = defaultLocaleWeekdays;
	    prototype__proto.weekdaysMin    =        localeWeekdaysMin;
	    prototype__proto._weekdaysMin   = defaultLocaleWeekdaysMin;
	    prototype__proto.weekdaysShort  =        localeWeekdaysShort;
	    prototype__proto._weekdaysShort = defaultLocaleWeekdaysShort;
	    prototype__proto.weekdaysParse  =        localeWeekdaysParse;

	    // Hours
	    prototype__proto.isPM = localeIsPM;
	    prototype__proto._meridiemParse = defaultLocaleMeridiemParse;
	    prototype__proto.meridiem = localeMeridiem;

	    function lists__get (format, index, field, setter) {
	        var locale = locale_locales__getLocale();
	        var utc = create_utc__createUTC().set(setter, index);
	        return locale[field](utc, format);
	    }

	    function list (format, index, field, count, setter) {
	        if (typeof format === 'number') {
	            index = format;
	            format = undefined;
	        }

	        format = format || '';

	        if (index != null) {
	            return lists__get(format, index, field, setter);
	        }

	        var i;
	        var out = [];
	        for (i = 0; i < count; i++) {
	            out[i] = lists__get(format, i, field, setter);
	        }
	        return out;
	    }

	    function lists__listMonths (format, index) {
	        return list(format, index, 'months', 12, 'month');
	    }

	    function lists__listMonthsShort (format, index) {
	        return list(format, index, 'monthsShort', 12, 'month');
	    }

	    function lists__listWeekdays (format, index) {
	        return list(format, index, 'weekdays', 7, 'day');
	    }

	    function lists__listWeekdaysShort (format, index) {
	        return list(format, index, 'weekdaysShort', 7, 'day');
	    }

	    function lists__listWeekdaysMin (format, index) {
	        return list(format, index, 'weekdaysMin', 7, 'day');
	    }

	    locale_locales__getSetGlobalLocale('en', {
	        ordinalParse: /\d{1,2}(th|st|nd|rd)/,
	        ordinal : function (number) {
	            var b = number % 10,
	                output = (toInt(number % 100 / 10) === 1) ? 'th' :
	                (b === 1) ? 'st' :
	                (b === 2) ? 'nd' :
	                (b === 3) ? 'rd' : 'th';
	            return number + output;
	        }
	    });

	    // Side effect imports
	    utils_hooks__hooks.lang = deprecate('moment.lang is deprecated. Use moment.locale instead.', locale_locales__getSetGlobalLocale);
	    utils_hooks__hooks.langData = deprecate('moment.langData is deprecated. Use moment.localeData instead.', locale_locales__getLocale);

	    var mathAbs = Math.abs;

	    function duration_abs__abs () {
	        var data           = this._data;

	        this._milliseconds = mathAbs(this._milliseconds);
	        this._days         = mathAbs(this._days);
	        this._months       = mathAbs(this._months);

	        data.milliseconds  = mathAbs(data.milliseconds);
	        data.seconds       = mathAbs(data.seconds);
	        data.minutes       = mathAbs(data.minutes);
	        data.hours         = mathAbs(data.hours);
	        data.months        = mathAbs(data.months);
	        data.years         = mathAbs(data.years);

	        return this;
	    }

	    function duration_add_subtract__addSubtract (duration, input, value, direction) {
	        var other = create__createDuration(input, value);

	        duration._milliseconds += direction * other._milliseconds;
	        duration._days         += direction * other._days;
	        duration._months       += direction * other._months;

	        return duration._bubble();
	    }

	    // supports only 2.0-style add(1, 's') or add(duration)
	    function duration_add_subtract__add (input, value) {
	        return duration_add_subtract__addSubtract(this, input, value, 1);
	    }

	    // supports only 2.0-style subtract(1, 's') or subtract(duration)
	    function duration_add_subtract__subtract (input, value) {
	        return duration_add_subtract__addSubtract(this, input, value, -1);
	    }

	    function absCeil (number) {
	        if (number < 0) {
	            return Math.floor(number);
	        } else {
	            return Math.ceil(number);
	        }
	    }

	    function bubble () {
	        var milliseconds = this._milliseconds;
	        var days         = this._days;
	        var months       = this._months;
	        var data         = this._data;
	        var seconds, minutes, hours, years, monthsFromDays;

	        // if we have a mix of positive and negative values, bubble down first
	        // check: https://github.com/moment/moment/issues/2166
	        if (!((milliseconds >= 0 && days >= 0 && months >= 0) ||
	                (milliseconds <= 0 && days <= 0 && months <= 0))) {
	            milliseconds += absCeil(monthsToDays(months) + days) * 864e5;
	            days = 0;
	            months = 0;
	        }

	        // The following code bubbles up values, see the tests for
	        // examples of what that means.
	        data.milliseconds = milliseconds % 1000;

	        seconds           = absFloor(milliseconds / 1000);
	        data.seconds      = seconds % 60;

	        minutes           = absFloor(seconds / 60);
	        data.minutes      = minutes % 60;

	        hours             = absFloor(minutes / 60);
	        data.hours        = hours % 24;

	        days += absFloor(hours / 24);

	        // convert days to months
	        monthsFromDays = absFloor(daysToMonths(days));
	        months += monthsFromDays;
	        days -= absCeil(monthsToDays(monthsFromDays));

	        // 12 months -> 1 year
	        years = absFloor(months / 12);
	        months %= 12;

	        data.days   = days;
	        data.months = months;
	        data.years  = years;

	        return this;
	    }

	    function daysToMonths (days) {
	        // 400 years have 146097 days (taking into account leap year rules)
	        // 400 years have 12 months === 4800
	        return days * 4800 / 146097;
	    }

	    function monthsToDays (months) {
	        // the reverse of daysToMonths
	        return months * 146097 / 4800;
	    }

	    function as (units) {
	        var days;
	        var months;
	        var milliseconds = this._milliseconds;

	        units = normalizeUnits(units);

	        if (units === 'month' || units === 'year') {
	            days   = this._days   + milliseconds / 864e5;
	            months = this._months + daysToMonths(days);
	            return units === 'month' ? months : months / 12;
	        } else {
	            // handle milliseconds separately because of floating point math errors (issue #1867)
	            days = this._days + Math.round(monthsToDays(this._months));
	            switch (units) {
	                case 'week'   : return days / 7     + milliseconds / 6048e5;
	                case 'day'    : return days         + milliseconds / 864e5;
	                case 'hour'   : return days * 24    + milliseconds / 36e5;
	                case 'minute' : return days * 1440  + milliseconds / 6e4;
	                case 'second' : return days * 86400 + milliseconds / 1000;
	                // Math.floor prevents floating point math errors here
	                case 'millisecond': return Math.floor(days * 864e5) + milliseconds;
	                default: throw new Error('Unknown unit ' + units);
	            }
	        }
	    }

	    // TODO: Use this.as('ms')?
	    function duration_as__valueOf () {
	        return (
	            this._milliseconds +
	            this._days * 864e5 +
	            (this._months % 12) * 2592e6 +
	            toInt(this._months / 12) * 31536e6
	        );
	    }

	    function makeAs (alias) {
	        return function () {
	            return this.as(alias);
	        };
	    }

	    var asMilliseconds = makeAs('ms');
	    var asSeconds      = makeAs('s');
	    var asMinutes      = makeAs('m');
	    var asHours        = makeAs('h');
	    var asDays         = makeAs('d');
	    var asWeeks        = makeAs('w');
	    var asMonths       = makeAs('M');
	    var asYears        = makeAs('y');

	    function duration_get__get (units) {
	        units = normalizeUnits(units);
	        return this[units + 's']();
	    }

	    function makeGetter(name) {
	        return function () {
	            return this._data[name];
	        };
	    }

	    var milliseconds = makeGetter('milliseconds');
	    var seconds      = makeGetter('seconds');
	    var minutes      = makeGetter('minutes');
	    var hours        = makeGetter('hours');
	    var days         = makeGetter('days');
	    var months       = makeGetter('months');
	    var years        = makeGetter('years');

	    function weeks () {
	        return absFloor(this.days() / 7);
	    }

	    var round = Math.round;
	    var thresholds = {
	        s: 45,  // seconds to minute
	        m: 45,  // minutes to hour
	        h: 22,  // hours to day
	        d: 26,  // days to month
	        M: 11   // months to year
	    };

	    // helper function for moment.fn.from, moment.fn.fromNow, and moment.duration.fn.humanize
	    function substituteTimeAgo(string, number, withoutSuffix, isFuture, locale) {
	        return locale.relativeTime(number || 1, !!withoutSuffix, string, isFuture);
	    }

	    function duration_humanize__relativeTime (posNegDuration, withoutSuffix, locale) {
	        var duration = create__createDuration(posNegDuration).abs();
	        var seconds  = round(duration.as('s'));
	        var minutes  = round(duration.as('m'));
	        var hours    = round(duration.as('h'));
	        var days     = round(duration.as('d'));
	        var months   = round(duration.as('M'));
	        var years    = round(duration.as('y'));

	        var a = seconds < thresholds.s && ['s', seconds]  ||
	                minutes === 1          && ['m']           ||
	                minutes < thresholds.m && ['mm', minutes] ||
	                hours   === 1          && ['h']           ||
	                hours   < thresholds.h && ['hh', hours]   ||
	                days    === 1          && ['d']           ||
	                days    < thresholds.d && ['dd', days]    ||
	                months  === 1          && ['M']           ||
	                months  < thresholds.M && ['MM', months]  ||
	                years   === 1          && ['y']           || ['yy', years];

	        a[2] = withoutSuffix;
	        a[3] = +posNegDuration > 0;
	        a[4] = locale;
	        return substituteTimeAgo.apply(null, a);
	    }

	    // This function allows you to set a threshold for relative time strings
	    function duration_humanize__getSetRelativeTimeThreshold (threshold, limit) {
	        if (thresholds[threshold] === undefined) {
	            return false;
	        }
	        if (limit === undefined) {
	            return thresholds[threshold];
	        }
	        thresholds[threshold] = limit;
	        return true;
	    }

	    function humanize (withSuffix) {
	        var locale = this.localeData();
	        var output = duration_humanize__relativeTime(this, !withSuffix, locale);

	        if (withSuffix) {
	            output = locale.pastFuture(+this, output);
	        }

	        return locale.postformat(output);
	    }

	    var iso_string__abs = Math.abs;

	    function iso_string__toISOString() {
	        // for ISO strings we do not use the normal bubbling rules:
	        //  * milliseconds bubble up until they become hours
	        //  * days do not bubble at all
	        //  * months bubble up until they become years
	        // This is because there is no context-free conversion between hours and days
	        // (think of clock changes)
	        // and also not between days and months (28-31 days per month)
	        var seconds = iso_string__abs(this._milliseconds) / 1000;
	        var days         = iso_string__abs(this._days);
	        var months       = iso_string__abs(this._months);
	        var minutes, hours, years;

	        // 3600 seconds -> 60 minutes -> 1 hour
	        minutes           = absFloor(seconds / 60);
	        hours             = absFloor(minutes / 60);
	        seconds %= 60;
	        minutes %= 60;

	        // 12 months -> 1 year
	        years  = absFloor(months / 12);
	        months %= 12;


	        // inspired by https://github.com/dordille/moment-isoduration/blob/master/moment.isoduration.js
	        var Y = years;
	        var M = months;
	        var D = days;
	        var h = hours;
	        var m = minutes;
	        var s = seconds;
	        var total = this.asSeconds();

	        if (!total) {
	            // this is the same as C#'s (Noda) and python (isodate)...
	            // but not other JS (goog.date)
	            return 'P0D';
	        }

	        return (total < 0 ? '-' : '') +
	            'P' +
	            (Y ? Y + 'Y' : '') +
	            (M ? M + 'M' : '') +
	            (D ? D + 'D' : '') +
	            ((h || m || s) ? 'T' : '') +
	            (h ? h + 'H' : '') +
	            (m ? m + 'M' : '') +
	            (s ? s + 'S' : '');
	    }

	    var duration_prototype__proto = Duration.prototype;

	    duration_prototype__proto.abs            = duration_abs__abs;
	    duration_prototype__proto.add            = duration_add_subtract__add;
	    duration_prototype__proto.subtract       = duration_add_subtract__subtract;
	    duration_prototype__proto.as             = as;
	    duration_prototype__proto.asMilliseconds = asMilliseconds;
	    duration_prototype__proto.asSeconds      = asSeconds;
	    duration_prototype__proto.asMinutes      = asMinutes;
	    duration_prototype__proto.asHours        = asHours;
	    duration_prototype__proto.asDays         = asDays;
	    duration_prototype__proto.asWeeks        = asWeeks;
	    duration_prototype__proto.asMonths       = asMonths;
	    duration_prototype__proto.asYears        = asYears;
	    duration_prototype__proto.valueOf        = duration_as__valueOf;
	    duration_prototype__proto._bubble        = bubble;
	    duration_prototype__proto.get            = duration_get__get;
	    duration_prototype__proto.milliseconds   = milliseconds;
	    duration_prototype__proto.seconds        = seconds;
	    duration_prototype__proto.minutes        = minutes;
	    duration_prototype__proto.hours          = hours;
	    duration_prototype__proto.days           = days;
	    duration_prototype__proto.weeks          = weeks;
	    duration_prototype__proto.months         = months;
	    duration_prototype__proto.years          = years;
	    duration_prototype__proto.humanize       = humanize;
	    duration_prototype__proto.toISOString    = iso_string__toISOString;
	    duration_prototype__proto.toString       = iso_string__toISOString;
	    duration_prototype__proto.toJSON         = iso_string__toISOString;
	    duration_prototype__proto.locale         = locale;
	    duration_prototype__proto.localeData     = localeData;

	    // Deprecations
	    duration_prototype__proto.toIsoString = deprecate('toIsoString() is deprecated. Please use toISOString() instead (notice the capitals)', iso_string__toISOString);
	    duration_prototype__proto.lang = lang;

	    // Side effect imports

	    addFormatToken('X', 0, 0, 'unix');
	    addFormatToken('x', 0, 0, 'valueOf');

	    // PARSING

	    addRegexToken('x', matchSigned);
	    addRegexToken('X', matchTimestamp);
	    addParseToken('X', function (input, array, config) {
	        config._d = new Date(parseFloat(input, 10) * 1000);
	    });
	    addParseToken('x', function (input, array, config) {
	        config._d = new Date(toInt(input));
	    });

	    // Side effect imports


	    utils_hooks__hooks.version = '2.10.6';

	    setHookCallback(local__createLocal);

	    utils_hooks__hooks.fn                    = momentPrototype;
	    utils_hooks__hooks.min                   = min;
	    utils_hooks__hooks.max                   = max;
	    utils_hooks__hooks.utc                   = create_utc__createUTC;
	    utils_hooks__hooks.unix                  = moment__createUnix;
	    utils_hooks__hooks.months                = lists__listMonths;
	    utils_hooks__hooks.isDate                = isDate;
	    utils_hooks__hooks.locale                = locale_locales__getSetGlobalLocale;
	    utils_hooks__hooks.invalid               = valid__createInvalid;
	    utils_hooks__hooks.duration              = create__createDuration;
	    utils_hooks__hooks.isMoment              = isMoment;
	    utils_hooks__hooks.weekdays              = lists__listWeekdays;
	    utils_hooks__hooks.parseZone             = moment__createInZone;
	    utils_hooks__hooks.localeData            = locale_locales__getLocale;
	    utils_hooks__hooks.isDuration            = isDuration;
	    utils_hooks__hooks.monthsShort           = lists__listMonthsShort;
	    utils_hooks__hooks.weekdaysMin           = lists__listWeekdaysMin;
	    utils_hooks__hooks.defineLocale          = defineLocale;
	    utils_hooks__hooks.weekdaysShort         = lists__listWeekdaysShort;
	    utils_hooks__hooks.normalizeUnits        = normalizeUnits;
	    utils_hooks__hooks.relativeTimeThreshold = duration_humanize__getSetRelativeTimeThreshold;

	    var _moment = utils_hooks__hooks;

	    return _moment;

	}));
	},{}],"numeral":[function(require,module,exports){
	"use strict";
	(function() {
	  var numeral,
	      VERSION = '1.5.3',
	      languages = {},
	      currentLanguage = 'en',
	      zeroFormat = null,
	      defaultFormat = '0,0',
	      hasModule = (typeof module !== 'undefined' && module.exports);
	  function Numeral(number) {
	    this._value = number;
	  }
	  function toFixed(value, precision, roundingFunction, optionals) {
	    var power = Math.pow(10, precision),
	        optionalsRegExp,
	        output;
	    output = (roundingFunction(value * power) / power).toFixed(precision);
	    if (optionals) {
	      optionalsRegExp = new RegExp('0{1,' + optionals + '}$');
	      output = output.replace(optionalsRegExp, '');
	    }
	    return output;
	  }
	  function formatNumeral(n, format, roundingFunction) {
	    var output;
	    if (format.indexOf('$') > -1) {
	      output = formatCurrency(n, format, roundingFunction);
	    } else if (format.indexOf('%') > -1) {
	      output = formatPercentage(n, format, roundingFunction);
	    } else if (format.indexOf(':') > -1) {
	      output = formatTime(n, format);
	    } else {
	      output = formatNumber(n._value, format, roundingFunction);
	    }
	    return output;
	  }
	  function unformatNumeral(n, string) {
	    var stringOriginal = string,
	        thousandRegExp,
	        millionRegExp,
	        billionRegExp,
	        trillionRegExp,
	        suffixes = ['KB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB'],
	        bytesMultiplier = false,
	        power;
	    if (string.indexOf(':') > -1) {
	      n._value = unformatTime(string);
	    } else {
	      if (string === zeroFormat) {
	        n._value = 0;
	      } else {
	        if (languages[currentLanguage].delimiters.decimal !== '.') {
	          string = string.replace(/\./g, '').replace(languages[currentLanguage].delimiters.decimal, '.');
	        }
	        thousandRegExp = new RegExp('[^a-zA-Z]' + languages[currentLanguage].abbreviations.thousand + '(?:\\)|(\\' + languages[currentLanguage].currency.symbol + ')?(?:\\))?)?$');
	        millionRegExp = new RegExp('[^a-zA-Z]' + languages[currentLanguage].abbreviations.million + '(?:\\)|(\\' + languages[currentLanguage].currency.symbol + ')?(?:\\))?)?$');
	        billionRegExp = new RegExp('[^a-zA-Z]' + languages[currentLanguage].abbreviations.billion + '(?:\\)|(\\' + languages[currentLanguage].currency.symbol + ')?(?:\\))?)?$');
	        trillionRegExp = new RegExp('[^a-zA-Z]' + languages[currentLanguage].abbreviations.trillion + '(?:\\)|(\\' + languages[currentLanguage].currency.symbol + ')?(?:\\))?)?$');
	        for (power = 0; power <= suffixes.length; power++) {
	          bytesMultiplier = (string.indexOf(suffixes[power]) > -1) ? Math.pow(1024, power + 1) : false;
	          if (bytesMultiplier) {
	            break;
	          }
	        }
	        n._value = ((bytesMultiplier) ? bytesMultiplier : 1) * ((stringOriginal.match(thousandRegExp)) ? Math.pow(10, 3) : 1) * ((stringOriginal.match(millionRegExp)) ? Math.pow(10, 6) : 1) * ((stringOriginal.match(billionRegExp)) ? Math.pow(10, 9) : 1) * ((stringOriginal.match(trillionRegExp)) ? Math.pow(10, 12) : 1) * ((string.indexOf('%') > -1) ? 0.01 : 1) * (((string.split('-').length + Math.min(string.split('(').length - 1, string.split(')').length - 1)) % 2) ? 1 : -1) * Number(string.replace(/[^0-9\.]+/g, ''));
	        n._value = (bytesMultiplier) ? Math.ceil(n._value) : n._value;
	      }
	    }
	    return n._value;
	  }
	  function formatCurrency(n, format, roundingFunction) {
	    var symbolIndex = format.indexOf('$'),
	        openParenIndex = format.indexOf('('),
	        minusSignIndex = format.indexOf('-'),
	        space = '',
	        spliceIndex,
	        output;
	    if (format.indexOf(' $') > -1) {
	      space = ' ';
	      format = format.replace(' $', '');
	    } else if (format.indexOf('$ ') > -1) {
	      space = ' ';
	      format = format.replace('$ ', '');
	    } else {
	      format = format.replace('$', '');
	    }
	    output = formatNumber(n._value, format, roundingFunction);
	    if (symbolIndex <= 1) {
	      if (output.indexOf('(') > -1 || output.indexOf('-') > -1) {
	        output = output.split('');
	        spliceIndex = 1;
	        if (symbolIndex < openParenIndex || symbolIndex < minusSignIndex) {
	          spliceIndex = 0;
	        }
	        output.splice(spliceIndex, 0, languages[currentLanguage].currency.symbol + space);
	        output = output.join('');
	      } else {
	        output = languages[currentLanguage].currency.symbol + space + output;
	      }
	    } else {
	      if (output.indexOf(')') > -1) {
	        output = output.split('');
	        output.splice(-1, 0, space + languages[currentLanguage].currency.symbol);
	        output = output.join('');
	      } else {
	        output = output + space + languages[currentLanguage].currency.symbol;
	      }
	    }
	    return output;
	  }
	  function formatPercentage(n, format, roundingFunction) {
	    var space = '',
	        output,
	        value = n._value * 100;
	    if (format.indexOf(' %') > -1) {
	      space = ' ';
	      format = format.replace(' %', '');
	    } else {
	      format = format.replace('%', '');
	    }
	    output = formatNumber(value, format, roundingFunction);
	    if (output.indexOf(')') > -1) {
	      output = output.split('');
	      output.splice(-1, 0, space + '%');
	      output = output.join('');
	    } else {
	      output = output + space + '%';
	    }
	    return output;
	  }
	  function formatTime(n) {
	    var hours = Math.floor(n._value / 60 / 60),
	        minutes = Math.floor((n._value - (hours * 60 * 60)) / 60),
	        seconds = Math.round(n._value - (hours * 60 * 60) - (minutes * 60));
	    return hours + ':' + ((minutes < 10) ? '0' + minutes : minutes) + ':' + ((seconds < 10) ? '0' + seconds : seconds);
	  }
	  function unformatTime(string) {
	    var timeArray = string.split(':'),
	        seconds = 0;
	    if (timeArray.length === 3) {
	      seconds = seconds + (Number(timeArray[0]) * 60 * 60);
	      seconds = seconds + (Number(timeArray[1]) * 60);
	      seconds = seconds + Number(timeArray[2]);
	    } else if (timeArray.length === 2) {
	      seconds = seconds + (Number(timeArray[0]) * 60);
	      seconds = seconds + Number(timeArray[1]);
	    }
	    return Number(seconds);
	  }
	  function formatNumber(value, format, roundingFunction) {
	    var negP = false,
	        signed = false,
	        optDec = false,
	        abbr = '',
	        abbrK = false,
	        abbrM = false,
	        abbrB = false,
	        abbrT = false,
	        abbrForce = false,
	        bytes = '',
	        ord = '',
	        abs = Math.abs(value),
	        suffixes = ['B', 'KB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB'],
	        min,
	        max,
	        power,
	        w,
	        precision,
	        thousands,
	        d = '',
	        neg = false;
	    if (value === 0 && zeroFormat !== null) {
	      return zeroFormat;
	    } else {
	      if (format.indexOf('(') > -1) {
	        negP = true;
	        format = format.slice(1, -1);
	      } else if (format.indexOf('+') > -1) {
	        signed = true;
	        format = format.replace(/\+/g, '');
	      }
	      if (format.indexOf('a') > -1) {
	        abbrK = format.indexOf('aK') >= 0;
	        abbrM = format.indexOf('aM') >= 0;
	        abbrB = format.indexOf('aB') >= 0;
	        abbrT = format.indexOf('aT') >= 0;
	        abbrForce = abbrK || abbrM || abbrB || abbrT;
	        if (format.indexOf(' a') > -1) {
	          abbr = ' ';
	          format = format.replace(' a', '');
	        } else {
	          format = format.replace('a', '');
	        }
	        if (abs >= Math.pow(10, 12) && !abbrForce || abbrT) {
	          abbr = abbr + languages[currentLanguage].abbreviations.trillion;
	          value = value / Math.pow(10, 12);
	        } else if (abs < Math.pow(10, 12) && abs >= Math.pow(10, 9) && !abbrForce || abbrB) {
	          abbr = abbr + languages[currentLanguage].abbreviations.billion;
	          value = value / Math.pow(10, 9);
	        } else if (abs < Math.pow(10, 9) && abs >= Math.pow(10, 6) && !abbrForce || abbrM) {
	          abbr = abbr + languages[currentLanguage].abbreviations.million;
	          value = value / Math.pow(10, 6);
	        } else if (abs < Math.pow(10, 6) && abs >= Math.pow(10, 3) && !abbrForce || abbrK) {
	          abbr = abbr + languages[currentLanguage].abbreviations.thousand;
	          value = value / Math.pow(10, 3);
	        }
	      }
	      if (format.indexOf('b') > -1) {
	        if (format.indexOf(' b') > -1) {
	          bytes = ' ';
	          format = format.replace(' b', '');
	        } else {
	          format = format.replace('b', '');
	        }
	        for (power = 0; power <= suffixes.length; power++) {
	          min = Math.pow(1024, power);
	          max = Math.pow(1024, power + 1);
	          if (value >= min && value < max) {
	            bytes = bytes + suffixes[power];
	            if (min > 0) {
	              value = value / min;
	            }
	            break;
	          }
	        }
	      }
	      if (format.indexOf('o') > -1) {
	        if (format.indexOf(' o') > -1) {
	          ord = ' ';
	          format = format.replace(' o', '');
	        } else {
	          format = format.replace('o', '');
	        }
	        ord = ord + languages[currentLanguage].ordinal(value);
	      }
	      if (format.indexOf('[.]') > -1) {
	        optDec = true;
	        format = format.replace('[.]', '.');
	      }
	      w = value.toString().split('.')[0];
	      precision = format.split('.')[1];
	      thousands = format.indexOf(',');
	      if (precision) {
	        if (precision.indexOf('[') > -1) {
	          precision = precision.replace(']', '');
	          precision = precision.split('[');
	          d = toFixed(value, (precision[0].length + precision[1].length), roundingFunction, precision[1].length);
	        } else {
	          d = toFixed(value, precision.length, roundingFunction);
	        }
	        w = d.split('.')[0];
	        if (d.split('.')[1].length) {
	          d = languages[currentLanguage].delimiters.decimal + d.split('.')[1];
	        } else {
	          d = '';
	        }
	        if (optDec && Number(d.slice(1)) === 0) {
	          d = '';
	        }
	      } else {
	        w = toFixed(value, null, roundingFunction);
	      }
	      if (w.indexOf('-') > -1) {
	        w = w.slice(1);
	        neg = true;
	      }
	      if (thousands > -1) {
	        w = w.toString().replace(/(\d)(?=(\d{3})+(?!\d))/g, '$1' + languages[currentLanguage].delimiters.thousands);
	      }
	      if (format.indexOf('.') === 0) {
	        w = '';
	      }
	      return ((negP && neg) ? '(' : '') + ((!negP && neg) ? '-' : '') + ((!neg && signed) ? '+' : '') + w + d + ((ord) ? ord : '') + ((abbr) ? abbr : '') + ((bytes) ? bytes : '') + ((negP && neg) ? ')' : '');
	    }
	  }
	  numeral = function(input) {
	    if (numeral.isNumeral(input)) {
	      input = input.value();
	    } else if (input === 0 || typeof input === 'undefined') {
	      input = 0;
	    } else if (!Number(input)) {
	      input = numeral.fn.unformat(input);
	    }
	    return new Numeral(Number(input));
	  };
	  numeral.version = VERSION;
	  numeral.isNumeral = function(obj) {
	    return obj instanceof Numeral;
	  };
	  numeral.language = function(key, values) {
	    if (!key) {
	      return currentLanguage;
	    }
	    if (key && !values) {
	      if (!languages[key]) {
	        throw new Error('Unknown language : ' + key);
	      }
	      currentLanguage = key;
	    }
	    if (values || !languages[key]) {
	      loadLanguage(key, values);
	    }
	    return numeral;
	  };
	  numeral.languageData = function(key) {
	    if (!key) {
	      return languages[currentLanguage];
	    }
	    if (!languages[key]) {
	      throw new Error('Unknown language : ' + key);
	    }
	    return languages[key];
	  };
	  numeral.language('en', {
	    delimiters: {
	      thousands: ',',
	      decimal: '.'
	    },
	    abbreviations: {
	      thousand: 'k',
	      million: 'm',
	      billion: 'b',
	      trillion: 't'
	    },
	    ordinal: function(number) {
	      var b = number % 10;
	      return (~~(number % 100 / 10) === 1) ? 'th' : (b === 1) ? 'st' : (b === 2) ? 'nd' : (b === 3) ? 'rd' : 'th';
	    },
	    currency: {symbol: '$'}
	  });
	  numeral.zeroFormat = function(format) {
	    zeroFormat = typeof(format) === 'string' ? format : null;
	  };
	  numeral.defaultFormat = function(format) {
	    defaultFormat = typeof(format) === 'string' ? format : '0.0';
	  };
	  numeral.validate = function(val, culture) {
	    var _decimalSep,
	        _thousandSep,
	        _currSymbol,
	        _valArray,
	        _abbrObj,
	        _thousandRegEx,
	        languageData,
	        temp;
	    if (typeof val !== 'string') {
	      val += '';
	      if (console.warn) {
	        console.warn('Numeral.js: Value is not string. It has been co-erced to: ', val);
	      }
	    }
	    val = val.trim();
	    if (val === '') {
	      return false;
	    }
	    val = val.replace(/^[+-]?/, '');
	    try {
	      languageData = numeral.languageData(culture);
	    } catch (e) {
	      languageData = numeral.languageData(numeral.language());
	    }
	    _currSymbol = languageData.currency.symbol;
	    _abbrObj = languageData.abbreviations;
	    _decimalSep = languageData.delimiters.decimal;
	    if (languageData.delimiters.thousands === '.') {
	      _thousandSep = '\\.';
	    } else {
	      _thousandSep = languageData.delimiters.thousands;
	    }
	    temp = val.match(/^[^\d\.\,]+/);
	    if (temp !== null) {
	      val = val.substr(1);
	      if (temp[0] !== _currSymbol) {
	        return false;
	      }
	    }
	    temp = val.match(/[^\d]+$/);
	    if (temp !== null) {
	      val = val.slice(0, -1);
	      if (temp[0] !== _abbrObj.thousand && temp[0] !== _abbrObj.million && temp[0] !== _abbrObj.billion && temp[0] !== _abbrObj.trillion) {
	        return false;
	      }
	    }
	    if (!!val.match(/^\d+$/)) {
	      return true;
	    }
	    _thousandRegEx = new RegExp(_thousandSep + '{2}');
	    if (!val.match(/[^\d.,]/g)) {
	      _valArray = val.split(_decimalSep);
	      if (_valArray.length > 2) {
	        return false;
	      } else {
	        if (_valArray.length < 2) {
	          return (!!_valArray[0].match(/^\d+.*\d$/) && !_valArray[0].match(_thousandRegEx));
	        } else {
	          if (_valArray[0] === '') {
	            return (!_valArray[0].match(_thousandRegEx) && !!_valArray[1].match(/^\d+$/));
	          } else if (_valArray[0].length === 1) {
	            return (!!_valArray[0].match(/^\d+$/) && !_valArray[0].match(_thousandRegEx) && !!_valArray[1].match(/^\d+$/));
	          } else {
	            return (!!_valArray[0].match(/^\d+.*\d$/) && !_valArray[0].match(_thousandRegEx) && !!_valArray[1].match(/^\d+$/));
	          }
	        }
	      }
	    }
	    return false;
	  };
	  function loadLanguage(key, values) {
	    languages[key] = values;
	  }
	  if ('function' !== typeof Array.prototype.reduce) {
	    Array.prototype.reduce = function(callback, opt_initialValue) {
	      'use strict';
	      if (null === this || 'undefined' === typeof this) {
	        throw new TypeError('Array.prototype.reduce called on null or undefined');
	      }
	      if ('function' !== typeof callback) {
	        throw new TypeError(callback + ' is not a function');
	      }
	      var index,
	          value,
	          length = this.length >>> 0,
	          isValueSet = false;
	      if (1 < arguments.length) {
	        value = opt_initialValue;
	        isValueSet = true;
	      }
	      for (index = 0; length > index; ++index) {
	        if (this.hasOwnProperty(index)) {
	          if (isValueSet) {
	            value = callback(value, this[index], index, this);
	          } else {
	            value = this[index];
	            isValueSet = true;
	          }
	        }
	      }
	      if (!isValueSet) {
	        throw new TypeError('Reduce of empty array with no initial value');
	      }
	      return value;
	    };
	  }
	  function multiplier(x) {
	    var parts = x.toString().split('.');
	    if (parts.length < 2) {
	      return 1;
	    }
	    return Math.pow(10, parts[1].length);
	  }
	  function correctionFactor() {
	    var args = Array.prototype.slice.call(arguments);
	    return args.reduce(function(prev, next) {
	      var mp = multiplier(prev),
	          mn = multiplier(next);
	      return mp > mn ? mp : mn;
	    }, -Infinity);
	  }
	  numeral.fn = Numeral.prototype = {
	    clone: function() {
	      return numeral(this);
	    },
	    format: function(inputString, roundingFunction) {
	      return formatNumeral(this, inputString ? inputString : defaultFormat, (roundingFunction !== undefined) ? roundingFunction : Math.round);
	    },
	    unformat: function(inputString) {
	      if (Object.prototype.toString.call(inputString) === '[object Number]') {
	        return inputString;
	      }
	      return unformatNumeral(this, inputString ? inputString : defaultFormat);
	    },
	    value: function() {
	      return this._value;
	    },
	    valueOf: function() {
	      return this._value;
	    },
	    set: function(value) {
	      this._value = Number(value);
	      return this;
	    },
	    add: function(value) {
	      var corrFactor = correctionFactor.call(null, this._value, value);
	      function cback(accum, curr, currI, O) {
	        return accum + corrFactor * curr;
	      }
	      this._value = [this._value, value].reduce(cback, 0) / corrFactor;
	      return this;
	    },
	    subtract: function(value) {
	      var corrFactor = correctionFactor.call(null, this._value, value);
	      function cback(accum, curr, currI, O) {
	        return accum - corrFactor * curr;
	      }
	      this._value = [value].reduce(cback, this._value * corrFactor) / corrFactor;
	      return this;
	    },
	    multiply: function(value) {
	      function cback(accum, curr, currI, O) {
	        var corrFactor = correctionFactor(accum, curr);
	        return (accum * corrFactor) * (curr * corrFactor) / (corrFactor * corrFactor);
	      }
	      this._value = [this._value, value].reduce(cback, 1);
	      return this;
	    },
	    divide: function(value) {
	      function cback(accum, curr, currI, O) {
	        var corrFactor = correctionFactor(accum, curr);
	        return (accum * corrFactor) / (curr * corrFactor);
	      }
	      this._value = [this._value, value].reduce(cback);
	      return this;
	    },
	    difference: function(value) {
	      return Math.abs(numeral(this._value).subtract(value).value());
	    }
	  };
	  if (hasModule) {
	    module.exports = numeral;
	  }
	  if (typeof ender === 'undefined') {
	    this['numeral'] = numeral;
	  }
	  if (typeof define === 'function' && define.amd) {
	    define([], function() {
	      return numeral;
	    });
	  }
	}).call(window);

	//# 
	},{}],"pikaday":[function(require,module,exports){
	/*!
	 * Pikaday
	 *
	 * Copyright © 2014 David Bushell | BSD & MIT license | https://github.com/dbushell/Pikaday
	 */

	(function (root, factory)
	{
	    'use strict';

	    var moment;
	    if (typeof exports === 'object') {
	        // CommonJS module
	        // Load moment.js as an optional dependency
	        try { moment = require('moment'); } catch (e) {}
	        module.exports = factory(moment);
	    } else if (typeof define === 'function' && define.amd) {
	        // AMD. Register as an anonymous module.
	        define(function (req)
	        {
	            // Load moment.js as an optional dependency
	            var id = 'moment';
	            try { moment = req(id); } catch (e) {}
	            return factory(moment);
	        });
	    } else {
	        root.Pikaday = factory(root.moment);
	    }
	}(this, function (moment)
	{
	    'use strict';

	    /**
	     * feature detection and helper functions
	     */
	    var hasMoment = typeof moment === 'function',

	    hasEventListeners = !!window.addEventListener,

	    document = window.document,

	    sto = window.setTimeout,

	    addEvent = function(el, e, callback, capture)
	    {
	        if (hasEventListeners) {
	            el.addEventListener(e, callback, !!capture);
	        } else {
	            el.attachEvent('on' + e, callback);
	        }
	    },

	    removeEvent = function(el, e, callback, capture)
	    {
	        if (hasEventListeners) {
	            el.removeEventListener(e, callback, !!capture);
	        } else {
	            el.detachEvent('on' + e, callback);
	        }
	    },

	    fireEvent = function(el, eventName, data)
	    {
	        var ev;

	        if (document.createEvent) {
	            ev = document.createEvent('HTMLEvents');
	            ev.initEvent(eventName, true, false);
	            ev = extend(ev, data);
	            el.dispatchEvent(ev);
	        } else if (document.createEventObject) {
	            ev = document.createEventObject();
	            ev = extend(ev, data);
	            el.fireEvent('on' + eventName, ev);
	        }
	    },

	    trim = function(str)
	    {
	        return str.trim ? str.trim() : str.replace(/^\s+|\s+$/g,'');
	    },

	    hasClass = function(el, cn)
	    {
	        return (' ' + el.className + ' ').indexOf(' ' + cn + ' ') !== -1;
	    },

	    addClass = function(el, cn)
	    {
	        if (!hasClass(el, cn)) {
	            el.className = (el.className === '') ? cn : el.className + ' ' + cn;
	        }
	    },

	    removeClass = function(el, cn)
	    {
	        el.className = trim((' ' + el.className + ' ').replace(' ' + cn + ' ', ' '));
	    },

	    isArray = function(obj)
	    {
	        return (/Array/).test(Object.prototype.toString.call(obj));
	    },

	    isDate = function(obj)
	    {
	        return (/Date/).test(Object.prototype.toString.call(obj)) && !isNaN(obj.getTime());
	    },

	    isWeekend = function(date)
	    {
	        var day = date.getDay();
	        return day === 0 || day === 6;
	    },

	    isLeapYear = function(year)
	    {
	        // solution by Matti Virkkunen: http://stackoverflow.com/a/4881951
	        return year % 4 === 0 && year % 100 !== 0 || year % 400 === 0;
	    },

	    getDaysInMonth = function(year, month)
	    {
	        return [31, isLeapYear(year) ? 29 : 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31][month];
	    },

	    setToStartOfDay = function(date)
	    {
	        if (isDate(date)) date.setHours(0,0,0,0);
	    },

	    compareDates = function(a,b)
	    {
	        // weak date comparison (use setToStartOfDay(date) to ensure correct result)
	        return a.getTime() === b.getTime();
	    },

	    extend = function(to, from, overwrite)
	    {
	        var prop, hasProp;
	        for (prop in from) {
	            hasProp = to[prop] !== undefined;
	            if (hasProp && typeof from[prop] === 'object' && from[prop] !== null && from[prop].nodeName === undefined) {
	                if (isDate(from[prop])) {
	                    if (overwrite) {
	                        to[prop] = new Date(from[prop].getTime());
	                    }
	                }
	                else if (isArray(from[prop])) {
	                    if (overwrite) {
	                        to[prop] = from[prop].slice(0);
	                    }
	                } else {
	                    to[prop] = extend({}, from[prop], overwrite);
	                }
	            } else if (overwrite || !hasProp) {
	                to[prop] = from[prop];
	            }
	        }
	        return to;
	    },

	    adjustCalendar = function(calendar) {
	        if (calendar.month < 0) {
	            calendar.year -= Math.ceil(Math.abs(calendar.month)/12);
	            calendar.month += 12;
	        }
	        if (calendar.month > 11) {
	            calendar.year += Math.floor(Math.abs(calendar.month)/12);
	            calendar.month -= 12;
	        }
	        return calendar;
	    },

	    /**
	     * defaults and localisation
	     */
	    defaults = {

	        // bind the picker to a form field
	        field: null,

	        // automatically show/hide the picker on `field` focus (default `true` if `field` is set)
	        bound: undefined,

	        // position of the datepicker, relative to the field (default to bottom & left)
	        // ('bottom' & 'left' keywords are not used, 'top' & 'right' are modifier on the bottom/left position)
	        position: 'bottom left',

	        // automatically fit in the viewport even if it means repositioning from the position option
	        reposition: true,

	        // the default output format for `.toString()` and `field` value
	        format: 'YYYY-MM-DD',

	        // the initial date to view when first opened
	        defaultDate: null,

	        // make the `defaultDate` the initial selected value
	        setDefaultDate: false,

	        // first day of week (0: Sunday, 1: Monday etc)
	        firstDay: 0,

	        // the minimum/earliest date that can be selected
	        minDate: null,
	        // the maximum/latest date that can be selected
	        maxDate: null,

	        // number of years either side, or array of upper/lower range
	        yearRange: 10,

	        // show week numbers at head of row
	        showWeekNumber: false,

	        // used internally (don't config outside)
	        minYear: 0,
	        maxYear: 9999,
	        minMonth: undefined,
	        maxMonth: undefined,

	        startRange: null,
	        endRange: null,

	        isRTL: false,

	        // Additional text to append to the year in the calendar title
	        yearSuffix: '',

	        // Render the month after year in the calendar title
	        showMonthAfterYear: false,

	        // how many months are visible
	        numberOfMonths: 1,

	        // when numberOfMonths is used, this will help you to choose where the main calendar will be (default `left`, can be set to `right`)
	        // only used for the first display or when a selected date is not visible
	        mainCalendar: 'left',

	        // Specify a DOM element to render the calendar in
	        container: undefined,

	        // internationalization
	        i18n: {
	            previousMonth : 'Previous Month',
	            nextMonth     : 'Next Month',
	            months        : ['January','February','March','April','May','June','July','August','September','October','November','December'],
	            weekdays      : ['Sunday','Monday','Tuesday','Wednesday','Thursday','Friday','Saturday'],
	            weekdaysShort : ['Sun','Mon','Tue','Wed','Thu','Fri','Sat']
	        },

	        // Theme Classname
	        theme: null,

	        // callback function
	        onSelect: null,
	        onOpen: null,
	        onClose: null,
	        onDraw: null
	    },


	    /**
	     * templating functions to abstract HTML rendering
	     */
	    renderDayName = function(opts, day, abbr)
	    {
	        day += opts.firstDay;
	        while (day >= 7) {
	            day -= 7;
	        }
	        return abbr ? opts.i18n.weekdaysShort[day] : opts.i18n.weekdays[day];
	    },

	    renderDay = function(opts)
	    {
	        if (opts.isEmpty) {
	            return '<td class="is-empty"></td>';
	        }
	        var arr = [];
	        if (opts.isDisabled) {
	            arr.push('is-disabled');
	        }
	        if (opts.isToday) {
	            arr.push('is-today');
	        }
	        if (opts.isSelected) {
	            arr.push('is-selected');
	        }
	        if (opts.isInRange) {
	            arr.push('is-inrange');
	        }
	        if (opts.isStartRange) {
	            arr.push('is-startrange');
	        }
	        if (opts.isEndRange) {
	            arr.push('is-endrange');
	        }
	        return '<td data-day="' + opts.day + '" class="' + arr.join(' ') + '">' +
	                 '<button class="pika-button pika-day" type="button" ' +
	                    'data-pika-year="' + opts.year + '" data-pika-month="' + opts.month + '" data-pika-day="' + opts.day + '">' +
	                        opts.day +
	                 '</button>' +
	               '</td>';
	    },

	    renderWeek = function (d, m, y) {
	        // Lifted from http://javascript.about.com/library/blweekyear.htm, lightly modified.
	        var onejan = new Date(y, 0, 1),
	            weekNum = Math.ceil((((new Date(y, m, d) - onejan) / 86400000) + onejan.getDay()+1)/7);
	        return '<td class="pika-week">' + weekNum + '</td>';
	    },

	    renderRow = function(days, isRTL)
	    {
	        return '<tr>' + (isRTL ? days.reverse() : days).join('') + '</tr>';
	    },

	    renderBody = function(rows)
	    {
	        return '<tbody>' + rows.join('') + '</tbody>';
	    },

	    renderHead = function(opts)
	    {
	        var i, arr = [];
	        if (opts.showWeekNumber) {
	            arr.push('<th></th>');
	        }
	        for (i = 0; i < 7; i++) {
	            arr.push('<th scope="col"><abbr title="' + renderDayName(opts, i) + '">' + renderDayName(opts, i, true) + '</abbr></th>');
	        }
	        return '<thead>' + (opts.isRTL ? arr.reverse() : arr).join('') + '</thead>';
	    },

	    renderTitle = function(instance, c, year, month, refYear)
	    {
	        var i, j, arr,
	            opts = instance._o,
	            isMinYear = year === opts.minYear,
	            isMaxYear = year === opts.maxYear,
	            html = '<div class="pika-title">',
	            monthHtml,
	            yearHtml,
	            prev = true,
	            next = true;

	        for (arr = [], i = 0; i < 12; i++) {
	            arr.push('<option value="' + (year === refYear ? i - c : 12 + i - c) + '"' +
	                (i === month ? ' selected': '') +
	                ((isMinYear && i < opts.minMonth) || (isMaxYear && i > opts.maxMonth) ? 'disabled' : '') + '>' +
	                opts.i18n.months[i] + '</option>');
	        }
	        monthHtml = '<div class="pika-label">' + opts.i18n.months[month] + '<select class="pika-select pika-select-month" tabindex="-1">' + arr.join('') + '</select></div>';

	        if (isArray(opts.yearRange)) {
	            i = opts.yearRange[0];
	            j = opts.yearRange[1] + 1;
	        } else {
	            i = year - opts.yearRange;
	            j = 1 + year + opts.yearRange;
	        }

	        for (arr = []; i < j && i <= opts.maxYear; i++) {
	            if (i >= opts.minYear) {
	                arr.push('<option value="' + i + '"' + (i === year ? ' selected': '') + '>' + (i) + '</option>');
	            }
	        }
	        yearHtml = '<div class="pika-label">' + year + opts.yearSuffix + '<select class="pika-select pika-select-year" tabindex="-1">' + arr.join('') + '</select></div>';

	        if (opts.showMonthAfterYear) {
	            html += yearHtml + monthHtml;
	        } else {
	            html += monthHtml + yearHtml;
	        }

	        if (isMinYear && (month === 0 || opts.minMonth >= month)) {
	            prev = false;
	        }

	        if (isMaxYear && (month === 11 || opts.maxMonth <= month)) {
	            next = false;
	        }

	        if (c === 0) {
	            html += '<button class="pika-prev' + (prev ? '' : ' is-disabled') + '" type="button">' + opts.i18n.previousMonth + '</button>';
	        }
	        if (c === (instance._o.numberOfMonths - 1) ) {
	            html += '<button class="pika-next' + (next ? '' : ' is-disabled') + '" type="button">' + opts.i18n.nextMonth + '</button>';
	        }

	        return html += '</div>';
	    },

	    renderTable = function(opts, data)
	    {
	        return '<table cellpadding="0" cellspacing="0" class="pika-table">' + renderHead(opts) + renderBody(data) + '</table>';
	    },


	    /**
	     * Pikaday constructor
	     */
	    Pikaday = function(options)
	    {
	        var self = this,
	            opts = self.config(options);

	        self._onMouseDown = function(e)
	        {
	            if (!self._v) {
	                return;
	            }
	            e = e || window.event;
	            var target = e.target || e.srcElement;
	            if (!target) {
	                return;
	            }

	            if (!hasClass(target.parentNode, 'is-disabled')) {
	                if (hasClass(target, 'pika-button') && !hasClass(target, 'is-empty')) {
	                    self.setDate(new Date(target.getAttribute('data-pika-year'), target.getAttribute('data-pika-month'), target.getAttribute('data-pika-day')));
	                    if (opts.bound) {
	                        sto(function() {
	                            self.hide();
	                            if (opts.field) {
	                                opts.field.blur();
	                            }
	                        }, 100);
	                    }
	                    return;
	                }
	                else if (hasClass(target, 'pika-prev')) {
	                    self.prevMonth();
	                }
	                else if (hasClass(target, 'pika-next')) {
	                    self.nextMonth();
	                }
	            }
	            if (!hasClass(target, 'pika-select')) {
	                if (e.preventDefault) {
	                    e.preventDefault();
	                } else {
	                    e.returnValue = false;
	                    return false;
	                }
	            } else {
	                self._c = true;
	            }
	        };

	        self._onChange = function(e)
	        {
	            e = e || window.event;
	            var target = e.target || e.srcElement;
	            if (!target) {
	                return;
	            }
	            if (hasClass(target, 'pika-select-month')) {
	                self.gotoMonth(target.value);
	            }
	            else if (hasClass(target, 'pika-select-year')) {
	                self.gotoYear(target.value);
	            }
	        };

	        self._onInputChange = function(e)
	        {
	            var date;

	            if (e.firedBy === self) {
	                return;
	            }
	            if (hasMoment) {
	                date = moment(opts.field.value, opts.format);
	                date = (date && date.isValid()) ? date.toDate() : null;
	            }
	            else {
	                date = new Date(Date.parse(opts.field.value));
	            }
	            if (isDate(date)) {
	              self.setDate(date);
	            }
	            if (!self._v) {
	                self.show();
	            }
	        };

	        self._onInputFocus = function()
	        {
	            self.show();
	        };

	        self._onInputClick = function()
	        {
	            self.show();
	        };

	        self._onInputBlur = function()
	        {
	            // IE allows pika div to gain focus; catch blur the input field
	            var pEl = document.activeElement;
	            do {
	                if (hasClass(pEl, 'pika-single')) {
	                    return;
	                }
	            }
	            while ((pEl = pEl.parentNode));

	            if (!self._c) {
	                self._b = sto(function() {
	                    self.hide();
	                }, 50);
	            }
	            self._c = false;
	        };

	        self._onClick = function(e)
	        {
	            e = e || window.event;
	            var target = e.target || e.srcElement,
	                pEl = target;
	            if (!target) {
	                return;
	            }
	            if (!hasEventListeners && hasClass(target, 'pika-select')) {
	                if (!target.onchange) {
	                    target.setAttribute('onchange', 'return;');
	                    addEvent(target, 'change', self._onChange);
	                }
	            }
	            do {
	                if (hasClass(pEl, 'pika-single') || pEl === opts.trigger) {
	                    return;
	                }
	            }
	            while ((pEl = pEl.parentNode));
	            if (self._v && target !== opts.trigger && pEl !== opts.trigger) {
	                self.hide();
	            }
	        };

	        self.el = document.createElement('div');
	        self.el.className = 'pika-single' + (opts.isRTL ? ' is-rtl' : '') + (opts.theme ? ' ' + opts.theme : '');

	        addEvent(self.el, 'ontouchend' in document ? 'touchend' : 'mousedown', self._onMouseDown, true);
	        addEvent(self.el, 'change', self._onChange);

	        if (opts.field) {
	            if (opts.container) {
	                opts.container.appendChild(self.el);
	            } else if (opts.bound) {
	                document.body.appendChild(self.el);
	            } else {
	                opts.field.parentNode.insertBefore(self.el, opts.field.nextSibling);
	            }
	            addEvent(opts.field, 'change', self._onInputChange);

	            if (!opts.defaultDate) {
	                if (hasMoment && opts.field.value) {
	                    opts.defaultDate = moment(opts.field.value, opts.format).toDate();
	                } else {
	                    opts.defaultDate = new Date(Date.parse(opts.field.value));
	                }
	                opts.setDefaultDate = true;
	            }
	        }

	        var defDate = opts.defaultDate;

	        if (isDate(defDate)) {
	            if (opts.setDefaultDate) {
	                self.setDate(defDate, true);
	            } else {
	                self.gotoDate(defDate);
	            }
	        } else {
	            self.gotoDate(new Date());
	        }

	        if (opts.bound) {
	            this.hide();
	            self.el.className += ' is-bound';
	            addEvent(opts.trigger, 'click', self._onInputClick);
	            addEvent(opts.trigger, 'focus', self._onInputFocus);
	            addEvent(opts.trigger, 'blur', self._onInputBlur);
	        } else {
	            this.show();
	        }
	    };


	    /**
	     * public Pikaday API
	     */
	    Pikaday.prototype = {


	        /**
	         * configure functionality
	         */
	        config: function(options)
	        {
	            if (!this._o) {
	                this._o = extend({}, defaults, true);
	            }

	            var opts = extend(this._o, options, true);

	            opts.isRTL = !!opts.isRTL;

	            opts.field = (opts.field && opts.field.nodeName) ? opts.field : null;

	            opts.theme = (typeof opts.theme) === 'string' && opts.theme ? opts.theme : null;

	            opts.bound = !!(opts.bound !== undefined ? opts.field && opts.bound : opts.field);

	            opts.trigger = (opts.trigger && opts.trigger.nodeName) ? opts.trigger : opts.field;

	            opts.disableWeekends = !!opts.disableWeekends;

	            opts.disableDayFn = (typeof opts.disableDayFn) === 'function' ? opts.disableDayFn : null;

	            var nom = parseInt(opts.numberOfMonths, 10) || 1;
	            opts.numberOfMonths = nom > 4 ? 4 : nom;

	            if (!isDate(opts.minDate)) {
	                opts.minDate = false;
	            }
	            if (!isDate(opts.maxDate)) {
	                opts.maxDate = false;
	            }
	            if ((opts.minDate && opts.maxDate) && opts.maxDate < opts.minDate) {
	                opts.maxDate = opts.minDate = false;
	            }
	            if (opts.minDate) {
	                this.setMinDate(opts.minDate);
	            }
	            if (opts.maxDate) {
	                setToStartOfDay(opts.maxDate);
	                opts.maxYear  = opts.maxDate.getFullYear();
	                opts.maxMonth = opts.maxDate.getMonth();
	            }

	            if (isArray(opts.yearRange)) {
	                var fallback = new Date().getFullYear() - 10;
	                opts.yearRange[0] = parseInt(opts.yearRange[0], 10) || fallback;
	                opts.yearRange[1] = parseInt(opts.yearRange[1], 10) || fallback;
	            } else {
	                opts.yearRange = Math.abs(parseInt(opts.yearRange, 10)) || defaults.yearRange;
	                if (opts.yearRange > 100) {
	                    opts.yearRange = 100;
	                }
	            }

	            return opts;
	        },

	        /**
	         * return a formatted string of the current selection (using Moment.js if available)
	         */
	        toString: function(format)
	        {
	            return !isDate(this._d) ? '' : hasMoment ? moment(this._d).format(format || this._o.format) : this._d.toDateString();
	        },

	        /**
	         * return a Moment.js object of the current selection (if available)
	         */
	        getMoment: function()
	        {
	            return hasMoment ? moment(this._d) : null;
	        },

	        /**
	         * set the current selection from a Moment.js object (if available)
	         */
	        setMoment: function(date, preventOnSelect)
	        {
	            if (hasMoment && moment.isMoment(date)) {
	                this.setDate(date.toDate(), preventOnSelect);
	            }
	        },

	        /**
	         * return a Date object of the current selection
	         */
	        getDate: function()
	        {
	            return isDate(this._d) ? new Date(this._d.getTime()) : null;
	        },

	        /**
	         * set the current selection
	         */
	        setDate: function(date, preventOnSelect)
	        {
	            if (!date) {
	                this._d = null;

	                if (this._o.field) {
	                    this._o.field.value = '';
	                    fireEvent(this._o.field, 'change', { firedBy: this });
	                }

	                return this.draw();
	            }
	            if (typeof date === 'string') {
	                date = new Date(Date.parse(date));
	            }
	            if (!isDate(date)) {
	                return;
	            }

	            var min = this._o.minDate,
	                max = this._o.maxDate;

	            if (isDate(min) && date < min) {
	                date = min;
	            } else if (isDate(max) && date > max) {
	                date = max;
	            }

	            this._d = new Date(date.getTime());
	            setToStartOfDay(this._d);
	            this.gotoDate(this._d);

	            if (this._o.field) {
	                this._o.field.value = this.toString();
	                fireEvent(this._o.field, 'change', { firedBy: this });
	            }
	            if (!preventOnSelect && typeof this._o.onSelect === 'function') {
	                this._o.onSelect.call(this, this.getDate());
	            }
	        },

	        /**
	         * change view to a specific date
	         */
	        gotoDate: function(date)
	        {
	            var newCalendar = true;

	            if (!isDate(date)) {
	                return;
	            }

	            if (this.calendars) {
	                var firstVisibleDate = new Date(this.calendars[0].year, this.calendars[0].month, 1),
	                    lastVisibleDate = new Date(this.calendars[this.calendars.length-1].year, this.calendars[this.calendars.length-1].month, 1),
	                    visibleDate = date.getTime();
	                // get the end of the month
	                lastVisibleDate.setMonth(lastVisibleDate.getMonth()+1);
	                lastVisibleDate.setDate(lastVisibleDate.getDate()-1);
	                newCalendar = (visibleDate < firstVisibleDate.getTime() || lastVisibleDate.getTime() < visibleDate);
	            }

	            if (newCalendar) {
	                this.calendars = [{
	                    month: date.getMonth(),
	                    year: date.getFullYear()
	                }];
	                if (this._o.mainCalendar === 'right') {
	                    this.calendars[0].month += 1 - this._o.numberOfMonths;
	                }
	            }

	            this.adjustCalendars();
	        },

	        adjustCalendars: function() {
	            this.calendars[0] = adjustCalendar(this.calendars[0]);
	            for (var c = 1; c < this._o.numberOfMonths; c++) {
	                this.calendars[c] = adjustCalendar({
	                    month: this.calendars[0].month + c,
	                    year: this.calendars[0].year
	                });
	            }
	            this.draw();
	        },

	        gotoToday: function()
	        {
	            this.gotoDate(new Date());
	        },

	        /**
	         * change view to a specific month (zero-index, e.g. 0: January)
	         */
	        gotoMonth: function(month)
	        {
	            if (!isNaN(month)) {
	                this.calendars[0].month = parseInt(month, 10);
	                this.adjustCalendars();
	            }
	        },

	        nextMonth: function()
	        {
	            this.calendars[0].month++;
	            this.adjustCalendars();
	        },

	        prevMonth: function()
	        {
	            this.calendars[0].month--;
	            this.adjustCalendars();
	        },

	        /**
	         * change view to a specific full year (e.g. "2012")
	         */
	        gotoYear: function(year)
	        {
	            if (!isNaN(year)) {
	                this.calendars[0].year = parseInt(year, 10);
	                this.adjustCalendars();
	            }
	        },

	        /**
	         * change the minDate
	         */
	        setMinDate: function(value)
	        {
	            setToStartOfDay(value);
	            this._o.minDate = value;
	            this._o.minYear  = value.getFullYear();
	            this._o.minMonth = value.getMonth();
	        },

	        /**
	         * change the maxDate
	         */
	        setMaxDate: function(value)
	        {
	            this._o.maxDate = value;
	        },

	        setStartRange: function(value)
	        {
	            this._o.startRange = value;
	        },

	        setEndRange: function(value)
	        {
	            this._o.endRange = value;
	        },

	        /**
	         * refresh the HTML
	         */
	        draw: function(force)
	        {
	            if (!this._v && !force) {
	                return;
	            }
	            var opts = this._o,
	                minYear = opts.minYear,
	                maxYear = opts.maxYear,
	                minMonth = opts.minMonth,
	                maxMonth = opts.maxMonth,
	                html = '';

	            if (this._y <= minYear) {
	                this._y = minYear;
	                if (!isNaN(minMonth) && this._m < minMonth) {
	                    this._m = minMonth;
	                }
	            }
	            if (this._y >= maxYear) {
	                this._y = maxYear;
	                if (!isNaN(maxMonth) && this._m > maxMonth) {
	                    this._m = maxMonth;
	                }
	            }

	            for (var c = 0; c < opts.numberOfMonths; c++) {
	                html += '<div class="pika-lendar">' + renderTitle(this, c, this.calendars[c].year, this.calendars[c].month, this.calendars[0].year) + this.render(this.calendars[c].year, this.calendars[c].month) + '</div>';
	            }

	            this.el.innerHTML = html;

	            if (opts.bound) {
	                if(opts.field.type !== 'hidden') {
	                    sto(function() {
	                        opts.trigger.focus();
	                    }, 1);
	                }
	            }

	            if (typeof this._o.onDraw === 'function') {
	                var self = this;
	                sto(function() {
	                    self._o.onDraw.call(self);
	                }, 0);
	            }
	        },

	        adjustPosition: function()
	        {
	            var field, pEl, width, height, viewportWidth, viewportHeight, scrollTop, left, top, clientRect;
	            
	            if (this._o.container) return;
	            
	            this.el.style.position = 'absolute';
	            
	            field = this._o.trigger;
	            pEl = field;
	            width = this.el.offsetWidth;
	            height = this.el.offsetHeight;
	            viewportWidth = window.innerWidth || document.documentElement.clientWidth;
	            viewportHeight = window.innerHeight || document.documentElement.clientHeight;
	            scrollTop = window.pageYOffset || document.body.scrollTop || document.documentElement.scrollTop;

	            if (typeof field.getBoundingClientRect === 'function') {
	                clientRect = field.getBoundingClientRect();
	                left = clientRect.left + window.pageXOffset;
	                top = clientRect.bottom + window.pageYOffset;
	            } else {
	                left = pEl.offsetLeft;
	                top  = pEl.offsetTop + pEl.offsetHeight;
	                while((pEl = pEl.offsetParent)) {
	                    left += pEl.offsetLeft;
	                    top  += pEl.offsetTop;
	                }
	            }

	            // default position is bottom & left
	            if ((this._o.reposition && left + width > viewportWidth) ||
	                (
	                    this._o.position.indexOf('right') > -1 &&
	                    left - width + field.offsetWidth > 0
	                )
	            ) {
	                left = left - width + field.offsetWidth;
	            }
	            if ((this._o.reposition && top + height > viewportHeight + scrollTop) ||
	                (
	                    this._o.position.indexOf('top') > -1 &&
	                    top - height - field.offsetHeight > 0
	                )
	            ) {
	                top = top - height - field.offsetHeight;
	            }

	            this.el.style.left = left + 'px';
	            this.el.style.top = top + 'px';
	        },

	        /**
	         * render HTML for a particular month
	         */
	        render: function(year, month)
	        {
	            var opts   = this._o,
	                now    = new Date(),
	                days   = getDaysInMonth(year, month),
	                before = new Date(year, month, 1).getDay(),
	                data   = [],
	                row    = [];
	            setToStartOfDay(now);
	            if (opts.firstDay > 0) {
	                before -= opts.firstDay;
	                if (before < 0) {
	                    before += 7;
	                }
	            }
	            var cells = days + before,
	                after = cells;
	            while(after > 7) {
	                after -= 7;
	            }
	            cells += 7 - after;
	            for (var i = 0, r = 0; i < cells; i++)
	            {
	                var dayConfig,
	                    day = new Date(year, month, 1 + (i - before)),
	                    isSelected = isDate(this._d) ? compareDates(day, this._d) : false,
	                    isToday = compareDates(day, now),
	                    isEmpty = i < before || i >= (days + before),
	                    isStartRange = opts.startRange && compareDates(opts.startRange, day),
	                    isEndRange = opts.endRange && compareDates(opts.endRange, day),
	                    isInRange = opts.startRange && opts.endRange && opts.startRange < day && day < opts.endRange,
	                    isDisabled = (opts.minDate && day < opts.minDate) ||
	                                 (opts.maxDate && day > opts.maxDate) ||
	                                 (opts.disableWeekends && isWeekend(day)) ||
	                                 (opts.disableDayFn && opts.disableDayFn(day)),
	                    dayConfig = {
	                        day: 1 + (i - before),
	                        month: month,
	                        year: year,
	                        isSelected: isSelected,
	                        isToday: isToday,
	                        isDisabled: isDisabled,
	                        isEmpty: isEmpty,
	                        isStartRange: isStartRange,
	                        isEndRange: isEndRange,
	                        isInRange: isInRange
	                    };

	                row.push(renderDay(dayConfig));

	                if (++r === 7) {
	                    if (opts.showWeekNumber) {
	                        row.unshift(renderWeek(i - before, month, year));
	                    }
	                    data.push(renderRow(row, opts.isRTL));
	                    row = [];
	                    r = 0;
	                }
	            }
	            return renderTable(opts, data);
	        },

	        isVisible: function()
	        {
	            return this._v;
	        },

	        show: function()
	        {
	            if (!this._v) {
	                removeClass(this.el, 'is-hidden');
	                this._v = true;
	                this.draw();
	                if (this._o.bound) {
	                    addEvent(document, 'click', this._onClick);
	                    this.adjustPosition();
	                }
	                if (typeof this._o.onOpen === 'function') {
	                    this._o.onOpen.call(this);
	                }
	            }
	        },

	        hide: function()
	        {
	            var v = this._v;
	            if (v !== false) {
	                if (this._o.bound) {
	                    removeEvent(document, 'click', this._onClick);
	                }
	                this.el.style.position = 'static'; // reset
	                this.el.style.left = 'auto';
	                this.el.style.top = 'auto';
	                addClass(this.el, 'is-hidden');
	                this._v = false;
	                if (v !== undefined && typeof this._o.onClose === 'function') {
	                    this._o.onClose.call(this);
	                }
	            }
	        },

	        /**
	         * GAME OVER
	         */
	        destroy: function()
	        {
	            this.hide();
	            removeEvent(this.el, 'mousedown', this._onMouseDown, true);
	            removeEvent(this.el, 'change', this._onChange);
	            if (this._o.field) {
	                removeEvent(this._o.field, 'change', this._onInputChange);
	                if (this._o.bound) {
	                    removeEvent(this._o.trigger, 'click', this._onInputClick);
	                    removeEvent(this._o.trigger, 'focus', this._onInputFocus);
	                    removeEvent(this._o.trigger, 'blur', this._onInputBlur);
	                }
	            }
	            if (this.el.parentNode) {
	                this.el.parentNode.removeChild(this.el);
	            }
	        }

	    };

	    return Pikaday;

	}));

	},{"moment":"moment"}],"zeroclipboard":[function(require,module,exports){
	/*!
	 * ZeroClipboard
	 * The ZeroClipboard library provides an easy way to copy text to the clipboard using an invisible Adobe Flash movie and a JavaScript interface.
	 * Copyright (c) 2009-2014 Jon Rohan, James M. Greene
	 * Licensed MIT
	 * http://zeroclipboard.org/
	 * v2.2.0
	 */
	(function(window, undefined) {
	  "use strict";
	  /**
	 * Store references to critically important global functions that may be
	 * overridden on certain web pages.
	 */
	  var _window = window, _document = _window.document, _navigator = _window.navigator, _setTimeout = _window.setTimeout, _clearTimeout = _window.clearTimeout, _setInterval = _window.setInterval, _clearInterval = _window.clearInterval, _getComputedStyle = _window.getComputedStyle, _encodeURIComponent = _window.encodeURIComponent, _ActiveXObject = _window.ActiveXObject, _Error = _window.Error, _parseInt = _window.Number.parseInt || _window.parseInt, _parseFloat = _window.Number.parseFloat || _window.parseFloat, _isNaN = _window.Number.isNaN || _window.isNaN, _now = _window.Date.now, _keys = _window.Object.keys, _defineProperty = _window.Object.defineProperty, _hasOwn = _window.Object.prototype.hasOwnProperty, _slice = _window.Array.prototype.slice, _unwrap = function() {
	    var unwrapper = function(el) {
	      return el;
	    };
	    if (typeof _window.wrap === "function" && typeof _window.unwrap === "function") {
	      try {
	        var div = _document.createElement("div");
	        var unwrappedDiv = _window.unwrap(div);
	        if (div.nodeType === 1 && unwrappedDiv && unwrappedDiv.nodeType === 1) {
	          unwrapper = _window.unwrap;
	        }
	      } catch (e) {}
	    }
	    return unwrapper;
	  }();
	  /**
	 * Convert an `arguments` object into an Array.
	 *
	 * @returns The arguments as an Array
	 * @private
	 */
	  var _args = function(argumentsObj) {
	    return _slice.call(argumentsObj, 0);
	  };
	  /**
	 * Shallow-copy the owned, enumerable properties of one object over to another, similar to jQuery's `$.extend`.
	 *
	 * @returns The target object, augmented
	 * @private
	 */
	  var _extend = function() {
	    var i, len, arg, prop, src, copy, args = _args(arguments), target = args[0] || {};
	    for (i = 1, len = args.length; i < len; i++) {
	      if ((arg = args[i]) != null) {
	        for (prop in arg) {
	          if (_hasOwn.call(arg, prop)) {
	            src = target[prop];
	            copy = arg[prop];
	            if (target !== copy && copy !== undefined) {
	              target[prop] = copy;
	            }
	          }
	        }
	      }
	    }
	    return target;
	  };
	  /**
	 * Return a deep copy of the source object or array.
	 *
	 * @returns Object or Array
	 * @private
	 */
	  var _deepCopy = function(source) {
	    var copy, i, len, prop;
	    if (typeof source !== "object" || source == null || typeof source.nodeType === "number") {
	      copy = source;
	    } else if (typeof source.length === "number") {
	      copy = [];
	      for (i = 0, len = source.length; i < len; i++) {
	        if (_hasOwn.call(source, i)) {
	          copy[i] = _deepCopy(source[i]);
	        }
	      }
	    } else {
	      copy = {};
	      for (prop in source) {
	        if (_hasOwn.call(source, prop)) {
	          copy[prop] = _deepCopy(source[prop]);
	        }
	      }
	    }
	    return copy;
	  };
	  /**
	 * Makes a shallow copy of `obj` (like `_extend`) but filters its properties based on a list of `keys` to keep.
	 * The inverse of `_omit`, mostly. The big difference is that these properties do NOT need to be enumerable to
	 * be kept.
	 *
	 * @returns A new filtered object.
	 * @private
	 */
	  var _pick = function(obj, keys) {
	    var newObj = {};
	    for (var i = 0, len = keys.length; i < len; i++) {
	      if (keys[i] in obj) {
	        newObj[keys[i]] = obj[keys[i]];
	      }
	    }
	    return newObj;
	  };
	  /**
	 * Makes a shallow copy of `obj` (like `_extend`) but filters its properties based on a list of `keys` to omit.
	 * The inverse of `_pick`.
	 *
	 * @returns A new filtered object.
	 * @private
	 */
	  var _omit = function(obj, keys) {
	    var newObj = {};
	    for (var prop in obj) {
	      if (keys.indexOf(prop) === -1) {
	        newObj[prop] = obj[prop];
	      }
	    }
	    return newObj;
	  };
	  /**
	 * Remove all owned, enumerable properties from an object.
	 *
	 * @returns The original object without its owned, enumerable properties.
	 * @private
	 */
	  var _deleteOwnProperties = function(obj) {
	    if (obj) {
	      for (var prop in obj) {
	        if (_hasOwn.call(obj, prop)) {
	          delete obj[prop];
	        }
	      }
	    }
	    return obj;
	  };
	  /**
	 * Determine if an element is contained within another element.
	 *
	 * @returns Boolean
	 * @private
	 */
	  var _containedBy = function(el, ancestorEl) {
	    if (el && el.nodeType === 1 && el.ownerDocument && ancestorEl && (ancestorEl.nodeType === 1 && ancestorEl.ownerDocument && ancestorEl.ownerDocument === el.ownerDocument || ancestorEl.nodeType === 9 && !ancestorEl.ownerDocument && ancestorEl === el.ownerDocument)) {
	      do {
	        if (el === ancestorEl) {
	          return true;
	        }
	        el = el.parentNode;
	      } while (el);
	    }
	    return false;
	  };
	  /**
	 * Get the URL path's parent directory.
	 *
	 * @returns String or `undefined`
	 * @private
	 */
	  var _getDirPathOfUrl = function(url) {
	    var dir;
	    if (typeof url === "string" && url) {
	      dir = url.split("#")[0].split("?")[0];
	      dir = url.slice(0, url.lastIndexOf("/") + 1);
	    }
	    return dir;
	  };
	  /**
	 * Get the current script's URL by throwing an `Error` and analyzing it.
	 *
	 * @returns String or `undefined`
	 * @private
	 */
	  var _getCurrentScriptUrlFromErrorStack = function(stack) {
	    var url, matches;
	    if (typeof stack === "string" && stack) {
	      matches = stack.match(/^(?:|[^:@]*@|.+\)@(?=http[s]?|file)|.+?\s+(?: at |@)(?:[^:\(]+ )*[\(]?)((?:http[s]?|file):\/\/[\/]?.+?\/[^:\)]*?)(?::\d+)(?::\d+)?/);
	      if (matches && matches[1]) {
	        url = matches[1];
	      } else {
	        matches = stack.match(/\)@((?:http[s]?|file):\/\/[\/]?.+?\/[^:\)]*?)(?::\d+)(?::\d+)?/);
	        if (matches && matches[1]) {
	          url = matches[1];
	        }
	      }
	    }
	    return url;
	  };
	  /**
	 * Get the current script's URL by throwing an `Error` and analyzing it.
	 *
	 * @returns String or `undefined`
	 * @private
	 */
	  var _getCurrentScriptUrlFromError = function() {
	    var url, err;
	    try {
	      throw new _Error();
	    } catch (e) {
	      err = e;
	    }
	    if (err) {
	      url = err.sourceURL || err.fileName || _getCurrentScriptUrlFromErrorStack(err.stack);
	    }
	    return url;
	  };
	  /**
	 * Get the current script's URL.
	 *
	 * @returns String or `undefined`
	 * @private
	 */
	  var _getCurrentScriptUrl = function() {
	    var jsPath, scripts, i;
	    if (_document.currentScript && (jsPath = _document.currentScript.src)) {
	      return jsPath;
	    }
	    scripts = _document.getElementsByTagName("script");
	    if (scripts.length === 1) {
	      return scripts[0].src || undefined;
	    }
	    if ("readyState" in scripts[0]) {
	      for (i = scripts.length; i--; ) {
	        if (scripts[i].readyState === "interactive" && (jsPath = scripts[i].src)) {
	          return jsPath;
	        }
	      }
	    }
	    if (_document.readyState === "loading" && (jsPath = scripts[scripts.length - 1].src)) {
	      return jsPath;
	    }
	    if (jsPath = _getCurrentScriptUrlFromError()) {
	      return jsPath;
	    }
	    return undefined;
	  };
	  /**
	 * Get the unanimous parent directory of ALL script tags.
	 * If any script tags are either (a) inline or (b) from differing parent
	 * directories, this method must return `undefined`.
	 *
	 * @returns String or `undefined`
	 * @private
	 */
	  var _getUnanimousScriptParentDir = function() {
	    var i, jsDir, jsPath, scripts = _document.getElementsByTagName("script");
	    for (i = scripts.length; i--; ) {
	      if (!(jsPath = scripts[i].src)) {
	        jsDir = null;
	        break;
	      }
	      jsPath = _getDirPathOfUrl(jsPath);
	      if (jsDir == null) {
	        jsDir = jsPath;
	      } else if (jsDir !== jsPath) {
	        jsDir = null;
	        break;
	      }
	    }
	    return jsDir || undefined;
	  };
	  /**
	 * Get the presumed location of the "ZeroClipboard.swf" file, based on the location
	 * of the executing JavaScript file (e.g. "ZeroClipboard.js", etc.).
	 *
	 * @returns String
	 * @private
	 */
	  var _getDefaultSwfPath = function() {
	    var jsDir = _getDirPathOfUrl(_getCurrentScriptUrl()) || _getUnanimousScriptParentDir() || "";
	    return jsDir + "ZeroClipboard.swf";
	  };
	  /**
	 * Keep track of if the page is framed (in an `iframe`). This can never change.
	 * @private
	 */
	  var _pageIsFramed = function() {
	    return window.opener == null && (!!window.top && window != window.top || !!window.parent && window != window.parent);
	  }();
	  /**
	 * Keep track of the state of the Flash object.
	 * @private
	 */
	  var _flashState = {
	    bridge: null,
	    version: "0.0.0",
	    pluginType: "unknown",
	    disabled: null,
	    outdated: null,
	    sandboxed: null,
	    unavailable: null,
	    degraded: null,
	    deactivated: null,
	    overdue: null,
	    ready: null
	  };
	  /**
	 * The minimum Flash Player version required to use ZeroClipboard completely.
	 * @readonly
	 * @private
	 */
	  var _minimumFlashVersion = "11.0.0";
	  /**
	 * The ZeroClipboard library version number, as reported by Flash, at the time the SWF was compiled.
	 */
	  var _zcSwfVersion;
	  /**
	 * Keep track of all event listener registrations.
	 * @private
	 */
	  var _handlers = {};
	  /**
	 * Keep track of the currently activated element.
	 * @private
	 */
	  var _currentElement;
	  /**
	 * Keep track of the element that was activated when a `copy` process started.
	 * @private
	 */
	  var _copyTarget;
	  /**
	 * Keep track of data for the pending clipboard transaction.
	 * @private
	 */
	  var _clipData = {};
	  /**
	 * Keep track of data formats for the pending clipboard transaction.
	 * @private
	 */
	  var _clipDataFormatMap = null;
	  /**
	 * Keep track of the Flash availability check timeout.
	 * @private
	 */
	  var _flashCheckTimeout = 0;
	  /**
	 * Keep track of SWF network errors interval polling.
	 * @private
	 */
	  var _swfFallbackCheckInterval = 0;
	  /**
	 * The `message` store for events
	 * @private
	 */
	  var _eventMessages = {
	    ready: "Flash communication is established",
	    error: {
	      "flash-disabled": "Flash is disabled or not installed. May also be attempting to run Flash in a sandboxed iframe, which is impossible.",
	      "flash-outdated": "Flash is too outdated to support ZeroClipboard",
	      "flash-sandboxed": "Attempting to run Flash in a sandboxed iframe, which is impossible",
	      "flash-unavailable": "Flash is unable to communicate bidirectionally with JavaScript",
	      "flash-degraded": "Flash is unable to preserve data fidelity when communicating with JavaScript",
	      "flash-deactivated": "Flash is too outdated for your browser and/or is configured as click-to-activate.\nThis may also mean that the ZeroClipboard SWF object could not be loaded, so please check your `swfPath` configuration and/or network connectivity.\nMay also be attempting to run Flash in a sandboxed iframe, which is impossible.",
	      "flash-overdue": "Flash communication was established but NOT within the acceptable time limit",
	      "version-mismatch": "ZeroClipboard JS version number does not match ZeroClipboard SWF version number",
	      "clipboard-error": "At least one error was thrown while ZeroClipboard was attempting to inject your data into the clipboard",
	      "config-mismatch": "ZeroClipboard configuration does not match Flash's reality",
	      "swf-not-found": "The ZeroClipboard SWF object could not be loaded, so please check your `swfPath` configuration and/or network connectivity"
	    }
	  };
	  /**
	 * The `name`s of `error` events that can only occur is Flash has at least
	 * been able to load the SWF successfully.
	 * @private
	 */
	  var _errorsThatOnlyOccurAfterFlashLoads = [ "flash-unavailable", "flash-degraded", "flash-overdue", "version-mismatch", "config-mismatch", "clipboard-error" ];
	  /**
	 * The `name`s of `error` events that should likely result in the `_flashState`
	 * variable's property values being updated.
	 * @private
	 */
	  var _flashStateErrorNames = [ "flash-disabled", "flash-outdated", "flash-sandboxed", "flash-unavailable", "flash-degraded", "flash-deactivated", "flash-overdue" ];
	  /**
	 * A RegExp to match the `name` property of `error` events related to Flash.
	 * @private
	 */
	  var _flashStateErrorNameMatchingRegex = new RegExp("^flash-(" + _flashStateErrorNames.map(function(errorName) {
	    return errorName.replace(/^flash-/, "");
	  }).join("|") + ")$");
	  /**
	 * A RegExp to match the `name` property of `error` events related to Flash,
	 * which is enabled.
	 * @private
	 */
	  var _flashStateEnabledErrorNameMatchingRegex = new RegExp("^flash-(" + _flashStateErrorNames.slice(1).map(function(errorName) {
	    return errorName.replace(/^flash-/, "");
	  }).join("|") + ")$");
	  /**
	 * ZeroClipboard configuration defaults for the Core module.
	 * @private
	 */
	  var _globalConfig = {
	    swfPath: _getDefaultSwfPath(),
	    trustedDomains: window.location.host ? [ window.location.host ] : [],
	    cacheBust: true,
	    forceEnhancedClipboard: false,
	    flashLoadTimeout: 3e4,
	    autoActivate: true,
	    bubbleEvents: true,
	    containerId: "global-zeroclipboard-html-bridge",
	    containerClass: "global-zeroclipboard-container",
	    swfObjectId: "global-zeroclipboard-flash-bridge",
	    hoverClass: "zeroclipboard-is-hover",
	    activeClass: "zeroclipboard-is-active",
	    forceHandCursor: false,
	    title: null,
	    zIndex: 999999999
	  };
	  /**
	 * The underlying implementation of `ZeroClipboard.config`.
	 * @private
	 */
	  var _config = function(options) {
	    if (typeof options === "object" && options !== null) {
	      for (var prop in options) {
	        if (_hasOwn.call(options, prop)) {
	          if (/^(?:forceHandCursor|title|zIndex|bubbleEvents)$/.test(prop)) {
	            _globalConfig[prop] = options[prop];
	          } else if (_flashState.bridge == null) {
	            if (prop === "containerId" || prop === "swfObjectId") {
	              if (_isValidHtml4Id(options[prop])) {
	                _globalConfig[prop] = options[prop];
	              } else {
	                throw new Error("The specified `" + prop + "` value is not valid as an HTML4 Element ID");
	              }
	            } else {
	              _globalConfig[prop] = options[prop];
	            }
	          }
	        }
	      }
	    }
	    if (typeof options === "string" && options) {
	      if (_hasOwn.call(_globalConfig, options)) {
	        return _globalConfig[options];
	      }
	      return;
	    }
	    return _deepCopy(_globalConfig);
	  };
	  /**
	 * The underlying implementation of `ZeroClipboard.state`.
	 * @private
	 */
	  var _state = function() {
	    _detectSandbox();
	    return {
	      browser: _pick(_navigator, [ "userAgent", "platform", "appName" ]),
	      flash: _omit(_flashState, [ "bridge" ]),
	      zeroclipboard: {
	        version: ZeroClipboard.version,
	        config: ZeroClipboard.config()
	      }
	    };
	  };
	  /**
	 * The underlying implementation of `ZeroClipboard.isFlashUnusable`.
	 * @private
	 */
	  var _isFlashUnusable = function() {
	    return !!(_flashState.disabled || _flashState.outdated || _flashState.sandboxed || _flashState.unavailable || _flashState.degraded || _flashState.deactivated);
	  };
	  /**
	 * The underlying implementation of `ZeroClipboard.on`.
	 * @private
	 */
	  var _on = function(eventType, listener) {
	    var i, len, events, added = {};
	    if (typeof eventType === "string" && eventType) {
	      events = eventType.toLowerCase().split(/\s+/);
	    } else if (typeof eventType === "object" && eventType && typeof listener === "undefined") {
	      for (i in eventType) {
	        if (_hasOwn.call(eventType, i) && typeof i === "string" && i && typeof eventType[i] === "function") {
	          ZeroClipboard.on(i, eventType[i]);
	        }
	      }
	    }
	    if (events && events.length) {
	      for (i = 0, len = events.length; i < len; i++) {
	        eventType = events[i].replace(/^on/, "");
	        added[eventType] = true;
	        if (!_handlers[eventType]) {
	          _handlers[eventType] = [];
	        }
	        _handlers[eventType].push(listener);
	      }
	      if (added.ready && _flashState.ready) {
	        ZeroClipboard.emit({
	          type: "ready"
	        });
	      }
	      if (added.error) {
	        for (i = 0, len = _flashStateErrorNames.length; i < len; i++) {
	          if (_flashState[_flashStateErrorNames[i].replace(/^flash-/, "")] === true) {
	            ZeroClipboard.emit({
	              type: "error",
	              name: _flashStateErrorNames[i]
	            });
	            break;
	          }
	        }
	        if (_zcSwfVersion !== undefined && ZeroClipboard.version !== _zcSwfVersion) {
	          ZeroClipboard.emit({
	            type: "error",
	            name: "version-mismatch",
	            jsVersion: ZeroClipboard.version,
	            swfVersion: _zcSwfVersion
	          });
	        }
	      }
	    }
	    return ZeroClipboard;
	  };
	  /**
	 * The underlying implementation of `ZeroClipboard.off`.
	 * @private
	 */
	  var _off = function(eventType, listener) {
	    var i, len, foundIndex, events, perEventHandlers;
	    if (arguments.length === 0) {
	      events = _keys(_handlers);
	    } else if (typeof eventType === "string" && eventType) {
	      events = eventType.split(/\s+/);
	    } else if (typeof eventType === "object" && eventType && typeof listener === "undefined") {
	      for (i in eventType) {
	        if (_hasOwn.call(eventType, i) && typeof i === "string" && i && typeof eventType[i] === "function") {
	          ZeroClipboard.off(i, eventType[i]);
	        }
	      }
	    }
	    if (events && events.length) {
	      for (i = 0, len = events.length; i < len; i++) {
	        eventType = events[i].toLowerCase().replace(/^on/, "");
	        perEventHandlers = _handlers[eventType];
	        if (perEventHandlers && perEventHandlers.length) {
	          if (listener) {
	            foundIndex = perEventHandlers.indexOf(listener);
	            while (foundIndex !== -1) {
	              perEventHandlers.splice(foundIndex, 1);
	              foundIndex = perEventHandlers.indexOf(listener, foundIndex);
	            }
	          } else {
	            perEventHandlers.length = 0;
	          }
	        }
	      }
	    }
	    return ZeroClipboard;
	  };
	  /**
	 * The underlying implementation of `ZeroClipboard.handlers`.
	 * @private
	 */
	  var _listeners = function(eventType) {
	    var copy;
	    if (typeof eventType === "string" && eventType) {
	      copy = _deepCopy(_handlers[eventType]) || null;
	    } else {
	      copy = _deepCopy(_handlers);
	    }
	    return copy;
	  };
	  /**
	 * The underlying implementation of `ZeroClipboard.emit`.
	 * @private
	 */
	  var _emit = function(event) {
	    var eventCopy, returnVal, tmp;
	    event = _createEvent(event);
	    if (!event) {
	      return;
	    }
	    if (_preprocessEvent(event)) {
	      return;
	    }
	    if (event.type === "ready" && _flashState.overdue === true) {
	      return ZeroClipboard.emit({
	        type: "error",
	        name: "flash-overdue"
	      });
	    }
	    eventCopy = _extend({}, event);
	    _dispatchCallbacks.call(this, eventCopy);
	    if (event.type === "copy") {
	      tmp = _mapClipDataToFlash(_clipData);
	      returnVal = tmp.data;
	      _clipDataFormatMap = tmp.formatMap;
	    }
	    return returnVal;
	  };
	  /**
	 * The underlying implementation of `ZeroClipboard.create`.
	 * @private
	 */
	  var _create = function() {
	    var previousState = _flashState.sandboxed;
	    _detectSandbox();
	    if (typeof _flashState.ready !== "boolean") {
	      _flashState.ready = false;
	    }
	    if (_flashState.sandboxed !== previousState && _flashState.sandboxed === true) {
	      _flashState.ready = false;
	      ZeroClipboard.emit({
	        type: "error",
	        name: "flash-sandboxed"
	      });
	    } else if (!ZeroClipboard.isFlashUnusable() && _flashState.bridge === null) {
	      var maxWait = _globalConfig.flashLoadTimeout;
	      if (typeof maxWait === "number" && maxWait >= 0) {
	        _flashCheckTimeout = _setTimeout(function() {
	          if (typeof _flashState.deactivated !== "boolean") {
	            _flashState.deactivated = true;
	          }
	          if (_flashState.deactivated === true) {
	            ZeroClipboard.emit({
	              type: "error",
	              name: "flash-deactivated"
	            });
	          }
	        }, maxWait);
	      }
	      _flashState.overdue = false;
	      _embedSwf();
	    }
	  };
	  /**
	 * The underlying implementation of `ZeroClipboard.destroy`.
	 * @private
	 */
	  var _destroy = function() {
	    ZeroClipboard.clearData();
	    ZeroClipboard.blur();
	    ZeroClipboard.emit("destroy");
	    _unembedSwf();
	    ZeroClipboard.off();
	  };
	  /**
	 * The underlying implementation of `ZeroClipboard.setData`.
	 * @private
	 */
	  var _setData = function(format, data) {
	    var dataObj;
	    if (typeof format === "object" && format && typeof data === "undefined") {
	      dataObj = format;
	      ZeroClipboard.clearData();
	    } else if (typeof format === "string" && format) {
	      dataObj = {};
	      dataObj[format] = data;
	    } else {
	      return;
	    }
	    for (var dataFormat in dataObj) {
	      if (typeof dataFormat === "string" && dataFormat && _hasOwn.call(dataObj, dataFormat) && typeof dataObj[dataFormat] === "string" && dataObj[dataFormat]) {
	        _clipData[dataFormat] = dataObj[dataFormat];
	      }
	    }
	  };
	  /**
	 * The underlying implementation of `ZeroClipboard.clearData`.
	 * @private
	 */
	  var _clearData = function(format) {
	    if (typeof format === "undefined") {
	      _deleteOwnProperties(_clipData);
	      _clipDataFormatMap = null;
	    } else if (typeof format === "string" && _hasOwn.call(_clipData, format)) {
	      delete _clipData[format];
	    }
	  };
	  /**
	 * The underlying implementation of `ZeroClipboard.getData`.
	 * @private
	 */
	  var _getData = function(format) {
	    if (typeof format === "undefined") {
	      return _deepCopy(_clipData);
	    } else if (typeof format === "string" && _hasOwn.call(_clipData, format)) {
	      return _clipData[format];
	    }
	  };
	  /**
	 * The underlying implementation of `ZeroClipboard.focus`/`ZeroClipboard.activate`.
	 * @private
	 */
	  var _focus = function(element) {
	    if (!(element && element.nodeType === 1)) {
	      return;
	    }
	    if (_currentElement) {
	      _removeClass(_currentElement, _globalConfig.activeClass);
	      if (_currentElement !== element) {
	        _removeClass(_currentElement, _globalConfig.hoverClass);
	      }
	    }
	    _currentElement = element;
	    _addClass(element, _globalConfig.hoverClass);
	    var newTitle = element.getAttribute("title") || _globalConfig.title;
	    if (typeof newTitle === "string" && newTitle) {
	      var htmlBridge = _getHtmlBridge(_flashState.bridge);
	      if (htmlBridge) {
	        htmlBridge.setAttribute("title", newTitle);
	      }
	    }
	    var useHandCursor = _globalConfig.forceHandCursor === true || _getStyle(element, "cursor") === "pointer";
	    _setHandCursor(useHandCursor);
	    _reposition();
	  };
	  /**
	 * The underlying implementation of `ZeroClipboard.blur`/`ZeroClipboard.deactivate`.
	 * @private
	 */
	  var _blur = function() {
	    var htmlBridge = _getHtmlBridge(_flashState.bridge);
	    if (htmlBridge) {
	      htmlBridge.removeAttribute("title");
	      htmlBridge.style.left = "0px";
	      htmlBridge.style.top = "-9999px";
	      htmlBridge.style.width = "1px";
	      htmlBridge.style.height = "1px";
	    }
	    if (_currentElement) {
	      _removeClass(_currentElement, _globalConfig.hoverClass);
	      _removeClass(_currentElement, _globalConfig.activeClass);
	      _currentElement = null;
	    }
	  };
	  /**
	 * The underlying implementation of `ZeroClipboard.activeElement`.
	 * @private
	 */
	  var _activeElement = function() {
	    return _currentElement || null;
	  };
	  /**
	 * Check if a value is a valid HTML4 `ID` or `Name` token.
	 * @private
	 */
	  var _isValidHtml4Id = function(id) {
	    return typeof id === "string" && id && /^[A-Za-z][A-Za-z0-9_:\-\.]*$/.test(id);
	  };
	  /**
	 * Create or update an `event` object, based on the `eventType`.
	 * @private
	 */
	  var _createEvent = function(event) {
	    var eventType;
	    if (typeof event === "string" && event) {
	      eventType = event;
	      event = {};
	    } else if (typeof event === "object" && event && typeof event.type === "string" && event.type) {
	      eventType = event.type;
	    }
	    if (!eventType) {
	      return;
	    }
	    eventType = eventType.toLowerCase();
	    if (!event.target && (/^(copy|aftercopy|_click)$/.test(eventType) || eventType === "error" && event.name === "clipboard-error")) {
	      event.target = _copyTarget;
	    }
	    _extend(event, {
	      type: eventType,
	      target: event.target || _currentElement || null,
	      relatedTarget: event.relatedTarget || null,
	      currentTarget: _flashState && _flashState.bridge || null,
	      timeStamp: event.timeStamp || _now() || null
	    });
	    var msg = _eventMessages[event.type];
	    if (event.type === "error" && event.name && msg) {
	      msg = msg[event.name];
	    }
	    if (msg) {
	      event.message = msg;
	    }
	    if (event.type === "ready") {
	      _extend(event, {
	        target: null,
	        version: _flashState.version
	      });
	    }
	    if (event.type === "error") {
	      if (_flashStateErrorNameMatchingRegex.test(event.name)) {
	        _extend(event, {
	          target: null,
	          minimumVersion: _minimumFlashVersion
	        });
	      }
	      if (_flashStateEnabledErrorNameMatchingRegex.test(event.name)) {
	        _extend(event, {
	          version: _flashState.version
	        });
	      }
	    }
	    if (event.type === "copy") {
	      event.clipboardData = {
	        setData: ZeroClipboard.setData,
	        clearData: ZeroClipboard.clearData
	      };
	    }
	    if (event.type === "aftercopy") {
	      event = _mapClipResultsFromFlash(event, _clipDataFormatMap);
	    }
	    if (event.target && !event.relatedTarget) {
	      event.relatedTarget = _getRelatedTarget(event.target);
	    }
	    return _addMouseData(event);
	  };
	  /**
	 * Get a relatedTarget from the target's `data-clipboard-target` attribute
	 * @private
	 */
	  var _getRelatedTarget = function(targetEl) {
	    var relatedTargetId = targetEl && targetEl.getAttribute && targetEl.getAttribute("data-clipboard-target");
	    return relatedTargetId ? _document.getElementById(relatedTargetId) : null;
	  };
	  /**
	 * Add element and position data to `MouseEvent` instances
	 * @private
	 */
	  var _addMouseData = function(event) {
	    if (event && /^_(?:click|mouse(?:over|out|down|up|move))$/.test(event.type)) {
	      var srcElement = event.target;
	      var fromElement = event.type === "_mouseover" && event.relatedTarget ? event.relatedTarget : undefined;
	      var toElement = event.type === "_mouseout" && event.relatedTarget ? event.relatedTarget : undefined;
	      var pos = _getElementPosition(srcElement);
	      var screenLeft = _window.screenLeft || _window.screenX || 0;
	      var screenTop = _window.screenTop || _window.screenY || 0;
	      var scrollLeft = _document.body.scrollLeft + _document.documentElement.scrollLeft;
	      var scrollTop = _document.body.scrollTop + _document.documentElement.scrollTop;
	      var pageX = pos.left + (typeof event._stageX === "number" ? event._stageX : 0);
	      var pageY = pos.top + (typeof event._stageY === "number" ? event._stageY : 0);
	      var clientX = pageX - scrollLeft;
	      var clientY = pageY - scrollTop;
	      var screenX = screenLeft + clientX;
	      var screenY = screenTop + clientY;
	      var moveX = typeof event.movementX === "number" ? event.movementX : 0;
	      var moveY = typeof event.movementY === "number" ? event.movementY : 0;
	      delete event._stageX;
	      delete event._stageY;
	      _extend(event, {
	        srcElement: srcElement,
	        fromElement: fromElement,
	        toElement: toElement,
	        screenX: screenX,
	        screenY: screenY,
	        pageX: pageX,
	        pageY: pageY,
	        clientX: clientX,
	        clientY: clientY,
	        x: clientX,
	        y: clientY,
	        movementX: moveX,
	        movementY: moveY,
	        offsetX: 0,
	        offsetY: 0,
	        layerX: 0,
	        layerY: 0
	      });
	    }
	    return event;
	  };
	  /**
	 * Determine if an event's registered handlers should be execute synchronously or asynchronously.
	 *
	 * @returns {boolean}
	 * @private
	 */
	  var _shouldPerformAsync = function(event) {
	    var eventType = event && typeof event.type === "string" && event.type || "";
	    return !/^(?:(?:before)?copy|destroy)$/.test(eventType);
	  };
	  /**
	 * Control if a callback should be executed asynchronously or not.
	 *
	 * @returns `undefined`
	 * @private
	 */
	  var _dispatchCallback = function(func, context, args, async) {
	    if (async) {
	      _setTimeout(function() {
	        func.apply(context, args);
	      }, 0);
	    } else {
	      func.apply(context, args);
	    }
	  };
	  /**
	 * Handle the actual dispatching of events to client instances.
	 *
	 * @returns `undefined`
	 * @private
	 */
	  var _dispatchCallbacks = function(event) {
	    if (!(typeof event === "object" && event && event.type)) {
	      return;
	    }
	    var async = _shouldPerformAsync(event);
	    var wildcardTypeHandlers = _handlers["*"] || [];
	    var specificTypeHandlers = _handlers[event.type] || [];
	    var handlers = wildcardTypeHandlers.concat(specificTypeHandlers);
	    if (handlers && handlers.length) {
	      var i, len, func, context, eventCopy, originalContext = this;
	      for (i = 0, len = handlers.length; i < len; i++) {
	        func = handlers[i];
	        context = originalContext;
	        if (typeof func === "string" && typeof _window[func] === "function") {
	          func = _window[func];
	        }
	        if (typeof func === "object" && func && typeof func.handleEvent === "function") {
	          context = func;
	          func = func.handleEvent;
	        }
	        if (typeof func === "function") {
	          eventCopy = _extend({}, event);
	          _dispatchCallback(func, context, [ eventCopy ], async);
	        }
	      }
	    }
	    return this;
	  };
	  /**
	 * Check an `error` event's `name` property to see if Flash has
	 * already loaded, which rules out possible `iframe` sandboxing.
	 * @private
	 */
	  var _getSandboxStatusFromErrorEvent = function(event) {
	    var isSandboxed = null;
	    if (_pageIsFramed === false || event && event.type === "error" && event.name && _errorsThatOnlyOccurAfterFlashLoads.indexOf(event.name) !== -1) {
	      isSandboxed = false;
	    }
	    return isSandboxed;
	  };
	  /**
	 * Preprocess any special behaviors, reactions, or state changes after receiving this event.
	 * Executes only once per event emitted, NOT once per client.
	 * @private
	 */
	  var _preprocessEvent = function(event) {
	    var element = event.target || _currentElement || null;
	    var sourceIsSwf = event._source === "swf";
	    delete event._source;
	    switch (event.type) {
	     case "error":
	      var isSandboxed = event.name === "flash-sandboxed" || _getSandboxStatusFromErrorEvent(event);
	      if (typeof isSandboxed === "boolean") {
	        _flashState.sandboxed = isSandboxed;
	      }
	      if (_flashStateErrorNames.indexOf(event.name) !== -1) {
	        _extend(_flashState, {
	          disabled: event.name === "flash-disabled",
	          outdated: event.name === "flash-outdated",
	          unavailable: event.name === "flash-unavailable",
	          degraded: event.name === "flash-degraded",
	          deactivated: event.name === "flash-deactivated",
	          overdue: event.name === "flash-overdue",
	          ready: false
	        });
	      } else if (event.name === "version-mismatch") {
	        _zcSwfVersion = event.swfVersion;
	        _extend(_flashState, {
	          disabled: false,
	          outdated: false,
	          unavailable: false,
	          degraded: false,
	          deactivated: false,
	          overdue: false,
	          ready: false
	        });
	      }
	      _clearTimeoutsAndPolling();
	      break;

	     case "ready":
	      _zcSwfVersion = event.swfVersion;
	      var wasDeactivated = _flashState.deactivated === true;
	      _extend(_flashState, {
	        disabled: false,
	        outdated: false,
	        sandboxed: false,
	        unavailable: false,
	        degraded: false,
	        deactivated: false,
	        overdue: wasDeactivated,
	        ready: !wasDeactivated
	      });
	      _clearTimeoutsAndPolling();
	      break;

	     case "beforecopy":
	      _copyTarget = element;
	      break;

	     case "copy":
	      var textContent, htmlContent, targetEl = event.relatedTarget;
	      if (!(_clipData["text/html"] || _clipData["text/plain"]) && targetEl && (htmlContent = targetEl.value || targetEl.outerHTML || targetEl.innerHTML) && (textContent = targetEl.value || targetEl.textContent || targetEl.innerText)) {
	        event.clipboardData.clearData();
	        event.clipboardData.setData("text/plain", textContent);
	        if (htmlContent !== textContent) {
	          event.clipboardData.setData("text/html", htmlContent);
	        }
	      } else if (!_clipData["text/plain"] && event.target && (textContent = event.target.getAttribute("data-clipboard-text"))) {
	        event.clipboardData.clearData();
	        event.clipboardData.setData("text/plain", textContent);
	      }
	      break;

	     case "aftercopy":
	      _queueEmitClipboardErrors(event);
	      ZeroClipboard.clearData();
	      if (element && element !== _safeActiveElement() && element.focus) {
	        element.focus();
	      }
	      break;

	     case "_mouseover":
	      ZeroClipboard.focus(element);
	      if (_globalConfig.bubbleEvents === true && sourceIsSwf) {
	        if (element && element !== event.relatedTarget && !_containedBy(event.relatedTarget, element)) {
	          _fireMouseEvent(_extend({}, event, {
	            type: "mouseenter",
	            bubbles: false,
	            cancelable: false
	          }));
	        }
	        _fireMouseEvent(_extend({}, event, {
	          type: "mouseover"
	        }));
	      }
	      break;

	     case "_mouseout":
	      ZeroClipboard.blur();
	      if (_globalConfig.bubbleEvents === true && sourceIsSwf) {
	        if (element && element !== event.relatedTarget && !_containedBy(event.relatedTarget, element)) {
	          _fireMouseEvent(_extend({}, event, {
	            type: "mouseleave",
	            bubbles: false,
	            cancelable: false
	          }));
	        }
	        _fireMouseEvent(_extend({}, event, {
	          type: "mouseout"
	        }));
	      }
	      break;

	     case "_mousedown":
	      _addClass(element, _globalConfig.activeClass);
	      if (_globalConfig.bubbleEvents === true && sourceIsSwf) {
	        _fireMouseEvent(_extend({}, event, {
	          type: event.type.slice(1)
	        }));
	      }
	      break;

	     case "_mouseup":
	      _removeClass(element, _globalConfig.activeClass);
	      if (_globalConfig.bubbleEvents === true && sourceIsSwf) {
	        _fireMouseEvent(_extend({}, event, {
	          type: event.type.slice(1)
	        }));
	      }
	      break;

	     case "_click":
	      _copyTarget = null;
	      if (_globalConfig.bubbleEvents === true && sourceIsSwf) {
	        _fireMouseEvent(_extend({}, event, {
	          type: event.type.slice(1)
	        }));
	      }
	      break;

	     case "_mousemove":
	      if (_globalConfig.bubbleEvents === true && sourceIsSwf) {
	        _fireMouseEvent(_extend({}, event, {
	          type: event.type.slice(1)
	        }));
	      }
	      break;
	    }
	    if (/^_(?:click|mouse(?:over|out|down|up|move))$/.test(event.type)) {
	      return true;
	    }
	  };
	  /**
	 * Check an "aftercopy" event for clipboard errors and emit a corresponding "error" event.
	 * @private
	 */
	  var _queueEmitClipboardErrors = function(aftercopyEvent) {
	    if (aftercopyEvent.errors && aftercopyEvent.errors.length > 0) {
	      var errorEvent = _deepCopy(aftercopyEvent);
	      _extend(errorEvent, {
	        type: "error",
	        name: "clipboard-error"
	      });
	      delete errorEvent.success;
	      _setTimeout(function() {
	        ZeroClipboard.emit(errorEvent);
	      }, 0);
	    }
	  };
	  /**
	 * Dispatch a synthetic MouseEvent.
	 *
	 * @returns `undefined`
	 * @private
	 */
	  var _fireMouseEvent = function(event) {
	    if (!(event && typeof event.type === "string" && event)) {
	      return;
	    }
	    var e, target = event.target || null, doc = target && target.ownerDocument || _document, defaults = {
	      view: doc.defaultView || _window,
	      canBubble: true,
	      cancelable: true,
	      detail: event.type === "click" ? 1 : 0,
	      button: typeof event.which === "number" ? event.which - 1 : typeof event.button === "number" ? event.button : doc.createEvent ? 0 : 1
	    }, args = _extend(defaults, event);
	    if (!target) {
	      return;
	    }
	    if (doc.createEvent && target.dispatchEvent) {
	      args = [ args.type, args.canBubble, args.cancelable, args.view, args.detail, args.screenX, args.screenY, args.clientX, args.clientY, args.ctrlKey, args.altKey, args.shiftKey, args.metaKey, args.button, args.relatedTarget ];
	      e = doc.createEvent("MouseEvents");
	      if (e.initMouseEvent) {
	        e.initMouseEvent.apply(e, args);
	        e._source = "js";
	        target.dispatchEvent(e);
	      }
	    }
	  };
	  /**
	 * Continuously poll the DOM until either:
	 *  (a) the fallback content becomes visible, or
	 *  (b) we receive an event from SWF (handled elsewhere)
	 *
	 * IMPORTANT:
	 * This is NOT a necessary check but it can result in significantly faster
	 * detection of bad `swfPath` configuration and/or network/server issues [in
	 * supported browsers] than waiting for the entire `flashLoadTimeout` duration
	 * to elapse before detecting that the SWF cannot be loaded. The detection
	 * duration can be anywhere from 10-30 times faster [in supported browsers] by
	 * using this approach.
	 *
	 * @returns `undefined`
	 * @private
	 */
	  var _watchForSwfFallbackContent = function() {
	    var maxWait = _globalConfig.flashLoadTimeout;
	    if (typeof maxWait === "number" && maxWait >= 0) {
	      var pollWait = Math.min(1e3, maxWait / 10);
	      var fallbackContentId = _globalConfig.swfObjectId + "_fallbackContent";
	      _swfFallbackCheckInterval = _setInterval(function() {
	        var el = _document.getElementById(fallbackContentId);
	        if (_isElementVisible(el)) {
	          _clearTimeoutsAndPolling();
	          _flashState.deactivated = null;
	          ZeroClipboard.emit({
	            type: "error",
	            name: "swf-not-found"
	          });
	        }
	      }, pollWait);
	    }
	  };
	  /**
	 * Create the HTML bridge element to embed the Flash object into.
	 * @private
	 */
	  var _createHtmlBridge = function() {
	    var container = _document.createElement("div");
	    container.id = _globalConfig.containerId;
	    container.className = _globalConfig.containerClass;
	    container.style.position = "absolute";
	    container.style.left = "0px";
	    container.style.top = "-9999px";
	    container.style.width = "1px";
	    container.style.height = "1px";
	    container.style.zIndex = "" + _getSafeZIndex(_globalConfig.zIndex);
	    return container;
	  };
	  /**
	 * Get the HTML element container that wraps the Flash bridge object/element.
	 * @private
	 */
	  var _getHtmlBridge = function(flashBridge) {
	    var htmlBridge = flashBridge && flashBridge.parentNode;
	    while (htmlBridge && htmlBridge.nodeName === "OBJECT" && htmlBridge.parentNode) {
	      htmlBridge = htmlBridge.parentNode;
	    }
	    return htmlBridge || null;
	  };
	  /**
	 * Create the SWF object.
	 *
	 * @returns The SWF object reference.
	 * @private
	 */
	  var _embedSwf = function() {
	    var len, flashBridge = _flashState.bridge, container = _getHtmlBridge(flashBridge);
	    if (!flashBridge) {
	      var allowScriptAccess = _determineScriptAccess(_window.location.host, _globalConfig);
	      var allowNetworking = allowScriptAccess === "never" ? "none" : "all";
	      var flashvars = _vars(_extend({
	        jsVersion: ZeroClipboard.version
	      }, _globalConfig));
	      var swfUrl = _globalConfig.swfPath + _cacheBust(_globalConfig.swfPath, _globalConfig);
	      container = _createHtmlBridge();
	      var divToBeReplaced = _document.createElement("div");
	      container.appendChild(divToBeReplaced);
	      _document.body.appendChild(container);
	      var tmpDiv = _document.createElement("div");
	      var usingActiveX = _flashState.pluginType === "activex";
	      tmpDiv.innerHTML = '<object id="' + _globalConfig.swfObjectId + '" name="' + _globalConfig.swfObjectId + '" ' + 'width="100%" height="100%" ' + (usingActiveX ? 'classid="clsid:d27cdb6e-ae6d-11cf-96b8-444553540000"' : 'type="application/x-shockwave-flash" data="' + swfUrl + '"') + ">" + (usingActiveX ? '<param name="movie" value="' + swfUrl + '"/>' : "") + '<param name="allowScriptAccess" value="' + allowScriptAccess + '"/>' + '<param name="allowNetworking" value="' + allowNetworking + '"/>' + '<param name="menu" value="false"/>' + '<param name="wmode" value="transparent"/>' + '<param name="flashvars" value="' + flashvars + '"/>' + '<div id="' + _globalConfig.swfObjectId + '_fallbackContent">&nbsp;</div>' + "</object>";
	      flashBridge = tmpDiv.firstChild;
	      tmpDiv = null;
	      _unwrap(flashBridge).ZeroClipboard = ZeroClipboard;
	      container.replaceChild(flashBridge, divToBeReplaced);
	      _watchForSwfFallbackContent();
	    }
	    if (!flashBridge) {
	      flashBridge = _document[_globalConfig.swfObjectId];
	      if (flashBridge && (len = flashBridge.length)) {
	        flashBridge = flashBridge[len - 1];
	      }
	      if (!flashBridge && container) {
	        flashBridge = container.firstChild;
	      }
	    }
	    _flashState.bridge = flashBridge || null;
	    return flashBridge;
	  };
	  /**
	 * Destroy the SWF object.
	 * @private
	 */
	  var _unembedSwf = function() {
	    var flashBridge = _flashState.bridge;
	    if (flashBridge) {
	      var htmlBridge = _getHtmlBridge(flashBridge);
	      if (htmlBridge) {
	        if (_flashState.pluginType === "activex" && "readyState" in flashBridge) {
	          flashBridge.style.display = "none";
	          (function removeSwfFromIE() {
	            if (flashBridge.readyState === 4) {
	              for (var prop in flashBridge) {
	                if (typeof flashBridge[prop] === "function") {
	                  flashBridge[prop] = null;
	                }
	              }
	              if (flashBridge.parentNode) {
	                flashBridge.parentNode.removeChild(flashBridge);
	              }
	              if (htmlBridge.parentNode) {
	                htmlBridge.parentNode.removeChild(htmlBridge);
	              }
	            } else {
	              _setTimeout(removeSwfFromIE, 10);
	            }
	          })();
	        } else {
	          if (flashBridge.parentNode) {
	            flashBridge.parentNode.removeChild(flashBridge);
	          }
	          if (htmlBridge.parentNode) {
	            htmlBridge.parentNode.removeChild(htmlBridge);
	          }
	        }
	      }
	      _clearTimeoutsAndPolling();
	      _flashState.ready = null;
	      _flashState.bridge = null;
	      _flashState.deactivated = null;
	      _zcSwfVersion = undefined;
	    }
	  };
	  /**
	 * Map the data format names of the "clipData" to Flash-friendly names.
	 *
	 * @returns A new transformed object.
	 * @private
	 */
	  var _mapClipDataToFlash = function(clipData) {
	    var newClipData = {}, formatMap = {};
	    if (!(typeof clipData === "object" && clipData)) {
	      return;
	    }
	    for (var dataFormat in clipData) {
	      if (dataFormat && _hasOwn.call(clipData, dataFormat) && typeof clipData[dataFormat] === "string" && clipData[dataFormat]) {
	        switch (dataFormat.toLowerCase()) {
	         case "text/plain":
	         case "text":
	         case "air:text":
	         case "flash:text":
	          newClipData.text = clipData[dataFormat];
	          formatMap.text = dataFormat;
	          break;

	         case "text/html":
	         case "html":
	         case "air:html":
	         case "flash:html":
	          newClipData.html = clipData[dataFormat];
	          formatMap.html = dataFormat;
	          break;

	         case "application/rtf":
	         case "text/rtf":
	         case "rtf":
	         case "richtext":
	         case "air:rtf":
	         case "flash:rtf":
	          newClipData.rtf = clipData[dataFormat];
	          formatMap.rtf = dataFormat;
	          break;

	         default:
	          break;
	        }
	      }
	    }
	    return {
	      data: newClipData,
	      formatMap: formatMap
	    };
	  };
	  /**
	 * Map the data format names from Flash-friendly names back to their original "clipData" names (via a format mapping).
	 *
	 * @returns A new transformed object.
	 * @private
	 */
	  var _mapClipResultsFromFlash = function(clipResults, formatMap) {
	    if (!(typeof clipResults === "object" && clipResults && typeof formatMap === "object" && formatMap)) {
	      return clipResults;
	    }
	    var newResults = {};
	    for (var prop in clipResults) {
	      if (_hasOwn.call(clipResults, prop)) {
	        if (prop === "errors") {
	          newResults[prop] = clipResults[prop] ? clipResults[prop].slice() : [];
	          for (var i = 0, len = newResults[prop].length; i < len; i++) {
	            newResults[prop][i].format = formatMap[newResults[prop][i].format];
	          }
	        } else if (prop !== "success" && prop !== "data") {
	          newResults[prop] = clipResults[prop];
	        } else {
	          newResults[prop] = {};
	          var tmpHash = clipResults[prop];
	          for (var dataFormat in tmpHash) {
	            if (dataFormat && _hasOwn.call(tmpHash, dataFormat) && _hasOwn.call(formatMap, dataFormat)) {
	              newResults[prop][formatMap[dataFormat]] = tmpHash[dataFormat];
	            }
	          }
	        }
	      }
	    }
	    return newResults;
	  };
	  /**
	 * Will look at a path, and will create a "?noCache={time}" or "&noCache={time}"
	 * query param string to return. Does NOT append that string to the original path.
	 * This is useful because ExternalInterface often breaks when a Flash SWF is cached.
	 *
	 * @returns The `noCache` query param with necessary "?"/"&" prefix.
	 * @private
	 */
	  var _cacheBust = function(path, options) {
	    var cacheBust = options == null || options && options.cacheBust === true;
	    if (cacheBust) {
	      return (path.indexOf("?") === -1 ? "?" : "&") + "noCache=" + _now();
	    } else {
	      return "";
	    }
	  };
	  /**
	 * Creates a query string for the FlashVars param.
	 * Does NOT include the cache-busting query param.
	 *
	 * @returns FlashVars query string
	 * @private
	 */
	  var _vars = function(options) {
	    var i, len, domain, domains, str = "", trustedOriginsExpanded = [];
	    if (options.trustedDomains) {
	      if (typeof options.trustedDomains === "string") {
	        domains = [ options.trustedDomains ];
	      } else if (typeof options.trustedDomains === "object" && "length" in options.trustedDomains) {
	        domains = options.trustedDomains;
	      }
	    }
	    if (domains && domains.length) {
	      for (i = 0, len = domains.length; i < len; i++) {
	        if (_hasOwn.call(domains, i) && domains[i] && typeof domains[i] === "string") {
	          domain = _extractDomain(domains[i]);
	          if (!domain) {
	            continue;
	          }
	          if (domain === "*") {
	            trustedOriginsExpanded.length = 0;
	            trustedOriginsExpanded.push(domain);
	            break;
	          }
	          trustedOriginsExpanded.push.apply(trustedOriginsExpanded, [ domain, "//" + domain, _window.location.protocol + "//" + domain ]);
	        }
	      }
	    }
	    if (trustedOriginsExpanded.length) {
	      str += "trustedOrigins=" + _encodeURIComponent(trustedOriginsExpanded.join(","));
	    }
	    if (options.forceEnhancedClipboard === true) {
	      str += (str ? "&" : "") + "forceEnhancedClipboard=true";
	    }
	    if (typeof options.swfObjectId === "string" && options.swfObjectId) {
	      str += (str ? "&" : "") + "swfObjectId=" + _encodeURIComponent(options.swfObjectId);
	    }
	    if (typeof options.jsVersion === "string" && options.jsVersion) {
	      str += (str ? "&" : "") + "jsVersion=" + _encodeURIComponent(options.jsVersion);
	    }
	    return str;
	  };
	  /**
	 * Extract the domain (e.g. "github.com") from an origin (e.g. "https://github.com") or
	 * URL (e.g. "https://github.com/zeroclipboard/zeroclipboard/").
	 *
	 * @returns the domain
	 * @private
	 */
	  var _extractDomain = function(originOrUrl) {
	    if (originOrUrl == null || originOrUrl === "") {
	      return null;
	    }
	    originOrUrl = originOrUrl.replace(/^\s+|\s+$/g, "");
	    if (originOrUrl === "") {
	      return null;
	    }
	    var protocolIndex = originOrUrl.indexOf("//");
	    originOrUrl = protocolIndex === -1 ? originOrUrl : originOrUrl.slice(protocolIndex + 2);
	    var pathIndex = originOrUrl.indexOf("/");
	    originOrUrl = pathIndex === -1 ? originOrUrl : protocolIndex === -1 || pathIndex === 0 ? null : originOrUrl.slice(0, pathIndex);
	    if (originOrUrl && originOrUrl.slice(-4).toLowerCase() === ".swf") {
	      return null;
	    }
	    return originOrUrl || null;
	  };
	  /**
	 * Set `allowScriptAccess` based on `trustedDomains` and `window.location.host` vs. `swfPath`.
	 *
	 * @returns The appropriate script access level.
	 * @private
	 */
	  var _determineScriptAccess = function() {
	    var _extractAllDomains = function(origins) {
	      var i, len, tmp, resultsArray = [];
	      if (typeof origins === "string") {
	        origins = [ origins ];
	      }
	      if (!(typeof origins === "object" && origins && typeof origins.length === "number")) {
	        return resultsArray;
	      }
	      for (i = 0, len = origins.length; i < len; i++) {
	        if (_hasOwn.call(origins, i) && (tmp = _extractDomain(origins[i]))) {
	          if (tmp === "*") {
	            resultsArray.length = 0;
	            resultsArray.push("*");
	            break;
	          }
	          if (resultsArray.indexOf(tmp) === -1) {
	            resultsArray.push(tmp);
	          }
	        }
	      }
	      return resultsArray;
	    };
	    return function(currentDomain, configOptions) {
	      var swfDomain = _extractDomain(configOptions.swfPath);
	      if (swfDomain === null) {
	        swfDomain = currentDomain;
	      }
	      var trustedDomains = _extractAllDomains(configOptions.trustedDomains);
	      var len = trustedDomains.length;
	      if (len > 0) {
	        if (len === 1 && trustedDomains[0] === "*") {
	          return "always";
	        }
	        if (trustedDomains.indexOf(currentDomain) !== -1) {
	          if (len === 1 && currentDomain === swfDomain) {
	            return "sameDomain";
	          }
	          return "always";
	        }
	      }
	      return "never";
	    };
	  }();
	  /**
	 * Get the currently active/focused DOM element.
	 *
	 * @returns the currently active/focused element, or `null`
	 * @private
	 */
	  var _safeActiveElement = function() {
	    try {
	      return _document.activeElement;
	    } catch (err) {
	      return null;
	    }
	  };
	  /**
	 * Add a class to an element, if it doesn't already have it.
	 *
	 * @returns The element, with its new class added.
	 * @private
	 */
	  var _addClass = function(element, value) {
	    var c, cl, className, classNames = [];
	    if (typeof value === "string" && value) {
	      classNames = value.split(/\s+/);
	    }
	    if (element && element.nodeType === 1 && classNames.length > 0) {
	      if (element.classList) {
	        for (c = 0, cl = classNames.length; c < cl; c++) {
	          element.classList.add(classNames[c]);
	        }
	      } else if (element.hasOwnProperty("className")) {
	        className = " " + element.className + " ";
	        for (c = 0, cl = classNames.length; c < cl; c++) {
	          if (className.indexOf(" " + classNames[c] + " ") === -1) {
	            className += classNames[c] + " ";
	          }
	        }
	        element.className = className.replace(/^\s+|\s+$/g, "");
	      }
	    }
	    return element;
	  };
	  /**
	 * Remove a class from an element, if it has it.
	 *
	 * @returns The element, with its class removed.
	 * @private
	 */
	  var _removeClass = function(element, value) {
	    var c, cl, className, classNames = [];
	    if (typeof value === "string" && value) {
	      classNames = value.split(/\s+/);
	    }
	    if (element && element.nodeType === 1 && classNames.length > 0) {
	      if (element.classList && element.classList.length > 0) {
	        for (c = 0, cl = classNames.length; c < cl; c++) {
	          element.classList.remove(classNames[c]);
	        }
	      } else if (element.className) {
	        className = (" " + element.className + " ").replace(/[\r\n\t]/g, " ");
	        for (c = 0, cl = classNames.length; c < cl; c++) {
	          className = className.replace(" " + classNames[c] + " ", " ");
	        }
	        element.className = className.replace(/^\s+|\s+$/g, "");
	      }
	    }
	    return element;
	  };
	  /**
	 * Attempt to interpret the element's CSS styling. If `prop` is `"cursor"`,
	 * then we assume that it should be a hand ("pointer") cursor if the element
	 * is an anchor element ("a" tag).
	 *
	 * @returns The computed style property.
	 * @private
	 */
	  var _getStyle = function(el, prop) {
	    var value = _getComputedStyle(el, null).getPropertyValue(prop);
	    if (prop === "cursor") {
	      if (!value || value === "auto") {
	        if (el.nodeName === "A") {
	          return "pointer";
	        }
	      }
	    }
	    return value;
	  };
	  /**
	 * Get the absolutely positioned coordinates of a DOM element.
	 *
	 * @returns Object containing the element's position, width, and height.
	 * @private
	 */
	  var _getElementPosition = function(el) {
	    var pos = {
	      left: 0,
	      top: 0,
	      width: 0,
	      height: 0
	    };
	    if (el.getBoundingClientRect) {
	      var elRect = el.getBoundingClientRect();
	      var pageXOffset = _window.pageXOffset;
	      var pageYOffset = _window.pageYOffset;
	      var leftBorderWidth = _document.documentElement.clientLeft || 0;
	      var topBorderWidth = _document.documentElement.clientTop || 0;
	      var leftBodyOffset = 0;
	      var topBodyOffset = 0;
	      if (_getStyle(_document.body, "position") === "relative") {
	        var bodyRect = _document.body.getBoundingClientRect();
	        var htmlRect = _document.documentElement.getBoundingClientRect();
	        leftBodyOffset = bodyRect.left - htmlRect.left || 0;
	        topBodyOffset = bodyRect.top - htmlRect.top || 0;
	      }
	      pos.left = elRect.left + pageXOffset - leftBorderWidth - leftBodyOffset;
	      pos.top = elRect.top + pageYOffset - topBorderWidth - topBodyOffset;
	      pos.width = "width" in elRect ? elRect.width : elRect.right - elRect.left;
	      pos.height = "height" in elRect ? elRect.height : elRect.bottom - elRect.top;
	    }
	    return pos;
	  };
	  /**
	 * Determine is an element is visible somewhere within the document (page).
	 *
	 * @returns Boolean
	 * @private
	 */
	  var _isElementVisible = function(el) {
	    if (!el) {
	      return false;
	    }
	    var styles = _getComputedStyle(el, null);
	    var hasCssHeight = _parseFloat(styles.height) > 0;
	    var hasCssWidth = _parseFloat(styles.width) > 0;
	    var hasCssTop = _parseFloat(styles.top) >= 0;
	    var hasCssLeft = _parseFloat(styles.left) >= 0;
	    var cssKnows = hasCssHeight && hasCssWidth && hasCssTop && hasCssLeft;
	    var rect = cssKnows ? null : _getElementPosition(el);
	    var isVisible = styles.display !== "none" && styles.visibility !== "collapse" && (cssKnows || !!rect && (hasCssHeight || rect.height > 0) && (hasCssWidth || rect.width > 0) && (hasCssTop || rect.top >= 0) && (hasCssLeft || rect.left >= 0));
	    return isVisible;
	  };
	  /**
	 * Clear all existing timeouts and interval polling delegates.
	 *
	 * @returns `undefined`
	 * @private
	 */
	  var _clearTimeoutsAndPolling = function() {
	    _clearTimeout(_flashCheckTimeout);
	    _flashCheckTimeout = 0;
	    _clearInterval(_swfFallbackCheckInterval);
	    _swfFallbackCheckInterval = 0;
	  };
	  /**
	 * Reposition the Flash object to cover the currently activated element.
	 *
	 * @returns `undefined`
	 * @private
	 */
	  var _reposition = function() {
	    var htmlBridge;
	    if (_currentElement && (htmlBridge = _getHtmlBridge(_flashState.bridge))) {
	      var pos = _getElementPosition(_currentElement);
	      _extend(htmlBridge.style, {
	        width: pos.width + "px",
	        height: pos.height + "px",
	        top: pos.top + "px",
	        left: pos.left + "px",
	        zIndex: "" + _getSafeZIndex(_globalConfig.zIndex)
	      });
	    }
	  };
	  /**
	 * Sends a signal to the Flash object to display the hand cursor if `true`.
	 *
	 * @returns `undefined`
	 * @private
	 */
	  var _setHandCursor = function(enabled) {
	    if (_flashState.ready === true) {
	      if (_flashState.bridge && typeof _flashState.bridge.setHandCursor === "function") {
	        _flashState.bridge.setHandCursor(enabled);
	      } else {
	        _flashState.ready = false;
	      }
	    }
	  };
	  /**
	 * Get a safe value for `zIndex`
	 *
	 * @returns an integer, or "auto"
	 * @private
	 */
	  var _getSafeZIndex = function(val) {
	    if (/^(?:auto|inherit)$/.test(val)) {
	      return val;
	    }
	    var zIndex;
	    if (typeof val === "number" && !_isNaN(val)) {
	      zIndex = val;
	    } else if (typeof val === "string") {
	      zIndex = _getSafeZIndex(_parseInt(val, 10));
	    }
	    return typeof zIndex === "number" ? zIndex : "auto";
	  };
	  /**
	 * Attempt to detect if ZeroClipboard is executing inside of a sandboxed iframe.
	 * If it is, Flash Player cannot be used, so ZeroClipboard is dead in the water.
	 *
	 * @see {@link http://lists.w3.org/Archives/Public/public-whatwg-archive/2014Dec/0002.html}
	 * @see {@link https://github.com/zeroclipboard/zeroclipboard/issues/511}
	 * @see {@link http://zeroclipboard.org/test-iframes.html}
	 *
	 * @returns `true` (is sandboxed), `false` (is not sandboxed), or `null` (uncertain) 
	 * @private
	 */
	  var _detectSandbox = function(doNotReassessFlashSupport) {
	    var effectiveScriptOrigin, frame, frameError, previousState = _flashState.sandboxed, isSandboxed = null;
	    doNotReassessFlashSupport = doNotReassessFlashSupport === true;
	    if (_pageIsFramed === false) {
	      isSandboxed = false;
	    } else {
	      try {
	        frame = window.frameElement || null;
	      } catch (e) {
	        frameError = {
	          name: e.name,
	          message: e.message
	        };
	      }
	      if (frame && frame.nodeType === 1 && frame.nodeName === "IFRAME") {
	        try {
	          isSandboxed = frame.hasAttribute("sandbox");
	        } catch (e) {
	          isSandboxed = null;
	        }
	      } else {
	        try {
	          effectiveScriptOrigin = document.domain || null;
	        } catch (e) {
	          effectiveScriptOrigin = null;
	        }
	        if (effectiveScriptOrigin === null || frameError && frameError.name === "SecurityError" && /(^|[\s\(\[@])sandbox(es|ed|ing|[\s\.,!\)\]@]|$)/.test(frameError.message.toLowerCase())) {
	          isSandboxed = true;
	        }
	      }
	    }
	    _flashState.sandboxed = isSandboxed;
	    if (previousState !== isSandboxed && !doNotReassessFlashSupport) {
	      _detectFlashSupport(_ActiveXObject);
	    }
	    return isSandboxed;
	  };
	  /**
	 * Detect the Flash Player status, version, and plugin type.
	 *
	 * @see {@link https://code.google.com/p/doctype-mirror/wiki/ArticleDetectFlash#The_code}
	 * @see {@link http://stackoverflow.com/questions/12866060/detecting-pepper-ppapi-flash-with-javascript}
	 *
	 * @returns `undefined`
	 * @private
	 */
	  var _detectFlashSupport = function(ActiveXObject) {
	    var plugin, ax, mimeType, hasFlash = false, isActiveX = false, isPPAPI = false, flashVersion = "";
	    /**
	   * Derived from Apple's suggested sniffer.
	   * @param {String} desc e.g. "Shockwave Flash 7.0 r61"
	   * @returns {String} "7.0.61"
	   * @private
	   */
	    function parseFlashVersion(desc) {
	      var matches = desc.match(/[\d]+/g);
	      matches.length = 3;
	      return matches.join(".");
	    }
	    function isPepperFlash(flashPlayerFileName) {
	      return !!flashPlayerFileName && (flashPlayerFileName = flashPlayerFileName.toLowerCase()) && (/^(pepflashplayer\.dll|libpepflashplayer\.so|pepperflashplayer\.plugin)$/.test(flashPlayerFileName) || flashPlayerFileName.slice(-13) === "chrome.plugin");
	    }
	    function inspectPlugin(plugin) {
	      if (plugin) {
	        hasFlash = true;
	        if (plugin.version) {
	          flashVersion = parseFlashVersion(plugin.version);
	        }
	        if (!flashVersion && plugin.description) {
	          flashVersion = parseFlashVersion(plugin.description);
	        }
	        if (plugin.filename) {
	          isPPAPI = isPepperFlash(plugin.filename);
	        }
	      }
	    }
	    if (_navigator.plugins && _navigator.plugins.length) {
	      plugin = _navigator.plugins["Shockwave Flash"];
	      inspectPlugin(plugin);
	      if (_navigator.plugins["Shockwave Flash 2.0"]) {
	        hasFlash = true;
	        flashVersion = "2.0.0.11";
	      }
	    } else if (_navigator.mimeTypes && _navigator.mimeTypes.length) {
	      mimeType = _navigator.mimeTypes["application/x-shockwave-flash"];
	      plugin = mimeType && mimeType.enabledPlugin;
	      inspectPlugin(plugin);
	    } else if (typeof ActiveXObject !== "undefined") {
	      isActiveX = true;
	      try {
	        ax = new ActiveXObject("ShockwaveFlash.ShockwaveFlash.7");
	        hasFlash = true;
	        flashVersion = parseFlashVersion(ax.GetVariable("$version"));
	      } catch (e1) {
	        try {
	          ax = new ActiveXObject("ShockwaveFlash.ShockwaveFlash.6");
	          hasFlash = true;
	          flashVersion = "6.0.21";
	        } catch (e2) {
	          try {
	            ax = new ActiveXObject("ShockwaveFlash.ShockwaveFlash");
	            hasFlash = true;
	            flashVersion = parseFlashVersion(ax.GetVariable("$version"));
	          } catch (e3) {
	            isActiveX = false;
	          }
	        }
	      }
	    }
	    _flashState.disabled = hasFlash !== true;
	    _flashState.outdated = flashVersion && _parseFloat(flashVersion) < _parseFloat(_minimumFlashVersion);
	    _flashState.version = flashVersion || "0.0.0";
	    _flashState.pluginType = isPPAPI ? "pepper" : isActiveX ? "activex" : hasFlash ? "netscape" : "unknown";
	  };
	  /**
	 * Invoke the Flash detection algorithms immediately upon inclusion so we're not waiting later.
	 */
	  _detectFlashSupport(_ActiveXObject);
	  /**
	 * Always assess the `sandboxed` state of the page at important Flash-related moments.
	 */
	  _detectSandbox(true);
	  /**
	 * A shell constructor for `ZeroClipboard` client instances.
	 *
	 * @constructor
	 */
	  var ZeroClipboard = function() {
	    if (!(this instanceof ZeroClipboard)) {
	      return new ZeroClipboard();
	    }
	    if (typeof ZeroClipboard._createClient === "function") {
	      ZeroClipboard._createClient.apply(this, _args(arguments));
	    }
	  };
	  /**
	 * The ZeroClipboard library's version number.
	 *
	 * @static
	 * @readonly
	 * @property {string}
	 */
	  _defineProperty(ZeroClipboard, "version", {
	    value: "2.2.0",
	    writable: false,
	    configurable: true,
	    enumerable: true
	  });
	  /**
	 * Update or get a copy of the ZeroClipboard global configuration.
	 * Returns a copy of the current/updated configuration.
	 *
	 * @returns Object
	 * @static
	 */
	  ZeroClipboard.config = function() {
	    return _config.apply(this, _args(arguments));
	  };
	  /**
	 * Diagnostic method that describes the state of the browser, Flash Player, and ZeroClipboard.
	 *
	 * @returns Object
	 * @static
	 */
	  ZeroClipboard.state = function() {
	    return _state.apply(this, _args(arguments));
	  };
	  /**
	 * Check if Flash is unusable for any reason: disabled, outdated, deactivated, etc.
	 *
	 * @returns Boolean
	 * @static
	 */
	  ZeroClipboard.isFlashUnusable = function() {
	    return _isFlashUnusable.apply(this, _args(arguments));
	  };
	  /**
	 * Register an event listener.
	 *
	 * @returns `ZeroClipboard`
	 * @static
	 */
	  ZeroClipboard.on = function() {
	    return _on.apply(this, _args(arguments));
	  };
	  /**
	 * Unregister an event listener.
	 * If no `listener` function/object is provided, it will unregister all listeners for the provided `eventType`.
	 * If no `eventType` is provided, it will unregister all listeners for every event type.
	 *
	 * @returns `ZeroClipboard`
	 * @static
	 */
	  ZeroClipboard.off = function() {
	    return _off.apply(this, _args(arguments));
	  };
	  /**
	 * Retrieve event listeners for an `eventType`.
	 * If no `eventType` is provided, it will retrieve all listeners for every event type.
	 *
	 * @returns array of listeners for the `eventType`; if no `eventType`, then a map/hash object of listeners for all event types; or `null`
	 */
	  ZeroClipboard.handlers = function() {
	    return _listeners.apply(this, _args(arguments));
	  };
	  /**
	 * Event emission receiver from the Flash object, forwarding to any registered JavaScript event listeners.
	 *
	 * @returns For the "copy" event, returns the Flash-friendly "clipData" object; otherwise `undefined`.
	 * @static
	 */
	  ZeroClipboard.emit = function() {
	    return _emit.apply(this, _args(arguments));
	  };
	  /**
	 * Create and embed the Flash object.
	 *
	 * @returns The Flash object
	 * @static
	 */
	  ZeroClipboard.create = function() {
	    return _create.apply(this, _args(arguments));
	  };
	  /**
	 * Self-destruct and clean up everything, including the embedded Flash object.
	 *
	 * @returns `undefined`
	 * @static
	 */
	  ZeroClipboard.destroy = function() {
	    return _destroy.apply(this, _args(arguments));
	  };
	  /**
	 * Set the pending data for clipboard injection.
	 *
	 * @returns `undefined`
	 * @static
	 */
	  ZeroClipboard.setData = function() {
	    return _setData.apply(this, _args(arguments));
	  };
	  /**
	 * Clear the pending data for clipboard injection.
	 * If no `format` is provided, all pending data formats will be cleared.
	 *
	 * @returns `undefined`
	 * @static
	 */
	  ZeroClipboard.clearData = function() {
	    return _clearData.apply(this, _args(arguments));
	  };
	  /**
	 * Get a copy of the pending data for clipboard injection.
	 * If no `format` is provided, a copy of ALL pending data formats will be returned.
	 *
	 * @returns `String` or `Object`
	 * @static
	 */
	  ZeroClipboard.getData = function() {
	    return _getData.apply(this, _args(arguments));
	  };
	  /**
	 * Sets the current HTML object that the Flash object should overlay. This will put the global
	 * Flash object on top of the current element; depending on the setup, this may also set the
	 * pending clipboard text data as well as the Flash object's wrapping element's title attribute
	 * based on the underlying HTML element and ZeroClipboard configuration.
	 *
	 * @returns `undefined`
	 * @static
	 */
	  ZeroClipboard.focus = ZeroClipboard.activate = function() {
	    return _focus.apply(this, _args(arguments));
	  };
	  /**
	 * Un-overlays the Flash object. This will put the global Flash object off-screen; depending on
	 * the setup, this may also unset the Flash object's wrapping element's title attribute based on
	 * the underlying HTML element and ZeroClipboard configuration.
	 *
	 * @returns `undefined`
	 * @static
	 */
	  ZeroClipboard.blur = ZeroClipboard.deactivate = function() {
	    return _blur.apply(this, _args(arguments));
	  };
	  /**
	 * Returns the currently focused/"activated" HTML element that the Flash object is wrapping.
	 *
	 * @returns `HTMLElement` or `null`
	 * @static
	 */
	  ZeroClipboard.activeElement = function() {
	    return _activeElement.apply(this, _args(arguments));
	  };
	  /**
	 * Keep track of the ZeroClipboard client instance counter.
	 */
	  var _clientIdCounter = 0;
	  /**
	 * Keep track of the state of the client instances.
	 *
	 * Entry structure:
	 *   _clientMeta[client.id] = {
	 *     instance: client,
	 *     elements: [],
	 *     handlers: {}
	 *   };
	 */
	  var _clientMeta = {};
	  /**
	 * Keep track of the ZeroClipboard clipped elements counter.
	 */
	  var _elementIdCounter = 0;
	  /**
	 * Keep track of the state of the clipped element relationships to clients.
	 *
	 * Entry structure:
	 *   _elementMeta[element.zcClippingId] = [client1.id, client2.id];
	 */
	  var _elementMeta = {};
	  /**
	 * Keep track of the state of the mouse event handlers for clipped elements.
	 *
	 * Entry structure:
	 *   _mouseHandlers[element.zcClippingId] = {
	 *     mouseover:  function(event) {},
	 *     mouseout:   function(event) {},
	 *     mouseenter: function(event) {},
	 *     mouseleave: function(event) {},
	 *     mousemove:  function(event) {}
	 *   };
	 */
	  var _mouseHandlers = {};
	  /**
	 * Extending the ZeroClipboard configuration defaults for the Client module.
	 */
	  _extend(_globalConfig, {
	    autoActivate: true
	  });
	  /**
	 * The real constructor for `ZeroClipboard` client instances.
	 * @private
	 */
	  var _clientConstructor = function(elements) {
	    var client = this;
	    client.id = "" + _clientIdCounter++;
	    _clientMeta[client.id] = {
	      instance: client,
	      elements: [],
	      handlers: {}
	    };
	    if (elements) {
	      client.clip(elements);
	    }
	    ZeroClipboard.on("*", function(event) {
	      return client.emit(event);
	    });
	    ZeroClipboard.on("destroy", function() {
	      client.destroy();
	    });
	    ZeroClipboard.create();
	  };
	  /**
	 * The underlying implementation of `ZeroClipboard.Client.prototype.on`.
	 * @private
	 */
	  var _clientOn = function(eventType, listener) {
	    var i, len, events, added = {}, meta = _clientMeta[this.id], handlers = meta && meta.handlers;
	    if (!meta) {
	      throw new Error("Attempted to add new listener(s) to a destroyed ZeroClipboard client instance");
	    }
	    if (typeof eventType === "string" && eventType) {
	      events = eventType.toLowerCase().split(/\s+/);
	    } else if (typeof eventType === "object" && eventType && typeof listener === "undefined") {
	      for (i in eventType) {
	        if (_hasOwn.call(eventType, i) && typeof i === "string" && i && typeof eventType[i] === "function") {
	          this.on(i, eventType[i]);
	        }
	      }
	    }
	    if (events && events.length) {
	      for (i = 0, len = events.length; i < len; i++) {
	        eventType = events[i].replace(/^on/, "");
	        added[eventType] = true;
	        if (!handlers[eventType]) {
	          handlers[eventType] = [];
	        }
	        handlers[eventType].push(listener);
	      }
	      if (added.ready && _flashState.ready) {
	        this.emit({
	          type: "ready",
	          client: this
	        });
	      }
	      if (added.error) {
	        for (i = 0, len = _flashStateErrorNames.length; i < len; i++) {
	          if (_flashState[_flashStateErrorNames[i].replace(/^flash-/, "")]) {
	            this.emit({
	              type: "error",
	              name: _flashStateErrorNames[i],
	              client: this
	            });
	            break;
	          }
	        }
	        if (_zcSwfVersion !== undefined && ZeroClipboard.version !== _zcSwfVersion) {
	          this.emit({
	            type: "error",
	            name: "version-mismatch",
	            jsVersion: ZeroClipboard.version,
	            swfVersion: _zcSwfVersion
	          });
	        }
	      }
	    }
	    return this;
	  };
	  /**
	 * The underlying implementation of `ZeroClipboard.Client.prototype.off`.
	 * @private
	 */
	  var _clientOff = function(eventType, listener) {
	    var i, len, foundIndex, events, perEventHandlers, meta = _clientMeta[this.id], handlers = meta && meta.handlers;
	    if (!handlers) {
	      return this;
	    }
	    if (arguments.length === 0) {
	      events = _keys(handlers);
	    } else if (typeof eventType === "string" && eventType) {
	      events = eventType.split(/\s+/);
	    } else if (typeof eventType === "object" && eventType && typeof listener === "undefined") {
	      for (i in eventType) {
	        if (_hasOwn.call(eventType, i) && typeof i === "string" && i && typeof eventType[i] === "function") {
	          this.off(i, eventType[i]);
	        }
	      }
	    }
	    if (events && events.length) {
	      for (i = 0, len = events.length; i < len; i++) {
	        eventType = events[i].toLowerCase().replace(/^on/, "");
	        perEventHandlers = handlers[eventType];
	        if (perEventHandlers && perEventHandlers.length) {
	          if (listener) {
	            foundIndex = perEventHandlers.indexOf(listener);
	            while (foundIndex !== -1) {
	              perEventHandlers.splice(foundIndex, 1);
	              foundIndex = perEventHandlers.indexOf(listener, foundIndex);
	            }
	          } else {
	            perEventHandlers.length = 0;
	          }
	        }
	      }
	    }
	    return this;
	  };
	  /**
	 * The underlying implementation of `ZeroClipboard.Client.prototype.handlers`.
	 * @private
	 */
	  var _clientListeners = function(eventType) {
	    var copy = null, handlers = _clientMeta[this.id] && _clientMeta[this.id].handlers;
	    if (handlers) {
	      if (typeof eventType === "string" && eventType) {
	        copy = handlers[eventType] ? handlers[eventType].slice(0) : [];
	      } else {
	        copy = _deepCopy(handlers);
	      }
	    }
	    return copy;
	  };
	  /**
	 * The underlying implementation of `ZeroClipboard.Client.prototype.emit`.
	 * @private
	 */
	  var _clientEmit = function(event) {
	    if (_clientShouldEmit.call(this, event)) {
	      if (typeof event === "object" && event && typeof event.type === "string" && event.type) {
	        event = _extend({}, event);
	      }
	      var eventCopy = _extend({}, _createEvent(event), {
	        client: this
	      });
	      _clientDispatchCallbacks.call(this, eventCopy);
	    }
	    return this;
	  };
	  /**
	 * The underlying implementation of `ZeroClipboard.Client.prototype.clip`.
	 * @private
	 */
	  var _clientClip = function(elements) {
	    if (!_clientMeta[this.id]) {
	      throw new Error("Attempted to clip element(s) to a destroyed ZeroClipboard client instance");
	    }
	    elements = _prepClip(elements);
	    for (var i = 0; i < elements.length; i++) {
	      if (_hasOwn.call(elements, i) && elements[i] && elements[i].nodeType === 1) {
	        if (!elements[i].zcClippingId) {
	          elements[i].zcClippingId = "zcClippingId_" + _elementIdCounter++;
	          _elementMeta[elements[i].zcClippingId] = [ this.id ];
	          if (_globalConfig.autoActivate === true) {
	            _addMouseHandlers(elements[i]);
	          }
	        } else if (_elementMeta[elements[i].zcClippingId].indexOf(this.id) === -1) {
	          _elementMeta[elements[i].zcClippingId].push(this.id);
	        }
	        var clippedElements = _clientMeta[this.id] && _clientMeta[this.id].elements;
	        if (clippedElements.indexOf(elements[i]) === -1) {
	          clippedElements.push(elements[i]);
	        }
	      }
	    }
	    return this;
	  };
	  /**
	 * The underlying implementation of `ZeroClipboard.Client.prototype.unclip`.
	 * @private
	 */
	  var _clientUnclip = function(elements) {
	    var meta = _clientMeta[this.id];
	    if (!meta) {
	      return this;
	    }
	    var clippedElements = meta.elements;
	    var arrayIndex;
	    if (typeof elements === "undefined") {
	      elements = clippedElements.slice(0);
	    } else {
	      elements = _prepClip(elements);
	    }
	    for (var i = elements.length; i--; ) {
	      if (_hasOwn.call(elements, i) && elements[i] && elements[i].nodeType === 1) {
	        arrayIndex = 0;
	        while ((arrayIndex = clippedElements.indexOf(elements[i], arrayIndex)) !== -1) {
	          clippedElements.splice(arrayIndex, 1);
	        }
	        var clientIds = _elementMeta[elements[i].zcClippingId];
	        if (clientIds) {
	          arrayIndex = 0;
	          while ((arrayIndex = clientIds.indexOf(this.id, arrayIndex)) !== -1) {
	            clientIds.splice(arrayIndex, 1);
	          }
	          if (clientIds.length === 0) {
	            if (_globalConfig.autoActivate === true) {
	              _removeMouseHandlers(elements[i]);
	            }
	            delete elements[i].zcClippingId;
	          }
	        }
	      }
	    }
	    return this;
	  };
	  /**
	 * The underlying implementation of `ZeroClipboard.Client.prototype.elements`.
	 * @private
	 */
	  var _clientElements = function() {
	    var meta = _clientMeta[this.id];
	    return meta && meta.elements ? meta.elements.slice(0) : [];
	  };
	  /**
	 * The underlying implementation of `ZeroClipboard.Client.prototype.destroy`.
	 * @private
	 */
	  var _clientDestroy = function() {
	    if (!_clientMeta[this.id]) {
	      return;
	    }
	    this.unclip();
	    this.off();
	    delete _clientMeta[this.id];
	  };
	  /**
	 * Inspect an Event to see if the Client (`this`) should honor it for emission.
	 * @private
	 */
	  var _clientShouldEmit = function(event) {
	    if (!(event && event.type)) {
	      return false;
	    }
	    if (event.client && event.client !== this) {
	      return false;
	    }
	    var meta = _clientMeta[this.id];
	    var clippedEls = meta && meta.elements;
	    var hasClippedEls = !!clippedEls && clippedEls.length > 0;
	    var goodTarget = !event.target || hasClippedEls && clippedEls.indexOf(event.target) !== -1;
	    var goodRelTarget = event.relatedTarget && hasClippedEls && clippedEls.indexOf(event.relatedTarget) !== -1;
	    var goodClient = event.client && event.client === this;
	    if (!meta || !(goodTarget || goodRelTarget || goodClient)) {
	      return false;
	    }
	    return true;
	  };
	  /**
	 * Handle the actual dispatching of events to a client instance.
	 *
	 * @returns `undefined`
	 * @private
	 */
	  var _clientDispatchCallbacks = function(event) {
	    var meta = _clientMeta[this.id];
	    if (!(typeof event === "object" && event && event.type && meta)) {
	      return;
	    }
	    var async = _shouldPerformAsync(event);
	    var wildcardTypeHandlers = meta && meta.handlers["*"] || [];
	    var specificTypeHandlers = meta && meta.handlers[event.type] || [];
	    var handlers = wildcardTypeHandlers.concat(specificTypeHandlers);
	    if (handlers && handlers.length) {
	      var i, len, func, context, eventCopy, originalContext = this;
	      for (i = 0, len = handlers.length; i < len; i++) {
	        func = handlers[i];
	        context = originalContext;
	        if (typeof func === "string" && typeof _window[func] === "function") {
	          func = _window[func];
	        }
	        if (typeof func === "object" && func && typeof func.handleEvent === "function") {
	          context = func;
	          func = func.handleEvent;
	        }
	        if (typeof func === "function") {
	          eventCopy = _extend({}, event);
	          _dispatchCallback(func, context, [ eventCopy ], async);
	        }
	      }
	    }
	  };
	  /**
	 * Prepares the elements for clipping/unclipping.
	 *
	 * @returns An Array of elements.
	 * @private
	 */
	  var _prepClip = function(elements) {
	    if (typeof elements === "string") {
	      elements = [];
	    }
	    return typeof elements.length !== "number" ? [ elements ] : elements;
	  };
	  /**
	 * Add a `mouseover` handler function for a clipped element.
	 *
	 * @returns `undefined`
	 * @private
	 */
	  var _addMouseHandlers = function(element) {
	    if (!(element && element.nodeType === 1)) {
	      return;
	    }
	    var _suppressMouseEvents = function(event) {
	      if (!(event || (event = _window.event))) {
	        return;
	      }
	      if (event._source !== "js") {
	        event.stopImmediatePropagation();
	        event.preventDefault();
	      }
	      delete event._source;
	    };
	    var _elementMouseOver = function(event) {
	      if (!(event || (event = _window.event))) {
	        return;
	      }
	      _suppressMouseEvents(event);
	      ZeroClipboard.focus(element);
	    };
	    element.addEventListener("mouseover", _elementMouseOver, false);
	    element.addEventListener("mouseout", _suppressMouseEvents, false);
	    element.addEventListener("mouseenter", _suppressMouseEvents, false);
	    element.addEventListener("mouseleave", _suppressMouseEvents, false);
	    element.addEventListener("mousemove", _suppressMouseEvents, false);
	    _mouseHandlers[element.zcClippingId] = {
	      mouseover: _elementMouseOver,
	      mouseout: _suppressMouseEvents,
	      mouseenter: _suppressMouseEvents,
	      mouseleave: _suppressMouseEvents,
	      mousemove: _suppressMouseEvents
	    };
	  };
	  /**
	 * Remove a `mouseover` handler function for a clipped element.
	 *
	 * @returns `undefined`
	 * @private
	 */
	  var _removeMouseHandlers = function(element) {
	    if (!(element && element.nodeType === 1)) {
	      return;
	    }
	    var mouseHandlers = _mouseHandlers[element.zcClippingId];
	    if (!(typeof mouseHandlers === "object" && mouseHandlers)) {
	      return;
	    }
	    var key, val, mouseEvents = [ "move", "leave", "enter", "out", "over" ];
	    for (var i = 0, len = mouseEvents.length; i < len; i++) {
	      key = "mouse" + mouseEvents[i];
	      val = mouseHandlers[key];
	      if (typeof val === "function") {
	        element.removeEventListener(key, val, false);
	      }
	    }
	    delete _mouseHandlers[element.zcClippingId];
	  };
	  /**
	 * Creates a new ZeroClipboard client instance.
	 * Optionally, auto-`clip` an element or collection of elements.
	 *
	 * @constructor
	 */
	  ZeroClipboard._createClient = function() {
	    _clientConstructor.apply(this, _args(arguments));
	  };
	  /**
	 * Register an event listener to the client.
	 *
	 * @returns `this`
	 */
	  ZeroClipboard.prototype.on = function() {
	    return _clientOn.apply(this, _args(arguments));
	  };
	  /**
	 * Unregister an event handler from the client.
	 * If no `listener` function/object is provided, it will unregister all handlers for the provided `eventType`.
	 * If no `eventType` is provided, it will unregister all handlers for every event type.
	 *
	 * @returns `this`
	 */
	  ZeroClipboard.prototype.off = function() {
	    return _clientOff.apply(this, _args(arguments));
	  };
	  /**
	 * Retrieve event listeners for an `eventType` from the client.
	 * If no `eventType` is provided, it will retrieve all listeners for every event type.
	 *
	 * @returns array of listeners for the `eventType`; if no `eventType`, then a map/hash object of listeners for all event types; or `null`
	 */
	  ZeroClipboard.prototype.handlers = function() {
	    return _clientListeners.apply(this, _args(arguments));
	  };
	  /**
	 * Event emission receiver from the Flash object for this client's registered JavaScript event listeners.
	 *
	 * @returns For the "copy" event, returns the Flash-friendly "clipData" object; otherwise `undefined`.
	 */
	  ZeroClipboard.prototype.emit = function() {
	    return _clientEmit.apply(this, _args(arguments));
	  };
	  /**
	 * Register clipboard actions for new element(s) to the client.
	 *
	 * @returns `this`
	 */
	  ZeroClipboard.prototype.clip = function() {
	    return _clientClip.apply(this, _args(arguments));
	  };
	  /**
	 * Unregister the clipboard actions of previously registered element(s) on the page.
	 * If no elements are provided, ALL registered elements will be unregistered.
	 *
	 * @returns `this`
	 */
	  ZeroClipboard.prototype.unclip = function() {
	    return _clientUnclip.apply(this, _args(arguments));
	  };
	  /**
	 * Get all of the elements to which this client is clipped.
	 *
	 * @returns array of clipped elements
	 */
	  ZeroClipboard.prototype.elements = function() {
	    return _clientElements.apply(this, _args(arguments));
	  };
	  /**
	 * Self-destruct and clean up everything for a single client.
	 * This will NOT destroy the embedded Flash object.
	 *
	 * @returns `undefined`
	 */
	  ZeroClipboard.prototype.destroy = function() {
	    return _clientDestroy.apply(this, _args(arguments));
	  };
	  /**
	 * Stores the pending plain text to inject into the clipboard.
	 *
	 * @returns `this`
	 */
	  ZeroClipboard.prototype.setText = function(text) {
	    if (!_clientMeta[this.id]) {
	      throw new Error("Attempted to set pending clipboard data from a destroyed ZeroClipboard client instance");
	    }
	    ZeroClipboard.setData("text/plain", text);
	    return this;
	  };
	  /**
	 * Stores the pending HTML text to inject into the clipboard.
	 *
	 * @returns `this`
	 */
	  ZeroClipboard.prototype.setHtml = function(html) {
	    if (!_clientMeta[this.id]) {
	      throw new Error("Attempted to set pending clipboard data from a destroyed ZeroClipboard client instance");
	    }
	    ZeroClipboard.setData("text/html", html);
	    return this;
	  };
	  /**
	 * Stores the pending rich text (RTF) to inject into the clipboard.
	 *
	 * @returns `this`
	 */
	  ZeroClipboard.prototype.setRichText = function(richText) {
	    if (!_clientMeta[this.id]) {
	      throw new Error("Attempted to set pending clipboard data from a destroyed ZeroClipboard client instance");
	    }
	    ZeroClipboard.setData("application/rtf", richText);
	    return this;
	  };
	  /**
	 * Stores the pending data to inject into the clipboard.
	 *
	 * @returns `this`
	 */
	  ZeroClipboard.prototype.setData = function() {
	    if (!_clientMeta[this.id]) {
	      throw new Error("Attempted to set pending clipboard data from a destroyed ZeroClipboard client instance");
	    }
	    ZeroClipboard.setData.apply(this, _args(arguments));
	    return this;
	  };
	  /**
	 * Clears the pending data to inject into the clipboard.
	 * If no `format` is provided, all pending data formats will be cleared.
	 *
	 * @returns `this`
	 */
	  ZeroClipboard.prototype.clearData = function() {
	    if (!_clientMeta[this.id]) {
	      throw new Error("Attempted to clear pending clipboard data from a destroyed ZeroClipboard client instance");
	    }
	    ZeroClipboard.clearData.apply(this, _args(arguments));
	    return this;
	  };
	  /**
	 * Gets a copy of the pending data to inject into the clipboard.
	 * If no `format` is provided, a copy of ALL pending data formats will be returned.
	 *
	 * @returns `String` or `Object`
	 */
	  ZeroClipboard.prototype.getData = function() {
	    if (!_clientMeta[this.id]) {
	      throw new Error("Attempted to get pending clipboard data from a destroyed ZeroClipboard client instance");
	    }
	    return ZeroClipboard.getData.apply(this, _args(arguments));
	  };
	  if (typeof define === "function" && define.amd) {
	    define(function() {
	      return ZeroClipboard;
	    });
	  } else if (typeof module === "object" && module && typeof module.exports === "object" && module.exports) {
	    module.exports = ZeroClipboard;
	  } else {
	    window.ZeroClipboard = ZeroClipboard;
	  }
	})(function() {
	  return this || window;
	}());
	},{}]},{},[23,57,59,58,60,81,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,82,83,84,85,98,99,100,88,89,90,91,92,93,30,34,31,32,39,33,35,36,37,38])("zeroclipboard")
	});
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(8), (function() { return this; }())))

/***/ }
/******/ ]);