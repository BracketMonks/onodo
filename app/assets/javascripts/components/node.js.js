// Generated by CoffeeScript 1.6.3
var Node, a, i, input, td, tr, _ref;

_ref = React.DOM, tr = _ref.tr, td = _ref.td, a = _ref.a, i = _ref.i, input = _ref.input;

Node = React.createClass({
  getInitialState: function() {
    return {
      edit: false
    };
  },
  handleDelete: function(e) {
    var _this = this;
    e.preventDefault();
    return $.ajax({
      method: 'DELETE',
      url: "/nodes/" + this.props.node.id,
      dataType: 'JSON',
      success: function() {
        return _this.props.handleDeleteNode(_this.props.node);
      }
    });
  },
  handleEdit: function(e) {
    e.preventDefault();
    return this.setState({
      edit: !this.state.edit
    });
  },
  handleUpdate: function(e) {
    var data,
      _this = this;
    e.preventDefault();
    data = {
      name: React.findDOMNode(this.refs.name).value,
      description: React.findDOMNode(this.refs.description).value
    };
    return $.ajax({
      method: 'PUT',
      url: "/nodes/" + this.props.node.id,
      dataType: 'JSON',
      data: {
        node: data
      },
      success: function(data) {
        _this.setState({
          edit: false
        });
        return _this.props.handleEditNode(_this.props.node, data);
      }
    });
  },
  nodeRow: function() {
    return tr({}, th({}, div({
      className: "btn-group",
      role: "group"
    }, a({
      className: "btn btn-success edit-node",
      href: '#',
      onClick: this.handleEdit
    }, i({
      className: "glyphicon glyphicon-pencil"
    })), a({
      className: "btn btn-danger remove-node",
      href: '#',
      onClick: this.handleDelete
    }, i({
      className: "glyphicon glyphicon-remove"
    })))), td({}, this.props.node.name), td({}, this.props.node.description));
  },
  nodeForm: function() {
    return tr({}, th({}, div({
      className: "btn-group",
      role: "group"
    }, a({
      className: "btn btn-success edit-node",
      href: '#',
      onClick: this.handleUpdate
    }, 'Update'), a({
      className: "btn btn-danger remove-node",
      href: '#',
      onClick: this.handleEdit
    }, 'Cancel'))), td({}, input({
      className: 'form-control',
      type: 'text',
      ref: 'name',
      defaultValue: this.props.node.name
    })), td({}, input({
      className: 'form-control',
      type: 'text',
      ref: 'description',
      defaultValue: this.props.node.description
    })));
  },
  render: function() {
    if (this.state.edit) {
      return this.nodeForm();
    } else {
      return this.nodeRow();
    }
  }
});
